# coding: utf-8
# AUTO-GENERATED FILE -- DO NOT EDIT


class QAbstractExtensionFactory(simplewrapper):
  """ QAbstractExtensionFactory()
  QAbstractExtensionFactory(QAbstractExtensionFactory) """

  def extension(self, QObject, str):
    """ extension(self, QObject, str) -> QObject """
    return None

class QAbstractExtensionManager(simplewrapper):
  """ QAbstractExtensionManager()
  QAbstractExtensionManager(QAbstractExtensionManager) """

  def extension(self, QObject, str):
    """ extension(self, QObject, str) -> QObject """
    return None

  def registerExtensions(self, QAbstractExtensionFactory, str):
    """ registerExtensions(self, QAbstractExtensionFactory, str) """
    pass

  def unregisterExtensions(self, QAbstractExtensionFactory, str):
    """ unregisterExtensions(self, QAbstractExtensionFactory, str) """
    pass

class QAbstractFormBuilder(simplewrapper):
  """ QAbstractFormBuilder() """

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def load(self, QIODevice, arg0=None):
    """ load(self, QIODevice, parent: QWidget = None) -> QWidget """
    return None

  def save(self, QIODevice, QWidget):
    """ save(self, QIODevice, QWidget) """
    pass

  def setWorkingDirectory(self, QDir):
    """ setWorkingDirectory(self, QDir) """
    pass

  def workingDirectory(self):
    """ workingDirectory(self) -> QDir """
    return None

class QDesignerActionEditorInterface(QWidget):
  """ QDesignerActionEditorInterface(QWidget, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None

  class PaintDeviceMetric(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  class RenderFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RenderFlags(simplewrapper):
    """ QWidget.RenderFlags()
    QWidget.RenderFlags(Union[QWidget.RenderFlags, QWidget.RenderFlag])
    QWidget.RenderFlags(QWidget.RenderFlags) """

    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent():
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def core(self):
    """ core(self) -> QDesignerFormEditorInterface """
    return None

  def create():
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def manageAction(self, QAction):
    """ manageAction(self, QAction) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFormWindow(self, QDesignerFormWindowInterface):
    """ setFormWindow(self, QDesignerFormWindowInterface) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unmanageAction(self, QAction):
    """ unmanageAction(self, QAction) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDesignerContainerExtension(simplewrapper):
  """ QDesignerContainerExtension()
  QDesignerContainerExtension(QDesignerContainerExtension) """

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) """
    pass

  def canAddWidget(self):
    """ canAddWidget(self) -> bool """
    return None

  def canRemove(self, int):
    """ canRemove(self, int) -> bool """
    return None

  def count(self):
    """ count(self) -> int """
    return 1

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def insertWidget(self, int, QWidget):
    """ insertWidget(self, int, QWidget) """
    pass

  def remove(self, int):
    """ remove(self, int) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def widget(self, int):
    """ widget(self, int) -> QWidget """
    return None

class QDesignerCustomWidgetCollectionInterface(simplewrapper):
  """ QDesignerCustomWidgetCollectionInterface()
  QDesignerCustomWidgetCollectionInterface(QDesignerCustomWidgetCollectionInterface) """

  def customWidgets(self):
    """ customWidgets(self) -> List[QDesignerCustomWidgetInterface] """
    return None

class QDesignerCustomWidgetInterface(simplewrapper):
  """ QDesignerCustomWidgetInterface()
  QDesignerCustomWidgetInterface(QDesignerCustomWidgetInterface) """

  def codeTemplate(self):
    """ codeTemplate(self) -> str """
    return ""

  def createWidget(self, QWidget):
    """ createWidget(self, QWidget) -> QWidget """
    return None

  def domXml(self):
    """ domXml(self) -> str """
    return ""

  def group(self):
    """ group(self) -> str """
    return ""

  def icon(self):
    """ icon(self) -> QIcon """
    return None

  def includeFile(self):
    """ includeFile(self) -> str """
    return ""

  def initialize(self, QDesignerFormEditorInterface):
    """ initialize(self, QDesignerFormEditorInterface) """
    pass

  def isContainer(self):
    """ isContainer(self) -> bool """
    return None

  def isInitialized(self):
    """ isInitialized(self) -> bool """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

class QDesignerFormEditorInterface(QObject):
  """ QDesignerFormEditorInterface(parent: QObject = None) """

  def actionEditor(self):
    """ actionEditor(self) -> QDesignerActionEditorInterface """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def extensionManager(self):
    """ extensionManager(self) -> QExtensionManager """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def formWindowManager(self):
    """ formWindowManager(self) -> QDesignerFormWindowManagerInterface """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectInspector(self):
    """ objectInspector(self) -> QDesignerObjectInspectorInterface """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def propertyEditor(self):
    """ propertyEditor(self) -> QDesignerPropertyEditorInterface """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setActionEditor(self, QDesignerActionEditorInterface):
    """ setActionEditor(self, QDesignerActionEditorInterface) """
    pass

  def setObjectInspector(self, QDesignerObjectInspectorInterface):
    """ setObjectInspector(self, QDesignerObjectInspectorInterface) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setPropertyEditor(self, QDesignerPropertyEditorInterface):
    """ setPropertyEditor(self, QDesignerPropertyEditorInterface) """
    pass

  def setWidgetBox(self, QDesignerWidgetBoxInterface):
    """ setWidgetBox(self, QDesignerWidgetBoxInterface) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def topLevel(self):
    """ topLevel(self) -> QWidget """
    return None

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def widgetBox(self):
    """ widgetBox(self) -> QDesignerWidgetBoxInterface """
    return None

class QDesignerFormWindowCursorInterface(simplewrapper):
  """ QDesignerFormWindowCursorInterface()
  QDesignerFormWindowCursorInterface(QDesignerFormWindowCursorInterface) """

  Down = None
  End = None
  KeepAnchor = None
  Left = None
  MoveAnchor = None

  class MoveMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class MoveOperation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Next = None
  NoMove = None
  Prev = None
  Right = None
  Start = None
  Up = None

  def current(self):
    """ current(self) -> QWidget """
    return None

  def formWindow(self):
    """ formWindow(self) -> QDesignerFormWindowInterface """
    return None

  def hasSelection(self):
    """ hasSelection(self) -> bool """
    return None

  def isWidgetSelected(self, QWidget):
    """ isWidgetSelected(self, QWidget) -> bool """
    return None

  def movePosition(self, arg0, arg1=None):
    """ movePosition(self, QDesignerFormWindowCursorInterface.MoveOperation, mode: QDesignerFormWindowCursorInterface.MoveMode = QDesignerFormWindowCursorInterface.MoveAnchor) -> bool """
    return None

  def position(self):
    """ position(self) -> int """
    return 1

  def resetWidgetProperty(self, QWidget, str):
    """ resetWidgetProperty(self, QWidget, str) """
    pass

  def selectedWidget(self, int):
    """ selectedWidget(self, int) -> QWidget """
    return None

  def selectedWidgetCount(self):
    """ selectedWidgetCount(self) -> int """
    return 1

  def setPosition():
    """ setPosition(self, int, mode: QDesignerFormWindowCursorInterface.MoveMode = QDesignerFormWindowCursorInterface.MoveAnchor) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) """
    pass

  def setWidgetProperty(self, QWidget, str, Any):
    """ setWidgetProperty(self, QWidget, str, Any) """
    pass

  def widget(self, int):
    """ widget(self, int) -> QWidget """
    return None

  def widgetCount(self):
    """ widgetCount(self) -> int """
    return 1

class QDesignerFormWindowInterface(QWidget):

  DefaultFeature = None
  DrawChildren = None
  DrawWindowBackground = None
  EditFeature = None

  class Feature(simplewrapper):
    """ QDesignerFormWindowInterface.Feature()
    QDesignerFormWindowInterface.Feature(Union[QDesignerFormWindowInterface.Feature, QDesignerFormWindowInterface.FeatureFlag])
    QDesignerFormWindowInterface.Feature(QDesignerFormWindowInterface.Feature) """

    pass

  class FeatureFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  GridFeature = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  TabOrderFeature = None

  def aboutToUnmanageWidget(self, QWidget):
    """ aboutToUnmanageWidget(self, QWidget) [signal] """
    pass

  def absoluteDir(self):
    """ absoluteDir(self) -> QDir """
    return None

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent(self, QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateResourceFilePaths(self, Iterablestr=None):
    """ activateResourceFilePaths(self, Iterable[str]) -> Tuple[int, str] """
    return ""

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QWidget):
    """ activated(self, QWidget) [signal] """
    pass

  def activeResourceFilePaths(self):
    """ activeResourceFilePaths(self) -> List[str] """
    return ""

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addResourceFile(self, str):
    """ addResourceFile(self, str) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def author(self):
    """ author(self) -> str """
    return ""

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent(self, QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def changed(self):
    """ changed(self) [signal] """
    pass

  def checkContents(self):
    """ checkContents(self) -> List[str] """
    return ""

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection():
    """ clearSelection(self, update: bool = True) """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEvent(self, QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def comment(self):
    """ comment(self) -> str """
    return ""

  def connectNotify():
    pass

  def contents(self):
    """ contents(self) -> str """
    return ""

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent(self, QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def core(self):
    """ core(self) -> QDesignerFormEditorInterface """
    return None

  def create():
    """ create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) """
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def cursor(self):
    """ cursor(self) -> QDesignerFormWindowCursorInterface """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    """ destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def dropEvent(self, QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def emitSelectionChanged(self):
    """ emitSelectionChanged(self) """
    pass

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent(self, QEvent):
    """ enterEvent(self, QEvent) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exportMacro(self):
    """ exportMacro(self) -> str """
    return ""

  def featureChanged(self, UnionQDesignerFormWindowInterface.Feature=None, QDesignerFormWindowInterface.FeatureFlag=None):
    """ featureChanged(self, Union[QDesignerFormWindowInterface.Feature, QDesignerFormWindowInterface.FeatureFlag]) [signal] """
    pass

  def features(self):
    """ features(self) -> QDesignerFormWindowInterface.Feature """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def fileNameChanged(self, str):
    """ fileNameChanged(self, str) [signal] """
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findFormWindow(QWidget):
    """ findFormWindow(QWidget) -> QDesignerFormWindowInterface
    findFormWindow(QObject) -> QDesignerFormWindowInterface """
    return None

  def focusInEvent(self, QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild(self):
    """ focusNextChild(self) -> bool """
    return None

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return None

  def focusOutEvent(self, QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild(self):
    """ focusPreviousChild(self) -> bool """
    return None

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def formContainer(self):
    """ formContainer(self) -> QWidget """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def geometryChanged(self):
    """ geometryChanged(self) [signal] """
    pass

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def grid(self):
    """ grid(self) -> QPoint """
    return 1

  def hasFeature(self, UnionQDesignerFormWindowInterface.Feature=None, QDesignerFormWindowInterface.FeatureFlag=None):
    """ hasFeature(self, Union[QDesignerFormWindowInterface.Feature, QDesignerFormWindowInterface.FeatureFlag]) -> bool """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def includeHints(self):
    """ includeHints(self) -> List[str] """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter(self, QPainter):
    """ initPainter(self, QPainter) """
    pass

  def inputMethodEvent(self, QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isDirty(self):
    """ isDirty(self) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isManaged(self, QWidget):
    """ isManaged(self, QWidget) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent(self, QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDefault(self):
    """ layoutDefault(self) -> Tuple[int, int] """
    return 1

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def layoutFunction(self):
    """ layoutFunction(self) -> Tuple[str, str] """
    return ""

  def leaveEvent(self, QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mainContainer(self):
    """ mainContainer(self) -> QWidget """
    return None

  def mainContainerChanged(self, QWidget):
    """ mainContainerChanged(self, QWidget) [signal] """
    pass

  def manageWidget(self, QWidget):
    """ manageWidget(self, QWidget) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent(self, QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent(self, QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent(self, UnionQByteArray=None, bytes=None, bytearray=None, sip.voidptr=None):
    """ nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int] """
    return 1

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def objectRemoved(self, QObject):
    """ objectRemoved(self, QObject) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent(self, QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pixmapFunction(self):
    """ pixmapFunction(self) -> str """
    return ""

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeResourceFile(self, str):
    """ removeResourceFile(self, str) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def resourceFiles(self):
    """ resourceFiles(self) -> List[str] """
    return ""

  def resourceFilesChanged(self):
    """ resourceFilesChanged(self) [signal] """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectWidget():
    """ selectWidget(self, QWidget, select: bool = True) """
    pass

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAuthor(self, str):
    """ setAuthor(self, str) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setComment(self, str):
    """ setComment(self, str) """
    pass

  def setContents(self, QIODevice, arg0=None):
    """ setContents(self, QIODevice, errorMessage: str = '') -> bool
    setContents(self, str) -> bool """
    return None

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDirty(self, bool):
    """ setDirty(self, bool) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExportMacro(self, str):
    """ setExportMacro(self, str) """
    pass

  def setFeatures(self, UnionQDesignerFormWindowInterface.Feature=None, QDesignerFormWindowInterface.FeatureFlag=None):
    """ setFeatures(self, Union[QDesignerFormWindowInterface.Feature, QDesignerFormWindowInterface.FeatureFlag]) """
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGrid(self, QPoint):
    """ setGrid(self, QPoint) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIncludeHints(self, Iterablestr=None):
    """ setIncludeHints(self, Iterable[str]) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDefault(self, int, int):
    """ setLayoutDefault(self, int, int) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLayoutFunction(self, str, str):
    """ setLayoutFunction(self, str, str) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMainContainer(self, QWidget):
    """ setMainContainer(self, QWidget) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPixmapFunction(self, str):
    """ setPixmapFunction(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter(self):
    """ sharedPainter(self) -> QPainter """
    return 1

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent(self, QTabletEvent):
    """ tabletEvent(self, QTabletEvent) """
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unmanageWidget(self, QWidget):
    """ unmanageWidget(self, QWidget) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus(self):
    """ updateMicroFocus(self) """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def widgetManaged(self, QWidget):
    """ widgetManaged(self, QWidget) [signal] """
    pass

  def widgetRemoved(self, QWidget):
    """ widgetRemoved(self, QWidget) [signal] """
    pass

  def widgetUnmanaged(self, QWidget):
    """ widgetUnmanaged(self, QWidget) [signal] """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDesignerFormWindowManagerInterface(QObject):

  class Action(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ActionGroup(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AdjustSizeAction = None
  BreakLayoutAction = None
  CopyAction = None
  CutAction = None
  DefaultPreviewAction = None
  DeleteAction = None
  FormLayoutAction = None
  FormWindowSettingsDialogAction = None
  GridLayoutAction = None
  HorizontalLayoutAction = None
  LowerAction = None
  PasteAction = None
  RaiseAction = None
  RedoAction = None
  SelectAllAction = None
  SimplifyLayoutAction = None
  SplitHorizontalAction = None
  SplitVerticalAction = None
  StyledPreviewActionGroup = None
  UndoAction = None
  VerticalLayoutAction = None

  def action(self, arg0):
    """ action(self, QDesignerFormWindowManagerInterface.Action) -> QAction """
    return None

  def actionFormLayout(self):
    """ actionFormLayout(self) -> QAction """
    return None

  def actionGroup(self, arg0):
    """ actionGroup(self, QDesignerFormWindowManagerInterface.ActionGroup) -> QActionGroup """
    return None

  def actionSimplifyLayout(self):
    """ actionSimplifyLayout(self) -> QAction """
    return None

  def activeFormWindow(self):
    """ activeFormWindow(self) -> QDesignerFormWindowInterface """
    return None

  def activeFormWindowChanged(self, QDesignerFormWindowInterface):
    """ activeFormWindowChanged(self, QDesignerFormWindowInterface) [signal] """
    pass

  def addFormWindow(self, QDesignerFormWindowInterface):
    """ addFormWindow(self, QDesignerFormWindowInterface) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closeAllPreviews(self):
    """ closeAllPreviews(self) """
    pass

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def core(self):
    """ core(self) -> QDesignerFormEditorInterface """
    return None

  def createFormWindow(self, arg0=None, arg1=None, arg2=None):
    """ createFormWindow(self, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QDesignerFormWindowInterface """
    return None

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def formWindow(self, int):
    """ formWindow(self, int) -> QDesignerFormWindowInterface """
    return None

  def formWindowAdded(self, QDesignerFormWindowInterface):
    """ formWindowAdded(self, QDesignerFormWindowInterface) [signal] """
    pass

  def formWindowCount(self):
    """ formWindowCount(self) -> int """
    return 1

  def formWindowRemoved(self, QDesignerFormWindowInterface):
    """ formWindowRemoved(self, QDesignerFormWindowInterface) [signal] """
    pass

  def formWindowSettingsChanged(self, QDesignerFormWindowInterface):
    """ formWindowSettingsChanged(self, QDesignerFormWindowInterface) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeFormWindow(self, QDesignerFormWindowInterface):
    """ removeFormWindow(self, QDesignerFormWindowInterface) """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setActiveFormWindow(self, QDesignerFormWindowInterface):
    """ setActiveFormWindow(self, QDesignerFormWindowInterface) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def showPluginDialog(self):
    """ showPluginDialog(self) """
    pass

  def showPreview(self):
    """ showPreview(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QDesignerMemberSheetExtension(simplewrapper):
  """ QDesignerMemberSheetExtension()
  QDesignerMemberSheetExtension(QDesignerMemberSheetExtension) """

  def count(self):
    """ count(self) -> int """
    return 1

  def declaredInClass(self, int):
    """ declaredInClass(self, int) -> str """
    return ""

  def indexOf(self, str):
    """ indexOf(self, str) -> int """
    return 1

  def inheritedFromWidget(self, int):
    """ inheritedFromWidget(self, int) -> bool """
    return None

  def isSignal(self, int):
    """ isSignal(self, int) -> bool """
    return None

  def isSlot(self, int):
    """ isSlot(self, int) -> bool """
    return None

  def isVisible(self, int):
    """ isVisible(self, int) -> bool """
    return None

  def memberGroup(self, int):
    """ memberGroup(self, int) -> str """
    return ""

  def memberName(self, int):
    """ memberName(self, int) -> str """
    return ""

  def parameterNames(self, int):
    """ parameterNames(self, int) -> List[QByteArray] """
    return None

  def parameterTypes(self, int):
    """ parameterTypes(self, int) -> List[QByteArray] """
    return None

  def setMemberGroup(self, int, str):
    """ setMemberGroup(self, int, str) """
    pass

  def setVisible(self, int, bool):
    """ setVisible(self, int, bool) """
    pass

  def signature(self, int):
    """ signature(self, int) -> str """
    return ""

class QDesignerObjectInspectorInterface(QWidget):
  """ QDesignerObjectInspectorInterface(QWidget, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent():
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def core(self):
    """ core(self) -> QDesignerFormEditorInterface """
    return None

  def create():
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFormWindow(self, QDesignerFormWindowInterface):
    """ setFormWindow(self, QDesignerFormWindowInterface) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDesignerPropertyEditorInterface(QWidget):
  """ QDesignerPropertyEditorInterface(QWidget, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent():
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def core(self):
    """ core(self) -> QDesignerFormEditorInterface """
    return None

  def create():
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def currentPropertyName(self):
    """ currentPropertyName(self) -> str """
    return ""

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def object(self):
    """ object(self) -> QObject """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def propertyChanged(self, str, Any):
    """ propertyChanged(self, str, Any) [signal] """
    pass

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObject(self, QObject):
    """ setObject(self, QObject) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setPropertyValue():
    """ setPropertyValue(self, str, Any, changed: bool = True) """
    pass

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDesignerPropertySheetExtension(simplewrapper):
  """ QDesignerPropertySheetExtension()
  QDesignerPropertySheetExtension(QDesignerPropertySheetExtension) """

  def count(self):
    """ count(self) -> int """
    return 1

  def hasReset(self, int):
    """ hasReset(self, int) -> bool """
    return None

  def indexOf(self, str):
    """ indexOf(self, str) -> int """
    return 1

  def isAttribute(self, int):
    """ isAttribute(self, int) -> bool """
    return None

  def isChanged(self, int):
    """ isChanged(self, int) -> bool """
    return None

  def isEnabled(self, int):
    """ isEnabled(self, int) -> bool """
    return None

  def isVisible(self, int):
    """ isVisible(self, int) -> bool """
    return None

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyGroup(self, int):
    """ propertyGroup(self, int) -> str """
    return ""

  def propertyName(self, int):
    """ propertyName(self, int) -> str """
    return ""

  def reset(self, int):
    """ reset(self, int) -> bool """
    return None

  def setAttribute(self, int, bool):
    """ setAttribute(self, int, bool) """
    pass

  def setChanged(self, int, bool):
    """ setChanged(self, int, bool) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any) """
    pass

  def setPropertyGroup(self, int, str):
    """ setPropertyGroup(self, int, str) """
    pass

  def setVisible(self, int, bool):
    """ setVisible(self, int, bool) """
    pass

class QDesignerTaskMenuExtension(simplewrapper):
  """ QDesignerTaskMenuExtension()
  QDesignerTaskMenuExtension(QDesignerTaskMenuExtension) """

  def preferredEditAction(self):
    """ preferredEditAction(self) -> QAction """
    return None

  def taskActions(self):
    """ taskActions(self) -> List[QAction] """
    return None

class QDesignerWidgetBoxInterface(QWidget):

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent(self, QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent(self, QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEvent(self, QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent(self, QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    """ create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) """
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    """ destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def dropEvent(self, QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent(self, QEvent):
    """ enterEvent(self, QEvent) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild(self):
    """ focusNextChild(self) -> bool """
    return None

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return None

  def focusOutEvent(self, QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild(self):
    """ focusPreviousChild(self) -> bool """
    return None

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter(self, QPainter):
    """ initPainter(self, QPainter) """
    pass

  def inputMethodEvent(self, QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent(self, QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent(self, QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def load(self):
    """ load(self) -> bool """
    return None

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent(self, QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent(self, QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent(self, UnionQByteArray=None, bytes=None, bytearray=None, sip.voidptr=None):
    """ nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int] """
    return 1

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent(self, QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def save(self):
    """ save(self) -> bool """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter(self):
    """ sharedPainter(self) -> QPainter """
    return 1

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent(self, QTabletEvent):
    """ tabletEvent(self, QTabletEvent) """
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus(self):
    """ updateMicroFocus(self) """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QExtensionFactory(QObject):
  """ QExtensionFactory(parent: QExtensionManager = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def createExtension(self, QObject, str, QObject):
    """ createExtension(self, QObject, str, QObject) -> QObject """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def extension(self, QObject, str):
    """ extension(self, QObject, str) -> QObject """
    return None

  def extensionManager(self):
    """ extensionManager(self) -> QExtensionManager """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QExtensionManager(QObject):
  """ QExtensionManager(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def extension(self, QObject, str):
    """ extension(self, QObject, str) -> QObject """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def registerExtensions():
    """ registerExtensions(self, QAbstractExtensionFactory, iid: str = '') """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unregisterExtensions():
    """ unregisterExtensions(self, QAbstractExtensionFactory, iid: str = '') """
    pass

class QFormBuilder(QAbstractFormBuilder):
  """ QFormBuilder() """

  def addPluginPath(self, str):
    """ addPluginPath(self, str) """
    pass

  def clearPluginPaths(self):
    """ clearPluginPaths(self) """
    pass

  def customWidgets(self):
    """ customWidgets(self) -> List[QDesignerCustomWidgetInterface] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def load(self, QIODevice, arg0=None):
    """ load(self, QIODevice, parent: QWidget = None) -> QWidget """
    return None

  def pluginPaths(self):
    """ pluginPaths(self) -> List[str] """
    return ""

  def save(self, QIODevice, QWidget):
    """ save(self, QIODevice, QWidget) """
    pass

  def setPluginPath(self, Iterablestr=None):
    """ setPluginPath(self, Iterable[str]) """
    pass

  def setWorkingDirectory(self, QDir):
    """ setWorkingDirectory(self, QDir) """
    pass

  def workingDirectory(self):
    """ workingDirectory(self) -> QDir """
    return None

class QPyDesignerContainerExtension(QObject):
  """ QPyDesignerContainerExtension(QObject) """

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def canAddWidget(self):
    """ canAddWidget(self) -> bool """
    return None

  def canRemove(self, int):
    """ canRemove(self, int) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def count(self):
    """ count(self) -> int """
    return 1

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertWidget(self, int, QWidget):
    """ insertWidget(self, int, QWidget) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remove(self, int):
    """ remove(self, int) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def widget(self, int):
    """ widget(self, int) -> QWidget """
    return None

class QPyDesignerCustomWidgetCollectionPlugin(QObject):
  """ QPyDesignerCustomWidgetCollectionPlugin(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def customWidgets(self):
    """ customWidgets(self) -> List[QDesignerCustomWidgetInterface] """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QPyDesignerCustomWidgetPlugin(QObject):
  """ QPyDesignerCustomWidgetPlugin(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def codeTemplate(self):
    """ codeTemplate(self) -> str """
    return ""

  def connectNotify():
    pass

  def createWidget(self, QWidget):
    """ createWidget(self, QWidget) -> QWidget """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def domXml(self):
    """ domXml(self) -> str """
    return ""

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def group(self):
    """ group(self) -> str """
    return ""

  def icon(self):
    """ icon(self) -> QIcon """
    return None

  def includeFile(self):
    """ includeFile(self) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initialize(self, QDesignerFormEditorInterface):
    """ initialize(self, QDesignerFormEditorInterface) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isContainer(self):
    """ isContainer(self) -> bool """
    return None

  def isInitialized(self):
    """ isInitialized(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def name(self):
    """ name(self) -> str """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

class QPyDesignerMemberSheetExtension(QObject):
  """ QPyDesignerMemberSheetExtension(QObject) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def declaredInClass(self, int):
    """ declaredInClass(self, int) -> str """
    return ""

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def indexOf(self, str):
    """ indexOf(self, str) -> int """
    return 1

  def inheritedFromWidget(self, int):
    """ inheritedFromWidget(self, int) -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignal(self, int):
    """ isSignal(self, int) -> bool """
    return None

  def isSignalConnected():
    pass

  def isSlot(self, int):
    """ isSlot(self, int) -> bool """
    return None

  def isVisible(self, int):
    """ isVisible(self, int) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def memberGroup(self, int):
    """ memberGroup(self, int) -> str """
    return ""

  def memberName(self, int):
    """ memberName(self, int) -> str """
    return ""

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parameterNames(self, int):
    """ parameterNames(self, int) -> List[QByteArray] """
    return None

  def parameterTypes(self, int):
    """ parameterTypes(self, int) -> List[QByteArray] """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setMemberGroup(self, int, str):
    """ setMemberGroup(self, int, str) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setVisible(self, int, bool):
    """ setVisible(self, int, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def signature(self, int):
    """ signature(self, int) -> str """
    return ""

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QPyDesignerPropertySheetExtension(QObject):
  """ QPyDesignerPropertySheetExtension(QObject) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hasReset(self, int):
    """ hasReset(self, int) -> bool """
    return None

  def indexOf(self, str):
    """ indexOf(self, str) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isAttribute(self, int):
    """ isAttribute(self, int) -> bool """
    return None

  def isChanged(self, int):
    """ isChanged(self, int) -> bool """
    return None

  def isEnabled(self, int):
    """ isEnabled(self, int) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self, int):
    """ isVisible(self, int) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def propertyGroup(self, int):
    """ propertyGroup(self, int) -> str """
    return ""

  def propertyName(self, int):
    """ propertyName(self, int) -> str """
    return ""

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self, int):
    """ reset(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAttribute(self, int, bool):
    """ setAttribute(self, int, bool) """
    pass

  def setChanged(self, int, bool):
    """ setChanged(self, int, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setPropertyGroup(self, int, str):
    """ setPropertyGroup(self, int, str) """
    pass

  def setVisible(self, int, bool):
    """ setVisible(self, int, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QPyDesignerTaskMenuExtension(QObject):
  """ QPyDesignerTaskMenuExtension(QObject) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def preferredEditAction(self):
    """ preferredEditAction(self) -> QAction """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def taskActions(self):
    """ taskActions(self) -> List[QAction] """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

__doc__ = None
__file__ = 'C:\\Users\\Rupka\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\PyQt5\\QtDesigner.pyd'
__loader__ = None
__name__ = 'PyQt5.QtDesigner'
__package__ = 'PyQt5'
__spec__ = None

