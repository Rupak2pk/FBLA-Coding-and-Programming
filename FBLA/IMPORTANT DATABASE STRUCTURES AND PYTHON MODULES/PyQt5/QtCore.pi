# coding: utf-8
# AUTO-GENERATED FILE -- DO NOT EDIT


PYQT_CONFIGURATION = {}
PYQT_VERSION = 331010
PYQT_VERSION_STR = '5.13.2'

class QAbstractAnimation(QObject):
  """ QAbstractAnimation(parent: QObject = None) """

  Backward = None
  DeleteWhenStopped = None

  class DeletionPolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Direction(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Forward = None
  KeepWhenStopped = None
  Paused = None
  Running = None

  class State(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Stopped = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentLoop(self):
    """ currentLoop(self) -> int """
    return 1

  def currentLoopChanged(self, int):
    """ currentLoopChanged(self, int) [signal] """
    pass

  def currentLoopTime(self):
    """ currentLoopTime(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QAbstractAnimation.Direction """
    return ""

  def directionChanged(self, arg0):
    """ directionChanged(self, QAbstractAnimation.Direction) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def group(self):
    """ group(self) -> QAnimationGroup """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pause(self):
    """ pause(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QAbstractAnimation.Direction) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start():
    """ start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QAbstractAnimation.State """
    return ""

  def stateChanged(self, arg0, arg1):
    """ stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def totalDuration(self):
    """ totalDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCurrentTime(self, int):
    """ updateCurrentTime(self, int) """
    pass

  def updateDirection(self, arg0):
    """ updateDirection(self, QAbstractAnimation.Direction) """
    pass

  def updateState(self, arg0, arg1):
    """ updateState(self, QAbstractAnimation.State, QAbstractAnimation.State) """
    pass

class QAbstractEventDispatcher(QObject):
  """ QAbstractEventDispatcher(parent: QObject = None) """

  class TimerInfo(simplewrapper):
    """ QAbstractEventDispatcher.TimerInfo(int, int, Qt.TimerType)
    QAbstractEventDispatcher.TimerInfo(QAbstractEventDispatcher.TimerInfo) """

    interval = None
    timerId = None
    timerType = None

  def aboutToBlock(self):
    """ aboutToBlock(self) [signal] """
    pass

  def awake(self):
    """ awake(self) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closingDown(self):
    """ closingDown(self) """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def filterNativeEvent(self, UnionQByteArray=None, bytes=None, bytearray=None, sip.voidptr=None):
    """ filterNativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int] """
    return 1

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) """
    pass

  def hasPendingEvents(self):
    """ hasPendingEvents(self) -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installNativeEventFilter(self, QAbstractNativeEventFilter):
    """ installNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def instance(arg0=None):
    """ instance(thread: QThread = None) -> QAbstractEventDispatcher """
    return ""

  def interrupt(self):
    """ interrupt(self) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def processEvents(self, UnionQEventLoop.ProcessEventsFlags=None, QEventLoop.ProcessEventsFlag=None):
    """ processEvents(self, Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag]) -> bool """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def registerEventNotifier(self, QWinEventNotifier):
    """ registerEventNotifier(self, QWinEventNotifier) -> bool """
    return None

  def registerSocketNotifier(self, QSocketNotifier):
    """ registerSocketNotifier(self, QSocketNotifier) """
    pass

  def registerTimer(self, int, arg0, QObject):
    """ registerTimer(self, int, Qt.TimerType, QObject) -> int
    registerTimer(self, int, int, Qt.TimerType, QObject) """
    return 1

  def registeredTimers(self, QObject):
    """ registeredTimers(self, QObject) -> List[QAbstractEventDispatcher.TimerInfo] """
    return ""

  def remainingTime(self, int):
    """ remainingTime(self, int) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeNativeEventFilter(self, QAbstractNativeEventFilter):
    """ removeNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startingUp(self):
    """ startingUp(self) """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unregisterEventNotifier(self, QWinEventNotifier):
    """ unregisterEventNotifier(self, QWinEventNotifier) """
    pass

  def unregisterSocketNotifier(self, QSocketNotifier):
    """ unregisterSocketNotifier(self, QSocketNotifier) """
    pass

  def unregisterTimer(self, int):
    """ unregisterTimer(self, int) -> bool """
    return None

  def unregisterTimers(self, QObject):
    """ unregisterTimers(self, QObject) -> bool """
    return None

  def wakeUp(self):
    """ wakeUp(self) """
    pass

class QAbstractItemModel(QObject):
  """ QAbstractItemModel(parent: QObject = None) """

  class CheckIndexOption(IntEnum):
    """ An enumeration. """

    DoNotUseParent = None
    IndexIsValid = None
    NoOption = None
    ParentIsInvalid = None

  class CheckIndexOptions(simplewrapper):
    """ QAbstractItemModel.CheckIndexOptions()
    QAbstractItemModel.CheckIndexOptions(Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption])
    QAbstractItemModel.CheckIndexOptions(QAbstractItemModel.CheckIndexOptions) """

    pass

  HorizontalSortHint = None

  class LayoutChangeHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns(self, QModelIndex, int, int):
    """ beginInsertColumns(self, QModelIndex, int, int) """
    pass

  def beginInsertRows(self, QModelIndex, int, int):
    """ beginInsertRows(self, QModelIndex, int, int) """
    pass

  def beginMoveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ beginMoveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def beginMoveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ beginMoveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def beginRemoveColumns(self, QModelIndex, int, int):
    """ beginRemoveColumns(self, QModelIndex, int, int) """
    pass

  def beginRemoveRows(self, QModelIndex, int, int):
    """ beginRemoveRows(self, QModelIndex, int, int) """
    pass

  def beginResetModel(self):
    """ beginResetModel(self) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex(self, QModelIndex, QModelIndex):
    """ changePersistentIndex(self, QModelIndex, QModelIndex) """
    pass

  def changePersistentIndexList(self, IterableQModelIndex=None, IterableQModelIndex=None):
    """ changePersistentIndexList(self, Iterable[QModelIndex], Iterable[QModelIndex]) """
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex(self, int, int, arg0=None):
    """ createIndex(self, int, int, object: object = 0) -> QModelIndex """
    return None

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData(self, int, int, QModelIndex, QDataStream):
    """ decodeData(self, int, int, QModelIndex, QDataStream) -> bool """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData(self, IterableQModelIndex=None, QDataStream=None):
    """ encodeData(self, Iterable[QModelIndex], QDataStream) """
    pass

  def endInsertColumns(self):
    """ endInsertColumns(self) """
    pass

  def endInsertRows(self):
    """ endInsertRows(self) """
    pass

  def endMoveColumns(self):
    """ endMoveColumns(self) """
    pass

  def endMoveRows(self):
    """ endMoveRows(self) """
    pass

  def endRemoveColumns(self):
    """ endRemoveColumns(self) """
    pass

  def endRemoveRows(self):
    """ endRemoveRows(self) """
    pass

  def endResetModel(self):
    """ endResetModel(self) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex
    parent(self) -> QObject """
    return None

  def persistentIndexList(self):
    """ persistentIndexList(self) -> List[QModelIndex] """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData(self):
    """ resetInternalData(self) """
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QAbstractListModel(QAbstractItemModel):
  """ QAbstractListModel(parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount():
    pass

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren():
    pass

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, arg0=None, arg1=None):
    """ index(self, int, column: int = 0, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QAbstractNativeEventFilter(simplewrapper):
  """ QAbstractNativeEventFilter() """

  def nativeEventFilter(self, UnionQByteArray=None, bytes=None, bytearray=None, sip.voidptr=None):
    """ nativeEventFilter(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int] """
    return 1

class QAbstractProxyModel(QAbstractItemModel):
  """ QAbstractProxyModel(parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def mapFromSource(self, QModelIndex):
    """ mapFromSource(self, QModelIndex) -> QModelIndex """
    return None

  def mapSelectionFromSource(self, QItemSelection):
    """ mapSelectionFromSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapSelectionToSource(self, QItemSelection):
    """ mapSelectionToSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapToSource(self, QModelIndex):
    """ mapToSource(self, QModelIndex) -> QModelIndex """
    return None

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex
    parent(self) -> QObject """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData(self):
    """ resetInternalData(self) """
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSourceModel(self, QAbstractItemModel):
    """ setSourceModel(self, QAbstractItemModel) """
    pass

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def sourceModel(self):
    """ sourceModel(self) -> QAbstractItemModel """
    return ""

  def sourceModelChanged(self):
    """ sourceModelChanged(self) [signal] """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QAbstractState(QObject):
  """ QAbstractState(parent: QState = None) """

  def active(self):
    """ active(self) -> bool """
    return None

  def activeChanged(self, bool):
    """ activeChanged(self, bool) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def entered(self):
    """ entered(self) [signal] """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exited(self):
    """ exited(self) [signal] """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onEntry(self, QEvent):
    """ onEntry(self, QEvent) """
    pass

  def onExit(self, QEvent):
    """ onExit(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentState(self):
    """ parentState(self) -> QState """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QAbstractTableModel(QAbstractItemModel):
  """ QAbstractTableModel(parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren():
    pass

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QAbstractTransition(QObject):
  """ QAbstractTransition(sourceState: QState = None) """

  ExternalTransition = None
  InternalTransition = None

  class TransitionType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def addAnimation(self, QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def animations(self):
    """ animations(self) -> List[QAbstractAnimation] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def eventTest(self, QEvent):
    """ eventTest(self, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onTransition(self, QEvent):
    """ onTransition(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTargetState(self, QAbstractState):
    """ setTargetState(self, QAbstractState) """
    pass

  def setTargetStates(self, IterableQAbstractState=None):
    """ setTargetStates(self, Iterable[QAbstractState]) """
    pass

  def setTransitionType(self, arg0):
    """ setTransitionType(self, QAbstractTransition.TransitionType) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sourceState(self):
    """ sourceState(self) -> QState """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def targetState(self):
    """ targetState(self) -> QAbstractState """
    return ""

  def targetStateChanged(self):
    """ targetStateChanged(self) [signal] """
    pass

  def targetStates(self):
    """ targetStates(self) -> List[QAbstractState] """
    return ""

  def targetStatesChanged(self):
    """ targetStatesChanged(self) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transitionType(self):
    """ transitionType(self) -> QAbstractTransition.TransitionType """
    return ""

  def triggered(self):
    """ triggered(self) [signal] """
    pass

class QAnimationGroup(QAbstractAnimation):
  """ QAnimationGroup(parent: QObject = None) """

  Backward = None
  DeleteWhenStopped = None
  Forward = None
  KeepWhenStopped = None
  Paused = None
  Running = None
  Stopped = None

  def addAnimation(self, QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def animationAt(self, int):
    """ animationAt(self, int) -> QAbstractAnimation """
    return ""

  def animationCount(self):
    """ animationCount(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def currentLoop(self):
    """ currentLoop(self) -> int """
    return 1

  def currentLoopChanged(self, int):
    """ currentLoopChanged(self, int) [signal] """
    pass

  def currentLoopTime(self):
    """ currentLoopTime(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QAbstractAnimation.Direction """
    return ""

  def directionChanged(self, arg0):
    """ directionChanged(self, QAbstractAnimation.Direction) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def group(self):
    """ group(self) -> QAnimationGroup """
    return None

  def indexOfAnimation(self, QAbstractAnimation):
    """ indexOfAnimation(self, QAbstractAnimation) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertAnimation(self, int, QAbstractAnimation):
    """ insertAnimation(self, int, QAbstractAnimation) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pause(self):
    """ pause(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QAbstractAnimation.Direction) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start():
    """ start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QAbstractAnimation.State """
    return ""

  def stateChanged(self, arg0, arg1):
    """ stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def takeAnimation(self, int):
    """ takeAnimation(self, int) -> QAbstractAnimation """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def totalDuration(self):
    """ totalDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCurrentTime():
    pass

  def updateDirection():
    pass

  def updateState():
    pass

class QBasicTimer(simplewrapper):
  """ QBasicTimer()
  QBasicTimer(QBasicTimer) """

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def start(self, int, arg0, QObject):
    """ start(self, int, Qt.TimerType, QObject)
    start(self, int, QObject) """
    pass

  def stop(self):
    """ stop(self) """
    pass

  def timerId(self):
    """ timerId(self) -> int """
    return 1

class QBitArray(simplewrapper):
  """ QBitArray()
  QBitArray(int, value: bool = False)
  QBitArray(QBitArray) """

  def at(self, int):
    """ at(self, int) -> bool """
    return None

  def bits(self):
    """ bits(self) -> bytes """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def clearBit(self, int):
    """ clearBit(self, int) """
    pass

  def count(self):
    """ count(self) -> int
    count(self, bool) -> int """
    return 1

  def detach(self):
    """ detach(self) """
    pass

  def fill(self, bool, int, int):
    """ fill(self, bool, int, int)
    fill(self, bool, size: int = -1) -> bool """
    pass

  def fromBits(str, int):
    """ fromBits(str, int) -> QBitArray """
    return None

  def isDetached(self):
    """ isDetached(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def resize(self, int):
    """ resize(self, int) """
    pass

  def setBit(self, int):
    """ setBit(self, int)
    setBit(self, int, bool) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def swap(self, QBitArray):
    """ swap(self, QBitArray) """
    pass

  def testBit(self, int):
    """ testBit(self, int) -> bool """
    return None

  def toggleBit(self, int):
    """ toggleBit(self, int) -> bool """
    return None

  def truncate(self, int):
    """ truncate(self, int) """
    pass

class QBuffer(QIODevice):
  """ QBuffer(parent: QObject = None)
  QBuffer(QByteArray, parent: QObject = None) """

  Append = None
  ExistingOnly = None
  NewOnly = None
  NotOpen = None

  class OpenMode(simplewrapper):
    """ QIODevice.OpenMode()
    QIODevice.OpenMode(Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])
    QIODevice.OpenMode(QIODevice.OpenMode) """

    pass

  class OpenModeFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ReadOnly = None
  ReadWrite = None
  Text = None
  Truncate = None
  Unbuffered = None
  WriteOnly = None

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buffer(self):
    """ buffer(self) -> QByteArray """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def data(self):
    """ data(self) -> QByteArray """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData(self, int):
    """ readData(self, int) -> bytes """
    return None

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBuffer(self, QByteArray):
    """ setBuffer(self, QByteArray) """
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setData(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setData(self, Union[QByteArray, bytes, bytearray])
    setData(self, bytes) """
    pass

  def setErrorString():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, int):
    """ waitForBytesWritten(self, int) -> bool """
    return None

  def waitForReadyRead(self, int):
    """ waitForReadyRead(self, int) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QByteArray(simplewrapper):
  """ QByteArray()
  QByteArray(int, str)
  QByteArray(Union[QByteArray, bytes, bytearray]) """

  Base64Encoding = None

  class Base64Option(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Base64Options(simplewrapper):
    """ QByteArray.Base64Options()
    QByteArray.Base64Options(Union[QByteArray.Base64Options, QByteArray.Base64Option])
    QByteArray.Base64Options(QByteArray.Base64Options) """

    pass

  Base64UrlEncoding = None
  KeepTrailingEquals = None
  OmitTrailingEquals = None

  def append(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ append(self, Union[QByteArray, bytes, bytearray]) -> QByteArray
    append(self, str) -> QByteArray
    append(self, int, str) -> QByteArray """
    return None

  def at(self, int):
    """ at(self, int) -> str """
    return ""

  def capacity(self):
    """ capacity(self) -> int """
    return 1

  def chop(self, int):
    """ chop(self, int) """
    pass

  def chopped(self, int):
    """ chopped(self, int) -> QByteArray """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def compare(self, UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ compare(self, Union[QByteArray, bytes, bytearray], cs: Qt.CaseSensitivity = Qt.CaseSensitive) -> int """
    return 1

  def contains(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ contains(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def count(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ count(self, Union[QByteArray, bytes, bytearray]) -> int
    count(self) -> int """
    return 1

  def data(self):
    """ data(self) -> bytes """
    return None

  def endsWith(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ endsWith(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def fill(self, str, arg0=None):
    """ fill(self, str, size: int = -1) -> QByteArray """
    return None

  def fromBase64(UnionQByteArray=None, bytes=None, bytearray=None):
    """ fromBase64(Union[QByteArray, bytes, bytearray]) -> QByteArray
    fromBase64(Union[QByteArray, bytes, bytearray], Union[QByteArray.Base64Options, QByteArray.Base64Option]) -> QByteArray """
    return None

  def fromHex(UnionQByteArray=None, bytes=None, bytearray=None):
    """ fromHex(Union[QByteArray, bytes, bytearray]) -> QByteArray """
    return None

  def fromPercentEncoding(UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ fromPercentEncoding(Union[QByteArray, bytes, bytearray], percent: str = '%') -> QByteArray """
    return None

  def fromRawData(bytes):
    """ fromRawData(bytes) -> QByteArray """
    return None

  def indexOf(self, UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ indexOf(self, Union[QByteArray, bytes, bytearray], from_: int = 0) -> int
    indexOf(self, str, from_: int = 0) -> int """
    return 1

  def insert(self, int, UnionQByteArray=None, bytes=None, bytearray=None):
    """ insert(self, int, Union[QByteArray, bytes, bytearray]) -> QByteArray
    insert(self, int, str) -> QByteArray
    insert(self, int, int, str) -> QByteArray """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isLower(self):
    """ isLower(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isUpper(self):
    """ isUpper(self) -> bool """
    return None

  def lastIndexOf(self, UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ lastIndexOf(self, Union[QByteArray, bytes, bytearray], from_: int = -1) -> int
    lastIndexOf(self, str, from_: int = -1) -> int """
    return 1

  def left(self, int):
    """ left(self, int) -> QByteArray """
    return None

  def leftJustified(self, int, arg0=None, arg1=None):
    """ leftJustified(self, int, fill: str = ' ', truncate: bool = False) -> QByteArray """
    return None

  def length(self):
    """ length(self) -> int """
    return 1

  def mid(self, int, arg0=None):
    """ mid(self, int, length: int = -1) -> QByteArray """
    return None

  def number(float, arg0=None, arg1=None):
    """ number(float, format: str = 'g', precision: int = 6) -> QByteArray
    number(int, base: int = 10) -> QByteArray """
    return None

  def prepend(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ prepend(self, Union[QByteArray, bytes, bytearray]) -> QByteArray
    prepend(self, int, str) -> QByteArray """
    return None

  def push_back(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ push_back(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def push_front(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ push_front(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def remove(self, int, int):
    """ remove(self, int, int) -> QByteArray """
    return None

  def repeated(self, int):
    """ repeated(self, int) -> QByteArray """
    return None

  def replace(self, int, int, UnionQByteArray=None, bytes=None, bytearray=None):
    """ replace(self, int, int, Union[QByteArray, bytes, bytearray]) -> QByteArray
    replace(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) -> QByteArray
    replace(self, str, Union[QByteArray, bytes, bytearray]) -> QByteArray """
    return None

  def reserve(self, int):
    """ reserve(self, int) """
    pass

  def resize(self, int):
    """ resize(self, int) """
    pass

  def right(self, int):
    """ right(self, int) -> QByteArray """
    return None

  def rightJustified(self, int, arg0=None, arg1=None):
    """ rightJustified(self, int, fill: str = ' ', truncate: bool = False) -> QByteArray """
    return None

  def setNum(self, float, arg0=None, arg1=None):
    """ setNum(self, float, format: str = 'g', precision: int = 6) -> QByteArray
    setNum(self, int, base: int = 10) -> QByteArray """
    return None

  def simplified(self):
    """ simplified(self) -> QByteArray """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def split(self, str):
    """ split(self, str) -> List[QByteArray] """
    return None

  def squeeze(self):
    """ squeeze(self) """
    pass

  def startsWith(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ startsWith(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def swap(self, QByteArray):
    """ swap(self, QByteArray) """
    pass

  def toBase64(self):
    """ toBase64(self) -> QByteArray
    toBase64(self, Union[QByteArray.Base64Options, QByteArray.Base64Option]) -> QByteArray """
    return None

  def toDouble(self):
    """ toDouble(self) -> Tuple[float, bool] """
    return 1.0

  def toFloat(self):
    """ toFloat(self) -> Tuple[float, bool] """
    return 1.0

  def toHex(self):
    """ toHex(self) -> QByteArray
    toHex(self, str) -> QByteArray """
    return None

  def toInt(self, arg0=None):
    """ toInt(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toLong(self, arg0=None):
    """ toLong(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toLongLong(self, arg0=None):
    """ toLongLong(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toLower(self):
    """ toLower(self) -> QByteArray """
    return None

  def toPercentEncoding(self, arg0=None, bytes=None, arg1=None, arg2=None, bytes=None, arg3=None, arg4=None):
    """ toPercentEncoding(self, exclude: Union[QByteArray, bytes, bytearray] = QByteArray(), include: Union[QByteArray, bytes, bytearray] = QByteArray(), percent: str = '%') -> QByteArray """
    return None

  def toShort(self, arg0=None):
    """ toShort(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toUInt(self, arg0=None):
    """ toUInt(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toULong(self, arg0=None):
    """ toULong(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toULongLong(self, arg0=None):
    """ toULongLong(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toUShort(self, arg0=None):
    """ toUShort(self, base: int = 10) -> Tuple[int, bool] """
    return 1

  def toUpper(self):
    """ toUpper(self) -> QByteArray """
    return None

  def trimmed(self):
    """ trimmed(self) -> QByteArray """
    return None

  def truncate(self, int):
    """ truncate(self, int) """
    pass

class QByteArrayMatcher(simplewrapper):
  """ QByteArrayMatcher()
  QByteArrayMatcher(Union[QByteArray, bytes, bytearray])
  QByteArrayMatcher(QByteArrayMatcher) """

  def indexIn(self, UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ indexIn(self, Union[QByteArray, bytes, bytearray], from_: int = 0) -> int """
    return 1

  def pattern(self):
    """ pattern(self) -> QByteArray """
    return None

  def setPattern(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setPattern(self, Union[QByteArray, bytes, bytearray]) """
    pass

class QCborError(simplewrapper):
  """ QCborError()
  QCborError(QCborError) """

  AdvancePastEnd = None

  class Code(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DataTooLarge = None
  EndOfFile = None
  GarbageAtEnd = None
  IllegalNumber = None
  IllegalSimpleType = None
  IllegalType = None
  InputOutputError = None
  InvalidUtf8String = None
  NestingTooDeep = None
  NoError = None
  UnexpectedBreak = None
  UnknownError = None
  UnknownType = None
  UnsupportedType = None

  def code(self):
    """ code(self) -> QCborError.Code """
    return None

  def toString(self):
    """ toString(self) -> str """
    return ""

class QCborKnownTags(IntEnum):
  """ An enumeration. """

  Base64 = None
  Base64url = None
  Bigfloat = None
  COSE_Encrypt = None
  COSE_Encrypt0 = None
  COSE_Mac = None
  COSE_Mac0 = None
  COSE_Sign = None
  COSE_Sign1 = None
  DateTimeString = None
  Decimal = None
  EncodedCbor = None
  ExpectedBase16 = None
  ExpectedBase64 = None
  ExpectedBase64url = None
  MimeMessage = None
  NegativeBignum = None
  PositiveBignum = None
  RegularExpression = None
  Signature = None
  UnixTime_t = None
  Url = None
  Uuid = None

class QCborSimpleType(IntEnum):
  """ An enumeration. """

  False_ = None
  Null = None
  True_ = None
  Undefined = None

class QCborStreamReader(simplewrapper):
  """ QCborStreamReader()
  QCborStreamReader(Union[QByteArray, bytes, bytearray])
  QCborStreamReader(QIODevice) """

  Array = None
  ByteArray = None
  ByteString = None
  Double = None
  EndOfString = None
  Error = None
  Float = None
  Float16 = None
  HalfFloat = None
  Invalid = None
  Map = None
  NegativeInteger = None
  Ok = None
  SimpleType = None
  String = None

  class StringResultCode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Tag = None
  TextString = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UnsignedInteger = None

  def addData(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ addData(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def clear(self):
    """ clear(self) """
    pass

  def containerDepth(self):
    """ containerDepth(self) -> int """
    return 1

  def currentOffset(self):
    """ currentOffset(self) -> int """
    return 1

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def enterContainer(self):
    """ enterContainer(self) -> bool """
    return None

  def hasNext(self):
    """ hasNext(self) -> bool """
    return None

  def isArray(self):
    """ isArray(self) -> bool """
    return None

  def isBool(self):
    """ isBool(self) -> bool """
    return None

  def isByteArray(self):
    """ isByteArray(self) -> bool """
    return None

  def isContainer(self):
    """ isContainer(self) -> bool """
    return None

  def isDouble(self):
    """ isDouble(self) -> bool """
    return None

  def isFalse(self):
    """ isFalse(self) -> bool """
    return None

  def isFloat(self):
    """ isFloat(self) -> bool """
    return None

  def isFloat16(self):
    """ isFloat16(self) -> bool """
    return None

  def isInteger(self):
    """ isInteger(self) -> bool """
    return None

  def isInvalid(self):
    """ isInvalid(self) -> bool """
    return None

  def isLengthKnown(self):
    """ isLengthKnown(self) -> bool """
    return None

  def isMap(self):
    """ isMap(self) -> bool """
    return None

  def isNegativeInteger(self):
    """ isNegativeInteger(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isSimpleType(self):
    """ isSimpleType(self) -> bool
    isSimpleType(self, QCborSimpleType) -> bool """
    return None

  def isString(self):
    """ isString(self) -> bool """
    return None

  def isTag(self):
    """ isTag(self) -> bool """
    return None

  def isTrue(self):
    """ isTrue(self) -> bool """
    return None

  def isUndefined(self):
    """ isUndefined(self) -> bool """
    return None

  def isUnsignedInteger(self):
    """ isUnsignedInteger(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def lastError(self):
    """ lastError(self) -> QCborError """
    return None

  def leaveContainer(self):
    """ leaveContainer(self) -> bool """
    return None

  def length(self):
    """ length(self) -> int """
    return 1

  def next(self, arg0=None):
    """ next(self, maxRecursion: int = 10000) -> bool """
    return None

  def parentContainerType(self):
    """ parentContainerType(self) -> QCborStreamReader.Type """
    return None

  def readByteArray(self):
    """ readByteArray(self) -> Tuple[QByteArray, QCborStreamReader.StringResultCode] """
    return None

  def readString(self):
    """ readString(self) -> Tuple[str, QCborStreamReader.StringResultCode] """
    return ""

  def reparse(self):
    """ reparse(self) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def toBool(self):
    """ toBool(self) -> bool """
    return None

  def toDouble(self):
    """ toDouble(self) -> float """
    return 1.0

  def toInteger(self):
    """ toInteger(self) -> int """
    return 1

  def toSimpleType(self):
    """ toSimpleType(self) -> QCborSimpleType """
    return None

  def toUnsignedInteger(self):
    """ toUnsignedInteger(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QCborStreamReader.Type """
    return None

class QCborStreamWriter(simplewrapper):
  """ QCborStreamWriter(QIODevice)
  QCborStreamWriter(Union[QByteArray, bytes, bytearray]) """

  def append(self, QCborSimpleType):
    """ append(self, QCborSimpleType)
    append(self, QCborKnownTags)
    append(self, str)
    append(self, Union[QByteArray, bytes, bytearray])
    append(self, bool)
    append(self, float)
    append(self, int) """
    pass

  def appendNull(self):
    """ appendNull(self) """
    pass

  def appendUndefined(self):
    """ appendUndefined(self) """
    pass

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def endArray(self):
    """ endArray(self) -> bool """
    return None

  def endMap(self):
    """ endMap(self) -> bool """
    return None

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def startArray(self):
    """ startArray(self)
    startArray(self, int) """
    pass

  def startMap(self):
    """ startMap(self)
    startMap(self, int) """
    pass

class QChildEvent(QEvent):
  """ QChildEvent(QEvent.Type, QObject)
  QChildEvent(QChildEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def added(self):
    """ added(self) -> bool """
    return None

  def child(self):
    """ child(self) -> QObject """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def polished(self):
    """ polished(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def removed(self):
    """ removed(self) -> bool """
    return None

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QCollator(simplewrapper):
  """ QCollator(locale: QLocale = QLocale())
  QCollator(QCollator) """

  def caseSensitivity(self):
    """ caseSensitivity(self) -> Qt.CaseSensitivity """
    return None

  def compare(self, str, str):
    """ compare(self, str, str) -> int """
    return 1

  def ignorePunctuation(self):
    """ ignorePunctuation(self) -> bool """
    return None

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def numericMode(self):
    """ numericMode(self) -> bool """
    return None

  def setCaseSensitivity(self, arg0):
    """ setCaseSensitivity(self, Qt.CaseSensitivity) """
    pass

  def setIgnorePunctuation(self, bool):
    """ setIgnorePunctuation(self, bool) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setNumericMode(self, bool):
    """ setNumericMode(self, bool) """
    pass

  def sortKey(self, str):
    """ sortKey(self, str) -> QCollatorSortKey """
    return None

  def swap(self, QCollator):
    """ swap(self, QCollator) """
    pass

class QCollatorSortKey(simplewrapper):
  """ QCollatorSortKey(QCollatorSortKey) """

  def compare(self, QCollatorSortKey):
    """ compare(self, QCollatorSortKey) -> int """
    return 1

  def swap(self, QCollatorSortKey):
    """ swap(self, QCollatorSortKey) """
    pass

class QCommandLineOption(simplewrapper):
  """ QCommandLineOption(str)
  QCommandLineOption(Iterable[str])
  QCommandLineOption(str, str, valueName: str = '', defaultValue: str = '')
  QCommandLineOption(Iterable[str], str, valueName: str = '', defaultValue: str = '')
  QCommandLineOption(QCommandLineOption) """

  class Flag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Flags(simplewrapper):
    """ QCommandLineOption.Flags()
    QCommandLineOption.Flags(Union[QCommandLineOption.Flags, QCommandLineOption.Flag])
    QCommandLineOption.Flags(QCommandLineOption.Flags) """

    pass

  HiddenFromHelp = None
  ShortOptionStyle = None

  def defaultValues(self):
    """ defaultValues(self) -> List[str] """
    return ""

  def description(self):
    """ description(self) -> str """
    return ""

  def flags(self):
    """ flags(self) -> QCommandLineOption.Flags """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def names(self):
    """ names(self) -> List[str] """
    return ""

  def setDefaultValue(self, str):
    """ setDefaultValue(self, str) """
    pass

  def setDefaultValues(self, Iterablestr=None):
    """ setDefaultValues(self, Iterable[str]) """
    pass

  def setDescription(self, str):
    """ setDescription(self, str) """
    pass

  def setFlags(self, UnionQCommandLineOption.Flags=None, QCommandLineOption.Flag=None):
    """ setFlags(self, Union[QCommandLineOption.Flags, QCommandLineOption.Flag]) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setValueName(self, str):
    """ setValueName(self, str) """
    pass

  def swap(self, QCommandLineOption):
    """ swap(self, QCommandLineOption) """
    pass

  def valueName(self):
    """ valueName(self) -> str """
    return ""

class QCommandLineParser(simplewrapper):
  """ QCommandLineParser() """

  class OptionsAfterPositionalArgumentsMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ParseAsCompactedShortOptions = None
  ParseAsLongOptions = None
  ParseAsOptions = None
  ParseAsPositionalArguments = None

  class SingleDashWordOptionMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def addHelpOption(self):
    """ addHelpOption(self) -> QCommandLineOption """
    return None

  def addOption(self, QCommandLineOption):
    """ addOption(self, QCommandLineOption) -> bool """
    return None

  def addOptions(self, IterableQCommandLineOption=None):
    """ addOptions(self, Iterable[QCommandLineOption]) -> bool """
    return None

  def addPositionalArgument():
    """ addPositionalArgument(self, str, str, syntax: str = '') """
    pass

  def addVersionOption(self):
    """ addVersionOption(self) -> QCommandLineOption """
    return None

  def applicationDescription(self):
    """ applicationDescription(self) -> str """
    return ""

  def clearPositionalArguments(self):
    """ clearPositionalArguments(self) """
    pass

  def errorText(self):
    """ errorText(self) -> str """
    return ""

  def helpText(self):
    """ helpText(self) -> str """
    return ""

  def isSet(self, str):
    """ isSet(self, str) -> bool
    isSet(self, QCommandLineOption) -> bool """
    return None

  def optionNames(self):
    """ optionNames(self) -> List[str] """
    return ""

  def parse(self, Iterablestr=None):
    """ parse(self, Iterable[str]) -> bool """
    return None

  def positionalArguments(self):
    """ positionalArguments(self) -> List[str] """
    return ""

  def process(self, Iterablestr=None):
    """ process(self, Iterable[str])
    process(self, QCoreApplication) """
    pass

  def setApplicationDescription(self, str):
    """ setApplicationDescription(self, str) """
    pass

  def setOptionsAfterPositionalArgumentsMode(self, arg0):
    """ setOptionsAfterPositionalArgumentsMode(self, QCommandLineParser.OptionsAfterPositionalArgumentsMode) """
    pass

  def setSingleDashWordOptionMode(self, arg0):
    """ setSingleDashWordOptionMode(self, QCommandLineParser.SingleDashWordOptionMode) """
    pass

  def showHelp():
    """ showHelp(self, exitCode: int = 0) """
    pass

  def showVersion(self):
    """ showVersion(self) """
    pass

  def unknownOptionNames(self):
    """ unknownOptionNames(self) -> List[str] """
    return ""

  def value(self, str):
    """ value(self, str) -> str
    value(self, QCommandLineOption) -> str """
    return ""

  def values(self, str):
    """ values(self, str) -> List[str]
    values(self, QCommandLineOption) -> List[str] """
    return ""

class QConcatenateTablesProxyModel(QAbstractItemModel):
  """ QConcatenateTablesProxyModel(parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def addSourceModel(self, QAbstractItemModel):
    """ addSourceModel(self, QAbstractItemModel) """
    pass

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.ItemDataRole.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.ItemDataRole.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def mapFromSource(self, QModelIndex):
    """ mapFromSource(self, QModelIndex) -> QModelIndex """
    return None

  def mapToSource(self, QModelIndex):
    """ mapToSource(self, QModelIndex) -> QModelIndex """
    return None

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeSourceModel(self, QAbstractItemModel):
    """ removeSourceModel(self, QAbstractItemModel) """
    pass

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.ItemDataRole.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QCoreApplication(QObject):
  """ QCoreApplication(List[str]) """

  def aboutToQuit(self):
    """ aboutToQuit(self) [signal] """
    pass

  def addLibraryPath(str):
    """ addLibraryPath(str) """
    pass

  def applicationDirPath():
    """ applicationDirPath() -> str """
    return ""

  def applicationFilePath():
    """ applicationFilePath() -> str """
    return ""

  def applicationName():
    """ applicationName() -> str """
    return ""

  def applicationPid():
    """ applicationPid() -> int """
    return 1

  def applicationVersion():
    """ applicationVersion() -> str """
    return ""

  def arguments():
    """ arguments() -> List[str] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closingDown():
    """ closingDown() -> bool """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventDispatcher():
    """ eventDispatcher() -> QAbstractEventDispatcher """
    return ""

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exec():
    """ exec() -> int """
    return 1

  def exec_():
    """ exec_() -> int """
    return 1

  def exit():
    """ exit(returnCode: int = 0) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush():
    """ flush() """
    pass

  def hasPendingEvents():
    """ hasPendingEvents() -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installNativeEventFilter(self, QAbstractNativeEventFilter):
    """ installNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def installTranslator(QTranslator):
    """ installTranslator(QTranslator) -> bool """
    return None

  def instance():
    """ instance() -> QCoreApplication """
    return None

  def isQuitLockEnabled():
    """ isQuitLockEnabled() -> bool """
    return None

  def isSetuidAllowed():
    """ isSetuidAllowed() -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def libraryPaths():
    """ libraryPaths() -> List[str] """
    return ""

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def notify(self, QObject, QEvent):
    """ notify(self, QObject, QEvent) -> bool """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def organizationDomain():
    """ organizationDomain() -> str """
    return ""

  def organizationName():
    """ organizationName() -> str """
    return ""

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def postEvent():
    """ postEvent(QObject, QEvent, priority: int = Qt.NormalEventPriority) """
    pass

  def processEvents(UnionQEventLoop.ProcessEventsFlags=None, QEventLoop.ProcessEventsFlag=None, int=None):
    """ processEvents(flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents)
    processEvents(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def quit():
    """ quit() """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeLibraryPath(str):
    """ removeLibraryPath(str) """
    pass

  def removeNativeEventFilter(self, QAbstractNativeEventFilter):
    """ removeNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def removePostedEvents():
    """ removePostedEvents(QObject, eventType: int = 0) """
    pass

  def removeTranslator(QTranslator):
    """ removeTranslator(QTranslator) -> bool """
    return None

  def sendEvent(QObject, QEvent):
    """ sendEvent(QObject, QEvent) -> bool """
    return None

  def sendPostedEvents():
    """ sendPostedEvents(receiver: QObject = None, eventType: int = 0) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setApplicationName(str):
    """ setApplicationName(str) """
    pass

  def setApplicationVersion(str):
    """ setApplicationVersion(str) """
    pass

  def setAttribute():
    """ setAttribute(Qt.ApplicationAttribute, on: bool = True) """
    pass

  def setEventDispatcher(QAbstractEventDispatcher):
    """ setEventDispatcher(QAbstractEventDispatcher) """
    pass

  def setLibraryPaths(Iterablestr=None):
    """ setLibraryPaths(Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrganizationDomain(str):
    """ setOrganizationDomain(str) """
    pass

  def setOrganizationName(str):
    """ setOrganizationName(str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setQuitLockEnabled(bool):
    """ setQuitLockEnabled(bool) """
    pass

  def setSetuidAllowed(bool):
    """ setSetuidAllowed(bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startingUp():
    """ startingUp() -> bool """
    return None

  staticMetaObject = None

  def testAttribute(arg0):
    """ testAttribute(Qt.ApplicationAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def translate(str, str, arg0=None, arg1=None):
    """ translate(str, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QCryptographicHash(simplewrapper):
  """ QCryptographicHash(QCryptographicHash.Algorithm) """

  class Algorithm(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Keccak_224 = None
  Keccak_256 = None
  Keccak_384 = None
  Keccak_512 = None
  Md4 = None
  Md5 = None
  Sha1 = None
  Sha224 = None
  Sha256 = None
  Sha384 = None
  Sha3_224 = None
  Sha3_256 = None
  Sha3_384 = None
  Sha3_512 = None
  Sha512 = None

  def addData(self, bytes):
    """ addData(self, bytes)
    addData(self, Union[QByteArray, bytes, bytearray])
    addData(self, QIODevice) -> bool """
    pass

  def hash(UnionQByteArray=None, bytes=None, bytearray=None, QCryptographicHash.Algorithm=None):
    """ hash(Union[QByteArray, bytes, bytearray], QCryptographicHash.Algorithm) -> QByteArray """
    return None

  def hashLength(arg0):
    """ hashLength(QCryptographicHash.Algorithm) -> int """
    return 1

  def reset(self):
    """ reset(self) """
    pass

  def result(self):
    """ result(self) -> QByteArray """
    return None

class QDataStream(simplewrapper):
  """ QDataStream()
  QDataStream(QIODevice)
  QDataStream(QByteArray, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])
  QDataStream(QByteArray) """

  BigEndian = None

  class ByteOrder(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DoublePrecision = None

  class FloatingPointPrecision(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LittleEndian = None
  Ok = None
  Qt_1_0 = None
  Qt_2_0 = None
  Qt_2_1 = None
  Qt_3_0 = None
  Qt_3_1 = None
  Qt_3_3 = None
  Qt_4_0 = None
  Qt_4_1 = None
  Qt_4_2 = None
  Qt_4_3 = None
  Qt_4_4 = None
  Qt_4_5 = None
  Qt_4_6 = None
  Qt_4_7 = None
  Qt_4_8 = None
  Qt_4_9 = None
  Qt_5_0 = None
  Qt_5_1 = None
  Qt_5_10 = None
  Qt_5_11 = None
  Qt_5_12 = None
  Qt_5_13 = None
  Qt_5_2 = None
  Qt_5_3 = None
  Qt_5_4 = None
  Qt_5_5 = None
  Qt_5_6 = None
  Qt_5_7 = None
  Qt_5_8 = None
  Qt_5_9 = None
  ReadCorruptData = None
  ReadPastEnd = None
  SinglePrecision = None

  class Status(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Version(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WriteFailed = None

  def abortTransaction(self):
    """ abortTransaction(self) """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def byteOrder(self):
    """ byteOrder(self) -> QDataStream.ByteOrder """
    return None

  def commitTransaction(self):
    """ commitTransaction(self) -> bool """
    return None

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def floatingPointPrecision(self):
    """ floatingPointPrecision(self) -> QDataStream.FloatingPointPrecision """
    return 1

  def readBool(self):
    """ readBool(self) -> bool """
    return None

  def readBytes(self):
    """ readBytes(self) -> bytes """
    return None

  def readDouble(self):
    """ readDouble(self) -> float """
    return 1.0

  def readFloat(self):
    """ readFloat(self) -> float """
    return 1.0

  def readInt(self):
    """ readInt(self) -> int """
    return 1

  def readInt16(self):
    """ readInt16(self) -> int """
    return 1

  def readInt32(self):
    """ readInt32(self) -> int """
    return 1

  def readInt64(self):
    """ readInt64(self) -> int """
    return 1

  def readInt8(self):
    """ readInt8(self) -> int """
    return 1

  def readQString(self):
    """ readQString(self) -> str """
    return ""

  def readQStringList(self):
    """ readQStringList(self) -> List[str] """
    return ""

  def readQVariant(self):
    """ readQVariant(self) -> Any """
    return None

  def readQVariantHash(self):
    """ readQVariantHash(self) -> Dict[str, Any] """
    return ""

  def readQVariantList(self):
    """ readQVariantList(self) -> List[Any] """
    return None

  def readQVariantMap(self):
    """ readQVariantMap(self) -> Dict[str, Any] """
    return ""

  def readRawData(self, int):
    """ readRawData(self, int) -> bytes """
    return None

  def readString(self):
    """ readString(self) -> bytes """
    return None

  def readUInt16(self):
    """ readUInt16(self) -> int """
    return 1

  def readUInt32(self):
    """ readUInt32(self) -> int """
    return 1

  def readUInt64(self):
    """ readUInt64(self) -> int """
    return 1

  def readUInt8(self):
    """ readUInt8(self) -> int """
    return 1

  def resetStatus(self):
    """ resetStatus(self) """
    pass

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def setByteOrder(self, arg0):
    """ setByteOrder(self, QDataStream.ByteOrder) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setFloatingPointPrecision(self, arg0):
    """ setFloatingPointPrecision(self, QDataStream.FloatingPointPrecision) """
    pass

  def setStatus(self, arg0):
    """ setStatus(self, QDataStream.Status) """
    pass

  def setVersion(self, int):
    """ setVersion(self, int) """
    pass

  def skipRawData(self, int):
    """ skipRawData(self, int) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  def status(self):
    """ status(self) -> QDataStream.Status """
    return None

  def version(self):
    """ version(self) -> int """
    return 1

  def writeBool(self, bool):
    """ writeBool(self, bool) """
    pass

  def writeBytes(self, bytes):
    """ writeBytes(self, bytes) -> QDataStream """
    return None

  def writeDouble(self, float):
    """ writeDouble(self, float) """
    pass

  def writeFloat(self, float):
    """ writeFloat(self, float) """
    pass

  def writeInt(self, int):
    """ writeInt(self, int) """
    pass

  def writeInt16(self, int):
    """ writeInt16(self, int) """
    pass

  def writeInt32(self, int):
    """ writeInt32(self, int) """
    pass

  def writeInt64(self, int):
    """ writeInt64(self, int) """
    pass

  def writeInt8(self, int):
    """ writeInt8(self, int) """
    pass

  def writeQString(self, str):
    """ writeQString(self, str) """
    pass

  def writeQStringList(self, Iterablestr=None):
    """ writeQStringList(self, Iterable[str]) """
    pass

  def writeQVariant(self, Any):
    """ writeQVariant(self, Any) """
    pass

  def writeQVariantHash(self, Dictstr=None, Any=None):
    """ writeQVariantHash(self, Dict[str, Any]) """
    pass

  def writeQVariantList(self, IterableAny=None):
    """ writeQVariantList(self, Iterable[Any]) """
    pass

  def writeQVariantMap(self, Dictstr=None, Any=None):
    """ writeQVariantMap(self, Dict[str, Any]) """
    pass

  def writeRawData(self, bytes):
    """ writeRawData(self, bytes) -> int """
    return 1

  def writeString(self, str):
    """ writeString(self, str) """
    pass

  def writeUInt16(self, int):
    """ writeUInt16(self, int) """
    pass

  def writeUInt32(self, int):
    """ writeUInt32(self, int) """
    pass

  def writeUInt64(self, int):
    """ writeUInt64(self, int) """
    pass

  def writeUInt8(self, int):
    """ writeUInt8(self, int) """
    pass

class QDate(simplewrapper):
  """ QDate()
  QDate(int, int, int)
  QDate(QDate) """

  DateFormat = None

  class MonthNameType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StandaloneFormat = None

  def addDays(self, int):
    """ addDays(self, int) -> QDate """
    return None

  def addMonths(self, int):
    """ addMonths(self, int) -> QDate """
    return None

  def addYears(self, int):
    """ addYears(self, int) -> QDate """
    return None

  def currentDate():
    """ currentDate() -> QDate """
    return None

  def day(self):
    """ day(self) -> int """
    return 1

  def dayOfWeek(self):
    """ dayOfWeek(self) -> int """
    return 1

  def dayOfYear(self):
    """ dayOfYear(self) -> int """
    return 1

  def daysInMonth(self):
    """ daysInMonth(self) -> int """
    return 1

  def daysInYear(self):
    """ daysInYear(self) -> int """
    return 1

  def daysTo(self, UnionQDate=None, datetime.date=None):
    """ daysTo(self, Union[QDate, datetime.date]) -> int """
    return 1

  def fromJulianDay(int):
    """ fromJulianDay(int) -> QDate """
    return None

  def fromString(str, arg0=None):
    """ fromString(str, format: Qt.DateFormat = Qt.TextDate) -> QDate
    fromString(str, str) -> QDate """
    return None

  def getDate(self):
    """ getDate(self) -> Tuple[int, int, int] """
    return 1

  def isLeapYear(int):
    """ isLeapYear(int) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool
    isValid(int, int, int) -> bool """
    return None

  def longDayName(int, arg0=None):
    """ longDayName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str """
    return ""

  def longMonthName(int, arg0=None):
    """ longMonthName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str """
    return ""

  def month(self):
    """ month(self) -> int """
    return 1

  def setDate(self, int, int, int):
    """ setDate(self, int, int, int) -> bool """
    return None

  def shortDayName(int, arg0=None):
    """ shortDayName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str """
    return ""

  def shortMonthName(int, arg0=None):
    """ shortMonthName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str """
    return ""

  def toJulianDay(self):
    """ toJulianDay(self) -> int """
    return 1

  def toPyDate(self):
    """ toPyDate(self) -> datetime.date """
    return None

  def toString(self, arg0=None):
    """ toString(self, format: Qt.DateFormat = Qt.TextDate) -> str
    toString(self, str) -> str """
    return ""

  def weekNumber(self):
    """ weekNumber(self) -> Tuple[int, int] """
    return 1

  def year(self):
    """ year(self) -> int """
    return 1

class QDateTime(simplewrapper):
  """ QDateTime()
  QDateTime(Union[QDateTime, datetime.datetime])
  QDateTime(Union[QDate, datetime.date])
  QDateTime(Union[QDate, datetime.date], Union[QTime, datetime.time], timeSpec: Qt.TimeSpec = Qt.LocalTime)
  QDateTime(int, int, int, int, int, second: int = 0, msec: int = 0, timeSpec: int = 0)
  QDateTime(Union[QDate, datetime.date], Union[QTime, datetime.time], Qt.TimeSpec, int)
  QDateTime(Union[QDate, datetime.date], Union[QTime, datetime.time], QTimeZone) """

  def addDays(self, int):
    """ addDays(self, int) -> QDateTime """
    return None

  def addMSecs(self, int):
    """ addMSecs(self, int) -> QDateTime """
    return None

  def addMonths(self, int):
    """ addMonths(self, int) -> QDateTime """
    return None

  def addSecs(self, int):
    """ addSecs(self, int) -> QDateTime """
    return None

  def addYears(self, int):
    """ addYears(self, int) -> QDateTime """
    return None

  def currentDateTime():
    """ currentDateTime() -> QDateTime """
    return None

  def currentDateTimeUtc():
    """ currentDateTimeUtc() -> QDateTime """
    return None

  def currentMSecsSinceEpoch():
    """ currentMSecsSinceEpoch() -> int """
    return 1

  def currentSecsSinceEpoch():
    """ currentSecsSinceEpoch() -> int """
    return 1

  def date(self):
    """ date(self) -> QDate """
    return None

  def daysTo(self, UnionQDateTime=None, datetime.datetime=None):
    """ daysTo(self, Union[QDateTime, datetime.datetime]) -> int """
    return 1

  def fromMSecsSinceEpoch(int):
    """ fromMSecsSinceEpoch(int) -> QDateTime
    fromMSecsSinceEpoch(int, Qt.TimeSpec, offsetSeconds: int = 0) -> QDateTime
    fromMSecsSinceEpoch(int, QTimeZone) -> QDateTime """
    return None

  def fromSecsSinceEpoch(int, arg0=None, arg1=None):
    """ fromSecsSinceEpoch(int, spec: Qt.TimeSpec = Qt.LocalTime, offsetSeconds: int = 0) -> QDateTime
    fromSecsSinceEpoch(int, QTimeZone) -> QDateTime """
    return None

  def fromString(str, arg0=None):
    """ fromString(str, format: Qt.DateFormat = Qt.TextDate) -> QDateTime
    fromString(str, str) -> QDateTime """
    return None

  def fromTime_t(int):
    """ fromTime_t(int) -> QDateTime
    fromTime_t(int, Qt.TimeSpec, offsetSeconds: int = 0) -> QDateTime
    fromTime_t(int, QTimeZone) -> QDateTime """
    return None

  def isDaylightTime(self):
    """ isDaylightTime(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def msecsTo(self, UnionQDateTime=None, datetime.datetime=None):
    """ msecsTo(self, Union[QDateTime, datetime.datetime]) -> int """
    return 1

  def offsetFromUtc(self):
    """ offsetFromUtc(self) -> int """
    return 1

  def secsTo(self, UnionQDateTime=None, datetime.datetime=None):
    """ secsTo(self, Union[QDateTime, datetime.datetime]) -> int """
    return 1

  def setDate(self, UnionQDate=None, datetime.date=None):
    """ setDate(self, Union[QDate, datetime.date]) """
    pass

  def setMSecsSinceEpoch(self, int):
    """ setMSecsSinceEpoch(self, int) """
    pass

  def setOffsetFromUtc(self, int):
    """ setOffsetFromUtc(self, int) """
    pass

  def setSecsSinceEpoch(self, int):
    """ setSecsSinceEpoch(self, int) """
    pass

  def setTime(self, UnionQTime=None, datetime.time=None):
    """ setTime(self, Union[QTime, datetime.time]) """
    pass

  def setTimeSpec(self, arg0):
    """ setTimeSpec(self, Qt.TimeSpec) """
    pass

  def setTimeZone(self, QTimeZone):
    """ setTimeZone(self, QTimeZone) """
    pass

  def setTime_t(self, int):
    """ setTime_t(self, int) """
    pass

  def swap(self, QDateTime):
    """ swap(self, QDateTime) """
    pass

  def time(self):
    """ time(self) -> QTime """
    return None

  def timeSpec(self):
    """ timeSpec(self) -> Qt.TimeSpec """
    return None

  def timeZone(self):
    """ timeZone(self) -> QTimeZone """
    return None

  def timeZoneAbbreviation(self):
    """ timeZoneAbbreviation(self) -> str """
    return ""

  def toLocalTime(self):
    """ toLocalTime(self) -> QDateTime """
    return None

  def toMSecsSinceEpoch(self):
    """ toMSecsSinceEpoch(self) -> int """
    return 1

  def toOffsetFromUtc(self, int):
    """ toOffsetFromUtc(self, int) -> QDateTime """
    return None

  def toPyDateTime(self):
    """ toPyDateTime(self) -> datetime.datetime """
    return None

  def toSecsSinceEpoch(self):
    """ toSecsSinceEpoch(self) -> int """
    return 1

  def toString(self, arg0=None):
    """ toString(self, format: Qt.DateFormat = Qt.TextDate) -> str
    toString(self, str) -> str """
    return ""

  def toTimeSpec(self, arg0):
    """ toTimeSpec(self, Qt.TimeSpec) -> QDateTime """
    return None

  def toTimeZone(self, QTimeZone):
    """ toTimeZone(self, QTimeZone) -> QDateTime """
    return None

  def toTime_t(self):
    """ toTime_t(self) -> int """
    return 1

  def toUTC(self):
    """ toUTC(self) -> QDateTime """
    return None

class QDeadlineTimer(simplewrapper):
  """ QDeadlineTimer(type: Qt.TimerType = Qt.CoarseTimer)
  QDeadlineTimer(QDeadlineTimer.ForeverConstant, type: Qt.TimerType = Qt.CoarseTimer)
  QDeadlineTimer(int, type: Qt.TimerType = Qt.CoarseTimer)
  QDeadlineTimer(QDeadlineTimer) """

  Forever = None

  class ForeverConstant(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def addNSecs(QDeadlineTimer, int):
    """ addNSecs(QDeadlineTimer, int) -> QDeadlineTimer """
    return None

  def current(arg0=None):
    """ current(type: Qt.TimerType = Qt.CoarseTimer) -> QDeadlineTimer """
    return None

  def deadline(self):
    """ deadline(self) -> int """
    return 1

  def deadlineNSecs(self):
    """ deadlineNSecs(self) -> int """
    return 1

  def hasExpired(self):
    """ hasExpired(self) -> bool """
    return None

  def isForever(self):
    """ isForever(self) -> bool """
    return None

  def remainingTime(self):
    """ remainingTime(self) -> int """
    return 1

  def remainingTimeNSecs(self):
    """ remainingTimeNSecs(self) -> int """
    return 1

  def setDeadline():
    """ setDeadline(self, int, type: Qt.TimerType = Qt.CoarseTimer) """
    pass

  def setPreciseDeadline():
    """ setPreciseDeadline(self, int, nsecs: int = 0, type: Qt.TimerType = Qt.CoarseTimer) """
    pass

  def setPreciseRemainingTime():
    """ setPreciseRemainingTime(self, int, nsecs: int = 0, type: Qt.TimerType = Qt.CoarseTimer) """
    pass

  def setRemainingTime():
    """ setRemainingTime(self, int, type: Qt.TimerType = Qt.CoarseTimer) """
    pass

  def setTimerType(self, arg0):
    """ setTimerType(self, Qt.TimerType) """
    pass

  def swap(self, QDeadlineTimer):
    """ swap(self, QDeadlineTimer) """
    pass

  def timerType(self):
    """ timerType(self) -> Qt.TimerType """
    return None

class QDir(simplewrapper):
  """ QDir(QDir)
  QDir(path: str = '')
  QDir(str, str, sort: QDir.SortFlags = QDir.Name|QDir.IgnoreCase, filters: QDir.Filters = QDir.AllEntries) """

  AccessMask = None
  AllDirs = None
  AllEntries = None
  CaseSensitive = None
  Dirs = None
  DirsFirst = None
  DirsLast = None
  Drives = None
  Executable = None
  Files = None

  class Filter(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Filters(simplewrapper):
    """ QDir.Filters()
    QDir.Filters(Union[QDir.Filters, QDir.Filter])
    QDir.Filters(QDir.Filters) """

    pass

  Hidden = None
  IgnoreCase = None
  LocaleAware = None
  Modified = None
  Name = None
  NoDot = None
  NoDotAndDotDot = None
  NoDotDot = None
  NoFilter = None
  NoSort = None
  NoSymLinks = None
  PermissionMask = None
  Readable = None
  Reversed = None
  Size = None
  SortByMask = None

  class SortFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SortFlags(simplewrapper):
    """ QDir.SortFlags()
    QDir.SortFlags(Union[QDir.SortFlags, QDir.SortFlag])
    QDir.SortFlags(QDir.SortFlags) """

    pass

  System = None
  Time = None
  Type = None
  TypeMask = None
  Unsorted = None
  Writable = None

  def absoluteFilePath(self, str):
    """ absoluteFilePath(self, str) -> str """
    return ""

  def absolutePath(self):
    """ absolutePath(self) -> str """
    return ""

  def addSearchPath(str, str):
    """ addSearchPath(str, str) """
    pass

  def canonicalPath(self):
    """ canonicalPath(self) -> str """
    return ""

  def cd(self, str):
    """ cd(self, str) -> bool """
    return None

  def cdUp(self):
    """ cdUp(self) -> bool """
    return None

  def cleanPath(str):
    """ cleanPath(str) -> str """
    return ""

  def count(self):
    """ count(self) -> int """
    return 1

  def current():
    """ current() -> QDir """
    return None

  def currentPath():
    """ currentPath() -> str """
    return ""

  def dirName(self):
    """ dirName(self) -> str """
    return ""

  def drives():
    """ drives() -> List[QFileInfo] """
    return None

  def entryInfoList(self, arg0=None, arg1=None, arg2=None, arg3=None):
    """ entryInfoList(self, filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[QFileInfo]
    entryInfoList(self, Iterable[str], filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[QFileInfo] """
    return None

  def entryList(self, arg0=None, arg1=None, arg2=None, arg3=None):
    """ entryList(self, filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[str]
    entryList(self, Iterable[str], filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[str] """
    return ""

  def exists(self):
    """ exists(self) -> bool
    exists(self, str) -> bool """
    return None

  def filePath(self, str):
    """ filePath(self, str) -> str """
    return ""

  def filter(self):
    """ filter(self) -> QDir.Filters """
    return None

  def fromNativeSeparators(str):
    """ fromNativeSeparators(str) -> str """
    return ""

  def home():
    """ home() -> QDir """
    return None

  def homePath():
    """ homePath() -> str """
    return ""

  def isAbsolute(self):
    """ isAbsolute(self) -> bool """
    return None

  def isAbsolutePath(str):
    """ isAbsolutePath(str) -> bool """
    return None

  def isEmpty(self, arg0=None, arg1=None):
    """ isEmpty(self, filters: Union[QDir.Filters, QDir.Filter] = QDir.AllEntries|QDir.NoDotAndDotDot) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isRelative(self):
    """ isRelative(self) -> bool """
    return None

  def isRelativePath(str):
    """ isRelativePath(str) -> bool """
    return None

  def isRoot(self):
    """ isRoot(self) -> bool """
    return None

  def listSeparator():
    """ listSeparator() -> str """
    return ""

  def makeAbsolute(self):
    """ makeAbsolute(self) -> bool """
    return None

  def match(Iterablestr=None, str=None):
    """ match(Iterable[str], str) -> bool
    match(str, str) -> bool """
    return None

  def mkdir(self, str):
    """ mkdir(self, str) -> bool """
    return None

  def mkpath(self, str):
    """ mkpath(self, str) -> bool """
    return None

  def nameFilters(self):
    """ nameFilters(self) -> List[str] """
    return ""

  def nameFiltersFromString(str):
    """ nameFiltersFromString(str) -> List[str] """
    return ""

  def path(self):
    """ path(self) -> str """
    return ""

  def refresh(self):
    """ refresh(self) """
    pass

  def relativeFilePath(self, str):
    """ relativeFilePath(self, str) -> str """
    return ""

  def remove(self, str):
    """ remove(self, str) -> bool """
    return None

  def removeRecursively(self):
    """ removeRecursively(self) -> bool """
    return None

  def rename(self, str, str):
    """ rename(self, str, str) -> bool """
    return None

  def rmdir(self, str):
    """ rmdir(self, str) -> bool """
    return None

  def rmpath(self, str):
    """ rmpath(self, str) -> bool """
    return None

  def root():
    """ root() -> QDir """
    return None

  def rootPath():
    """ rootPath() -> str """
    return ""

  def searchPaths(str):
    """ searchPaths(str) -> List[str] """
    return ""

  def separator():
    """ separator() -> str """
    return ""

  def setCurrent(str):
    """ setCurrent(str) -> bool """
    return None

  def setFilter(self, UnionQDir.Filters=None, QDir.Filter=None):
    """ setFilter(self, Union[QDir.Filters, QDir.Filter]) """
    pass

  def setNameFilters(self, Iterablestr=None):
    """ setNameFilters(self, Iterable[str]) """
    pass

  def setPath(self, str):
    """ setPath(self, str) """
    pass

  def setSearchPaths(str, Iterablestr=None):
    """ setSearchPaths(str, Iterable[str]) """
    pass

  def setSorting(self, UnionQDir.SortFlags=None, QDir.SortFlag=None):
    """ setSorting(self, Union[QDir.SortFlags, QDir.SortFlag]) """
    pass

  def sorting(self):
    """ sorting(self) -> QDir.SortFlags """
    return None

  def swap(self, QDir):
    """ swap(self, QDir) """
    pass

  def temp():
    """ temp() -> QDir """
    return None

  def tempPath():
    """ tempPath() -> str """
    return ""

  def toNativeSeparators(str):
    """ toNativeSeparators(str) -> str """
    return ""

class QDirIterator(simplewrapper):
  """ QDirIterator(QDir, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags)
  QDirIterator(str, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags)
  QDirIterator(str, QDir.Filters, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags)
  QDirIterator(str, Iterable[str], filters: QDir.Filters = QDir.NoFilter, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags) """

  FollowSymlinks = None

  class IteratorFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class IteratorFlags(simplewrapper):
    """ QDirIterator.IteratorFlags()
    QDirIterator.IteratorFlags(Union[QDirIterator.IteratorFlags, QDirIterator.IteratorFlag])
    QDirIterator.IteratorFlags(QDirIterator.IteratorFlags) """

    pass

  NoIteratorFlags = None
  Subdirectories = None

  def fileInfo(self):
    """ fileInfo(self) -> QFileInfo """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def filePath(self):
    """ filePath(self) -> str """
    return ""

  def hasNext(self):
    """ hasNext(self) -> bool """
    return None

  def next(self):
    """ next(self) -> str """
    return ""

  def path(self):
    """ path(self) -> str """
    return ""

class QDynamicPropertyChangeEvent(QEvent):
  """ QDynamicPropertyChangeEvent(Union[QByteArray, bytes, bytearray])
  QDynamicPropertyChangeEvent(QDynamicPropertyChangeEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def propertyName(self):
    """ propertyName(self) -> QByteArray """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QEasingCurve(simplewrapper):
  """ QEasingCurve(type: QEasingCurve.Type = QEasingCurve.Linear)
  QEasingCurve(Union[QEasingCurve, QEasingCurve.Type]) """

  BezierSpline = None
  CosineCurve = None
  Custom = None
  InBack = None
  InBounce = None
  InCirc = None
  InCubic = None
  InCurve = None
  InElastic = None
  InExpo = None
  InOutBack = None
  InOutBounce = None
  InOutCirc = None
  InOutCubic = None
  InOutElastic = None
  InOutExpo = None
  InOutQuad = None
  InOutQuart = None
  InOutQuint = None
  InOutSine = None
  InQuad = None
  InQuart = None
  InQuint = None
  InSine = None
  Linear = None
  OutBack = None
  OutBounce = None
  OutCirc = None
  OutCubic = None
  OutCurve = None
  OutElastic = None
  OutExpo = None
  OutInBack = None
  OutInBounce = None
  OutInCirc = None
  OutInCubic = None
  OutInElastic = None
  OutInExpo = None
  OutInQuad = None
  OutInQuart = None
  OutInQuint = None
  OutInSine = None
  OutQuad = None
  OutQuart = None
  OutQuint = None
  OutSine = None
  SineCurve = None
  TCBSpline = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def addCubicBezierSegment(self, UnionQPointF=None, QPoint=None, UnionQPointF=None, QPoint=None, UnionQPointF=None, QPoint=None):
    """ addCubicBezierSegment(self, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint]) """
    pass

  def addTCBSegment(self, UnionQPointF=None, QPoint=None, float=None, float=None, float=None):
    """ addTCBSegment(self, Union[QPointF, QPoint], float, float, float) """
    pass

  def amplitude(self):
    """ amplitude(self) -> float """
    return 1.0

  def customType(self):
    """ customType(self) -> Callable[[float], float] """
    return 1.0

  def overshoot(self):
    """ overshoot(self) -> float """
    return 1.0

  def period(self):
    """ period(self) -> float """
    return 1.0

  def setAmplitude(self, float):
    """ setAmplitude(self, float) """
    pass

  def setCustomType(self, Callablefloat=None, float=None):
    """ setCustomType(self, Callable[[float], float]) """
    pass

  def setOvershoot(self, float):
    """ setOvershoot(self, float) """
    pass

  def setPeriod(self, float):
    """ setPeriod(self, float) """
    pass

  def setType(self, arg0):
    """ setType(self, QEasingCurve.Type) """
    pass

  def swap(self, QEasingCurve):
    """ swap(self, QEasingCurve) """
    pass

  def toCubicSpline(self):
    """ toCubicSpline(self) -> List[QPointF] """
    return 1

  def type(self):
    """ type(self) -> QEasingCurve.Type """
    return None

  def valueForProgress(self, float):
    """ valueForProgress(self, float) -> float """
    return 1.0

class QElapsedTimer(simplewrapper):
  """ QElapsedTimer()
  QElapsedTimer(QElapsedTimer) """

  class ClockType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MachAbsoluteTime = None
  MonotonicClock = None
  PerformanceCounter = None
  SystemTime = None
  TickCounter = None

  def clockType():
    """ clockType() -> QElapsedTimer.ClockType """
    return None

  def elapsed(self):
    """ elapsed(self) -> int """
    return 1

  def hasExpired(self, int):
    """ hasExpired(self, int) -> bool """
    return None

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isMonotonic():
    """ isMonotonic() -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def msecsSinceReference(self):
    """ msecsSinceReference(self) -> int """
    return 1

  def msecsTo(self, QElapsedTimer):
    """ msecsTo(self, QElapsedTimer) -> int """
    return 1

  def nsecsElapsed(self):
    """ nsecsElapsed(self) -> int """
    return 1

  def restart(self):
    """ restart(self) -> int """
    return 1

  def secsTo(self, QElapsedTimer):
    """ secsTo(self, QElapsedTimer) -> int """
    return 1

  def start(self):
    """ start(self) """
    pass

class QEvent(wrapper):
  """ QEvent(QEvent.Type)
  QEvent(QEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QEventLoop(QObject):
  """ QEventLoop(parent: QObject = None) """

  AllEvents = None
  ExcludeSocketNotifiers = None
  ExcludeUserInputEvents = None

  class ProcessEventsFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ProcessEventsFlags(simplewrapper):
    """ QEventLoop.ProcessEventsFlags()
    QEventLoop.ProcessEventsFlags(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag])
    QEventLoop.ProcessEventsFlags(QEventLoop.ProcessEventsFlags) """

    pass

  WaitForMoreEvents = None
  X11ExcludeTimers = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exec(self, arg0=None):
    """ exec(self, flags: QEventLoop.ProcessEventsFlags = QEventLoop.AllEvents) -> int """
    return 1

  def exec_(self, arg0=None):
    """ exec_(self, flags: QEventLoop.ProcessEventsFlags = QEventLoop.AllEvents) -> int """
    return 1

  def exit():
    """ exit(self, returnCode: int = 0) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isRunning(self):
    """ isRunning(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def processEvents(self, arg0=None, arg1=None):
    """ processEvents(self, flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents) -> bool
    processEvents(self, Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int) """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def quit(self):
    """ quit(self) """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def wakeUp(self):
    """ wakeUp(self) """
    pass

class QEventLoopLocker(simplewrapper):
  """ QEventLoopLocker()
  QEventLoopLocker(QEventLoop)
  QEventLoopLocker(QThread) """

  pass

class QEventTransition(QAbstractTransition):
  """ QEventTransition(sourceState: QState = None)
  QEventTransition(QObject, QEvent.Type, sourceState: QState = None) """

  ExternalTransition = None
  InternalTransition = None
  def addAnimation(self, QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def animations(self):
    """ animations(self) -> List[QAbstractAnimation] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def eventSource(self):
    """ eventSource(self) -> QObject """
    return None

  def eventTest(self, QEvent):
    """ eventTest(self, QEvent) -> bool """
    return None

  def eventType(self):
    """ eventType(self) -> QEvent.Type """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onTransition(self, QEvent):
    """ onTransition(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEventSource(self, QObject):
    """ setEventSource(self, QObject) """
    pass

  def setEventType(self, arg0):
    """ setEventType(self, QEvent.Type) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTargetState(self, QAbstractState):
    """ setTargetState(self, QAbstractState) """
    pass

  def setTargetStates(self, IterableQAbstractState=None):
    """ setTargetStates(self, Iterable[QAbstractState]) """
    pass

  def setTransitionType(self, arg0):
    """ setTransitionType(self, QAbstractTransition.TransitionType) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sourceState(self):
    """ sourceState(self) -> QState """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def targetState(self):
    """ targetState(self) -> QAbstractState """
    return ""

  def targetStateChanged(self):
    """ targetStateChanged(self) [signal] """
    pass

  def targetStates(self):
    """ targetStates(self) -> List[QAbstractState] """
    return ""

  def targetStatesChanged(self):
    """ targetStatesChanged(self) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transitionType(self):
    """ transitionType(self) -> QAbstractTransition.TransitionType """
    return ""

  def triggered(self):
    """ triggered(self) [signal] """
    pass

class QFile(QFileDevice):
  """ QFile()
  QFile(str)
  QFile(QObject)
  QFile(str, QObject) """

  AbortError = None
  Append = None
  AutoCloseHandle = None
  CopyError = None
  DontCloseHandle = None
  ExeGroup = None
  ExeOther = None
  ExeOwner = None
  ExeUser = None
  ExistingOnly = None
  FatalError = None
  FileAccessTime = None
  FileBirthTime = None

  class FileError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FileHandleFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FileHandleFlags(simplewrapper):
    """ QFileDevice.FileHandleFlags()
    QFileDevice.FileHandleFlags(Union[QFileDevice.FileHandleFlags, QFileDevice.FileHandleFlag])
    QFileDevice.FileHandleFlags(QFileDevice.FileHandleFlags) """

    pass

  FileMetadataChangeTime = None
  FileModificationTime = None

  class FileTime(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MapPrivateOption = None

  class MemoryMapFlags(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NewOnly = None
  NoError = None
  NoOptions = None
  NotOpen = None
  OpenError = None
  class Permission(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Permissions(simplewrapper):
    """ QFileDevice.Permissions()
    QFileDevice.Permissions(Union[QFileDevice.Permissions, QFileDevice.Permission])
    QFileDevice.Permissions(QFileDevice.Permissions) """

    pass

  PermissionsError = None
  PositionError = None
  ReadError = None
  ReadGroup = None
  ReadOnly = None
  ReadOther = None
  ReadOwner = None
  ReadUser = None
  ReadWrite = None
  RemoveError = None
  RenameError = None
  ResizeError = None
  ResourceError = None
  Text = None
  TimeOutError = None
  Truncate = None
  Unbuffered = None
  UnspecifiedError = None
  WriteError = None
  WriteGroup = None
  WriteOnly = None
  WriteOther = None
  WriteOwner = None
  WriteUser = None

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def copy(self, str):
    """ copy(self, str) -> bool
    copy(str, str) -> bool """
    return None

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def decodeName(UnionQByteArray=None, bytes=None, bytearray=None):
    """ decodeName(Union[QByteArray, bytes, bytearray]) -> str
    decodeName(str) -> str """
    return ""

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeName(str):
    """ encodeName(str) -> QByteArray """
    return None

  def error(self):
    """ error(self) -> QFileDevice.FileError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exists(self):
    """ exists(self) -> bool
    exists(str) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def fileTime(self, arg0):
    """ fileTime(self, QFileDevice.FileTime) -> QDateTime """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def handle(self):
    """ handle(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def link(self, str):
    """ link(self, str) -> bool
    link(str, str) -> bool """
    return None

  def map(self, int, int, arg0=None):
    """ map(self, int, int, flags: QFileDevice.MemoryMapFlags = QFileDevice.NoOptions) -> sip.voidptr """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool
    open(self, int, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag], handleFlags: Union[QFileDevice.FileHandleFlags, QFileDevice.FileHandleFlag] = QFileDevice.DontCloseHandle) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def permissions(self):
    """ permissions(self) -> QFileDevice.Permissions
    permissions(str) -> QFileDevice.Permissions """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData():
    pass

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def remove(self):
    """ remove(self) -> bool
    remove(str) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def rename(self, str):
    """ rename(self, str) -> bool
    rename(str, str) -> bool """
    return None

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resize(self, int):
    """ resize(self, int) -> bool
    resize(str, int) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString():
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFileTime(self, UnionQDateTime=None, datetime.datetime=None, QFileDevice.FileTime=None):
    """ setFileTime(self, Union[QDateTime, datetime.datetime], QFileDevice.FileTime) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPermissions(self, UnionQFileDevice.Permissions=None, QFileDevice.Permission=None):
    """ setPermissions(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool
    setPermissions(str, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool """
    return None

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  staticMetaObject = None

  def symLinkTarget(self):
    """ symLinkTarget(self) -> str
    symLinkTarget(str) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def unmap(self, arg0):
    """ unmap(self, sip.voidptr) -> bool """
    return None

  def unsetError(self):
    """ unsetError(self) """
    pass

  def waitForBytesWritten(self, int):
    """ waitForBytesWritten(self, int) -> bool """
    return None

  def waitForReadyRead(self, int):
    """ waitForReadyRead(self, int) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData():
    pass

class QFileDevice(QIODevice):

  AbortError = None
  Append = None
  AutoCloseHandle = None
  CopyError = None
  DontCloseHandle = None
  ExeGroup = None
  ExeOther = None
  ExeOwner = None
  ExeUser = None
  ExistingOnly = None
  FatalError = None
  FileAccessTime = None
  FileBirthTime = None
  FileMetadataChangeTime = None
  FileModificationTime = None
  MapPrivateOption = None
  NewOnly = None
  NoError = None
  NoOptions = None
  NotOpen = None
  OpenError = None
  PermissionsError = None
  PositionError = None
  ReadError = None
  ReadGroup = None
  ReadOnly = None
  ReadOther = None
  ReadOwner = None
  ReadUser = None
  ReadWrite = None
  RemoveError = None
  RenameError = None
  ResizeError = None
  ResourceError = None
  Text = None
  TimeOutError = None
  Truncate = None
  Unbuffered = None
  UnspecifiedError = None
  WriteError = None
  WriteGroup = None
  WriteOnly = None
  WriteOther = None
  WriteOwner = None
  WriteUser = None

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QFileDevice.FileError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def fileTime(self, arg0):
    """ fileTime(self, QFileDevice.FileTime) -> QDateTime """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def handle(self):
    """ handle(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def map(self, int, int, arg0=None):
    """ map(self, int, int, flags: QFileDevice.MemoryMapFlags = QFileDevice.NoOptions) -> sip.voidptr """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def permissions(self):
    """ permissions(self) -> QFileDevice.Permissions """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData(self, int):
    """ readData(self, int) -> bytes """
    return None

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData(self, int):
    """ readLineData(self, int) -> bytes """
    return None

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resize(self, int):
    """ resize(self, int) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString(self, str):
    """ setErrorString(self, str) """
    pass

  def setFileTime(self, UnionQDateTime=None, datetime.datetime=None, QFileDevice.FileTime=None):
    """ setFileTime(self, Union[QDateTime, datetime.datetime], QFileDevice.FileTime) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ setOpenMode(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPermissions(self, UnionQFileDevice.Permissions=None, QFileDevice.Permission=None):
    """ setPermissions(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool """
    return None

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def unmap(self, arg0):
    """ unmap(self, sip.voidptr) -> bool """
    return None

  def unsetError(self):
    """ unsetError(self) """
    pass

  def waitForBytesWritten(self, int):
    """ waitForBytesWritten(self, int) -> bool """
    return None

  def waitForReadyRead(self, int):
    """ waitForReadyRead(self, int) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QFileInfo(simplewrapper):
  """ QFileInfo()
  QFileInfo(str)
  QFileInfo(QFile)
  QFileInfo(QDir, str)
  QFileInfo(QFileInfo) """

  def absoluteDir(self):
    """ absoluteDir(self) -> QDir """
    return None

  def absoluteFilePath(self):
    """ absoluteFilePath(self) -> str """
    return ""

  def absolutePath(self):
    """ absolutePath(self) -> str """
    return ""

  def baseName(self):
    """ baseName(self) -> str """
    return ""

  def birthTime(self):
    """ birthTime(self) -> QDateTime """
    return None

  def bundleName(self):
    """ bundleName(self) -> str """
    return ""

  def caching(self):
    """ caching(self) -> bool """
    return None

  def canonicalFilePath(self):
    """ canonicalFilePath(self) -> str """
    return ""

  def canonicalPath(self):
    """ canonicalPath(self) -> str """
    return ""

  def completeBaseName(self):
    """ completeBaseName(self) -> str """
    return ""

  def completeSuffix(self):
    """ completeSuffix(self) -> str """
    return ""

  def created(self):
    """ created(self) -> QDateTime """
    return None

  def dir(self):
    """ dir(self) -> QDir """
    return None

  def exists(self):
    """ exists(self) -> bool
    exists(str) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def filePath(self):
    """ filePath(self) -> str """
    return ""

  def fileTime(self, arg0):
    """ fileTime(self, QFileDevice.FileTime) -> QDateTime """
    return None

  def group(self):
    """ group(self) -> str """
    return ""

  def groupId(self):
    """ groupId(self) -> int """
    return 1

  def isAbsolute(self):
    """ isAbsolute(self) -> bool """
    return None

  def isBundle(self):
    """ isBundle(self) -> bool """
    return None

  def isDir(self):
    """ isDir(self) -> bool """
    return None

  def isExecutable(self):
    """ isExecutable(self) -> bool """
    return None

  def isFile(self):
    """ isFile(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isNativePath(self):
    """ isNativePath(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isRelative(self):
    """ isRelative(self) -> bool """
    return None

  def isRoot(self):
    """ isRoot(self) -> bool """
    return None

  def isSymLink(self):
    """ isSymLink(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def lastModified(self):
    """ lastModified(self) -> QDateTime """
    return None

  def lastRead(self):
    """ lastRead(self) -> QDateTime """
    return None

  def makeAbsolute(self):
    """ makeAbsolute(self) -> bool """
    return None

  def metadataChangeTime(self):
    """ metadataChangeTime(self) -> QDateTime """
    return None

  def owner(self):
    """ owner(self) -> str """
    return ""

  def ownerId(self):
    """ ownerId(self) -> int """
    return 1

  def path(self):
    """ path(self) -> str """
    return ""

  def permission(self, UnionQFileDevice.Permissions=None, QFileDevice.Permission=None):
    """ permission(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool """
    return None

  def permissions(self):
    """ permissions(self) -> QFileDevice.Permissions """
    return None

  def refresh(self):
    """ refresh(self) """
    pass

  def setCaching(self, bool):
    """ setCaching(self, bool) """
    pass

  def setFile(self, str):
    """ setFile(self, str)
    setFile(self, QFile)
    setFile(self, QDir, str) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def suffix(self):
    """ suffix(self) -> str """
    return ""

  def swap(self, QFileInfo):
    """ swap(self, QFileInfo) """
    pass

  def symLinkTarget(self):
    """ symLinkTarget(self) -> str """
    return ""

class QFileSelector(QObject):
  """ QFileSelector(parent: QObject = None) """

  def allSelectors(self):
    """ allSelectors(self) -> List[str] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def extraSelectors(self):
    """ extraSelectors(self) -> List[str] """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def select(self, str):
    """ select(self, str) -> str
    select(self, QUrl) -> QUrl """
    return ""

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setExtraSelectors(self, Iterablestr=None):
    """ setExtraSelectors(self, Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QFileSystemWatcher(QObject):
  """ QFileSystemWatcher(parent: QObject = None)
  QFileSystemWatcher(Iterable[str], parent: QObject = None) """

  def addPath(self, str):
    """ addPath(self, str) -> bool """
    return None

  def addPaths(self, Iterablestr=None):
    """ addPaths(self, Iterable[str]) -> List[str] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def directories(self):
    """ directories(self) -> List[str] """
    return ""

  def directoryChanged(self, str):
    """ directoryChanged(self, str) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileChanged(self, str):
    """ fileChanged(self, str) [signal] """
    pass

  def files(self):
    """ files(self) -> List[str] """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removePath(self, str):
    """ removePath(self, str) -> bool """
    return None

  def removePaths(self, Iterablestr=None):
    """ removePaths(self, Iterable[str]) -> List[str] """
    return ""

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QFinalState(QAbstractState):
  """ QFinalState(parent: QState = None) """

  def active(self):
    """ active(self) -> bool """
    return None

  def activeChanged(self, bool):
    """ activeChanged(self, bool) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def entered(self):
    """ entered(self) [signal] """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exited(self):
    """ exited(self) [signal] """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onEntry(self, QEvent):
    """ onEntry(self, QEvent) """
    pass

  def onExit(self, QEvent):
    """ onExit(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentState(self):
    """ parentState(self) -> QState """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QGenericArgument(simplewrapper):

  pass

class QGenericReturnArgument(simplewrapper):

  pass

class QHistoryState(QAbstractState):
  """ QHistoryState(parent: QState = None)
  QHistoryState(QHistoryState.HistoryType, parent: QState = None) """

  DeepHistory = None

  class HistoryType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ShallowHistory = None

  def active(self):
    """ active(self) -> bool """
    return None

  def activeChanged(self, bool):
    """ activeChanged(self, bool) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def defaultState(self):
    """ defaultState(self) -> QAbstractState """
    return ""

  def defaultStateChanged(self):
    """ defaultStateChanged(self) [signal] """
    pass

  def defaultTransition(self):
    """ defaultTransition(self) -> QAbstractTransition """
    return ""

  def defaultTransitionChanged(self):
    """ defaultTransitionChanged(self) [signal] """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def entered(self):
    """ entered(self) [signal] """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exited(self):
    """ exited(self) [signal] """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def historyType(self):
    """ historyType(self) -> QHistoryState.HistoryType """
    return None

  def historyTypeChanged(self):
    """ historyTypeChanged(self) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onEntry(self, QEvent):
    """ onEntry(self, QEvent) """
    pass

  def onExit(self, QEvent):
    """ onExit(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentState(self):
    """ parentState(self) -> QState """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setDefaultState(self, QAbstractState):
    """ setDefaultState(self, QAbstractState) """
    pass

  def setDefaultTransition(self, QAbstractTransition):
    """ setDefaultTransition(self, QAbstractTransition) """
    pass

  def setHistoryType(self, arg0):
    """ setHistoryType(self, QHistoryState.HistoryType) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QIODevice(QObject):
  """ QIODevice()
  QIODevice(QObject) """

  Append = None
  ExistingOnly = None
  NewOnly = None
  NotOpen = None
  ReadOnly = None
  ReadWrite = None
  Text = None
  Truncate = None
  Unbuffered = None
  WriteOnly = None

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData(self, int):
    """ readData(self, int) -> bytes """
    return None

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData(self, int):
    """ readLineData(self, int) -> bytes """
    return None

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString(self, str):
    """ setErrorString(self, str) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ setOpenMode(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, int):
    """ waitForBytesWritten(self, int) -> bool """
    return None

  def waitForReadyRead(self, int):
    """ waitForReadyRead(self, int) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QIdentityProxyModel(QAbstractProxyModel):
  """ QIdentityProxyModel(parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def mapFromSource(self, QModelIndex):
    """ mapFromSource(self, QModelIndex) -> QModelIndex """
    return None

  def mapSelectionFromSource(self, QItemSelection):
    """ mapSelectionFromSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapSelectionToSource(self, QItemSelection):
    """ mapSelectionToSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapToSource(self, QModelIndex):
    """ mapToSource(self, QModelIndex) -> QModelIndex """
    return None

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSourceModel(self, QAbstractItemModel):
    """ setSourceModel(self, QAbstractItemModel) """
    pass

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def sourceModel(self):
    """ sourceModel(self) -> QAbstractItemModel """
    return ""

  def sourceModelChanged(self):
    """ sourceModelChanged(self) [signal] """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QItemSelection(simplewrapper):
  """ QItemSelection()
  QItemSelection(QModelIndex, QModelIndex)
  QItemSelection(QItemSelection) """

  def append(self, QItemSelectionRange):
    """ append(self, QItemSelectionRange) """
    pass

  def clear(self):
    """ clear(self) """
    pass

  def contains(self, QModelIndex):
    """ contains(self, QModelIndex) -> bool """
    return None

  def count(self, QItemSelectionRange):
    """ count(self, QItemSelectionRange) -> int
    count(self) -> int """
    return 1

  def first(self):
    """ first(self) -> QItemSelectionRange """
    return None

  def indexOf(self, QItemSelectionRange, arg0=None):
    """ indexOf(self, QItemSelectionRange, from_: int = 0) -> int """
    return 1

  def indexes(self):
    """ indexes(self) -> List[QModelIndex] """
    return None

  def insert(self, int, QItemSelectionRange):
    """ insert(self, int, QItemSelectionRange) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def last(self):
    """ last(self) -> QItemSelectionRange """
    return None

  def lastIndexOf(self, QItemSelectionRange, arg0=None):
    """ lastIndexOf(self, QItemSelectionRange, from_: int = -1) -> int """
    return 1

  def merge(self, QItemSelection, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ merge(self, QItemSelection, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def move(self, int, int):
    """ move(self, int, int) """
    pass

  def prepend(self, QItemSelectionRange):
    """ prepend(self, QItemSelectionRange) """
    pass

  def removeAll(self, QItemSelectionRange):
    """ removeAll(self, QItemSelectionRange) -> int """
    return 1

  def removeAt(self, int):
    """ removeAt(self, int) """
    pass

  def replace(self, int, QItemSelectionRange):
    """ replace(self, int, QItemSelectionRange) """
    pass

  def select(self, QModelIndex, QModelIndex):
    """ select(self, QModelIndex, QModelIndex) """
    pass

  def split(QItemSelectionRange, QItemSelectionRange, QItemSelection):
    """ split(QItemSelectionRange, QItemSelectionRange, QItemSelection) """
    pass

  def swap(self, int, int):
    """ swap(self, int, int) """
    pass

  def takeAt(self, int):
    """ takeAt(self, int) -> QItemSelectionRange """
    return None

  def takeFirst(self):
    """ takeFirst(self) -> QItemSelectionRange """
    return None

  def takeLast(self):
    """ takeLast(self) -> QItemSelectionRange """
    return None

class QItemSelectionModel(QObject):
  """ QItemSelectionModel(model: QAbstractItemModel = None)
  QItemSelectionModel(QAbstractItemModel, QObject) """

  Clear = None
  ClearAndSelect = None
  Columns = None
  Current = None
  Deselect = None
  NoUpdate = None
  Rows = None
  Select = None
  SelectCurrent = None

  class SelectionFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SelectionFlags(simplewrapper):
    """ QItemSelectionModel.SelectionFlags()
    QItemSelectionModel.SelectionFlags(Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])
    QItemSelectionModel.SelectionFlags(QItemSelectionModel.SelectionFlags) """

    pass

  Toggle = None
  ToggleCurrent = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def clearCurrentIndex(self):
    """ clearCurrentIndex(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def columnIntersectsSelection(self, int, QModelIndex):
    """ columnIntersectsSelection(self, int, QModelIndex) -> bool """
    return None

  def connectNotify():
    pass

  def currentChanged(self, QModelIndex, QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) [signal] """
    pass

  def currentColumnChanged(self, QModelIndex, QModelIndex):
    """ currentColumnChanged(self, QModelIndex, QModelIndex) [signal] """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return None

  def currentRowChanged(self, QModelIndex, QModelIndex):
    """ currentRowChanged(self, QModelIndex, QModelIndex) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def emitSelectionChanged(self, QItemSelection, QItemSelection):
    """ emitSelectionChanged(self, QItemSelection, QItemSelection) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hasSelection(self):
    """ hasSelection(self) -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isColumnSelected(self, int, QModelIndex):
    """ isColumnSelected(self, int, QModelIndex) -> bool """
    return None

  def isRowSelected(self, int, QModelIndex):
    """ isRowSelected(self, int, QModelIndex) -> bool """
    return None

  def isSelected(self, QModelIndex):
    """ isSelected(self, QModelIndex) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return ""

  def modelChanged(self, QAbstractItemModel):
    """ modelChanged(self, QAbstractItemModel) [signal] """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def rowIntersectsSelection(self, int, QModelIndex):
    """ rowIntersectsSelection(self, int, QModelIndex) -> bool """
    return None

  def select(self, QModelIndex, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ select(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])
    select(self, QItemSelection, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def selectedColumns(self, arg0=None):
    """ selectedColumns(self, row: int = 0) -> List[QModelIndex] """
    return None

  def selectedIndexes(self):
    """ selectedIndexes(self) -> List[QModelIndex] """
    return None

  def selectedRows(self, arg0=None):
    """ selectedRows(self, column: int = 0) -> List[QModelIndex] """
    return None

  def selection(self):
    """ selection(self) -> QItemSelection """
    return None

  def selectionChanged(self, QItemSelection, QItemSelection):
    """ selectionChanged(self, QItemSelection, QItemSelection) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentIndex(self, QModelIndex, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setCurrentIndex(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setModel(self, QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QItemSelectionRange(simplewrapper):
  """ QItemSelectionRange()
  QItemSelectionRange(QItemSelectionRange)
  QItemSelectionRange(QModelIndex, QModelIndex)
  QItemSelectionRange(QModelIndex) """

  def bottom(self):
    """ bottom(self) -> int """
    return 1

  def bottomRight(self):
    """ bottomRight(self) -> QPersistentModelIndex """
    return None

  def contains(self, QModelIndex):
    """ contains(self, QModelIndex) -> bool
    contains(self, int, int, QModelIndex) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def indexes(self):
    """ indexes(self) -> List[QModelIndex] """
    return None

  def intersected(self, QItemSelectionRange):
    """ intersected(self, QItemSelectionRange) -> QItemSelectionRange """
    return None

  def intersects(self, QItemSelectionRange):
    """ intersects(self, QItemSelectionRange) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def left(self):
    """ left(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return ""

  def parent(self):
    """ parent(self) -> QModelIndex """
    return None

  def right(self):
    """ right(self) -> int """
    return 1

  def swap(self, QItemSelectionRange):
    """ swap(self, QItemSelectionRange) """
    pass

  def top(self):
    """ top(self) -> int """
    return 1

  def topLeft(self):
    """ topLeft(self) -> QPersistentModelIndex """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

class QJsonDocument(simplewrapper):
  """ QJsonDocument()
  QJsonDocument(Dict[str, QJsonValue])
  QJsonDocument(Iterable[Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]])
  QJsonDocument(QJsonDocument) """

  BypassValidation = None
  Compact = None

  class DataValidation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Indented = None

  class JsonFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Validate = None

  def array(self):
    """ array(self) -> List[QJsonValue] """
    return None

  def fromBinaryData(UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ fromBinaryData(Union[QByteArray, bytes, bytearray], validation: QJsonDocument.DataValidation = QJsonDocument.Validate) -> QJsonDocument """
    return None

  def fromJson(UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ fromJson(Union[QByteArray, bytes, bytearray], error: QJsonParseError = None) -> QJsonDocument """
    return None

  def fromRawData(str, int, arg0=None):
    """ fromRawData(str, int, validation: QJsonDocument.DataValidation = QJsonDocument.Validate) -> QJsonDocument """
    return None

  def fromVariant(Any):
    """ fromVariant(Any) -> QJsonDocument """
    return None

  def isArray(self):
    """ isArray(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isObject(self):
    """ isObject(self) -> bool """
    return None

  def object(self):
    """ object(self) -> Dict[str, QJsonValue] """
    return ""

  def rawData(self):
    """ rawData(self) -> Tuple[str, int] """
    return ""

  def setArray(self, IterableUnionQJsonValue=None, QJsonValue.Type=None, Dictstr=None, QJsonValue=None, bool=None, int=None, float=None, str=None):
    """ setArray(self, Iterable[Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]]) """
    pass

  def setObject(self, Dictstr=None, QJsonValue=None):
    """ setObject(self, Dict[str, QJsonValue]) """
    pass

  def swap(self, QJsonDocument):
    """ swap(self, QJsonDocument) """
    pass

  def toBinaryData(self):
    """ toBinaryData(self) -> QByteArray """
    return None

  def toJson(self):
    """ toJson(self) -> QByteArray
    toJson(self, QJsonDocument.JsonFormat) -> QByteArray """
    return None

  def toVariant(self):
    """ toVariant(self) -> Any """
    return None

class QJsonParseError(simplewrapper):
  """ QJsonParseError()
  QJsonParseError(QJsonParseError) """

  DeepNesting = None
  DocumentTooLarge = None
  GarbageAtEnd = None
  IllegalEscapeSequence = None
  IllegalNumber = None
  IllegalUTF8String = None
  IllegalValue = None
  MissingNameSeparator = None
  MissingObject = None
  MissingValueSeparator = None
  NoError = None

  class ParseError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TerminationByNumber = None
  UnterminatedArray = None
  UnterminatedObject = None
  UnterminatedString = None
  error = None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  offset = None

class QJsonValue(simplewrapper):
  """ QJsonValue(type: QJsonValue.Type = QJsonValue.Null)
  QJsonValue(Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]) """

  Array = None
  Bool = None
  Double = None
  Null = None
  Object = None
  String = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Undefined = None

  def fromVariant(Any):
    """ fromVariant(Any) -> QJsonValue """
    return None

  def isArray(self):
    """ isArray(self) -> bool """
    return None

  def isBool(self):
    """ isBool(self) -> bool """
    return None

  def isDouble(self):
    """ isDouble(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isObject(self):
    """ isObject(self) -> bool """
    return None

  def isString(self):
    """ isString(self) -> bool """
    return None

  def isUndefined(self):
    """ isUndefined(self) -> bool """
    return None

  def swap(self, QJsonValue):
    """ swap(self, QJsonValue) """
    pass

  def toArray(self):
    """ toArray(self) -> List[QJsonValue]
    toArray(self, Iterable[Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]]) -> List[QJsonValue] """
    return None

  def toBool(self, arg0=None):
    """ toBool(self, defaultValue: bool = False) -> bool """
    return None

  def toDouble(self, arg0=None):
    """ toDouble(self, defaultValue: float = 0) -> float """
    return 1.0

  def toInt(self, arg0=None):
    """ toInt(self, defaultValue: int = 0) -> int """
    return 1

  def toObject(self):
    """ toObject(self) -> Dict[str, QJsonValue]
    toObject(self, Dict[str, QJsonValue]) -> Dict[str, QJsonValue] """
    return ""

  def toString(self):
    """ toString(self) -> str
    toString(self, str) -> str """
    return ""

  def toVariant(self):
    """ toVariant(self) -> Any """
    return None

  def type(self):
    """ type(self) -> QJsonValue.Type """
    return None

class QLibrary(QObject):
  """ QLibrary(parent: QObject = None)
  QLibrary(str, parent: QObject = None)
  QLibrary(str, int, parent: QObject = None)
  QLibrary(str, str, parent: QObject = None) """

  DeepBindHint = None
  ExportExternalSymbolsHint = None
  LoadArchiveMemberHint = None

  class LoadHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class LoadHints(simplewrapper):
    """ QLibrary.LoadHints()
    QLibrary.LoadHints(Union[QLibrary.LoadHints, QLibrary.LoadHint])
    QLibrary.LoadHints(QLibrary.LoadHints) """

    pass

  PreventUnloadHint = None
  ResolveAllSymbolsHint = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isLibrary(str):
    """ isLibrary(str) -> bool """
    return None

  def isLoaded(self):
    """ isLoaded(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def load(self):
    """ load(self) -> bool """
    return None

  def loadHints(self):
    """ loadHints(self) -> QLibrary.LoadHints """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resolve(self, str):
    """ resolve(self, str) -> sip.voidptr
    resolve(str, str) -> sip.voidptr
    resolve(str, int, str) -> sip.voidptr
    resolve(str, str, str) -> sip.voidptr """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFileNameAndVersion(self, str, int):
    """ setFileNameAndVersion(self, str, int)
    setFileNameAndVersion(self, str, str) """
    pass

  def setLoadHints(self, UnionQLibrary.LoadHints=None, QLibrary.LoadHint=None):
    """ setLoadHints(self, Union[QLibrary.LoadHints, QLibrary.LoadHint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unload(self):
    """ unload(self) -> bool """
    return None

class QLibraryInfo(simplewrapper):
  """ QLibraryInfo(QLibraryInfo) """

  ArchDataPath = None
  BinariesPath = None
  DataPath = None
  DocumentationPath = None
  ExamplesPath = None
  HeadersPath = None
  ImportsPath = None
  LibrariesPath = None
  LibraryExecutablesPath = None

  class LibraryLocation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PluginsPath = None
  PrefixPath = None
  Qml2ImportsPath = None
  SettingsPath = None
  TestsPath = None
  TranslationsPath = None

  def buildDate():
    """ buildDate() -> QDate """
    return None

  def isDebugBuild():
    """ isDebugBuild() -> bool """
    return None

  def licensedProducts():
    """ licensedProducts() -> str """
    return ""

  def licensee():
    """ licensee() -> str """
    return ""

  def location(arg0):
    """ location(QLibraryInfo.LibraryLocation) -> str """
    return ""

  def version():
    """ version() -> QVersionNumber """
    return None

class QLine(simplewrapper):
  """ QLine()
  QLine(QPoint, QPoint)
  QLine(int, int, int, int)
  QLine(QLine) """

  def center(self):
    """ center(self) -> QPoint """
    return 1

  def dx(self):
    """ dx(self) -> int """
    return 1

  def dy(self):
    """ dy(self) -> int """
    return 1

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def p1(self):
    """ p1(self) -> QPoint """
    return 1

  def p2(self):
    """ p2(self) -> QPoint """
    return 1

  def setLine(self, int, int, int, int):
    """ setLine(self, int, int, int, int) """
    pass

  def setP1(self, QPoint):
    """ setP1(self, QPoint) """
    pass

  def setP2(self, QPoint):
    """ setP2(self, QPoint) """
    pass

  def setPoints(self, QPoint, QPoint):
    """ setPoints(self, QPoint, QPoint) """
    pass

  def translate(self, QPoint):
    """ translate(self, QPoint)
    translate(self, int, int) """
    pass

  def translated(self, QPoint):
    """ translated(self, QPoint) -> QLine
    translated(self, int, int) -> QLine """
    return None

  def x1(self):
    """ x1(self) -> int """
    return 1

  def x2(self):
    """ x2(self) -> int """
    return 1

  def y1(self):
    """ y1(self) -> int """
    return 1

  def y2(self):
    """ y2(self) -> int """
    return 1

class QLineF(simplewrapper):
  """ QLineF(QLine)
  QLineF()
  QLineF(Union[QPointF, QPoint], Union[QPointF, QPoint])
  QLineF(float, float, float, float)
  QLineF(QLineF) """

  BoundedIntersection = None

  class IntersectType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoIntersection = None
  UnboundedIntersection = None

  def angle(self):
    """ angle(self) -> float """
    return 1.0

  def angleTo(self, QLineF):
    """ angleTo(self, QLineF) -> float """
    return 1.0

  def center(self):
    """ center(self) -> QPointF """
    return 1

  def dx(self):
    """ dx(self) -> float """
    return 1.0

  def dy(self):
    """ dy(self) -> float """
    return 1.0

  def fromPolar(float, float):
    """ fromPolar(float, float) -> QLineF """
    return None

  def intersect(self, QLineF, UnionQPointF=None, QPoint=None):
    """ intersect(self, QLineF, Union[QPointF, QPoint]) -> QLineF.IntersectType """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def length(self):
    """ length(self) -> float """
    return 1.0

  def normalVector(self):
    """ normalVector(self) -> QLineF """
    return None

  def p1(self):
    """ p1(self) -> QPointF """
    return 1

  def p2(self):
    """ p2(self) -> QPointF """
    return 1

  def pointAt(self, float):
    """ pointAt(self, float) -> QPointF """
    return 1

  def setAngle(self, float):
    """ setAngle(self, float) """
    pass

  def setLength(self, float):
    """ setLength(self, float) """
    pass

  def setLine(self, float, float, float, float):
    """ setLine(self, float, float, float, float) """
    pass

  def setP1(self, UnionQPointF=None, QPoint=None):
    """ setP1(self, Union[QPointF, QPoint]) """
    pass

  def setP2(self, UnionQPointF=None, QPoint=None):
    """ setP2(self, Union[QPointF, QPoint]) """
    pass

  def setPoints(self, UnionQPointF=None, QPoint=None, UnionQPointF=None, QPoint=None):
    """ setPoints(self, Union[QPointF, QPoint], Union[QPointF, QPoint]) """
    pass

  def toLine(self):
    """ toLine(self) -> QLine """
    return None

  def translate(self, UnionQPointF=None, QPoint=None):
    """ translate(self, Union[QPointF, QPoint])
    translate(self, float, float) """
    pass

  def translated(self, UnionQPointF=None, QPoint=None):
    """ translated(self, Union[QPointF, QPoint]) -> QLineF
    translated(self, float, float) -> QLineF """
    return None

  def unitVector(self):
    """ unitVector(self) -> QLineF """
    return None

  def x1(self):
    """ x1(self) -> float """
    return 1.0

  def x2(self):
    """ x2(self) -> float """
    return 1.0

  def y1(self):
    """ y1(self) -> float """
    return 1.0

  def y2(self):
    """ y2(self) -> float """
    return 1.0

class QLocale(simplewrapper):
  """ QLocale()
  QLocale(str)
  QLocale(QLocale.Language, country: QLocale.Country = QLocale.AnyCountry)
  QLocale(QLocale)
  QLocale(QLocale.Language, QLocale.Script, QLocale.Country) """

  Abkhazian = None
  AdlamScript = None
  Afan = None
  Afar = None
  Afghanistan = None
  Afrikaans = None
  Aghem = None
  Ahom = None
  AhomScript = None
  Akan = None
  Akkadian = None
  Akoose = None
  AlandIslands = None
  Albania = None
  Albanian = None
  Algeria = None
  AlternateQuotation = None
  AmericanSamoa = None
  AmericanSignLanguage = None
  Amharic = None
  AnatolianHieroglyphsScript = None
  AncientEgyptian = None
  AncientGreek = None
  AncientNorthArabian = None
  Andorra = None
  Angola = None
  Anguilla = None
  Antarctica = None
  AntiguaAndBarbuda = None
  AnyCountry = None
  AnyLanguage = None
  AnyScript = None
  Arabic = None
  ArabicScript = None
  Aragonese = None
  Aramaic = None
  ArdhamagadhiPrakrit = None
  Argentina = None
  Armenia = None
  Armenian = None
  ArmenianScript = None
  Aruba = None
  AscensionIsland = None
  Assamese = None
  Asturian = None
  Asu = None
  Atsam = None
  Australia = None
  Austria = None
  Avaric = None
  Avestan = None
  AvestanScript = None
  Aymara = None
  Azerbaijan = None
  Azerbaijani = None
  Bafia = None
  Bahamas = None
  Bahrain = None
  Balinese = None
  BalineseScript = None
  Bambara = None
  BamumScript = None
  Bamun = None
  Bangladesh = None
  Barbados = None
  Basaa = None
  Bashkir = None
  Basque = None
  Bassa = None
  BassaVahScript = None
  BatakScript = None
  BatakToba = None
  Belarus = None
  Belarusian = None
  Belgium = None
  Belize = None
  Bemba = None
  Bena = None
  Bengali = None
  BengaliScript = None
  Benin = None
  Bermuda = None
  BhaiksukiScript = None
  Bhojpuri = None
  Bhutan = None
  Bhutani = None
  Bihari = None
  Bislama = None
  Blin = None
  Bodo = None
  Bolivia = None
  Bonaire = None
  BopomofoScript = None
  BosniaAndHerzegowina = None
  Bosnian = None
  Botswana = None
  BouvetIsland = None
  BrahmiScript = None
  BrailleScript = None
  Brazil = None
  Breton = None
  BritishIndianOceanTerritory = None
  BritishVirginIslands = None
  Brunei = None
  Buginese = None
  BugineseScript = None
  Buhid = None
  BuhidScript = None
  Bulgaria = None
  Bulgarian = None
  BurkinaFaso = None
  Burmese = None
  Burundi = None
  Byelorussian = None
  C = None
  Cambodia = None
  Cambodian = None
  Cameroon = None
  Canada = None
  CanadianAboriginalScript = None
  CanaryIslands = None
  Cantonese = None
  CapeVerde = None
  Carian = None
  CarianScript = None
  Catalan = None
  CaucasianAlbanianScript = None
  CaymanIslands = None
  CentralAfricanRepublic = None
  CentralKurdish = None
  CentralMoroccoTamazight = None
  CeutaAndMelilla = None
  Chad = None
  Chakma = None
  ChakmaScript = None
  ChamScript = None
  Chamorro = None
  Chechen = None
  Cherokee = None
  CherokeeScript = None
  Chewa = None
  Chiga = None
  Chile = None
  China = None
  Chinese = None
  ChristmasIsland = None
  Church = None
  Chuvash = None
  ClassicalMandaic = None
  ClippertonIsland = None
  CocosIslands = None
  Colognian = None
  Colombia = None
  Comoros = None
  CongoBrazzaville = None
  CongoKinshasa = None
  CongoSwahili = None
  CookIslands = None
  Coptic = None
  CopticScript = None
  Cornish = None
  Corsican = None
  CostaRica = None

  class Country(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Cree = None
  Croatia = None
  Croatian = None
  Cuba = None
  CuneiformScript = None
  CuraSao = None
  CurrencyDisplayName = None
  CurrencyIsoCode = None
  CurrencySymbol = None

  class CurrencySymbolFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CypriotScript = None
  Cyprus = None
  CyrillicScript = None
  Czech = None
  CzechRepublic = None
  Danish = None

  class DataSizeFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class DataSizeFormats(simplewrapper):
    """ QLocale.DataSizeFormats()
    QLocale.DataSizeFormats(Union[QLocale.DataSizeFormats, QLocale.DataSizeFormat])
    QLocale.DataSizeFormats(QLocale.DataSizeFormats) """

    pass

  DataSizeIecFormat = None
  DataSizeSIFormat = None
  DataSizeTraditionalFormat = None
  DefaultNumberOptions = None
  DemocraticRepublicOfCongo = None
  DemocraticRepublicOfKorea = None
  Denmark = None
  DeseretScript = None
  DevanagariScript = None
  DiegoGarcia = None
  Divehi = None
  Djibouti = None
  Dogri = None
  Dominica = None
  DominicanRepublic = None
  Duala = None
  DuployanScript = None
  Dutch = None
  Dzongkha = None
  EastTimor = None
  EasternCham = None
  EasternKayah = None
  Ecuador = None
  Egypt = None
  EgyptianHieroglyphsScript = None
  ElSalvador = None
  ElbasanScript = None
  Embu = None
  English = None
  EquatorialGuinea = None
  Eritrea = None
  Esperanto = None
  Estonia = None
  Estonian = None
  Ethiopia = None
  EthiopicScript = None
  Etruscan = None
  Europe = None
  EuropeanUnion = None
  Ewe = None
  Ewondo = None
  FalklandIslands = None
  FaroeIslands = None
  Faroese = None
  Fiji = None
  Fijian = None
  Filipino = None
  Finland = None
  Finnish = None

  class FloatingPointPrecisionOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FloatingPointShortest = None

  class FormatType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  France = None
  FraserScript = None
  French = None
  FrenchGuiana = None
  FrenchPolynesia = None
  FrenchSouthernTerritories = None
  Frisian = None
  Friulian = None
  Fulah = None
  Ga = None
  Gabon = None
  Gaelic = None
  Galician = None
  Gambia = None
  Ganda = None
  Geez = None
  Georgia = None
  Georgian = None
  GeorgianScript = None
  German = None
  Germany = None
  Ghana = None
  Gibraltar = None
  GlagoliticScript = None
  Gothic = None
  GothicScript = None
  GranthaScript = None
  Greece = None
  Greek = None
  GreekScript = None
  Greenland = None
  Greenlandic = None
  Grenada = None
  Guadeloupe = None
  Guam = None
  Guarani = None
  Guatemala = None
  Guernsey = None
  Guinea = None
  GuineaBissau = None
  Gujarati = None
  GujaratiScript = None
  GurmukhiScript = None
  Gusii = None
  Guyana = None
  Haiti = None
  Haitian = None
  HanScript = None
  HanWithBopomofoScript = None
  HangulScript = None
  Hanunoo = None
  HanunooScript = None
  HatranScript = None
  Hausa = None
  Hawaiian = None
  HeardAndMcDonaldIslands = None
  Hebrew = None
  HebrewScript = None
  Herero = None
  HieroglyphicLuwian = None
  Hindi = None
  HiraganaScript = None
  HiriMotu = None
  HmongNjua = None
  Ho = None
  Honduras = None
  HongKong = None
  Hungarian = None
  Hungary = None
  Iceland = None
  Icelandic = None
  Ido = None
  Igbo = None
  ImperialAramaicScript = None
  ImperialSystem = None
  ImperialUKSystem = None
  ImperialUSSystem = None
  InariSami = None
  IncludeTrailingZeroesAfterDot = None
  India = None
  Indonesia = None
  Indonesian = None
  Ingush = None
  InscriptionalPahlaviScript = None
  InscriptionalParthianScript = None
  Interlingua = None
  Interlingue = None
  Inuktitut = None
  Inupiak = None
  Iran = None
  Iraq = None
  Ireland = None
  Irish = None
  IsleOfMan = None
  Israel = None
  Italian = None
  Italy = None
  IvoryCoast = None
  Jamaica = None
  JamoScript = None
  Japan = None
  Japanese = None
  JapaneseScript = None
  Javanese = None
  JavaneseScript = None
  Jersey = None
  Jju = None
  JolaFonyi = None
  Jordan = None
  Kabuverdianu = None
  Kabyle = None
  KaithiScript = None
  Kako = None
  Kalenjin = None
  Kamba = None
  Kannada = None
  KannadaScript = None
  Kanuri = None
  Kashmiri = None
  KatakanaScript = None
  KayahLiScript = None
  Kazakh = None
  Kazakhstan = None
  Kenya = None
  Kenyang = None
  KharoshthiScript = None
  Khmer = None
  KhmerScript = None
  KhojkiScript = None
  KhudawadiScript = None
  Kiche = None
  Kikuyu = None
  Kinyarwanda = None
  Kirghiz = None
  Kiribati = None
  Komi = None
  Kongo = None
  Konkani = None
  Korean = None
  KoreanScript = None
  Koro = None
  Kosovo = None
  KoyraChiini = None
  KoyraboroSenni = None
  Kpelle = None
  Kurdish = None
  Kurundi = None
  Kuwait = None
  Kwanyama = None
  Kwasio = None
  Kyrgyzstan = None
  Lakota = None
  Langi = None

  class Language(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LannaScript = None
  Lao = None
  LaoScript = None
  Laos = None
  LargeFloweryMiao = None
  LastCountry = None
  LastLanguage = None
  Latin = None
  LatinAmerica = None
  LatinAmericaAndTheCaribbean = None
  LatinScript = None
  Latvia = None
  Latvian = None
  Lebanon = None
  Lepcha = None
  LepchaScript = None
  Lesotho = None
  Lezghian = None
  Liberia = None
  Libya = None
  Liechtenstein = None
  Limbu = None
  LimbuScript = None
  Limburgish = None
  LinearA = None
  LinearAScript = None
  LinearBScript = None
  Lingala = None
  Lisu = None
  LiteraryChinese = None
  Lithuania = None
  Lithuanian = None
  Lojban = None
  LongFormat = None
  LowGerman = None
  LowerSorbian = None
  Lu = None
  LubaKatanga = None
  LuleSami = None
  Luo = None
  Luxembourg = None
  Luxembourgish = None
  Luyia = None
  Lycian = None
  LycianScript = None
  Lydian = None
  LydianScript = None
  Macau = None
  Macedonia = None
  Macedonian = None
  Machame = None
  Madagascar = None
  MahajaniScript = None
  Maithili = None
  MakhuwaMeetto = None
  Makonde = None
  Malagasy = None
  Malawi = None
  Malay = None
  Malayalam = None
  MalayalamScript = None
  Malaysia = None
  Maldives = None
  Mali = None
  Malta = None
  Maltese = None
  MandaeanScript = None
  Mandingo = None
  ManichaeanMiddlePersian = None
  ManichaeanScript = None
  Manipuri = None
  Manx = None
  Maori = None
  Mapuche = None
  Marathi = None
  MarchenScript = None
  MarshallIslands = None
  Marshallese = None
  Martinique = None
  Masai = None
  Mauritania = None
  Mauritius = None
  Mayotte = None
  Mazanderani = None

  class MeasurementSystem(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MeiteiMayekScript = None
  Mende = None
  MendeKikakuiScript = None
  Meroitic = None
  MeroiticCursiveScript = None
  MeroiticScript = None
  Meru = None
  Meta = None
  MetricSystem = None
  Mexico = None
  Micronesia = None
  ModiScript = None
  Mohawk = None
  Moldavian = None
  Moldova = None
  Monaco = None
  Mongolia = None
  Mongolian = None
  MongolianScript = None
  Mono = None
  Montenegro = None
  Montserrat = None
  Morisyen = None
  Morocco = None
  Mozambique = None
  MroScript = None
  Mru = None
  MultaniScript = None
  Mundang = None
  Myanmar = None
  MyanmarScript = None
  NabataeanScript = None
  Nama = None
  Namibia = None
  NarrowFormat = None
  NauruCountry = None
  NauruLanguage = None
  Navaho = None
  Ndonga = None
  Nepal = None
  Nepali = None
  Netherlands = None
  NewCaledonia = None
  NewTaiLueScript = None
  NewZealand = None
  NewaScript = None
  Newari = None
  Ngiemboon = None
  Ngomba = None
  Nicaragua = None
  Niger = None
  Nigeria = None
  Niue = None
  Nko = None
  NkoScript = None
  NorfolkIsland = None
  NorthKorea = None
  NorthNdebele = None
  NorthernLuri = None
  NorthernMarianaIslands = None
  NorthernSami = None
  NorthernSotho = None
  NorthernThai = None
  Norway = None
  Norwegian = None
  NorwegianBokmal = None
  NorwegianNynorsk = None
  Nuer = None

  class NumberOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class NumberOptions(simplewrapper):
    """ QLocale.NumberOptions()
    QLocale.NumberOptions(Union[QLocale.NumberOptions, QLocale.NumberOption])
    QLocale.NumberOptions(QLocale.NumberOptions) """

    pass

  Nyanja = None
  Nyankole = None
  Occitan = None
  OghamScript = None
  Ojibwa = None
  OlChikiScript = None
  OldHungarianScript = None
  OldIrish = None
  OldItalicScript = None
  OldNorse = None
  OldNorthArabianScript = None
  OldPermicScript = None
  OldPersian = None
  OldPersianScript = None
  OldSouthArabianScript = None
  OldTurkish = None
  Oman = None
  OmitGroupSeparator = None
  OmitLeadingZeroInExponent = None
  Oriya = None
  OriyaScript = None
  OrkhonScript = None
  Oromo = None
  Osage = None
  OsageScript = None
  OsmanyaScript = None
  Ossetic = None
  OutlyingOceania = None
  PahawhHmongScript = None
  Pahlavi = None
  Pakistan = None
  Palau = None
  Palauan = None
  PalestinianTerritories = None
  Pali = None
  PalmyreneScript = None
  Panama = None
  Papiamento = None
  PapuaNewGuinea = None
  Paraguay = None
  Parthian = None
  Pashto = None
  PauCinHauScript = None
  PeoplesRepublicOfCongo = None
  Persian = None
  Peru = None
  PhagsPaScript = None
  Philippines = None
  Phoenician = None
  PhoenicianScript = None
  Pitcairn = None
  Poland = None
  Polish = None
  PollardPhoneticScript = None
  Portugal = None
  Portuguese = None
  PrakritLanguage = None
  Prussian = None
  PsalterPahlaviScript = None
  PuertoRico = None
  Punjabi = None
  Qatar = None
  Quechua = None

  class QuotationStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Rejang = None
  RejangScript = None
  RejectGroupSeparator = None
  RejectLeadingZeroInExponent = None
  RejectTrailingZeroesAfterDot = None
  RepublicOfKorea = None
  Reunion = None
  RhaetoRomance = None
  Romania = None
  Romanian = None
  Romansh = None
  Rombo = None
  Rundi = None
  RunicScript = None
  Russia = None
  Russian = None
  RussianFederation = None
  Rwa = None
  Rwanda = None
  Sabaean = None
  Saho = None
  SaintBarthelemy = None
  SaintHelena = None
  SaintKittsAndNevis = None
  SaintLucia = None
  SaintMartin = None
  SaintPierreAndMiquelon = None
  SaintVincentAndTheGrenadines = None
  Sakha = None
  Samaritan = None
  SamaritanScript = None
  Samburu = None
  Samoa = None
  Samoan = None
  SanMarino = None
  Sango = None
  Sangu = None
  Sanskrit = None
  Santali = None
  SaoTomeAndPrincipe = None
  Saraiki = None
  Sardinian = None
  SaudiArabia = None
  Saurashtra = None
  SaurashtraScript = None

  class Script(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Sena = None
  Senegal = None
  Serbia = None
  Serbian = None
  SerboCroatian = None
  Seychelles = None
  Shambala = None
  SharadaScript = None
  ShavianScript = None
  Shona = None
  ShortFormat = None
  SichuanYi = None
  Sicilian = None
  Sidamo = None
  SiddhamScript = None
  SierraLeone = None
  SignWritingScript = None
  SimplifiedChineseScript = None
  SimplifiedHanScript = None
  Sindhi = None
  Singapore = None
  Sinhala = None
  SinhalaScript = None
  SintMaarten = None
  SkoltSami = None
  Slovak = None
  Slovakia = None
  Slovenia = None
  Slovenian = None
  Soga = None
  SolomonIslands = None
  Somali = None
  Somalia = None
  Sora = None
  SoraSompengScript = None
  SouthAfrica = None
  SouthGeorgiaAndTheSouthSandwichIslands = None
  SouthKorea = None
  SouthNdebele = None
  SouthSudan = None
  SouthernKurdish = None
  SouthernSami = None
  SouthernSotho = None
  Spain = None
  Spanish = None
  SriLanka = None
  StandardMoroccanTamazight = None
  StandardQuotation = None
  Sudan = None
  Sundanese = None
  SundaneseScript = None
  Suriname = None
  SvalbardAndJanMayenIslands = None
  Swahili = None
  Swati = None
  Swaziland = None
  Sweden = None
  Swedish = None
  SwissGerman = None
  Switzerland = None
  Sylheti = None
  SylotiNagriScript = None
  Syria = None
  Syriac = None
  SyriacScript = None
  SyrianArabRepublic = None
  Tachelhit = None
  Tagalog = None
  TagalogScript = None
  Tagbanwa = None
  TagbanwaScript = None
  Tahitian = None
  TaiDam = None
  TaiLeScript = None
  TaiNua = None
  TaiVietScript = None
  Taita = None
  Taiwan = None
  Tajik = None
  Tajikistan = None
  TakriScript = None
  Tamil = None
  TamilScript = None
  Tangut = None
  TangutScript = None
  Tanzania = None
  Taroko = None
  Tasawaq = None
  Tatar = None
  TedimChin = None
  Telugu = None
  TeluguScript = None
  Teso = None
  ThaanaScript = None
  Thai = None
  ThaiScript = None
  Thailand = None
  Tibetan = None
  TibetanScript = None
  TifinaghScript = None
  Tigre = None
  Tigrinya = None
  TirhutaScript = None
  Togo = None
  TokPisin = None
  Tokelau = None
  TokelauCountry = None
  TokelauLanguage = None
  Tonga = None
  Tongan = None
  TraditionalChineseScript = None
  TraditionalHanScript = None
  TrinidadAndTobago = None
  TristanDaCunha = None
  Tsonga = None
  Tswana = None
  Tunisia = None
  Turkey = None
  Turkish = None
  Turkmen = None
  Turkmenistan = None
  TurksAndCaicosIslands = None
  Tuvalu = None
  TuvaluCountry = None
  TuvaluLanguage = None
  Twi = None
  Tyap = None
  Uganda = None
  Ugaritic = None
  UgariticScript = None
  Uighur = None
  Uigur = None
  Ukraine = None
  Ukrainian = None
  UncodedLanguages = None
  UnitedArabEmirates = None
  UnitedKingdom = None
  UnitedStates = None
  UnitedStatesMinorOutlyingIslands = None
  UnitedStatesVirginIslands = None
  UpperSorbian = None
  Urdu = None
  Uruguay = None
  Uzbek = None
  Uzbekistan = None
  Vai = None
  VaiScript = None
  Vanuatu = None
  VarangKshitiScript = None
  VaticanCityState = None
  Venda = None
  Venezuela = None
  Vietnam = None
  Vietnamese = None
  Volapuk = None
  Vunjo = None
  Walamo = None
  WallisAndFutunaIslands = None
  Walloon = None
  Walser = None
  Warlpiri = None
  Welsh = None
  WesternBalochi = None
  WesternFrisian = None
  WesternSahara = None
  Wolof = None
  World = None
  Xhosa = None
  Yangben = None
  Yemen = None
  YiScript = None
  Yiddish = None
  Yoruba = None
  Zambia = None
  Zarma = None
  Zhuang = None
  Zimbabwe = None
  Zulu = None

  def amText(self):
    """ amText(self) -> str """
    return ""

  def bcp47Name(self):
    """ bcp47Name(self) -> str """
    return ""

  def c():
    """ c() -> QLocale """
    return None

  def country(self):
    """ country(self) -> QLocale.Country """
    return None

  def countryToString(arg0):
    """ countryToString(QLocale.Country) -> str """
    return ""

  def createSeparatedList(self, Iterablestr=None):
    """ createSeparatedList(self, Iterable[str]) -> str """
    return ""

  def currencySymbol(self, arg0=None):
    """ currencySymbol(self, format: QLocale.CurrencySymbolFormat = QLocale.CurrencySymbol) -> str """
    return ""

  def dateFormat(self, arg0=None):
    """ dateFormat(self, format: QLocale.FormatType = QLocale.LongFormat) -> str """
    return ""

  def dateTimeFormat(self, arg0=None):
    """ dateTimeFormat(self, format: QLocale.FormatType = QLocale.LongFormat) -> str """
    return ""

  def dayName(self, int, arg0=None):
    """ dayName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str """
    return ""

  def decimalPoint(self):
    """ decimalPoint(self) -> str """
    return ""

  def exponential(self):
    """ exponential(self) -> str """
    return ""

  def firstDayOfWeek(self):
    """ firstDayOfWeek(self) -> Qt.DayOfWeek """
    return None

  def formattedDataSize(self, int, arg0=None, arg1=None, arg2=None):
    """ formattedDataSize(self, int, precision: int = 2, format: Union[QLocale.DataSizeFormats, QLocale.DataSizeFormat] = QLocale.DataSizeIecFormat) -> str """
    return ""

  def groupSeparator(self):
    """ groupSeparator(self) -> str """
    return ""

  def language(self):
    """ language(self) -> QLocale.Language """
    return None

  def languageToString(arg0):
    """ languageToString(QLocale.Language) -> str """
    return ""

  def matchingLocales(arg0, arg1, arg2):
    """ matchingLocales(QLocale.Language, QLocale.Script, QLocale.Country) -> List[QLocale] """
    return None

  def measurementSystem(self):
    """ measurementSystem(self) -> QLocale.MeasurementSystem """
    return None

  def monthName(self, int, arg0=None):
    """ monthName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str """
    return ""

  def name(self):
    """ name(self) -> str """
    return ""

  def nativeCountryName(self):
    """ nativeCountryName(self) -> str """
    return ""

  def nativeLanguageName(self):
    """ nativeLanguageName(self) -> str """
    return ""

  def negativeSign(self):
    """ negativeSign(self) -> str """
    return ""

  def numberOptions(self):
    """ numberOptions(self) -> QLocale.NumberOptions """
    return None

  def percent(self):
    """ percent(self) -> str """
    return ""

  def pmText(self):
    """ pmText(self) -> str """
    return ""

  def positiveSign(self):
    """ positiveSign(self) -> str """
    return ""

  def quoteString(self, str, arg0=None):
    """ quoteString(self, str, style: QLocale.QuotationStyle = QLocale.StandardQuotation) -> str """
    return ""

  def script(self):
    """ script(self) -> QLocale.Script """
    return None

  def scriptToString(arg0):
    """ scriptToString(QLocale.Script) -> str """
    return ""

  def setDefault(QLocale):
    """ setDefault(QLocale) """
    pass

  def setNumberOptions(self, UnionQLocale.NumberOptions=None, QLocale.NumberOption=None):
    """ setNumberOptions(self, Union[QLocale.NumberOptions, QLocale.NumberOption]) """
    pass

  def standaloneDayName(self, int, arg0=None):
    """ standaloneDayName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str """
    return ""

  def standaloneMonthName(self, int, arg0=None):
    """ standaloneMonthName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str """
    return ""

  def swap(self, QLocale):
    """ swap(self, QLocale) """
    pass

  def system():
    """ system() -> QLocale """
    return None

  def textDirection(self):
    """ textDirection(self) -> Qt.LayoutDirection """
    return None

  def timeFormat(self, arg0=None):
    """ timeFormat(self, format: QLocale.FormatType = QLocale.LongFormat) -> str """
    return ""

  def toCurrencyString(self, float, arg0=None):
    """ toCurrencyString(self, float, symbol: str = '') -> str
    toCurrencyString(self, float, str, int) -> str
    toCurrencyString(self, int, symbol: str = '') -> str """
    return ""

  def toDate(self, str, arg0=None):
    """ toDate(self, str, format: QLocale.FormatType = QLocale.LongFormat) -> QDate
    toDate(self, str, str) -> QDate """
    return None

  def toDateTime(self, str, arg0=None):
    """ toDateTime(self, str, format: QLocale.FormatType = QLocale.LongFormat) -> QDateTime
    toDateTime(self, str, str) -> QDateTime """
    return None

  def toDouble(self, str):
    """ toDouble(self, str) -> Tuple[float, bool] """
    return 1.0

  def toFloat(self, str):
    """ toFloat(self, str) -> Tuple[float, bool] """
    return 1.0

  def toInt(self, str):
    """ toInt(self, str) -> Tuple[int, bool] """
    return 1

  def toLong(self, str):
    """ toLong(self, str) -> Tuple[int, bool] """
    return 1

  def toLongLong(self, str):
    """ toLongLong(self, str) -> Tuple[int, bool] """
    return 1

  def toLower(self, str):
    """ toLower(self, str) -> str """
    return ""

  def toShort(self, str):
    """ toShort(self, str) -> Tuple[int, bool] """
    return 1

  def toString(self, float, arg0=None, arg1=None):
    """ toString(self, float, format: str = 'g', precision: int = 6) -> str
    toString(self, Union[QDateTime, datetime.datetime], str) -> str
    toString(self, Union[QDateTime, datetime.datetime], format: QLocale.FormatType = QLocale.LongFormat) -> str
    toString(self, Union[QDate, datetime.date], str) -> str
    toString(self, Union[QDate, datetime.date], format: QLocale.FormatType = QLocale.LongFormat) -> str
    toString(self, Union[QTime, datetime.time], str) -> str
    toString(self, Union[QTime, datetime.time], format: QLocale.FormatType = QLocale.LongFormat) -> str
    toString(self, int) -> str """
    return ""

  def toTime(self, str, arg0=None):
    """ toTime(self, str, format: QLocale.FormatType = QLocale.LongFormat) -> QTime
    toTime(self, str, str) -> QTime """
    return None

  def toUInt(self, str):
    """ toUInt(self, str) -> Tuple[int, bool] """
    return 1

  def toULong(self, str):
    """ toULong(self, str) -> Tuple[int, bool] """
    return 1

  def toULongLong(self, str):
    """ toULongLong(self, str) -> Tuple[int, bool] """
    return 1

  def toUShort(self, str):
    """ toUShort(self, str) -> Tuple[int, bool] """
    return 1

  def toUpper(self, str):
    """ toUpper(self, str) -> str """
    return ""

  def uiLanguages(self):
    """ uiLanguages(self) -> List[str] """
    return ""

  def weekdays(self):
    """ weekdays(self) -> List[Qt.DayOfWeek] """
    return None

  def zeroDigit(self):
    """ zeroDigit(self) -> str """
    return ""

class QLockFile(simplewrapper):
  """ QLockFile(str) """

  class LockError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LockFailedError = None
  NoError = None
  PermissionError = None
  UnknownError = None

  def error(self):
    """ error(self) -> QLockFile.LockError """
    return None

  def getLockInfo(self):
    """ getLockInfo(self) -> Tuple[bool, int, str, str] """
    return ""

  def isLocked(self):
    """ isLocked(self) -> bool """
    return None

  def lock(self):
    """ lock(self) -> bool """
    return None

  def removeStaleLockFile(self):
    """ removeStaleLockFile(self) -> bool """
    return None

  def setStaleLockTime(self, int):
    """ setStaleLockTime(self, int) """
    pass

  def staleLockTime(self):
    """ staleLockTime(self) -> int """
    return 1

  def tryLock(self, arg0=None):
    """ tryLock(self, timeout: int = 0) -> bool """
    return None

  def unlock(self):
    """ unlock(self) """
    pass

class QLoggingCategory(simplewrapper):
  """ QLoggingCategory(str)
  QLoggingCategory(str, QtMsgType) """

  def categoryName(self):
    """ categoryName(self) -> str """
    return ""

  def defaultCategory():
    """ defaultCategory() -> QLoggingCategory """
    return None

  def isCriticalEnabled(self):
    """ isCriticalEnabled(self) -> bool """
    return None

  def isDebugEnabled(self):
    """ isDebugEnabled(self) -> bool """
    return None

  def isEnabled(self, QtMsgType):
    """ isEnabled(self, QtMsgType) -> bool """
    return None

  def isInfoEnabled(self):
    """ isInfoEnabled(self) -> bool """
    return None

  def isWarningEnabled(self):
    """ isWarningEnabled(self) -> bool """
    return None

  def setEnabled(self, QtMsgType, bool):
    """ setEnabled(self, QtMsgType, bool) """
    pass

  def setFilterRules(str):
    """ setFilterRules(str) """
    pass

class QMargins(simplewrapper):
  """ QMargins()
  QMargins(int, int, int, int)
  QMargins(QMargins) """

  def bottom(self):
    """ bottom(self) -> int """
    return 1

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def left(self):
    """ left(self) -> int """
    return 1

  def right(self):
    """ right(self) -> int """
    return 1

  def setBottom(self, int):
    """ setBottom(self, int) """
    pass

  def setLeft(self, int):
    """ setLeft(self, int) """
    pass

  def setRight(self, int):
    """ setRight(self, int) """
    pass

  def setTop(self, int):
    """ setTop(self, int) """
    pass

  def top(self):
    """ top(self) -> int """
    return 1

class QMarginsF(simplewrapper):
  """ QMarginsF()
  QMarginsF(float, float, float, float)
  QMarginsF(QMargins)
  QMarginsF(QMarginsF) """

  def bottom(self):
    """ bottom(self) -> float """
    return 1.0

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def left(self):
    """ left(self) -> float """
    return 1.0

  def right(self):
    """ right(self) -> float """
    return 1.0

  def setBottom(self, float):
    """ setBottom(self, float) """
    pass

  def setLeft(self, float):
    """ setLeft(self, float) """
    pass

  def setRight(self, float):
    """ setRight(self, float) """
    pass

  def setTop(self, float):
    """ setTop(self, float) """
    pass

  def toMargins(self):
    """ toMargins(self) -> QMargins """
    return None

  def top(self):
    """ top(self) -> float """
    return 1.0

class QMessageAuthenticationCode(simplewrapper):
  """ QMessageAuthenticationCode(QCryptographicHash.Algorithm, key: Union[QByteArray, bytes, bytearray] = QByteArray()) """

  def addData(self, str, int):
    """ addData(self, str, int)
    addData(self, Union[QByteArray, bytes, bytearray])
    addData(self, QIODevice) -> bool """
    pass

  def hash(UnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None, QCryptographicHash.Algorithm=None):
    """ hash(Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray], QCryptographicHash.Algorithm) -> QByteArray """
    return None

  def reset(self):
    """ reset(self) """
    pass

  def result(self):
    """ result(self) -> QByteArray """
    return None

  def setKey(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setKey(self, Union[QByteArray, bytes, bytearray]) """
    pass

class QMessageLogContext(simplewrapper):

  category = None
  file = None
  function = None
  line = None

class QMessageLogger(simplewrapper):
  """ QMessageLogger()
  QMessageLogger(str, int, str)
  QMessageLogger(str, int, str, str) """

  def critical(self, str):
    """ critical(self, str) """
    pass

  def debug(self, str):
    """ debug(self, str) """
    pass

  def fatal(self, str):
    """ fatal(self, str) """
    pass

  def info(self, str):
    """ info(self, str) """
    pass

  def warning(self, str):
    """ warning(self, str) """
    pass

class QMetaClassInfo(simplewrapper):
  """ QMetaClassInfo()
  QMetaClassInfo(QMetaClassInfo) """

  def name(self):
    """ name(self) -> str """
    return ""

  def value(self):
    """ value(self) -> str """
    return ""

class QMetaEnum(simplewrapper):
  """ QMetaEnum()
  QMetaEnum(QMetaEnum) """

  def enumName(self):
    """ enumName(self) -> str """
    return ""

  def isFlag(self):
    """ isFlag(self) -> bool """
    return None

  def isScoped(self):
    """ isScoped(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def key(self, int):
    """ key(self, int) -> str """
    return ""

  def keyCount(self):
    """ keyCount(self) -> int """
    return 1

  def keyToValue(self, str):
    """ keyToValue(self, str) -> Tuple[int, bool] """
    return 1

  def keysToValue(self, str):
    """ keysToValue(self, str) -> Tuple[int, bool] """
    return 1

  def name(self):
    """ name(self) -> str """
    return ""

  def scope(self):
    """ scope(self) -> str """
    return ""

  def value(self, int):
    """ value(self, int) -> int """
    return 1

  def valueToKey(self, int):
    """ valueToKey(self, int) -> str """
    return ""

  def valueToKeys(self, int):
    """ valueToKeys(self, int) -> QByteArray """
    return None

class QMetaMethod(simplewrapper):
  """ QMetaMethod()
  QMetaMethod(QMetaMethod) """

  class Access(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Constructor = None
  Method = None

  class MethodType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Private = None
  Protected = None
  Public = None
  Signal = None
  Slot = None

  def access(self):
    """ access(self) -> QMetaMethod.Access """
    return None

  def invoke(self, QObject, arg0, QGenericReturnArgument, arg1=None, 0)=None, arg2=None, 0)=None, arg3=None, 0)=None, arg4=None, 0)=None, arg5=None, 0)=None, arg6=None, 0)=None, arg7=None, 0)=None, arg8=None, 0)=None, arg9=None, 0)=None, arg10=None, 0)=None):
    """ invoke(self, QObject, Qt.ConnectionType, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object
    invoke(self, QObject, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object
    invoke(self, QObject, Qt.ConnectionType, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object
    invoke(self, QObject, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def methodIndex(self):
    """ methodIndex(self) -> int """
    return 1

  def methodSignature(self):
    """ methodSignature(self) -> QByteArray """
    return None

  def methodType(self):
    """ methodType(self) -> QMetaMethod.MethodType """
    return None

  def name(self):
    """ name(self) -> QByteArray """
    return None

  def parameterCount(self):
    """ parameterCount(self) -> int """
    return 1

  def parameterNames(self):
    """ parameterNames(self) -> List[QByteArray] """
    return None

  def parameterType(self, int):
    """ parameterType(self, int) -> int """
    return 1

  def parameterTypes(self):
    """ parameterTypes(self) -> List[QByteArray] """
    return None

  def returnType(self):
    """ returnType(self) -> int """
    return 1

  def tag(self):
    """ tag(self) -> str """
    return ""

  def typeName(self):
    """ typeName(self) -> str """
    return ""

class QMetaObject(simplewrapper):
  """ QMetaObject()
  QMetaObject(QMetaObject) """

  class Connection(simplewrapper):
    """ QMetaObject.Connection()
    QMetaObject.Connection(QMetaObject.Connection) """

    pass

  def checkConnectArgs(str, str):
    """ checkConnectArgs(str, str) -> bool
    checkConnectArgs(QMetaMethod, QMetaMethod) -> bool """
    return None

  def classInfo(self, int):
    """ classInfo(self, int) -> QMetaClassInfo """
    return None

  def classInfoCount(self):
    """ classInfoCount(self) -> int """
    return 1

  def classInfoOffset(self):
    """ classInfoOffset(self) -> int """
    return 1

  def className(self):
    """ className(self) -> str """
    return ""

  def connectSlotsByName(QObject):
    """ connectSlotsByName(QObject) """
    pass

  def constructor(self, int):
    """ constructor(self, int) -> QMetaMethod """
    return None

  def constructorCount(self):
    """ constructorCount(self) -> int """
    return 1

  def enumerator(self, int):
    """ enumerator(self, int) -> QMetaEnum """
    return None

  def enumeratorCount(self):
    """ enumeratorCount(self) -> int """
    return 1

  def enumeratorOffset(self):
    """ enumeratorOffset(self) -> int """
    return 1

  def indexOfClassInfo(self, str):
    """ indexOfClassInfo(self, str) -> int """
    return 1

  def indexOfConstructor(self, str):
    """ indexOfConstructor(self, str) -> int """
    return 1

  def indexOfEnumerator(self, str):
    """ indexOfEnumerator(self, str) -> int """
    return 1

  def indexOfMethod(self, str):
    """ indexOfMethod(self, str) -> int """
    return 1

  def indexOfProperty(self, str):
    """ indexOfProperty(self, str) -> int """
    return 1

  def indexOfSignal(self, str):
    """ indexOfSignal(self, str) -> int """
    return 1

  def indexOfSlot(self, str):
    """ indexOfSlot(self, str) -> int """
    return 1

  def inherits(self, QMetaObject):
    """ inherits(self, QMetaObject) -> bool """
    return None

  def invokeMethod(QObject, str, arg0, QGenericReturnArgument, arg1=None, 0)=None, arg2=None, 0)=None, arg3=None, 0)=None, arg4=None, 0)=None, arg5=None, 0)=None, arg6=None, 0)=None, arg7=None, 0)=None, arg8=None, 0)=None, arg9=None, 0)=None, arg10=None, 0)=None):
    """ invokeMethod(QObject, str, Qt.ConnectionType, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object
    invokeMethod(QObject, str, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object
    invokeMethod(QObject, str, Qt.ConnectionType, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object
    invokeMethod(QObject, str, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object """
    return None

  def method(self, int):
    """ method(self, int) -> QMetaMethod """
    return None

  def methodCount(self):
    """ methodCount(self) -> int """
    return 1

  def methodOffset(self):
    """ methodOffset(self) -> int """
    return 1

  def normalizedSignature(str):
    """ normalizedSignature(str) -> QByteArray """
    return None

  def normalizedType(str):
    """ normalizedType(str) -> QByteArray """
    return None

  def property(self, int):
    """ property(self, int) -> QMetaProperty """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def propertyOffset(self):
    """ propertyOffset(self) -> int """
    return 1

  def superClass(self):
    """ superClass(self) -> QMetaObject """
    return None

  def userProperty(self):
    """ userProperty(self) -> QMetaProperty """
    return None

class QMetaProperty(simplewrapper):
  """ QMetaProperty()
  QMetaProperty(QMetaProperty) """

  def enumerator(self):
    """ enumerator(self) -> QMetaEnum """
    return None

  def hasNotifySignal(self):
    """ hasNotifySignal(self) -> bool """
    return None

  def hasStdCppSet(self):
    """ hasStdCppSet(self) -> bool """
    return None

  def isConstant(self):
    """ isConstant(self) -> bool """
    return None

  def isDesignable(self, arg0=None):
    """ isDesignable(self, object: QObject = None) -> bool """
    return None

  def isEnumType(self):
    """ isEnumType(self) -> bool """
    return None

  def isFinal(self):
    """ isFinal(self) -> bool """
    return None

  def isFlagType(self):
    """ isFlagType(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isResettable(self):
    """ isResettable(self) -> bool """
    return None

  def isScriptable(self, arg0=None):
    """ isScriptable(self, object: QObject = None) -> bool """
    return None

  def isStored(self, arg0=None):
    """ isStored(self, object: QObject = None) -> bool """
    return None

  def isUser(self, arg0=None):
    """ isUser(self, object: QObject = None) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def notifySignal(self):
    """ notifySignal(self) -> QMetaMethod """
    return None

  def notifySignalIndex(self):
    """ notifySignalIndex(self) -> int """
    return 1

  def propertyIndex(self):
    """ propertyIndex(self) -> int """
    return 1

  def read(self, QObject):
    """ read(self, QObject) -> Any """
    return None

  def reset(self, QObject):
    """ reset(self, QObject) -> bool """
    return None

  def type(self):
    """ type(self) -> QVariant.Type """
    return None

  def typeName(self):
    """ typeName(self) -> str """
    return ""

  def userType(self):
    """ userType(self) -> int """
    return 1

  def write(self, QObject, Any):
    """ write(self, QObject, Any) -> bool """
    return None

class QMetaType(simplewrapper):
  """ QMetaType(int) """

  Bool = None
  Char = None
  Double = None
  FirstGuiType = None
  Float = None
  Int = None
  IsEnumeration = None
  LastCoreType = None
  Long = None
  LongLong = None
  MovableType = None
  NeedsConstruction = None
  NeedsDestruction = None
  PointerToQObject = None
  QBitArray = None
  QBitmap = None
  QBrush = None
  QByteArray = None
  QByteArrayList = None
  QCborArray = None
  QCborMap = None
  QCborSimpleType = None
  QCborValue = None
  QChar = None
  QColor = None
  QCursor = None
  QDate = None
  QDateTime = None
  QEasingCurve = None
  QFont = None
  QIcon = None
  QImage = None
  QJsonArray = None
  QJsonDocument = None
  QJsonObject = None
  QJsonValue = None
  QKeySequence = None
  QLine = None
  QLineF = None
  QLocale = None
  QMatrix = None
  QMatrix4x4 = None
  QModelIndex = None
  QObjectStar = None
  QPalette = None
  QPen = None
  QPersistentModelIndex = None
  QPixmap = None
  QPoint = None
  QPointF = None
  QPolygon = None
  QPolygonF = None
  QQuaternion = None
  QRect = None
  QRectF = None
  QRegExp = None
  QRegion = None
  QRegularExpression = None
  QSize = None
  QSizeF = None
  QSizePolicy = None
  QString = None
  QStringList = None
  QTextFormat = None
  QTextLength = None
  QTime = None
  QTransform = None
  QUrl = None
  QUuid = None
  QVariant = None
  QVariantHash = None
  QVariantList = None
  QVariantMap = None
  QVector2D = None
  QVector3D = None
  QVector4D = None
  SChar = None
  Short = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TypeFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TypeFlags(simplewrapper):
    """ QMetaType.TypeFlags()
    QMetaType.TypeFlags(Union[QMetaType.TypeFlags, QMetaType.TypeFlag])
    QMetaType.TypeFlags(QMetaType.TypeFlags) """

    pass

  UChar = None
  UInt = None
  ULong = None
  ULongLong = None
  UShort = None
  UnknownType = None
  User = None
  Void = None
  VoidStar = None

  def flags(self):
    """ flags(self) -> QMetaType.TypeFlags """
    return None

  def id(self):
    """ id(self) -> int """
    return 1

  def isRegistered(int):
    """ isRegistered(int) -> bool
    isRegistered(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def metaObjectForType(int):
    """ metaObjectForType(int) -> QMetaObject """
    return None

  def type(str):
    """ type(str) -> int """
    return 1

  def typeFlags(int):
    """ typeFlags(int) -> QMetaType.TypeFlags """
    return None

  def typeName(int):
    """ typeName(int) -> str """
    return ""

class QMimeData(QObject):
  """ QMimeData() """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def colorData(self):
    """ colorData(self) -> Any """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def data(self, str):
    """ data(self, str) -> QByteArray """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def formats(self):
    """ formats(self) -> List[str] """
    return ""

  def hasColor(self):
    """ hasColor(self) -> bool """
    return None

  def hasFormat(self, str):
    """ hasFormat(self, str) -> bool """
    return None

  def hasHtml(self):
    """ hasHtml(self) -> bool """
    return None

  def hasImage(self):
    """ hasImage(self) -> bool """
    return None

  def hasText(self):
    """ hasText(self) -> bool """
    return None

  def hasUrls(self):
    """ hasUrls(self) -> bool """
    return None

  def html(self):
    """ html(self) -> str """
    return ""

  def imageData(self):
    """ imageData(self) -> Any """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeFormat(self, str):
    """ removeFormat(self, str) """
    pass

  def retrieveData(self, str, arg0):
    """ retrieveData(self, str, QVariant.Type) -> Any """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setColorData(self, Any):
    """ setColorData(self, Any) """
    pass

  def setData(self, str, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setData(self, str, Union[QByteArray, bytes, bytearray]) """
    pass

  def setHtml(self, str):
    """ setHtml(self, str) """
    pass

  def setImageData(self, Any):
    """ setImageData(self, Any) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setUrls(self, IterableQUrl=None):
    """ setUrls(self, Iterable[QUrl]) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def urls(self):
    """ urls(self) -> List[QUrl] """
    return None

class QMimeDatabase(simplewrapper):
  """ QMimeDatabase() """

  MatchContent = None
  MatchDefault = None
  MatchExtension = None

  class MatchMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def allMimeTypes(self):
    """ allMimeTypes(self) -> List[QMimeType] """
    return None

  def mimeTypeForData(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ mimeTypeForData(self, Union[QByteArray, bytes, bytearray]) -> QMimeType
    mimeTypeForData(self, QIODevice) -> QMimeType """
    return None

  def mimeTypeForFile(self, str, arg0=None):
    """ mimeTypeForFile(self, str, mode: QMimeDatabase.MatchMode = QMimeDatabase.MatchDefault) -> QMimeType
    mimeTypeForFile(self, QFileInfo, mode: QMimeDatabase.MatchMode = QMimeDatabase.MatchDefault) -> QMimeType """
    return None

  def mimeTypeForFileNameAndData(self, str, QIODevice):
    """ mimeTypeForFileNameAndData(self, str, QIODevice) -> QMimeType
    mimeTypeForFileNameAndData(self, str, Union[QByteArray, bytes, bytearray]) -> QMimeType """
    return None

  def mimeTypeForName(self, str):
    """ mimeTypeForName(self, str) -> QMimeType """
    return None

  def mimeTypeForUrl(self, QUrl):
    """ mimeTypeForUrl(self, QUrl) -> QMimeType """
    return None

  def mimeTypesForFileName(self, str):
    """ mimeTypesForFileName(self, str) -> List[QMimeType] """
    return None

  def suffixForFileName(self, str):
    """ suffixForFileName(self, str) -> str """
    return ""

class QMimeType(simplewrapper):
  """ QMimeType()
  QMimeType(QMimeType) """

  def aliases(self):
    """ aliases(self) -> List[str] """
    return ""

  def allAncestors(self):
    """ allAncestors(self) -> List[str] """
    return ""

  def comment(self):
    """ comment(self) -> str """
    return ""

  def filterString(self):
    """ filterString(self) -> str """
    return ""

  def genericIconName(self):
    """ genericIconName(self) -> str """
    return ""

  def globPatterns(self):
    """ globPatterns(self) -> List[str] """
    return ""

  def iconName(self):
    """ iconName(self) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def isDefault(self):
    """ isDefault(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def parentMimeTypes(self):
    """ parentMimeTypes(self) -> List[str] """
    return ""

  def preferredSuffix(self):
    """ preferredSuffix(self) -> str """
    return ""

  def suffixes(self):
    """ suffixes(self) -> List[str] """
    return ""

  def swap(self, QMimeType):
    """ swap(self, QMimeType) """
    pass

class QModelIndex(simplewrapper):
  """ QModelIndex()
  QModelIndex(QModelIndex)
  QModelIndex(QPersistentModelIndex) """

  def child(self, int, int):
    """ child(self, int, int) -> QModelIndex """
    return None

  def column(self):
    """ column(self) -> int """
    return 1

  def data(self, arg0=None):
    """ data(self, role: int = Qt.DisplayRole) -> Any """
    return None

  def flags(self):
    """ flags(self) -> Qt.ItemFlags """
    return None

  def internalId(self):
    """ internalId(self) -> int """
    return 1

  def internalPointer(self):
    """ internalPointer(self) -> object """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return ""

  def parent(self):
    """ parent(self) -> QModelIndex """
    return None

  def row(self):
    """ row(self) -> int """
    return 1

  def sibling(self, int, int):
    """ sibling(self, int, int) -> QModelIndex """
    return None

  def siblingAtColumn(self, int):
    """ siblingAtColumn(self, int) -> QModelIndex """
    return None

  def siblingAtRow(self, int):
    """ siblingAtRow(self, int) -> QModelIndex """
    return None

class QMutex(simplewrapper):
  """ QMutex(mode: QMutex.RecursionMode = QMutex.NonRecursive) """

  NonRecursive = None

  class RecursionMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Recursive = None

  def isRecursive(self):
    """ isRecursive(self) -> bool """
    return None

  def lock(self):
    """ lock(self) """
    pass

  def tryLock(self, arg0=None):
    """ tryLock(self, timeout: int = 0) -> bool """
    return None

  def unlock(self):
    """ unlock(self) """
    pass

class QMutexLocker(simplewrapper):
  """ QMutexLocker(QMutex) """

  def mutex(self):
    """ mutex(self) -> QMutex """
    return None

  def relock(self):
    """ relock(self) """
    pass

  def unlock(self):
    """ unlock(self) """
    pass

class QObject(wrapper):
  """ QObject(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QObjectCleanupHandler(QObject):
  """ QObjectCleanupHandler() """

  def add(self, QObject):
    """ add(self, QObject) -> QObject """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remove(self, QObject):
    """ remove(self, QObject) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QOperatingSystemVersion(simplewrapper):
  """ QOperatingSystemVersion(QOperatingSystemVersion.OSType, int, vminor: int = -1, vmicro: int = -1)
  QOperatingSystemVersion(QOperatingSystemVersion) """

  Android = None
  AndroidJellyBean = None
  AndroidJellyBean_MR1 = None
  AndroidJellyBean_MR2 = None
  AndroidKitKat = None
  AndroidLollipop = None
  AndroidLollipop_MR1 = None
  AndroidMarshmallow = None
  AndroidNougat = None
  AndroidNougat_MR1 = None
  AndroidOreo = None
  IOS = None
  MacOS = None
  MacOSHighSierra = None
  MacOSMojave = None
  MacOSSierra = None

  class OSType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  OSXElCapitan = None
  OSXMavericks = None
  OSXYosemite = None
  TvOS = None
  Unknown = None
  WatchOS = None
  Windows = None
  Windows10 = None
  Windows7 = None
  Windows8 = None
  Windows8_1 = None

  def current():
    """ current() -> QOperatingSystemVersion """
    return None

  def currentType():
    """ currentType() -> QOperatingSystemVersion.OSType """
    return None

  def majorVersion(self):
    """ majorVersion(self) -> int """
    return 1

  def microVersion(self):
    """ microVersion(self) -> int """
    return 1

  def minorVersion(self):
    """ minorVersion(self) -> int """
    return 1

  def name(self):
    """ name(self) -> str """
    return ""

  def segmentCount(self):
    """ segmentCount(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QOperatingSystemVersion.OSType """
    return None

class QParallelAnimationGroup(QAnimationGroup):
  """ QParallelAnimationGroup(parent: QObject = None) """

  Backward = None
  DeleteWhenStopped = None
  Forward = None
  KeepWhenStopped = None
  Paused = None
  Running = None
  Stopped = None

  def addAnimation(self, QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def animationAt(self, int):
    """ animationAt(self, int) -> QAbstractAnimation """
    return ""

  def animationCount(self):
    """ animationCount(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def currentLoop(self):
    """ currentLoop(self) -> int """
    return 1

  def currentLoopChanged(self, int):
    """ currentLoopChanged(self, int) [signal] """
    pass

  def currentLoopTime(self):
    """ currentLoopTime(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QAbstractAnimation.Direction """
    return ""

  def directionChanged(self, arg0):
    """ directionChanged(self, QAbstractAnimation.Direction) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def group(self):
    """ group(self) -> QAnimationGroup """
    return None

  def indexOfAnimation(self, QAbstractAnimation):
    """ indexOfAnimation(self, QAbstractAnimation) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertAnimation(self, int, QAbstractAnimation):
    """ insertAnimation(self, int, QAbstractAnimation) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pause(self):
    """ pause(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QAbstractAnimation.Direction) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start():
    """ start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QAbstractAnimation.State """
    return ""

  def stateChanged(self, arg0, arg1):
    """ stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def takeAnimation(self, int):
    """ takeAnimation(self, int) -> QAbstractAnimation """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def totalDuration(self):
    """ totalDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCurrentTime(self, int):
    """ updateCurrentTime(self, int) """
    pass

  def updateDirection(self, arg0):
    """ updateDirection(self, QAbstractAnimation.Direction) """
    pass

  def updateState(self, arg0, arg1):
    """ updateState(self, QAbstractAnimation.State, QAbstractAnimation.State) """
    pass

class QPauseAnimation(QAbstractAnimation):
  """ QPauseAnimation(parent: QObject = None)
  QPauseAnimation(int, parent: QObject = None) """

  Backward = None
  DeleteWhenStopped = None
  Forward = None
  KeepWhenStopped = None
  Paused = None
  Running = None
  Stopped = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentLoop(self):
    """ currentLoop(self) -> int """
    return 1

  def currentLoopChanged(self, int):
    """ currentLoopChanged(self, int) [signal] """
    pass

  def currentLoopTime(self):
    """ currentLoopTime(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QAbstractAnimation.Direction """
    return ""

  def directionChanged(self, arg0):
    """ directionChanged(self, QAbstractAnimation.Direction) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def group(self):
    """ group(self) -> QAnimationGroup """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pause(self):
    """ pause(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QAbstractAnimation.Direction) """
    pass

  def setDuration(self, int):
    """ setDuration(self, int) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start():
    """ start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QAbstractAnimation.State """
    return ""

  def stateChanged(self, arg0, arg1):
    """ stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def totalDuration(self):
    """ totalDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCurrentTime(self, int):
    """ updateCurrentTime(self, int) """
    pass

  def updateDirection():
    pass

  def updateState():
    pass

class QPersistentModelIndex(simplewrapper):
  """ QPersistentModelIndex()
  QPersistentModelIndex(QModelIndex)
  QPersistentModelIndex(QPersistentModelIndex) """

  def child(self, int, int):
    """ child(self, int, int) -> QModelIndex """
    return None

  def column(self):
    """ column(self) -> int """
    return 1

  def data(self, arg0=None):
    """ data(self, role: int = Qt.DisplayRole) -> Any """
    return None

  def flags(self):
    """ flags(self) -> Qt.ItemFlags """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return ""

  def parent(self):
    """ parent(self) -> QModelIndex """
    return None

  def row(self):
    """ row(self) -> int """
    return 1

  def sibling(self, int, int):
    """ sibling(self, int, int) -> QModelIndex """
    return None

  def swap(self, QPersistentModelIndex):
    """ swap(self, QPersistentModelIndex) """
    pass

class QPluginLoader(QObject):
  """ QPluginLoader(parent: QObject = None)
  QPluginLoader(str, parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def instance(self):
    """ instance(self) -> QObject """
    return None

  def isLoaded(self):
    """ isLoaded(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def load(self):
    """ load(self) -> bool """
    return None

  def loadHints(self):
    """ loadHints(self) -> QLibrary.LoadHints """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setLoadHints(self, UnionQLibrary.LoadHints=None, QLibrary.LoadHint=None):
    """ setLoadHints(self, Union[QLibrary.LoadHints, QLibrary.LoadHint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def staticInstances():
    """ staticInstances() -> List[QObject] """
    return None

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unload(self):
    """ unload(self) -> bool """
    return None

class QPoint(simplewrapper):
  """ QPoint()
  QPoint(int, int)
  QPoint(QPoint) """

  def dotProduct(QPoint, QPoint):
    """ dotProduct(QPoint, QPoint) -> int """
    return 1

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def manhattanLength(self):
    """ manhattanLength(self) -> int """
    return 1

  def setX(self, int):
    """ setX(self, int) """
    pass

  def setY(self, int):
    """ setY(self, int) """
    pass

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QPointF(simplewrapper):
  """ QPointF()
  QPointF(float, float)
  QPointF(QPoint)
  QPointF(QPointF) """

  def dotProduct(UnionQPointF=None, QPoint=None, UnionQPointF=None, QPoint=None):
    """ dotProduct(Union[QPointF, QPoint], Union[QPointF, QPoint]) -> float """
    return 1.0

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def manhattanLength(self):
    """ manhattanLength(self) -> float """
    return 1.0

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def toPoint(self):
    """ toPoint(self) -> QPoint """
    return 1

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

class QProcess(QIODevice):
  """ QProcess(parent: QObject = None) """

  Append = None
  CrashExit = None
  Crashed = None
  ExistingOnly = None

  class ExitStatus(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FailedToStart = None
  ForwardedChannels = None
  ForwardedErrorChannel = None
  ForwardedInputChannel = None
  ForwardedOutputChannel = None

  class InputChannelMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ManagedInputChannel = None
  MergedChannels = None
  NewOnly = None
  NormalExit = None
  NotOpen = None
  NotRunning = None
  class ProcessChannel(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ProcessChannelMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ProcessError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ProcessState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ReadError = None
  ReadOnly = None
  ReadWrite = None
  Running = None
  SeparateChannels = None
  StandardError = None
  StandardOutput = None
  Starting = None
  Text = None
  Timedout = None
  Truncate = None
  Unbuffered = None
  UnknownError = None
  WriteError = None
  WriteOnly = None

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def arguments(self):
    """ arguments(self) -> List[str] """
    return ""

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def closeReadChannel(self, arg0):
    """ closeReadChannel(self, QProcess.ProcessChannel) """
    pass

  def closeWriteChannel(self):
    """ closeWriteChannel(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QProcess.ProcessError
    error(self, QProcess.ProcessError) [signal] """
    return None

  def errorOccurred(self, arg0):
    """ errorOccurred(self, QProcess.ProcessError) [signal] """
    pass

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def execute(str, Iterablestr=None):
    """ execute(str, Iterable[str]) -> int
    execute(str) -> int """
    return 1

  def exitCode(self):
    """ exitCode(self) -> int """
    return 1

  def exitStatus(self):
    """ exitStatus(self) -> QProcess.ExitStatus """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int, arg0):
    """ finished(self, int, QProcess.ExitStatus) [signal] """
    pass

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def inputChannelMode(self):
    """ inputChannelMode(self) -> QProcess.InputChannelMode """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def kill(self):
    """ kill(self) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nullDevice():
    """ nullDevice() -> str """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, arg0=None, arg1=None):
    """ open(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def pid(self):
    """ pid(self) -> sip.voidptr """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def processChannelMode(self):
    """ processChannelMode(self) -> QProcess.ProcessChannelMode """
    return None

  def processEnvironment(self):
    """ processEnvironment(self) -> QProcessEnvironment """
    return None

  def processId(self):
    """ processId(self) -> int """
    return 1

  def program(self):
    """ program(self) -> str """
    return ""

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readAllStandardError(self):
    """ readAllStandardError(self) -> QByteArray """
    return None

  def readAllStandardOutput(self):
    """ readAllStandardOutput(self) -> QByteArray """
    return None

  def readChannel(self):
    """ readChannel(self) -> QProcess.ProcessChannel """
    return None

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData(self, int):
    """ readData(self, int) -> bytes """
    return None

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def readyReadStandardError(self):
    """ readyReadStandardError(self) [signal] """
    pass

  def readyReadStandardOutput(self):
    """ readyReadStandardOutput(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setArguments(self, Iterablestr=None):
    """ setArguments(self, Iterable[str]) """
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString():
    pass

  def setInputChannelMode(self, arg0):
    """ setInputChannelMode(self, QProcess.InputChannelMode) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProcessChannelMode(self, arg0):
    """ setProcessChannelMode(self, QProcess.ProcessChannelMode) """
    pass

  def setProcessEnvironment(self, QProcessEnvironment):
    """ setProcessEnvironment(self, QProcessEnvironment) """
    pass

  def setProcessState(self, arg0):
    """ setProcessState(self, QProcess.ProcessState) """
    pass

  def setProgram(self, str):
    """ setProgram(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setReadChannel(self, arg0):
    """ setReadChannel(self, QProcess.ProcessChannel) """
    pass

  def setStandardErrorFile():
    """ setStandardErrorFile(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.Truncate) """
    pass

  def setStandardInputFile(self, str):
    """ setStandardInputFile(self, str) """
    pass

  def setStandardOutputFile():
    """ setStandardOutputFile(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.Truncate) """
    pass

  def setStandardOutputProcess(self, QProcess):
    """ setStandardOutputProcess(self, QProcess) """
    pass

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def setWorkingDirectory(self, str):
    """ setWorkingDirectory(self, str) """
    pass

  def setupChildProcess(self):
    """ setupChildProcess(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def start():
    """ start(self, str, Iterable[str], mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)
    start(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)
    start(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) """
    pass

  def startDetached(str, Iterablestr=None, str=None):
    """ startDetached(str, Iterable[str], str) -> Tuple[bool, int]
    startDetached(str, Iterable[str]) -> bool
    startDetached(str) -> bool
    startDetached(self) -> Tuple[bool, int] """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  def started(self):
    """ started(self) [signal] """
    pass

  def state(self):
    """ state(self) -> QProcess.ProcessState """
    return None

  def stateChanged(self, arg0):
    """ stateChanged(self, QProcess.ProcessState) [signal] """
    pass

  staticMetaObject = None

  def systemEnvironment():
    """ systemEnvironment() -> List[str] """
    return ""

  def terminate(self):
    """ terminate(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, arg0=None):
    """ waitForBytesWritten(self, msecs: int = 30000) -> bool """
    return None

  def waitForFinished(self, arg0=None):
    """ waitForFinished(self, msecs: int = 30000) -> bool """
    return None

  def waitForReadyRead(self, arg0=None):
    """ waitForReadyRead(self, msecs: int = 30000) -> bool """
    return None

  def waitForStarted(self, arg0=None):
    """ waitForStarted(self, msecs: int = 30000) -> bool """
    return None

  def workingDirectory(self):
    """ workingDirectory(self) -> str """
    return ""

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QProcessEnvironment(simplewrapper):
  """ QProcessEnvironment()
  QProcessEnvironment(QProcessEnvironment) """

  def clear(self):
    """ clear(self) """
    pass

  def contains(self, str):
    """ contains(self, str) -> bool """
    return None

  def insert(self, str, str):
    """ insert(self, str, str)
    insert(self, QProcessEnvironment) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def keys(self):
    """ keys(self) -> List[str] """
    return ""

  def remove(self, str):
    """ remove(self, str) """
    pass

  def swap(self, QProcessEnvironment):
    """ swap(self, QProcessEnvironment) """
    pass

  def systemEnvironment():
    """ systemEnvironment() -> QProcessEnvironment """
    return None

  def toStringList(self):
    """ toStringList(self) -> List[str] """
    return ""

  def value(self, str, arg0=None):
    """ value(self, str, defaultValue: str = '') -> str """
    return ""

class QPropertyAnimation(QVariantAnimation):
  """ QPropertyAnimation(parent: QObject = None)
  QPropertyAnimation(QObject, Union[QByteArray, bytes, bytearray], parent: QObject = None) """

  Backward = None
  DeleteWhenStopped = None
  Forward = None
  KeepWhenStopped = None
  Paused = None
  Running = None
  Stopped = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentLoop(self):
    """ currentLoop(self) -> int """
    return 1

  def currentLoopChanged(self, int):
    """ currentLoopChanged(self, int) [signal] """
    pass

  def currentLoopTime(self):
    """ currentLoopTime(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def currentValue(self):
    """ currentValue(self) -> Any """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QAbstractAnimation.Direction """
    return ""

  def directionChanged(self, arg0):
    """ directionChanged(self, QAbstractAnimation.Direction) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def easingCurve(self):
    """ easingCurve(self) -> QEasingCurve """
    return None

  def endValue(self):
    """ endValue(self) -> Any """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def group(self):
    """ group(self) -> QAnimationGroup """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpolated():
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyValueAt(self, float):
    """ keyValueAt(self, float) -> Any """
    return None

  def keyValues(self):
    """ keyValues(self) -> List[Tuple[float, Any]] """
    return 1.0

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pause(self):
    """ pause(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def propertyName(self):
    """ propertyName(self) -> QByteArray """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QAbstractAnimation.Direction) """
    pass

  def setDuration(self, int):
    """ setDuration(self, int) """
    pass

  def setEasingCurve(self, UnionQEasingCurve=None, QEasingCurve.Type=None):
    """ setEasingCurve(self, Union[QEasingCurve, QEasingCurve.Type]) """
    pass

  def setEndValue(self, Any):
    """ setEndValue(self, Any) """
    pass

  def setKeyValueAt(self, float, Any):
    """ setKeyValueAt(self, float, Any) """
    pass

  def setKeyValues(self, IterableTuplefloat=None, Any=None):
    """ setKeyValues(self, Iterable[Tuple[float, Any]]) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setPropertyName(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setPropertyName(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setStartValue(self, Any):
    """ setStartValue(self, Any) """
    pass

  def setTargetObject(self, QObject):
    """ setTargetObject(self, QObject) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start():
    """ start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startValue(self):
    """ startValue(self) -> Any """
    return None

  def state(self):
    """ state(self) -> QAbstractAnimation.State """
    return ""

  def stateChanged(self, arg0, arg1):
    """ stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def targetObject(self):
    """ targetObject(self) -> QObject """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def totalDuration(self):
    """ totalDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCurrentTime():
    pass

  def updateCurrentValue(self, Any):
    """ updateCurrentValue(self, Any) """
    pass

  def updateDirection():
    pass

  def updateState(self, arg0, arg1):
    """ updateState(self, QAbstractAnimation.State, QAbstractAnimation.State) """
    pass

  def valueChanged(self, Any):
    """ valueChanged(self, Any) [signal] """
    pass

class QRandomGenerator(simplewrapper):
  """ QRandomGenerator(seed: int = 1)
  QRandomGenerator(QRandomGenerator) """

  def bounded(self, float):
    """ bounded(self, float) -> float
    bounded(self, int) -> int
    bounded(self, int, int) -> int """
    return 1.0

  def discard(self, int):
    """ discard(self, int) """
    pass

  def generate(self):
    """ generate(self) -> int """
    return 1

  def generate64(self):
    """ generate64(self) -> int """
    return 1

  def generateDouble(self):
    """ generateDouble(self) -> float """
    return 1.0

  def global_():
    """ global_() -> QRandomGenerator """
    return None

  def max():
    """ max() -> int """
    return 1

  def min():
    """ min() -> int """
    return 1

  def securelySeeded():
    """ securelySeeded() -> QRandomGenerator """
    return None

  def seed():
    """ seed(self, seed: int = 1) """
    pass

  def system():
    """ system() -> QRandomGenerator """
    return None

class QReadLocker(simplewrapper):
  """ QReadLocker(QReadWriteLock) """

  def readWriteLock(self):
    """ readWriteLock(self) -> QReadWriteLock """
    return None

  def relock(self):
    """ relock(self) """
    pass

  def unlock(self):
    """ unlock(self) """
    pass

class QReadWriteLock(simplewrapper):
  """ QReadWriteLock(recursionMode: QReadWriteLock.RecursionMode = QReadWriteLock.NonRecursive) """

  NonRecursive = None

  class RecursionMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Recursive = None

  def lockForRead(self):
    """ lockForRead(self) """
    pass

  def lockForWrite(self):
    """ lockForWrite(self) """
    pass

  def tryLockForRead(self):
    """ tryLockForRead(self) -> bool
    tryLockForRead(self, int) -> bool """
    return None

  def tryLockForWrite(self):
    """ tryLockForWrite(self) -> bool
    tryLockForWrite(self, int) -> bool """
    return None

  def unlock(self):
    """ unlock(self) """
    pass

class QRect(simplewrapper):
  """ QRect()
  QRect(int, int, int, int)
  QRect(QPoint, QPoint)
  QRect(QPoint, QSize)
  QRect(QRect) """

  def adjust(self, int, int, int, int):
    """ adjust(self, int, int, int, int) """
    pass

  def adjusted(self, int, int, int, int):
    """ adjusted(self, int, int, int, int) -> QRect """
    return None

  def bottom(self):
    """ bottom(self) -> int """
    return 1

  def bottomLeft(self):
    """ bottomLeft(self) -> QPoint """
    return 1

  def bottomRight(self):
    """ bottomRight(self) -> QPoint """
    return 1

  def center(self):
    """ center(self) -> QPoint """
    return 1

  def contains(self, QPoint, arg0=None):
    """ contains(self, QPoint, proper: bool = False) -> bool
    contains(self, QRect, proper: bool = False) -> bool
    contains(self, int, int, bool) -> bool
    contains(self, int, int) -> bool """
    return None

  def getCoords(self):
    """ getCoords(self) -> Tuple[int, int, int, int] """
    return 1

  def getRect(self):
    """ getRect(self) -> Tuple[int, int, int, int] """
    return 1

  def height(self):
    """ height(self) -> int """
    return 1

  def intersected(self, QRect):
    """ intersected(self, QRect) -> QRect """
    return None

  def intersects(self, QRect):
    """ intersects(self, QRect) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def left(self):
    """ left(self) -> int """
    return 1

  def marginsAdded(self, QMargins):
    """ marginsAdded(self, QMargins) -> QRect """
    return None

  def marginsRemoved(self, QMargins):
    """ marginsRemoved(self, QMargins) -> QRect """
    return None

  def moveBottom(self, int):
    """ moveBottom(self, int) """
    pass

  def moveBottomLeft(self, QPoint):
    """ moveBottomLeft(self, QPoint) """
    pass

  def moveBottomRight(self, QPoint):
    """ moveBottomRight(self, QPoint) """
    pass

  def moveCenter(self, QPoint):
    """ moveCenter(self, QPoint) """
    pass

  def moveLeft(self, int):
    """ moveLeft(self, int) """
    pass

  def moveRight(self, int):
    """ moveRight(self, int) """
    pass

  def moveTo(self, int, int):
    """ moveTo(self, int, int)
    moveTo(self, QPoint) """
    pass

  def moveTop(self, int):
    """ moveTop(self, int) """
    pass

  def moveTopLeft(self, QPoint):
    """ moveTopLeft(self, QPoint) """
    pass

  def moveTopRight(self, QPoint):
    """ moveTopRight(self, QPoint) """
    pass

  def normalized(self):
    """ normalized(self) -> QRect """
    return None

  def right(self):
    """ right(self) -> int """
    return 1

  def setBottom(self, int):
    """ setBottom(self, int) """
    pass

  def setBottomLeft(self, QPoint):
    """ setBottomLeft(self, QPoint) """
    pass

  def setBottomRight(self, QPoint):
    """ setBottomRight(self, QPoint) """
    pass

  def setCoords(self, int, int, int, int):
    """ setCoords(self, int, int, int, int) """
    pass

  def setHeight(self, int):
    """ setHeight(self, int) """
    pass

  def setLeft(self, int):
    """ setLeft(self, int) """
    pass

  def setRect(self, int, int, int, int):
    """ setRect(self, int, int, int, int) """
    pass

  def setRight(self, int):
    """ setRight(self, int) """
    pass

  def setSize(self, QSize):
    """ setSize(self, QSize) """
    pass

  def setTop(self, int):
    """ setTop(self, int) """
    pass

  def setTopLeft(self, QPoint):
    """ setTopLeft(self, QPoint) """
    pass

  def setTopRight(self, QPoint):
    """ setTopRight(self, QPoint) """
    pass

  def setWidth(self, int):
    """ setWidth(self, int) """
    pass

  def setX(self, int):
    """ setX(self, int) """
    pass

  def setY(self, int):
    """ setY(self, int) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def top(self):
    """ top(self) -> int """
    return 1

  def topLeft(self):
    """ topLeft(self) -> QPoint """
    return 1

  def topRight(self):
    """ topRight(self) -> QPoint """
    return 1

  def translate(self, int, int):
    """ translate(self, int, int)
    translate(self, QPoint) """
    pass

  def translated(self, int, int):
    """ translated(self, int, int) -> QRect
    translated(self, QPoint) -> QRect """
    return None

  def transposed(self):
    """ transposed(self) -> QRect """
    return None

  def united(self, QRect):
    """ united(self, QRect) -> QRect """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QRectF(simplewrapper):
  """ QRectF()
  QRectF(Union[QPointF, QPoint], QSizeF)
  QRectF(Union[QPointF, QPoint], Union[QPointF, QPoint])
  QRectF(float, float, float, float)
  QRectF(QRect)
  QRectF(QRectF) """

  def adjust(self, float, float, float, float):
    """ adjust(self, float, float, float, float) """
    pass

  def adjusted(self, float, float, float, float):
    """ adjusted(self, float, float, float, float) -> QRectF """
    return None

  def bottom(self):
    """ bottom(self) -> float """
    return 1.0

  def bottomLeft(self):
    """ bottomLeft(self) -> QPointF """
    return 1

  def bottomRight(self):
    """ bottomRight(self) -> QPointF """
    return 1

  def center(self):
    """ center(self) -> QPointF """
    return 1

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool
    contains(self, QRectF) -> bool
    contains(self, float, float) -> bool """
    return None

  def getCoords(self):
    """ getCoords(self) -> Tuple[float, float, float, float] """
    return 1.0

  def getRect(self):
    """ getRect(self) -> Tuple[float, float, float, float] """
    return 1.0

  def height(self):
    """ height(self) -> float """
    return 1.0

  def intersected(self, QRectF):
    """ intersected(self, QRectF) -> QRectF """
    return None

  def intersects(self, QRectF):
    """ intersects(self, QRectF) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def left(self):
    """ left(self) -> float """
    return 1.0

  def marginsAdded(self, QMarginsF):
    """ marginsAdded(self, QMarginsF) -> QRectF """
    return None

  def marginsRemoved(self, QMarginsF):
    """ marginsRemoved(self, QMarginsF) -> QRectF """
    return None

  def moveBottom(self, float):
    """ moveBottom(self, float) """
    pass

  def moveBottomLeft(self, UnionQPointF=None, QPoint=None):
    """ moveBottomLeft(self, Union[QPointF, QPoint]) """
    pass

  def moveBottomRight(self, UnionQPointF=None, QPoint=None):
    """ moveBottomRight(self, Union[QPointF, QPoint]) """
    pass

  def moveCenter(self, UnionQPointF=None, QPoint=None):
    """ moveCenter(self, Union[QPointF, QPoint]) """
    pass

  def moveLeft(self, float):
    """ moveLeft(self, float) """
    pass

  def moveRight(self, float):
    """ moveRight(self, float) """
    pass

  def moveTo(self, float, float):
    """ moveTo(self, float, float)
    moveTo(self, Union[QPointF, QPoint]) """
    pass

  def moveTop(self, float):
    """ moveTop(self, float) """
    pass

  def moveTopLeft(self, UnionQPointF=None, QPoint=None):
    """ moveTopLeft(self, Union[QPointF, QPoint]) """
    pass

  def moveTopRight(self, UnionQPointF=None, QPoint=None):
    """ moveTopRight(self, Union[QPointF, QPoint]) """
    pass

  def normalized(self):
    """ normalized(self) -> QRectF """
    return None

  def right(self):
    """ right(self) -> float """
    return 1.0

  def setBottom(self, float):
    """ setBottom(self, float) """
    pass

  def setBottomLeft(self, UnionQPointF=None, QPoint=None):
    """ setBottomLeft(self, Union[QPointF, QPoint]) """
    pass

  def setBottomRight(self, UnionQPointF=None, QPoint=None):
    """ setBottomRight(self, Union[QPointF, QPoint]) """
    pass

  def setCoords(self, float, float, float, float):
    """ setCoords(self, float, float, float, float) """
    pass

  def setHeight(self, float):
    """ setHeight(self, float) """
    pass

  def setLeft(self, float):
    """ setLeft(self, float) """
    pass

  def setRect(self, float, float, float, float):
    """ setRect(self, float, float, float, float) """
    pass

  def setRight(self, float):
    """ setRight(self, float) """
    pass

  def setSize(self, QSizeF):
    """ setSize(self, QSizeF) """
    pass

  def setTop(self, float):
    """ setTop(self, float) """
    pass

  def setTopLeft(self, UnionQPointF=None, QPoint=None):
    """ setTopLeft(self, Union[QPointF, QPoint]) """
    pass

  def setTopRight(self, UnionQPointF=None, QPoint=None):
    """ setTopRight(self, Union[QPointF, QPoint]) """
    pass

  def setWidth(self, float):
    """ setWidth(self, float) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def size(self):
    """ size(self) -> QSizeF """
    return None

  def toAlignedRect(self):
    """ toAlignedRect(self) -> QRect """
    return None

  def toRect(self):
    """ toRect(self) -> QRect """
    return None

  def top(self):
    """ top(self) -> float """
    return 1.0

  def topLeft(self):
    """ topLeft(self) -> QPointF """
    return 1

  def topRight(self):
    """ topRight(self) -> QPointF """
    return 1

  def translate(self, float, float):
    """ translate(self, float, float)
    translate(self, Union[QPointF, QPoint]) """
    pass

  def translated(self, float, float):
    """ translated(self, float, float) -> QRectF
    translated(self, Union[QPointF, QPoint]) -> QRectF """
    return None

  def transposed(self):
    """ transposed(self) -> QRectF """
    return None

  def united(self, QRectF):
    """ united(self, QRectF) -> QRectF """
    return None

  def width(self):
    """ width(self) -> float """
    return 1.0

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

class QRegExp(simplewrapper):
  """ QRegExp()
  QRegExp(str, cs: Qt.CaseSensitivity = Qt.CaseSensitive, syntax: QRegExp.PatternSyntax = QRegExp.RegExp)
  QRegExp(QRegExp) """

  CaretAtOffset = None
  CaretAtZero = None

  class CaretMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CaretWontMatch = None
  FixedString = None

  class PatternSyntax(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RegExp = None
  RegExp2 = None
  W3CXmlSchema11 = None
  Wildcard = None
  WildcardUnix = None

  def cap(self, arg0=None):
    """ cap(self, nth: int = 0) -> str """
    return ""

  def captureCount(self):
    """ captureCount(self) -> int """
    return 1

  def capturedTexts(self):
    """ capturedTexts(self) -> List[str] """
    return ""

  def caseSensitivity(self):
    """ caseSensitivity(self) -> Qt.CaseSensitivity """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def escape(str):
    """ escape(str) -> str """
    return ""

  def exactMatch(self, str):
    """ exactMatch(self, str) -> bool """
    return None

  def indexIn(self, str, arg0=None, arg1=None):
    """ indexIn(self, str, offset: int = 0, caretMode: QRegExp.CaretMode = QRegExp.CaretAtZero) -> int """
    return 1

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isMinimal(self):
    """ isMinimal(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def lastIndexIn(self, str, arg0=None, arg1=None):
    """ lastIndexIn(self, str, offset: int = -1, caretMode: QRegExp.CaretMode = QRegExp.CaretAtZero) -> int """
    return 1

  def matchedLength(self):
    """ matchedLength(self) -> int """
    return 1

  def pattern(self):
    """ pattern(self) -> str """
    return ""

  def patternSyntax(self):
    """ patternSyntax(self) -> QRegExp.PatternSyntax """
    return None

  def pos(self, arg0=None):
    """ pos(self, nth: int = 0) -> int """
    return 1

  def setCaseSensitivity(self, arg0):
    """ setCaseSensitivity(self, Qt.CaseSensitivity) """
    pass

  def setMinimal(self, bool):
    """ setMinimal(self, bool) """
    pass

  def setPattern(self, str):
    """ setPattern(self, str) """
    pass

  def setPatternSyntax(self, arg0):
    """ setPatternSyntax(self, QRegExp.PatternSyntax) """
    pass

  def swap(self, QRegExp):
    """ swap(self, QRegExp) """
    pass

class QRegularExpression(simplewrapper):
  """ QRegularExpression()
  QRegularExpression(str, options: Union[QRegularExpression.PatternOptions, QRegularExpression.PatternOption] = QRegularExpression.NoPatternOption)
  QRegularExpression(QRegularExpression) """

  AnchoredMatchOption = None
  CaseInsensitiveOption = None
  DontAutomaticallyOptimizeOption = None
  DontCaptureOption = None
  DontCheckSubjectStringMatchOption = None
  DotMatchesEverythingOption = None
  ExtendedPatternSyntaxOption = None
  InvertedGreedinessOption = None

  class MatchOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class MatchOptions(simplewrapper):
    """ QRegularExpression.MatchOptions()
    QRegularExpression.MatchOptions(Union[QRegularExpression.MatchOptions, QRegularExpression.MatchOption])
    QRegularExpression.MatchOptions(QRegularExpression.MatchOptions) """

    pass

  class MatchType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MultilineOption = None
  NoMatch = None
  NoMatchOption = None
  NoPatternOption = None
  NormalMatch = None
  OptimizeOnFirstUsageOption = None
  PartialPreferCompleteMatch = None
  PartialPreferFirstMatch = None

  class PatternOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PatternOptions(simplewrapper):
    """ QRegularExpression.PatternOptions()
    QRegularExpression.PatternOptions(Union[QRegularExpression.PatternOptions, QRegularExpression.PatternOption])
    QRegularExpression.PatternOptions(QRegularExpression.PatternOptions) """

    pass

  UseUnicodePropertiesOption = None

  def anchoredPattern(str):
    """ anchoredPattern(str) -> str """
    return ""

  def captureCount(self):
    """ captureCount(self) -> int """
    return 1

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def escape(str):
    """ escape(str) -> str """
    return ""

  def globalMatch(self, str, arg0=None, arg1=None, arg2=None, arg3=None):
    """ globalMatch(self, str, offset: int = 0, matchType: QRegularExpression.MatchType = QRegularExpression.NormalMatch, matchOptions: Union[QRegularExpression.MatchOptions, QRegularExpression.MatchOption] = QRegularExpression.NoMatchOption) -> QRegularExpressionMatchIterator """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def match(self, str, arg0=None, arg1=None, arg2=None, arg3=None):
    """ match(self, str, offset: int = 0, matchType: QRegularExpression.MatchType = QRegularExpression.NormalMatch, matchOptions: Union[QRegularExpression.MatchOptions, QRegularExpression.MatchOption] = QRegularExpression.NoMatchOption) -> QRegularExpressionMatch """
    return None

  def namedCaptureGroups(self):
    """ namedCaptureGroups(self) -> List[str] """
    return ""

  def optimize(self):
    """ optimize(self) """
    pass

  def pattern(self):
    """ pattern(self) -> str """
    return ""

  def patternErrorOffset(self):
    """ patternErrorOffset(self) -> int """
    return 1

  def patternOptions(self):
    """ patternOptions(self) -> QRegularExpression.PatternOptions """
    return None

  def setPattern(self, str):
    """ setPattern(self, str) """
    pass

  def setPatternOptions(self, UnionQRegularExpression.PatternOptions=None, QRegularExpression.PatternOption=None):
    """ setPatternOptions(self, Union[QRegularExpression.PatternOptions, QRegularExpression.PatternOption]) """
    pass

  def swap(self, QRegularExpression):
    """ swap(self, QRegularExpression) """
    pass

  def wildcardToRegularExpression(str):
    """ wildcardToRegularExpression(str) -> str """
    return ""

class QRegularExpressionMatch(simplewrapper):
  """ QRegularExpressionMatch()
  QRegularExpressionMatch(QRegularExpressionMatch) """

  def captured(self, arg0=None):
    """ captured(self, nth: int = 0) -> str
    captured(self, str) -> str """
    return ""

  def capturedEnd(self, arg0=None):
    """ capturedEnd(self, nth: int = 0) -> int
    capturedEnd(self, str) -> int """
    return 1

  def capturedLength(self, arg0=None):
    """ capturedLength(self, nth: int = 0) -> int
    capturedLength(self, str) -> int """
    return 1

  def capturedStart(self, arg0=None):
    """ capturedStart(self, nth: int = 0) -> int
    capturedStart(self, str) -> int """
    return 1

  def capturedTexts(self):
    """ capturedTexts(self) -> List[str] """
    return ""

  def hasMatch(self):
    """ hasMatch(self) -> bool """
    return None

  def hasPartialMatch(self):
    """ hasPartialMatch(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def lastCapturedIndex(self):
    """ lastCapturedIndex(self) -> int """
    return 1

  def matchOptions(self):
    """ matchOptions(self) -> QRegularExpression.MatchOptions """
    return None

  def matchType(self):
    """ matchType(self) -> QRegularExpression.MatchType """
    return None

  def regularExpression(self):
    """ regularExpression(self) -> QRegularExpression """
    return None

  def swap(self, QRegularExpressionMatch):
    """ swap(self, QRegularExpressionMatch) """
    pass

class QRegularExpressionMatchIterator(simplewrapper):
  """ QRegularExpressionMatchIterator()
  QRegularExpressionMatchIterator(QRegularExpressionMatchIterator) """

  def hasNext(self):
    """ hasNext(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def matchOptions(self):
    """ matchOptions(self) -> QRegularExpression.MatchOptions """
    return None

  def matchType(self):
    """ matchType(self) -> QRegularExpression.MatchType """
    return None

  def next(self):
    """ next(self) -> QRegularExpressionMatch """
    return None

  def peekNext(self):
    """ peekNext(self) -> QRegularExpressionMatch """
    return None

  def regularExpression(self):
    """ regularExpression(self) -> QRegularExpression """
    return None

  def swap(self, QRegularExpressionMatchIterator):
    """ swap(self, QRegularExpressionMatchIterator) """
    pass

class QResource(simplewrapper):
  """ QResource(fileName: str = '', locale: QLocale = QLocale()) """

  class Compression(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoCompression = None
  ZlibCompression = None
  ZstdCompression = None

  def absoluteFilePath(self):
    """ absoluteFilePath(self) -> str """
    return ""

  def children(self):
    """ children(self) -> List[str] """
    return ""

  def compressionAlgorithm(self):
    """ compressionAlgorithm(self) -> QResource.Compression """
    return None

  def data(self):
    """ data(self) -> bytes """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def isCompressed(self):
    """ isCompressed(self) -> bool """
    return None

  def isDir(self):
    """ isDir(self) -> bool """
    return None

  def isFile(self):
    """ isFile(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def lastModified(self):
    """ lastModified(self) -> QDateTime """
    return None

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def registerResource(str, arg0=None):
    """ registerResource(str, mapRoot: str = '') -> bool """
    return None

  def registerResourceData(bytes, arg0=None):
    """ registerResourceData(bytes, mapRoot: str = '') -> bool """
    return None

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def unregisterResource(str, arg0=None):
    """ unregisterResource(str, mapRoot: str = '') -> bool """
    return None

  def unregisterResourceData(bytes, arg0=None):
    """ unregisterResourceData(bytes, mapRoot: str = '') -> bool """
    return None

class QRunnable(wrapper):
  """ QRunnable()
  QRunnable(QRunnable) """

  def autoDelete(self):
    """ autoDelete(self) -> bool """
    return None

  def run(self):
    """ run(self) """
    pass

  def setAutoDelete(self, bool):
    """ setAutoDelete(self, bool) """
    pass

class QSaveFile(QFileDevice):
  """ QSaveFile(str)
  QSaveFile(parent: QObject = None)
  QSaveFile(str, QObject) """

  AbortError = None
  Append = None
  AutoCloseHandle = None
  CopyError = None
  DontCloseHandle = None
  ExeGroup = None
  ExeOther = None
  ExeOwner = None
  ExeUser = None
  ExistingOnly = None
  FatalError = None
  FileAccessTime = None
  FileBirthTime = None
  FileMetadataChangeTime = None
  FileModificationTime = None
  MapPrivateOption = None
  NewOnly = None
  NoError = None
  NoOptions = None
  NotOpen = None
  OpenError = None
  PermissionsError = None
  PositionError = None
  ReadError = None
  ReadGroup = None
  ReadOnly = None
  ReadOther = None
  ReadOwner = None
  ReadUser = None
  ReadWrite = None
  RemoveError = None
  RenameError = None
  ResizeError = None
  ResourceError = None
  Text = None
  TimeOutError = None
  Truncate = None
  Unbuffered = None
  UnspecifiedError = None
  WriteError = None
  WriteGroup = None
  WriteOnly = None
  WriteOther = None
  WriteOwner = None
  WriteUser = None

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def cancelWriting(self):
    """ cancelWriting(self) """
    pass

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close():
    pass

  def commit(self):
    """ commit(self) -> bool """
    return None

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def directWriteFallback(self):
    """ directWriteFallback(self) -> bool """
    return None

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QFileDevice.FileError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def fileTime(self, arg0):
    """ fileTime(self, QFileDevice.FileTime) -> QDateTime """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def handle(self):
    """ handle(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def map(self, int, int, arg0=None):
    """ map(self, int, int, flags: QFileDevice.MemoryMapFlags = QFileDevice.NoOptions) -> sip.voidptr """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def permissions(self):
    """ permissions(self) -> QFileDevice.Permissions """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData():
    pass

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resize(self, int):
    """ resize(self, int) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setDirectWriteFallback(self, bool):
    """ setDirectWriteFallback(self, bool) """
    pass

  def setErrorString():
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFileTime(self, UnionQDateTime=None, datetime.datetime=None, QFileDevice.FileTime=None):
    """ setFileTime(self, Union[QDateTime, datetime.datetime], QFileDevice.FileTime) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPermissions(self, UnionQFileDevice.Permissions=None, QFileDevice.Permission=None):
    """ setPermissions(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool """
    return None

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def unmap(self, arg0):
    """ unmap(self, sip.voidptr) -> bool """
    return None

  def unsetError(self):
    """ unsetError(self) """
    pass

  def waitForBytesWritten(self, int):
    """ waitForBytesWritten(self, int) -> bool """
    return None

  def waitForReadyRead(self, int):
    """ waitForReadyRead(self, int) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QSemaphore(simplewrapper):
  """ QSemaphore(n: int = 0) """

  def acquire():
    """ acquire(self, n: int = 1) """
    pass

  def available(self):
    """ available(self) -> int """
    return 1

  def release():
    """ release(self, n: int = 1) """
    pass

  def tryAcquire(self, arg0=None):
    """ tryAcquire(self, n: int = 1) -> bool
    tryAcquire(self, int, int) -> bool """
    return None

class QSemaphoreReleaser(simplewrapper):
  """ QSemaphoreReleaser()
  QSemaphoreReleaser(QSemaphore, n: int = 1) """

  def cancel(self):
    """ cancel(self) -> QSemaphore """
    return None

  def semaphore(self):
    """ semaphore(self) -> QSemaphore """
    return None

  def swap(self, QSemaphoreReleaser):
    """ swap(self, QSemaphoreReleaser) """
    pass

class QSequentialAnimationGroup(QAnimationGroup):
  """ QSequentialAnimationGroup(parent: QObject = None) """

  Backward = None
  DeleteWhenStopped = None
  Forward = None
  KeepWhenStopped = None
  Paused = None
  Running = None
  Stopped = None

  def addAnimation(self, QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def addPause(self, int):
    """ addPause(self, int) -> QPauseAnimation """
    return None

  def animationAt(self, int):
    """ animationAt(self, int) -> QAbstractAnimation """
    return ""

  def animationCount(self):
    """ animationCount(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def currentAnimation(self):
    """ currentAnimation(self) -> QAbstractAnimation """
    return ""

  def currentAnimationChanged(self, QAbstractAnimation):
    """ currentAnimationChanged(self, QAbstractAnimation) [signal] """
    pass

  def currentLoop(self):
    """ currentLoop(self) -> int """
    return 1

  def currentLoopChanged(self, int):
    """ currentLoopChanged(self, int) [signal] """
    pass

  def currentLoopTime(self):
    """ currentLoopTime(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QAbstractAnimation.Direction """
    return ""

  def directionChanged(self, arg0):
    """ directionChanged(self, QAbstractAnimation.Direction) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def group(self):
    """ group(self) -> QAnimationGroup """
    return None

  def indexOfAnimation(self, QAbstractAnimation):
    """ indexOfAnimation(self, QAbstractAnimation) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertAnimation(self, int, QAbstractAnimation):
    """ insertAnimation(self, int, QAbstractAnimation) """
    pass

  def insertPause(self, int, int):
    """ insertPause(self, int, int) -> QPauseAnimation """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pause(self):
    """ pause(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QAbstractAnimation.Direction) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start():
    """ start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QAbstractAnimation.State """
    return ""

  def stateChanged(self, arg0, arg1):
    """ stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def takeAnimation(self, int):
    """ takeAnimation(self, int) -> QAbstractAnimation """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def totalDuration(self):
    """ totalDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCurrentTime(self, int):
    """ updateCurrentTime(self, int) """
    pass

  def updateDirection(self, arg0):
    """ updateDirection(self, QAbstractAnimation.Direction) """
    pass

  def updateState(self, arg0, arg1):
    """ updateState(self, QAbstractAnimation.State, QAbstractAnimation.State) """
    pass

class QSettings(QObject):
  """ QSettings(str, application: str = '', parent: QObject = None)
  QSettings(QSettings.Scope, str, application: str = '', parent: QObject = None)
  QSettings(QSettings.Format, QSettings.Scope, str, application: str = '', parent: QObject = None)
  QSettings(str, QSettings.Format, parent: QObject = None)
  QSettings(QSettings.Scope, parent: QObject = None)
  QSettings(parent: QObject = None) """

  AccessError = None

  class Format(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FormatError = None
  IniFormat = None
  InvalidFormat = None
  NativeFormat = None
  NoError = None

  class Scope(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Status(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SystemScope = None
  UserScope = None

  def allKeys(self):
    """ allKeys(self) -> List[str] """
    return ""

  def applicationName(self):
    """ applicationName(self) -> str """
    return ""

  def beginGroup(self, str):
    """ beginGroup(self, str) """
    pass

  def beginReadArray(self, str):
    """ beginReadArray(self, str) -> int """
    return 1

  def beginWriteArray():
    """ beginWriteArray(self, str, size: int = -1) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def childGroups(self):
    """ childGroups(self) -> List[str] """
    return ""

  def childKeys(self):
    """ childKeys(self) -> List[str] """
    return ""

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def contains(self, str):
    """ contains(self, str) -> bool """
    return None

  def customEvent():
    pass

  def defaultFormat():
    """ defaultFormat() -> QSettings.Format """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def endArray(self):
    """ endArray(self) """
    pass

  def endGroup(self):
    """ endGroup(self) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fallbacksEnabled(self):
    """ fallbacksEnabled(self) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self):
    """ format(self) -> QSettings.Format """
    return None

  def group(self):
    """ group(self) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def iniCodec(self):
    """ iniCodec(self) -> QTextCodec """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isAtomicSyncRequired(self):
    """ isAtomicSyncRequired(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def organizationName(self):
    """ organizationName(self) -> str """
    return ""

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remove(self, str):
    """ remove(self, str) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def scope(self):
    """ scope(self) -> QSettings.Scope """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setArrayIndex(self, int):
    """ setArrayIndex(self, int) """
    pass

  def setAtomicSyncRequired(self, bool):
    """ setAtomicSyncRequired(self, bool) """
    pass

  def setDefaultFormat(arg0):
    """ setDefaultFormat(QSettings.Format) """
    pass

  def setFallbacksEnabled(self, bool):
    """ setFallbacksEnabled(self, bool) """
    pass

  def setIniCodec(self, QTextCodec):
    """ setIniCodec(self, QTextCodec)
    setIniCodec(self, str) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPath(arg0, arg1, str):
    """ setPath(QSettings.Format, QSettings.Scope, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setValue(self, str, Any):
    """ setValue(self, str, Any) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def status(self):
    """ status(self) -> QSettings.Status """
    return None

  def sync(self):
    """ sync(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def value(self, str, arg0=None, arg1=None):
    """ value(self, str, defaultValue: Any = None, type: type = None) -> object """
    return None

class QSharedMemory(QObject):
  """ QSharedMemory(parent: QObject = None)
  QSharedMemory(str, parent: QObject = None) """

  class AccessMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AlreadyExists = None
  InvalidSize = None
  KeyError = None
  LockError = None
  NoError = None
  NotFound = None
  OutOfResources = None
  PermissionDenied = None
  ReadOnly = None
  ReadWrite = None

  class SharedMemoryError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UnknownError = None

  def attach(self, arg0=None):
    """ attach(self, mode: QSharedMemory.AccessMode = QSharedMemory.ReadWrite) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def constData(self):
    """ constData(self) -> sip.voidptr """
    return None

  def create(self, int, arg0=None):
    """ create(self, int, mode: QSharedMemory.AccessMode = QSharedMemory.ReadWrite) -> bool """
    return None

  def customEvent():
    pass

  def data(self):
    """ data(self) -> sip.voidptr """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def detach(self):
    """ detach(self) -> bool """
    return None

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QSharedMemory.SharedMemoryError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isAttached(self):
    """ isAttached(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def key(self):
    """ key(self) -> str """
    return ""

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lock(self):
    """ lock(self) -> bool """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeKey(self):
    """ nativeKey(self) -> str """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setKey(self, str):
    """ setKey(self, str) """
    pass

  def setNativeKey(self, str):
    """ setNativeKey(self, str) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unlock(self):
    """ unlock(self) -> bool """
    return None

class QSignalBlocker(simplewrapper):
  """ QSignalBlocker(QObject) """

  def reblock(self):
    """ reblock(self) """
    pass

  def unblock(self):
    """ unblock(self) """
    pass

class QSignalMapper(QObject):
  """ QSignalMapper(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def map(self):
    """ map(self)
    map(self, QObject) """
    pass

  def mapped(self, int):
    """ mapped(self, int) [signal]
    mapped(self, str) [signal]
    mapped(self, QObject) [signal] """
    pass

  def mapping(self, int):
    """ mapping(self, int) -> QObject
    mapping(self, str) -> QObject
    mapping(self, QWidget) -> QObject
    mapping(self, QObject) -> QObject """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeMappings(self, QObject):
    """ removeMappings(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setMapping(self, QObject, int):
    """ setMapping(self, QObject, int)
    setMapping(self, QObject, str)
    setMapping(self, QObject, QWidget)
    setMapping(self, QObject, QObject) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QSignalTransition(QAbstractTransition):
  """ QSignalTransition(sourceState: QState = None)
  QSignalTransition(pyqtBoundSignal, sourceState: QState = None) """

  ExternalTransition = None
  InternalTransition = None
  def addAnimation(self, QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def animations(self):
    """ animations(self) -> List[QAbstractAnimation] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def eventTest(self, QEvent):
    """ eventTest(self, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onTransition(self, QEvent):
    """ onTransition(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderObject(self):
    """ senderObject(self) -> QObject """
    return None

  def senderObjectChanged(self):
    """ senderObjectChanged(self) [signal] """
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSenderObject(self, QObject):
    """ setSenderObject(self, QObject) """
    pass

  def setSignal(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setSignal(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setTargetState(self, QAbstractState):
    """ setTargetState(self, QAbstractState) """
    pass

  def setTargetStates(self, IterableQAbstractState=None):
    """ setTargetStates(self, Iterable[QAbstractState]) """
    pass

  def setTransitionType(self, arg0):
    """ setTransitionType(self, QAbstractTransition.TransitionType) """
    pass

  def signal(self):
    """ signal(self) -> QByteArray """
    return None

  def signalChanged(self):
    """ signalChanged(self) [signal] """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sourceState(self):
    """ sourceState(self) -> QState """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def targetState(self):
    """ targetState(self) -> QAbstractState """
    return ""

  def targetStateChanged(self):
    """ targetStateChanged(self) [signal] """
    pass

  def targetStates(self):
    """ targetStates(self) -> List[QAbstractState] """
    return ""

  def targetStatesChanged(self):
    """ targetStatesChanged(self) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transitionType(self):
    """ transitionType(self) -> QAbstractTransition.TransitionType """
    return ""

  def triggered(self):
    """ triggered(self) [signal] """
    pass

class QSize(simplewrapper):
  """ QSize()
  QSize(int, int)
  QSize(QSize) """

  def boundedTo(self, QSize):
    """ boundedTo(self, QSize) -> QSize """
    return None

  def expandedTo(self, QSize):
    """ expandedTo(self, QSize) -> QSize """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def scale(self, QSize, arg0):
    """ scale(self, QSize, Qt.AspectRatioMode)
    scale(self, int, int, Qt.AspectRatioMode) """
    pass

  def scaled(self, QSize, arg0):
    """ scaled(self, QSize, Qt.AspectRatioMode) -> QSize
    scaled(self, int, int, Qt.AspectRatioMode) -> QSize """
    return None

  def setHeight(self, int):
    """ setHeight(self, int) """
    pass

  def setWidth(self, int):
    """ setWidth(self, int) """
    pass

  def transpose(self):
    """ transpose(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QSize """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

class QSizeF(simplewrapper):
  """ QSizeF()
  QSizeF(QSize)
  QSizeF(float, float)
  QSizeF(QSizeF) """

  def boundedTo(self, QSizeF):
    """ boundedTo(self, QSizeF) -> QSizeF """
    return None

  def expandedTo(self, QSizeF):
    """ expandedTo(self, QSizeF) -> QSizeF """
    return None

  def height(self):
    """ height(self) -> float """
    return 1.0

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def scale(self, QSizeF, arg0):
    """ scale(self, QSizeF, Qt.AspectRatioMode)
    scale(self, float, float, Qt.AspectRatioMode) """
    pass

  def scaled(self, QSizeF, arg0):
    """ scaled(self, QSizeF, Qt.AspectRatioMode) -> QSizeF
    scaled(self, float, float, Qt.AspectRatioMode) -> QSizeF """
    return None

  def setHeight(self, float):
    """ setHeight(self, float) """
    pass

  def setWidth(self, float):
    """ setWidth(self, float) """
    pass

  def toSize(self):
    """ toSize(self) -> QSize """
    return None

  def transpose(self):
    """ transpose(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QSizeF """
    return None

  def width(self):
    """ width(self) -> float """
    return 1.0

class QSocketNotifier(QObject):
  """ QSocketNotifier(sip.voidptr, QSocketNotifier.Type, parent: QObject = None) """

  Exception = None
  Read = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Write = None

  def activated(self, int):
    """ activated(self, int) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def socket(self):
    """ socket(self) -> sip.voidptr """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def type(self):
    """ type(self) -> QSocketNotifier.Type """
    return None

class QSortFilterProxyModel(QAbstractProxyModel):
  """ QSortFilterProxyModel(parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def dynamicSortFilter(self):
    """ dynamicSortFilter(self) -> bool """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def filterAcceptsColumn(self, int, QModelIndex):
    """ filterAcceptsColumn(self, int, QModelIndex) -> bool """
    return None

  def filterAcceptsRow(self, int, QModelIndex):
    """ filterAcceptsRow(self, int, QModelIndex) -> bool """
    return None

  def filterCaseSensitivity(self):
    """ filterCaseSensitivity(self) -> Qt.CaseSensitivity """
    return None

  def filterKeyColumn(self):
    """ filterKeyColumn(self) -> int """
    return 1

  def filterRegExp(self):
    """ filterRegExp(self) -> QRegExp """
    return None

  def filterRegularExpression(self):
    """ filterRegularExpression(self) -> QRegularExpression """
    return None

  def filterRole(self):
    """ filterRole(self) -> int """
    return 1

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def invalidateFilter(self):
    """ invalidateFilter(self) """
    pass

  def isRecursiveFilteringEnabled(self):
    """ isRecursiveFilteringEnabled(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isSortLocaleAware(self):
    """ isSortLocaleAware(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def lessThan(self, QModelIndex, QModelIndex):
    """ lessThan(self, QModelIndex, QModelIndex) -> bool """
    return None

  def mapFromSource(self, QModelIndex):
    """ mapFromSource(self, QModelIndex) -> QModelIndex """
    return None

  def mapSelectionFromSource(self, QItemSelection):
    """ mapSelectionFromSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapSelectionToSource(self, QItemSelection):
    """ mapSelectionToSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapToSource(self, QModelIndex):
    """ mapToSource(self, QModelIndex) -> QModelIndex """
    return None

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex
    parent(self) -> QObject """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setDynamicSortFilter(self, bool):
    """ setDynamicSortFilter(self, bool) """
    pass

  def setFilterCaseSensitivity(self, arg0):
    """ setFilterCaseSensitivity(self, Qt.CaseSensitivity) """
    pass

  def setFilterFixedString(self, str):
    """ setFilterFixedString(self, str) """
    pass

  def setFilterKeyColumn(self, int):
    """ setFilterKeyColumn(self, int) """
    pass

  def setFilterRegExp(self, QRegExp):
    """ setFilterRegExp(self, QRegExp)
    setFilterRegExp(self, str) """
    pass

  def setFilterRegularExpression(self, QRegularExpression):
    """ setFilterRegularExpression(self, QRegularExpression)
    setFilterRegularExpression(self, str) """
    pass

  def setFilterRole(self, int):
    """ setFilterRole(self, int) """
    pass

  def setFilterWildcard(self, str):
    """ setFilterWildcard(self, str) """
    pass

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRecursiveFilteringEnabled(self, bool):
    """ setRecursiveFilteringEnabled(self, bool) """
    pass

  def setSortCaseSensitivity(self, arg0):
    """ setSortCaseSensitivity(self, Qt.CaseSensitivity) """
    pass

  def setSortLocaleAware(self, bool):
    """ setSortLocaleAware(self, bool) """
    pass

  def setSortRole(self, int):
    """ setSortRole(self, int) """
    pass

  def setSourceModel(self, QAbstractItemModel):
    """ setSourceModel(self, QAbstractItemModel) """
    pass

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def sortCaseSensitivity(self):
    """ sortCaseSensitivity(self) -> Qt.CaseSensitivity """
    return None

  def sortColumn(self):
    """ sortColumn(self) -> int """
    return 1

  def sortOrder(self):
    """ sortOrder(self) -> Qt.SortOrder """
    return None

  def sortRole(self):
    """ sortRole(self) -> int """
    return 1

  def sourceModel(self):
    """ sourceModel(self) -> QAbstractItemModel """
    return ""

  def sourceModelChanged(self):
    """ sourceModelChanged(self) [signal] """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QStandardPaths(simplewrapper):
  """ QStandardPaths(QStandardPaths) """

  AppConfigLocation = None
  AppDataLocation = None
  AppLocalDataLocation = None
  ApplicationsLocation = None
  CacheLocation = None
  ConfigLocation = None
  DataLocation = None
  DesktopLocation = None
  DocumentsLocation = None
  DownloadLocation = None
  FontsLocation = None
  GenericCacheLocation = None
  GenericConfigLocation = None
  GenericDataLocation = None
  HomeLocation = None
  LocateDirectory = None
  LocateFile = None

  class LocateOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class LocateOptions(simplewrapper):
    """ QStandardPaths.LocateOptions()
    QStandardPaths.LocateOptions(Union[QStandardPaths.LocateOptions, QStandardPaths.LocateOption])
    QStandardPaths.LocateOptions(QStandardPaths.LocateOptions) """

    pass

  MoviesLocation = None
  MusicLocation = None
  PicturesLocation = None
  RuntimeLocation = None

  class StandardLocation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TempLocation = None

  def displayName(arg0):
    """ displayName(QStandardPaths.StandardLocation) -> str """
    return ""

  def enableTestMode(bool):
    """ enableTestMode(bool) """
    pass

  def findExecutable(str, arg0=None):
    """ findExecutable(str, paths: Iterable[str] = []) -> str """
    return ""

  def locate(arg0, str, arg1=None):
    """ locate(QStandardPaths.StandardLocation, str, options: QStandardPaths.LocateOptions = QStandardPaths.LocateFile) -> str """
    return ""

  def locateAll(arg0, str, arg1=None):
    """ locateAll(QStandardPaths.StandardLocation, str, options: QStandardPaths.LocateOptions = QStandardPaths.LocateFile) -> List[str] """
    return ""

  def setTestModeEnabled(bool):
    """ setTestModeEnabled(bool) """
    pass

  def standardLocations(arg0):
    """ standardLocations(QStandardPaths.StandardLocation) -> List[str] """
    return ""

  def writableLocation(arg0):
    """ writableLocation(QStandardPaths.StandardLocation) -> str """
    return ""

class QState(QAbstractState):
  """ QState(parent: QState = None)
  QState(QState.ChildMode, parent: QState = None) """

  class ChildMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DontRestoreProperties = None
  ExclusiveStates = None
  ParallelStates = None

  class RestorePolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RestoreProperties = None

  def active(self):
    """ active(self) -> bool """
    return None

  def activeChanged(self, bool):
    """ activeChanged(self, bool) [signal] """
    pass

  def addTransition(self, QAbstractTransition):
    """ addTransition(self, QAbstractTransition)
    addTransition(self, pyqtBoundSignal, QAbstractState) -> QSignalTransition
    addTransition(self, QAbstractState) -> QAbstractTransition """
    pass

  def assignProperty(self, QObject, str, Any):
    """ assignProperty(self, QObject, str, Any) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def childMode(self):
    """ childMode(self) -> QState.ChildMode """
    return None

  def childModeChanged(self):
    """ childModeChanged(self) [signal] """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def entered(self):
    """ entered(self) [signal] """
    pass

  def errorState(self):
    """ errorState(self) -> QAbstractState """
    return ""

  def errorStateChanged(self):
    """ errorStateChanged(self) [signal] """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exited(self):
    """ exited(self) [signal] """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initialState(self):
    """ initialState(self) -> QAbstractState """
    return ""

  def initialStateChanged(self):
    """ initialStateChanged(self) [signal] """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onEntry(self, QEvent):
    """ onEntry(self, QEvent) """
    pass

  def onExit(self, QEvent):
    """ onExit(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentState(self):
    """ parentState(self) -> QState """
    return None

  def propertiesAssigned(self):
    """ propertiesAssigned(self) [signal] """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeTransition(self, QAbstractTransition):
    """ removeTransition(self, QAbstractTransition) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setChildMode(self, arg0):
    """ setChildMode(self, QState.ChildMode) """
    pass

  def setErrorState(self, QAbstractState):
    """ setErrorState(self, QAbstractState) """
    pass

  def setInitialState(self, QAbstractState):
    """ setInitialState(self, QAbstractState) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transitions(self):
    """ transitions(self) -> List[QAbstractTransition] """
    return ""

class QStateMachine(QState):
  """ QStateMachine(parent: QObject = None)
  QStateMachine(QState.ChildMode, parent: QObject = None) """

  DontRestoreProperties = None

  class Error(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class EventPriority(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ExclusiveStates = None
  HighPriority = None
  NoCommonAncestorForTransitionError = None
  NoDefaultStateInHistoryStateError = None
  NoError = None
  NoInitialStateError = None
  NormalPriority = None
  ParallelStates = None
  RestoreProperties = None

  class SignalEvent(QEvent):

    ActionAdded = None
    ActionChanged = None
    ActionRemoved = None
    ActivationChange = None
    ApplicationActivate = None
    ApplicationActivated = None
    ApplicationDeactivate = None
    ApplicationDeactivated = None
    ApplicationFontChange = None
    ApplicationLayoutDirectionChange = None
    ApplicationPaletteChange = None
    ApplicationStateChange = None
    ApplicationWindowIconChange = None
    ChildAdded = None
    ChildPolished = None
    ChildRemoved = None
    Clipboard = None
    Close = None
    CloseSoftwareInputPanel = None
    ContentsRectChange = None
    ContextMenu = None
    CursorChange = None
    DeferredDelete = None
    DragEnter = None
    DragLeave = None
    DragMove = None
    Drop = None
    DynamicPropertyChange = None
    EnabledChange = None
    Enter = None
    EnterWhatsThisMode = None
    Expose = None
    FileOpen = None
    FocusAboutToChange = None
    FocusIn = None
    FocusOut = None
    FontChange = None
    Gesture = None
    GestureOverride = None
    GrabKeyboard = None
    GrabMouse = None
    GraphicsSceneContextMenu = None
    GraphicsSceneDragEnter = None
    GraphicsSceneDragLeave = None
    GraphicsSceneDragMove = None
    GraphicsSceneDrop = None
    GraphicsSceneHelp = None
    GraphicsSceneHoverEnter = None
    GraphicsSceneHoverLeave = None
    GraphicsSceneHoverMove = None
    GraphicsSceneMouseDoubleClick = None
    GraphicsSceneMouseMove = None
    GraphicsSceneMousePress = None
    GraphicsSceneMouseRelease = None
    GraphicsSceneMove = None
    GraphicsSceneResize = None
    GraphicsSceneWheel = None
    Hide = None
    HideToParent = None
    HoverEnter = None
    HoverLeave = None
    HoverMove = None
    IconDrag = None
    IconTextChange = None
    InputMethod = None
    InputMethodQuery = None
    KeyPress = None
    KeyRelease = None
    KeyboardLayoutChange = None
    LanguageChange = None
    LayoutDirectionChange = None
    LayoutRequest = None
    Leave = None
    LeaveWhatsThisMode = None
    LocaleChange = None
    MacSizeChange = None
    MaxUser = None
    MetaCall = None
    ModifiedChange = None
    MouseButtonDblClick = None
    MouseButtonPress = None
    MouseButtonRelease = None
    MouseMove = None
    MouseTrackingChange = None
    Move = None
    NonClientAreaMouseButtonDblClick = None
    NonClientAreaMouseButtonPress = None
    NonClientAreaMouseButtonRelease = None
    NonClientAreaMouseMove = None
    None_ = None
    OkRequest = None
    OrientationChange = None
    Paint = None
    PaletteChange = None
    ParentAboutToChange = None
    ParentChange = None
    PlatformPanel = None
    PlatformSurface = None
    Polish = None
    PolishRequest = None
    QueryWhatsThis = None
    ReadOnlyChange = None
    RequestSoftwareInputPanel = None
    Resize = None
    Scroll = None
    ScrollPrepare = None
    Shortcut = None
    ShortcutOverride = None
    Show = None
    ShowToParent = None
    SockAct = None
    StateMachineSignal = None
    StateMachineWrapped = None
    StatusTip = None
    StyleChange = None
    TabletEnterProximity = None
    TabletLeaveProximity = None
    TabletMove = None
    TabletPress = None
    TabletRelease = None
    TabletTrackingChange = None
    ThreadChange = None
    Timer = None
    ToolBarChange = None
    ToolTip = None
    ToolTipChange = None
    TouchBegin = None
    TouchCancel = None
    TouchEnd = None
    TouchUpdate = None
    UngrabKeyboard = None
    UngrabMouse = None
    UpdateLater = None
    UpdateRequest = None
    User = None
    WhatsThis = None
    WhatsThisClicked = None
    Wheel = None
    WinEventAct = None
    WinIdChange = None
    WindowActivate = None
    WindowBlocked = None
    WindowDeactivate = None
    WindowIconChange = None
    WindowStateChange = None
    WindowTitleChange = None
    WindowUnblocked = None
    ZOrderChange = None

    def accept(self):
      """ accept(self) """
      pass

    def arguments(self):
      """ arguments(self) -> List[Any] """
      return None

    def ignore(self):
      """ ignore(self) """
      pass

    def isAccepted(self):
      """ isAccepted(self) -> bool """
      return None

    def registerEventType(arg0=None):
      """ registerEventType(hint: int = -1) -> int """
      return 1

    def sender(self):
      """ sender(self) -> QObject """
      return None

    def setAccepted(self, bool):
      """ setAccepted(self, bool) """
      pass

    def signalIndex(self):
      """ signalIndex(self) -> int """
      return 1

    def spontaneous(self):
      """ spontaneous(self) -> bool """
      return None

    def type(self):
      """ type(self) -> QEvent.Type """
      return None

  class WrappedEvent(QEvent):

    ActionAdded = None
    ActionChanged = None
    ActionRemoved = None
    ActivationChange = None
    ApplicationActivate = None
    ApplicationActivated = None
    ApplicationDeactivate = None
    ApplicationDeactivated = None
    ApplicationFontChange = None
    ApplicationLayoutDirectionChange = None
    ApplicationPaletteChange = None
    ApplicationStateChange = None
    ApplicationWindowIconChange = None
    ChildAdded = None
    ChildPolished = None
    ChildRemoved = None
    Clipboard = None
    Close = None
    CloseSoftwareInputPanel = None
    ContentsRectChange = None
    ContextMenu = None
    CursorChange = None
    DeferredDelete = None
    DragEnter = None
    DragLeave = None
    DragMove = None
    Drop = None
    DynamicPropertyChange = None
    EnabledChange = None
    Enter = None
    EnterWhatsThisMode = None
    Expose = None
    FileOpen = None
    FocusAboutToChange = None
    FocusIn = None
    FocusOut = None
    FontChange = None
    Gesture = None
    GestureOverride = None
    GrabKeyboard = None
    GrabMouse = None
    GraphicsSceneContextMenu = None
    GraphicsSceneDragEnter = None
    GraphicsSceneDragLeave = None
    GraphicsSceneDragMove = None
    GraphicsSceneDrop = None
    GraphicsSceneHelp = None
    GraphicsSceneHoverEnter = None
    GraphicsSceneHoverLeave = None
    GraphicsSceneHoverMove = None
    GraphicsSceneMouseDoubleClick = None
    GraphicsSceneMouseMove = None
    GraphicsSceneMousePress = None
    GraphicsSceneMouseRelease = None
    GraphicsSceneMove = None
    GraphicsSceneResize = None
    GraphicsSceneWheel = None
    Hide = None
    HideToParent = None
    HoverEnter = None
    HoverLeave = None
    HoverMove = None
    IconDrag = None
    IconTextChange = None
    InputMethod = None
    InputMethodQuery = None
    KeyPress = None
    KeyRelease = None
    KeyboardLayoutChange = None
    LanguageChange = None
    LayoutDirectionChange = None
    LayoutRequest = None
    Leave = None
    LeaveWhatsThisMode = None
    LocaleChange = None
    MacSizeChange = None
    MaxUser = None
    MetaCall = None
    ModifiedChange = None
    MouseButtonDblClick = None
    MouseButtonPress = None
    MouseButtonRelease = None
    MouseMove = None
    MouseTrackingChange = None
    Move = None
    NonClientAreaMouseButtonDblClick = None
    NonClientAreaMouseButtonPress = None
    NonClientAreaMouseButtonRelease = None
    NonClientAreaMouseMove = None
    None_ = None
    OkRequest = None
    OrientationChange = None
    Paint = None
    PaletteChange = None
    ParentAboutToChange = None
    ParentChange = None
    PlatformPanel = None
    PlatformSurface = None
    Polish = None
    PolishRequest = None
    QueryWhatsThis = None
    ReadOnlyChange = None
    RequestSoftwareInputPanel = None
    Resize = None
    Scroll = None
    ScrollPrepare = None
    Shortcut = None
    ShortcutOverride = None
    Show = None
    ShowToParent = None
    SockAct = None
    StateMachineSignal = None
    StateMachineWrapped = None
    StatusTip = None
    StyleChange = None
    TabletEnterProximity = None
    TabletLeaveProximity = None
    TabletMove = None
    TabletPress = None
    TabletRelease = None
    TabletTrackingChange = None
    ThreadChange = None
    Timer = None
    ToolBarChange = None
    ToolTip = None
    ToolTipChange = None
    TouchBegin = None
    TouchCancel = None
    TouchEnd = None
    TouchUpdate = None
    UngrabKeyboard = None
    UngrabMouse = None
    UpdateLater = None
    UpdateRequest = None
    User = None
    WhatsThis = None
    WhatsThisClicked = None
    Wheel = None
    WinEventAct = None
    WinIdChange = None
    WindowActivate = None
    WindowBlocked = None
    WindowDeactivate = None
    WindowIconChange = None
    WindowStateChange = None
    WindowTitleChange = None
    WindowUnblocked = None
    ZOrderChange = None

    def accept(self):
      """ accept(self) """
      pass

    def event(self):
      """ event(self) -> QEvent """
      return None

    def ignore(self):
      """ ignore(self) """
      pass

    def isAccepted(self):
      """ isAccepted(self) -> bool """
      return None

    def object(self):
      """ object(self) -> QObject """
      return None

    def registerEventType(arg0=None):
      """ registerEventType(hint: int = -1) -> int """
      return 1

    def setAccepted(self, bool):
      """ setAccepted(self, bool) """
      pass

    def spontaneous(self):
      """ spontaneous(self) -> bool """
      return None

    def type(self):
      """ type(self) -> QEvent.Type """
      return None

  def active(self):
    """ active(self) -> bool """
    return None

  def activeChanged(self, bool):
    """ activeChanged(self, bool) [signal] """
    pass

  def addDefaultAnimation(self, QAbstractAnimation):
    """ addDefaultAnimation(self, QAbstractAnimation) """
    pass

  def addState(self, QAbstractState):
    """ addState(self, QAbstractState) """
    pass

  def addTransition(self, QAbstractTransition):
    """ addTransition(self, QAbstractTransition)
    addTransition(self, pyqtBoundSignal, QAbstractState) -> QSignalTransition
    addTransition(self, QAbstractState) -> QAbstractTransition """
    pass

  def assignProperty(self, QObject, str, Any):
    """ assignProperty(self, QObject, str, Any) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cancelDelayedEvent(self, int):
    """ cancelDelayedEvent(self, int) -> bool """
    return None

  def childEvent():
    pass

  def childMode(self):
    """ childMode(self) -> QState.ChildMode """
    return None

  def childModeChanged(self):
    """ childModeChanged(self) [signal] """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clearError(self):
    """ clearError(self) """
    pass

  def configuration(self):
    """ configuration(self) -> Set[QAbstractState] """
    return ""

  def connectNotify():
    pass

  def customEvent():
    pass

  def defaultAnimations(self):
    """ defaultAnimations(self) -> List[QAbstractAnimation] """
    return ""

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def entered(self):
    """ entered(self) [signal] """
    pass

  def error(self):
    """ error(self) -> QStateMachine.Error """
    return None

  def errorState(self):
    """ errorState(self) -> QAbstractState """
    return ""

  def errorStateChanged(self):
    """ errorStateChanged(self) [signal] """
    pass

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exited(self):
    """ exited(self) [signal] """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def globalRestorePolicy(self):
    """ globalRestorePolicy(self) -> QState.RestorePolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initialState(self):
    """ initialState(self) -> QAbstractState """
    return ""

  def initialStateChanged(self):
    """ initialStateChanged(self) [signal] """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isAnimated(self):
    """ isAnimated(self) -> bool """
    return None

  def isRunning(self):
    """ isRunning(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onEntry(self, QEvent):
    """ onEntry(self, QEvent) """
    pass

  def onExit(self, QEvent):
    """ onExit(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentState(self):
    """ parentState(self) -> QState """
    return None

  def postDelayedEvent(self, QEvent, int):
    """ postDelayedEvent(self, QEvent, int) -> int """
    return 1

  def postEvent():
    """ postEvent(self, QEvent, priority: QStateMachine.EventPriority = QStateMachine.NormalPriority) """
    pass

  def propertiesAssigned(self):
    """ propertiesAssigned(self) [signal] """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeDefaultAnimation(self, QAbstractAnimation):
    """ removeDefaultAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeState(self, QAbstractState):
    """ removeState(self, QAbstractState) """
    pass

  def removeTransition(self, QAbstractTransition):
    """ removeTransition(self, QAbstractTransition) """
    pass

  def runningChanged(self, bool):
    """ runningChanged(self, bool) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAnimated(self, bool):
    """ setAnimated(self, bool) """
    pass

  def setChildMode(self, arg0):
    """ setChildMode(self, QState.ChildMode) """
    pass

  def setErrorState(self, QAbstractState):
    """ setErrorState(self, QAbstractState) """
    pass

  def setGlobalRestorePolicy(self, arg0):
    """ setGlobalRestorePolicy(self, QState.RestorePolicy) """
    pass

  def setInitialState(self, QAbstractState):
    """ setInitialState(self, QAbstractState) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRunning(self, bool):
    """ setRunning(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start(self):
    """ start(self) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def started(self):
    """ started(self) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def stopped(self):
    """ stopped(self) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transitions(self):
    """ transitions(self) -> List[QAbstractTransition] """
    return ""

class QStorageInfo(simplewrapper):
  """ QStorageInfo()
  QStorageInfo(str)
  QStorageInfo(QDir)
  QStorageInfo(QStorageInfo) """

  def blockSize(self):
    """ blockSize(self) -> int """
    return 1

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesFree(self):
    """ bytesFree(self) -> int """
    return 1

  def bytesTotal(self):
    """ bytesTotal(self) -> int """
    return 1

  def device(self):
    """ device(self) -> QByteArray """
    return None

  def displayName(self):
    """ displayName(self) -> str """
    return ""

  def fileSystemType(self):
    """ fileSystemType(self) -> QByteArray """
    return None

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return None

  def isReady(self):
    """ isReady(self) -> bool """
    return None

  def isRoot(self):
    """ isRoot(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def mountedVolumes():
    """ mountedVolumes() -> List[QStorageInfo] """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def refresh(self):
    """ refresh(self) """
    pass

  def root():
    """ root() -> QStorageInfo """
    return None

  def rootPath(self):
    """ rootPath(self) -> str """
    return ""

  def setPath(self, str):
    """ setPath(self, str) """
    pass

  def subvolume(self):
    """ subvolume(self) -> QByteArray """
    return None

  def swap(self, QStorageInfo):
    """ swap(self, QStorageInfo) """
    pass

class QStringListModel(QAbstractListModel):
  """ QStringListModel(parent: QObject = None)
  QStringListModel(Iterable[str], parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount():
    pass

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, int):
    """ data(self, QModelIndex, int) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren():
    pass

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, arg0=None, arg1=None):
    """ index(self, int, column: int = 0, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setStringList(self, Iterablestr=None):
    """ setStringList(self, Iterable[str]) """
    pass

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stringList(self):
    """ stringList(self) -> List[str] """
    return ""

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QSysInfo(simplewrapper):
  """ QSysInfo()
  QSysInfo(QSysInfo) """

  BigEndian = None
  ByteOrder = None

  class Endian(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LittleEndian = None

  class Sizes(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WV_10_0 = None
  WV_2000 = None
  WV_2003 = None
  WV_32s = None
  WV_4_0 = None
  WV_5_0 = None
  WV_5_1 = None
  WV_5_2 = None
  WV_6_0 = None
  WV_6_1 = None
  WV_6_2 = None
  WV_6_3 = None
  WV_95 = None
  WV_98 = None
  WV_CE = None
  WV_CENET = None
  WV_CE_5 = None
  WV_CE_6 = None
  WV_CE_based = None
  WV_DOS_based = None
  WV_Me = None
  WV_NT = None
  WV_NT_based = None
  WV_VISTA = None
  WV_WINDOWS10 = None
  WV_WINDOWS7 = None
  WV_WINDOWS8 = None
  WV_WINDOWS8_1 = None
  WV_XP = None

  class WinVersion(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WindowsVersion = None
  WordSize = None

  def buildAbi():
    """ buildAbi() -> str """
    return ""

  def buildCpuArchitecture():
    """ buildCpuArchitecture() -> str """
    return ""

  def currentCpuArchitecture():
    """ currentCpuArchitecture() -> str """
    return ""

  def kernelType():
    """ kernelType() -> str """
    return ""

  def kernelVersion():
    """ kernelVersion() -> str """
    return ""

  def machineHostName():
    """ machineHostName() -> str """
    return ""

  def prettyProductName():
    """ prettyProductName() -> str """
    return ""

  def productType():
    """ productType() -> str """
    return ""

  def productVersion():
    """ productVersion() -> str """
    return ""

  def windowsVersion():
    """ windowsVersion() -> QSysInfo.WinVersion """
    return None

class QSystemSemaphore(simplewrapper):
  """ QSystemSemaphore(str, initialValue: int = 0, mode: QSystemSemaphore.AccessMode = QSystemSemaphore.Open) """

  class AccessMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AlreadyExists = None
  Create = None
  KeyError = None
  NoError = None
  NotFound = None
  Open = None
  OutOfResources = None
  PermissionDenied = None

  class SystemSemaphoreError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UnknownError = None

  def acquire(self):
    """ acquire(self) -> bool """
    return None

  def error(self):
    """ error(self) -> QSystemSemaphore.SystemSemaphoreError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def key(self):
    """ key(self) -> str """
    return ""

  def release(self, arg0=None):
    """ release(self, n: int = 1) -> bool """
    return None

  def setKey():
    """ setKey(self, str, initialValue: int = 0, mode: QSystemSemaphore.AccessMode = QSystemSemaphore.Open) """
    pass

def QT_TRANSLATE_NOOP(str, str):
  """ QT_TRANSLATE_NOOP(str, str) -> str """
  return ""

def QT_TR_NOOP(str):
  """ QT_TR_NOOP(str) -> str """
  return ""

def QT_TR_NOOP_UTF8(str):
  """ QT_TR_NOOP_UTF8(str) -> str """
  return ""

QT_VERSION = 331010
QT_VERSION_STR = '5.13.2'

class QTemporaryDir(simplewrapper):
  """ QTemporaryDir()
  QTemporaryDir(str) """

  def autoRemove(self):
    """ autoRemove(self) -> bool """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def filePath(self, str):
    """ filePath(self, str) -> str """
    return ""

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def path(self):
    """ path(self) -> str """
    return ""

  def remove(self):
    """ remove(self) -> bool """
    return None

  def setAutoRemove(self, bool):
    """ setAutoRemove(self, bool) """
    pass

class QTemporaryFile(QFile):
  """ QTemporaryFile()
  QTemporaryFile(str)
  QTemporaryFile(QObject)
  QTemporaryFile(str, QObject) """

  AbortError = None
  Append = None
  AutoCloseHandle = None
  CopyError = None
  DontCloseHandle = None
  ExeGroup = None
  ExeOther = None
  ExeOwner = None
  ExeUser = None
  ExistingOnly = None
  FatalError = None
  FileAccessTime = None
  FileBirthTime = None
  FileMetadataChangeTime = None
  FileModificationTime = None
  MapPrivateOption = None
  NewOnly = None
  NoError = None
  NoOptions = None
  NotOpen = None
  OpenError = None
  PermissionsError = None
  PositionError = None
  ReadError = None
  ReadGroup = None
  ReadOnly = None
  ReadOther = None
  ReadOwner = None
  ReadUser = None
  ReadWrite = None
  RemoveError = None
  RenameError = None
  ResizeError = None
  ResourceError = None
  Text = None
  TimeOutError = None
  Truncate = None
  Unbuffered = None
  UnspecifiedError = None
  WriteError = None
  WriteGroup = None
  WriteOnly = None
  WriteOther = None
  WriteOwner = None
  WriteUser = None

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def autoRemove(self):
    """ autoRemove(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def copy(self, str):
    """ copy(self, str) -> bool
    copy(str, str) -> bool """
    return None

  def createNativeFile(str):
    """ createNativeFile(str) -> QTemporaryFile
    createNativeFile(QFile) -> QTemporaryFile """
    return None

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def decodeName(UnionQByteArray=None, bytes=None, bytearray=None):
    """ decodeName(Union[QByteArray, bytes, bytearray]) -> str
    decodeName(str) -> str """
    return ""

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeName(str):
    """ encodeName(str) -> QByteArray """
    return None

  def error(self):
    """ error(self) -> QFileDevice.FileError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exists(self):
    """ exists(self) -> bool
    exists(str) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def fileTemplate(self):
    """ fileTemplate(self) -> str """
    return ""

  def fileTime(self, arg0):
    """ fileTime(self, QFileDevice.FileTime) -> QDateTime """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def handle(self):
    """ handle(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def link(self, str):
    """ link(self, str) -> bool
    link(str, str) -> bool """
    return None

  def map(self, int, int, arg0=None):
    """ map(self, int, int, flags: QFileDevice.MemoryMapFlags = QFileDevice.NoOptions) -> sip.voidptr """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self) -> bool
    open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def permissions(self):
    """ permissions(self) -> QFileDevice.Permissions
    permissions(str) -> QFileDevice.Permissions """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData():
    pass

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def remove(self):
    """ remove(self) -> bool
    remove(str) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def rename(self, str):
    """ rename(self, str) -> bool """
    return None

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resize(self, int):
    """ resize(self, int) -> bool
    resize(str, int) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAutoRemove(self, bool):
    """ setAutoRemove(self, bool) """
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString():
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFileTemplate(self, str):
    """ setFileTemplate(self, str) """
    pass

  def setFileTime(self, UnionQDateTime=None, datetime.datetime=None, QFileDevice.FileTime=None):
    """ setFileTime(self, Union[QDateTime, datetime.datetime], QFileDevice.FileTime) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPermissions(self, UnionQFileDevice.Permissions=None, QFileDevice.Permission=None):
    """ setPermissions(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool
    setPermissions(str, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool """
    return None

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  staticMetaObject = None

  def symLinkTarget(self):
    """ symLinkTarget(self) -> str
    symLinkTarget(str) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def unmap(self, arg0):
    """ unmap(self, sip.voidptr) -> bool """
    return None

  def unsetError(self):
    """ unsetError(self) """
    pass

  def waitForBytesWritten(self, int):
    """ waitForBytesWritten(self, int) -> bool """
    return None

  def waitForReadyRead(self, int):
    """ waitForReadyRead(self, int) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData():
    pass

class QTextBoundaryFinder(simplewrapper):
  """ QTextBoundaryFinder()
  QTextBoundaryFinder(QTextBoundaryFinder)
  QTextBoundaryFinder(QTextBoundaryFinder.BoundaryType, str) """

  class BoundaryReason(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class BoundaryReasons(simplewrapper):
    """ QTextBoundaryFinder.BoundaryReasons()
    QTextBoundaryFinder.BoundaryReasons(Union[QTextBoundaryFinder.BoundaryReasons, QTextBoundaryFinder.BoundaryReason])
    QTextBoundaryFinder.BoundaryReasons(QTextBoundaryFinder.BoundaryReasons) """

    pass

  class BoundaryType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  BreakOpportunity = None
  EndOfItem = None
  Grapheme = None
  Line = None
  MandatoryBreak = None
  NotAtBoundary = None
  Sentence = None
  SoftHyphen = None
  StartOfItem = None
  Word = None

  def boundaryReasons(self):
    """ boundaryReasons(self) -> QTextBoundaryFinder.BoundaryReasons """
    return None

  def isAtBoundary(self):
    """ isAtBoundary(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def position(self):
    """ position(self) -> int """
    return 1

  def setPosition(self, int):
    """ setPosition(self, int) """
    pass

  def string(self):
    """ string(self) -> str """
    return ""

  def toEnd(self):
    """ toEnd(self) """
    pass

  def toNextBoundary(self):
    """ toNextBoundary(self) -> int """
    return 1

  def toPreviousBoundary(self):
    """ toPreviousBoundary(self) -> int """
    return 1

  def toStart(self):
    """ toStart(self) """
    pass

  def type(self):
    """ type(self) -> QTextBoundaryFinder.BoundaryType """
    return None

class QTextCodec(wrapper):

  class ConversionFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ConversionFlags(simplewrapper):
    """ QTextCodec.ConversionFlags()
    QTextCodec.ConversionFlags(Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag])
    QTextCodec.ConversionFlags(QTextCodec.ConversionFlags) """

    pass

  ConvertInvalidToNull = None

  class ConverterState(simplewrapper):
    """ QTextCodec.ConverterState(flags: Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag] = QTextCodec.DefaultConversion) """

    pass

  DefaultConversion = None
  IgnoreHeader = None

  def aliases(self):
    """ aliases(self) -> List[QByteArray] """
    return None

  def availableCodecs():
    """ availableCodecs() -> List[QByteArray] """
    return None

  def availableMibs():
    """ availableMibs() -> List[int] """
    return 1

  def canEncode(self, str):
    """ canEncode(self, str) -> bool """
    return None

  def codecForHtml(UnionQByteArray=None, bytes=None, bytearray=None):
    """ codecForHtml(Union[QByteArray, bytes, bytearray]) -> QTextCodec
    codecForHtml(Union[QByteArray, bytes, bytearray], QTextCodec) -> QTextCodec """
    return None

  def codecForLocale():
    """ codecForLocale() -> QTextCodec """
    return None

  def codecForMib(int):
    """ codecForMib(int) -> QTextCodec """
    return None

  def codecForName(UnionQByteArray=None, bytes=None, bytearray=None):
    """ codecForName(Union[QByteArray, bytes, bytearray]) -> QTextCodec
    codecForName(str) -> QTextCodec """
    return None

  def codecForUtfText(UnionQByteArray=None, bytes=None, bytearray=None):
    """ codecForUtfText(Union[QByteArray, bytes, bytearray]) -> QTextCodec
    codecForUtfText(Union[QByteArray, bytes, bytearray], QTextCodec) -> QTextCodec """
    return None

  def fromUnicode(self, str):
    """ fromUnicode(self, str) -> QByteArray """
    return None

  def makeDecoder(self, arg0=None, arg1=None):
    """ makeDecoder(self, flags: Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag] = QTextCodec.DefaultConversion) -> QTextDecoder """
    return None

  def makeEncoder(self, arg0=None, arg1=None):
    """ makeEncoder(self, flags: Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag] = QTextCodec.DefaultConversion) -> QTextEncoder """
    return None

  def mibEnum(self):
    """ mibEnum(self) -> int """
    return 1

  def name(self):
    """ name(self) -> QByteArray """
    return None

  def setCodecForLocale(QTextCodec):
    """ setCodecForLocale(QTextCodec) """
    pass

  def toUnicode(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ toUnicode(self, Union[QByteArray, bytes, bytearray]) -> str
    toUnicode(self, str) -> str
    toUnicode(self, bytes, state: QTextCodec.ConverterState = None) -> str """
    return ""

class QTextDecoder(wrapper):
  """ QTextDecoder(QTextCodec)
  QTextDecoder(QTextCodec, Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag]) """

  def toUnicode(self, bytes):
    """ toUnicode(self, bytes) -> str
    toUnicode(self, Union[QByteArray, bytes, bytearray]) -> str """
    return ""

class QTextEncoder(wrapper):
  """ QTextEncoder(QTextCodec)
  QTextEncoder(QTextCodec, Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag]) """

  def fromUnicode(self, str):
    """ fromUnicode(self, str) -> QByteArray """
    return None

class QTextStream(simplewrapper):
  """ QTextStream()
  QTextStream(QIODevice)
  QTextStream(QByteArray, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) """

  AlignAccountingStyle = None
  AlignCenter = None
  AlignLeft = None
  AlignRight = None

  class FieldAlignment(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FixedNotation = None
  ForcePoint = None
  ForceSign = None

  class NumberFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class NumberFlags(simplewrapper):
    """ QTextStream.NumberFlags()
    QTextStream.NumberFlags(Union[QTextStream.NumberFlags, QTextStream.NumberFlag])
    QTextStream.NumberFlags(QTextStream.NumberFlags) """

    pass

  Ok = None
  ReadCorruptData = None
  ReadPastEnd = None

  class RealNumberNotation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScientificNotation = None
  ShowBase = None
  SmartNotation = None

  class Status(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UppercaseBase = None
  UppercaseDigits = None
  WriteFailed = None

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def autoDetectUnicode(self):
    """ autoDetectUnicode(self) -> bool """
    return None

  def codec(self):
    """ codec(self) -> QTextCodec """
    return None

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def fieldAlignment(self):
    """ fieldAlignment(self) -> QTextStream.FieldAlignment """
    return None

  def fieldWidth(self):
    """ fieldWidth(self) -> int """
    return 1

  def flush(self):
    """ flush(self) """
    pass

  def generateByteOrderMark(self):
    """ generateByteOrderMark(self) -> bool """
    return None

  def integerBase(self):
    """ integerBase(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def numberFlags(self):
    """ numberFlags(self) -> QTextStream.NumberFlags """
    return None

  def padChar(self):
    """ padChar(self) -> str """
    return ""

  def pos(self):
    """ pos(self) -> int """
    return 1

  def read(self, int):
    """ read(self, int) -> str """
    return ""

  def readAll(self):
    """ readAll(self) -> str """
    return ""

  def readLine(self, arg0=None):
    """ readLine(self, maxLength: int = 0) -> str """
    return ""

  def realNumberNotation(self):
    """ realNumberNotation(self) -> QTextStream.RealNumberNotation """
    return None

  def realNumberPrecision(self):
    """ realNumberPrecision(self) -> int """
    return 1

  def reset(self):
    """ reset(self) """
    pass

  def resetStatus(self):
    """ resetStatus(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def setAutoDetectUnicode(self, bool):
    """ setAutoDetectUnicode(self, bool) """
    pass

  def setCodec(self, QTextCodec):
    """ setCodec(self, QTextCodec)
    setCodec(self, str) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setFieldAlignment(self, arg0):
    """ setFieldAlignment(self, QTextStream.FieldAlignment) """
    pass

  def setFieldWidth(self, int):
    """ setFieldWidth(self, int) """
    pass

  def setGenerateByteOrderMark(self, bool):
    """ setGenerateByteOrderMark(self, bool) """
    pass

  def setIntegerBase(self, int):
    """ setIntegerBase(self, int) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setNumberFlags(self, UnionQTextStream.NumberFlags=None, QTextStream.NumberFlag=None):
    """ setNumberFlags(self, Union[QTextStream.NumberFlags, QTextStream.NumberFlag]) """
    pass

  def setPadChar(self, str):
    """ setPadChar(self, str) """
    pass

  def setRealNumberNotation(self, arg0):
    """ setRealNumberNotation(self, QTextStream.RealNumberNotation) """
    pass

  def setRealNumberPrecision(self, int):
    """ setRealNumberPrecision(self, int) """
    pass

  def setStatus(self, arg0):
    """ setStatus(self, QTextStream.Status) """
    pass

  def skipWhiteSpace(self):
    """ skipWhiteSpace(self) """
    pass

  def status(self):
    """ status(self) -> QTextStream.Status """
    return None

class QTextStreamManipulator(simplewrapper):

  pass

class QThread(QObject):
  """ QThread(parent: QObject = None) """

  HighPriority = None
  HighestPriority = None
  IdlePriority = None
  InheritPriority = None
  LowPriority = None
  LowestPriority = None
  NormalPriority = None

  class Priority(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TimeCriticalPriority = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentThread():
    """ currentThread() -> QThread """
    return None

  def currentThreadId():
    """ currentThreadId() -> sip.voidptr """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventDispatcher(self):
    """ eventDispatcher(self) -> QAbstractEventDispatcher """
    return ""

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def exit():
    """ exit(self, returnCode: int = 0) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def idealThreadCount():
    """ idealThreadCount() -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isFinished(self):
    """ isFinished(self) -> bool """
    return None

  def isInterruptionRequested(self):
    """ isInterruptionRequested(self) -> bool """
    return None

  def isRunning(self):
    """ isRunning(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopLevel(self):
    """ loopLevel(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def msleep(int):
    """ msleep(int) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def priority(self):
    """ priority(self) -> QThread.Priority """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def quit(self):
    """ quit(self) """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def requestInterruption(self):
    """ requestInterruption(self) """
    pass

  def run(self):
    """ run(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEventDispatcher(self, QAbstractEventDispatcher):
    """ setEventDispatcher(self, QAbstractEventDispatcher) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPriority(self, arg0):
    """ setPriority(self, QThread.Priority) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setStackSize(self, int):
    """ setStackSize(self, int) """
    pass

  def setTerminationEnabled():
    """ setTerminationEnabled(enabled: bool = True) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sleep(int):
    """ sleep(int) """
    pass

  def stackSize(self):
    """ stackSize(self) -> int """
    return 1

  def start():
    """ start(self, priority: QThread.Priority = QThread.InheritPriority) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def started(self):
    """ started(self) [signal] """
    pass

  staticMetaObject = None

  def terminate(self):
    """ terminate(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def usleep(int):
    """ usleep(int) """
    pass

  def wait(self, arg0=None):
    """ wait(self, msecs: int = ULONG_MAX) -> bool """
    return None

  def yieldCurrentThread():
    """ yieldCurrentThread() """
    pass

class QThreadPool(QObject):
  """ QThreadPool(parent: QObject = None) """

  def activeThreadCount(self):
    """ activeThreadCount(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cancel(self, QRunnable):
    """ cancel(self, QRunnable) """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def expiryTimeout(self):
    """ expiryTimeout(self) -> int """
    return 1

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def globalInstance():
    """ globalInstance() -> QThreadPool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def maxThreadCount(self):
    """ maxThreadCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def releaseThread(self):
    """ releaseThread(self) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reserveThread(self):
    """ reserveThread(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setExpiryTimeout(self, int):
    """ setExpiryTimeout(self, int) """
    pass

  def setMaxThreadCount(self, int):
    """ setMaxThreadCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setStackSize(self, int):
    """ setStackSize(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def stackSize(self):
    """ stackSize(self) -> int """
    return 1

  def start():
    """ start(self, QRunnable, priority: int = 0) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def tryStart(self, QRunnable):
    """ tryStart(self, QRunnable) -> bool """
    return None

  def tryTake(self, QRunnable):
    """ tryTake(self, QRunnable) -> bool """
    return None

  def waitForDone(self, arg0=None):
    """ waitForDone(self, msecs: int = -1) -> bool """
    return None

class QTime(simplewrapper):
  """ QTime()
  QTime(int, int, second: int = 0, msec: int = 0)
  QTime(QTime) """

  def addMSecs(self, int):
    """ addMSecs(self, int) -> QTime """
    return None

  def addSecs(self, int):
    """ addSecs(self, int) -> QTime """
    return None

  def currentTime():
    """ currentTime() -> QTime """
    return None

  def elapsed(self):
    """ elapsed(self) -> int """
    return 1

  def fromMSecsSinceStartOfDay(int):
    """ fromMSecsSinceStartOfDay(int) -> QTime """
    return None

  def fromString(str, arg0=None):
    """ fromString(str, format: Qt.DateFormat = Qt.TextDate) -> QTime
    fromString(str, str) -> QTime """
    return None

  def hour(self):
    """ hour(self) -> int """
    return 1

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool
    isValid(int, int, int, msec: int = 0) -> bool """
    return None

  def minute(self):
    """ minute(self) -> int """
    return 1

  def msec(self):
    """ msec(self) -> int """
    return 1

  def msecsSinceStartOfDay(self):
    """ msecsSinceStartOfDay(self) -> int """
    return 1

  def msecsTo(self, UnionQTime=None, datetime.time=None):
    """ msecsTo(self, Union[QTime, datetime.time]) -> int """
    return 1

  def restart(self):
    """ restart(self) -> int """
    return 1

  def second(self):
    """ second(self) -> int """
    return 1

  def secsTo(self, UnionQTime=None, datetime.time=None):
    """ secsTo(self, Union[QTime, datetime.time]) -> int """
    return 1

  def setHMS(self, int, int, int, arg0=None):
    """ setHMS(self, int, int, int, msec: int = 0) -> bool """
    return None

  def start(self):
    """ start(self) """
    pass

  def toPyTime(self):
    """ toPyTime(self) -> datetime.time """
    return None

  def toString(self, arg0=None):
    """ toString(self, format: Qt.DateFormat = Qt.TextDate) -> str
    toString(self, str) -> str """
    return ""

class QTimeLine(QObject):
  """ QTimeLine(duration: int = 1000, parent: QObject = None) """

  Backward = None
  CosineCurve = None

  class CurveShape(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Direction(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  EaseInCurve = None
  EaseInOutCurve = None
  EaseOutCurve = None
  Forward = None
  LinearCurve = None
  NotRunning = None
  Paused = None
  Running = None
  SineCurve = None

  class State(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentFrame(self):
    """ currentFrame(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def currentValue(self):
    """ currentValue(self) -> float """
    return 1.0

  def curveShape(self):
    """ curveShape(self) -> QTimeLine.CurveShape """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QTimeLine.Direction """
    return None

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def easingCurve(self):
    """ easingCurve(self) -> QEasingCurve """
    return None

  def endFrame(self):
    """ endFrame(self) -> int """
    return 1

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def frameChanged(self, int):
    """ frameChanged(self, int) [signal] """
    pass

  def frameForTime(self, int):
    """ frameForTime(self, int) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setCurveShape(self, arg0):
    """ setCurveShape(self, QTimeLine.CurveShape) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QTimeLine.Direction) """
    pass

  def setDuration(self, int):
    """ setDuration(self, int) """
    pass

  def setEasingCurve(self, UnionQEasingCurve=None, QEasingCurve.Type=None):
    """ setEasingCurve(self, Union[QEasingCurve, QEasingCurve.Type]) """
    pass

  def setEndFrame(self, int):
    """ setEndFrame(self, int) """
    pass

  def setFrameRange(self, int, int):
    """ setFrameRange(self, int, int) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setStartFrame(self, int):
    """ setStartFrame(self, int) """
    pass

  def setUpdateInterval(self, int):
    """ setUpdateInterval(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start(self):
    """ start(self) """
    pass

  def startFrame(self):
    """ startFrame(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QTimeLine.State """
    return None

  def stateChanged(self, arg0):
    """ stateChanged(self, QTimeLine.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toggleDirection(self):
    """ toggleDirection(self) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateInterval(self):
    """ updateInterval(self) -> int """
    return 1

  def valueChanged(self, float):
    """ valueChanged(self, float) [signal] """
    pass

  def valueForTime(self, int):
    """ valueForTime(self, int) -> float """
    return 1.0

class QTimeZone(simplewrapper):
  """ QTimeZone()
  QTimeZone(Union[QByteArray, bytes, bytearray])
  QTimeZone(int)
  QTimeZone(Union[QByteArray, bytes, bytearray], int, str, str, country: QLocale.Country = QLocale.AnyCountry, comment: str = '')
  QTimeZone(QTimeZone) """

  DaylightTime = None
  DefaultName = None
  GenericTime = None
  LongName = None

  class NameType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class OffsetData(simplewrapper):
    """ QTimeZone.OffsetData()
    QTimeZone.OffsetData(QTimeZone.OffsetData) """

    abbreviation = None
    atUtc = None
    daylightTimeOffset = None
    offsetFromUtc = None
    standardTimeOffset = None

  OffsetName = None
  ShortName = None
  StandardTime = None

  class TimeType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def abbreviation(self, UnionQDateTime=None, datetime.datetime=None):
    """ abbreviation(self, Union[QDateTime, datetime.datetime]) -> str """
    return ""

  def availableTimeZoneIds():
    """ availableTimeZoneIds() -> List[QByteArray]
    availableTimeZoneIds(QLocale.Country) -> List[QByteArray]
    availableTimeZoneIds(int) -> List[QByteArray] """
    return None

  def comment(self):
    """ comment(self) -> str """
    return ""

  def country(self):
    """ country(self) -> QLocale.Country """
    return None

  def daylightTimeOffset(self, UnionQDateTime=None, datetime.datetime=None):
    """ daylightTimeOffset(self, Union[QDateTime, datetime.datetime]) -> int """
    return 1

  def displayName(self, UnionQDateTime=None, datetime.datetime=None, arg0=None, arg1=None):
    """ displayName(self, Union[QDateTime, datetime.datetime], nameType: QTimeZone.NameType = QTimeZone.DefaultName, locale: QLocale = QLocale()) -> str
    displayName(self, QTimeZone.TimeType, nameType: QTimeZone.NameType = QTimeZone.DefaultName, locale: QLocale = QLocale()) -> str """
    return ""

  def hasDaylightTime(self):
    """ hasDaylightTime(self) -> bool """
    return None

  def hasTransitions(self):
    """ hasTransitions(self) -> bool """
    return None

  def ianaIdToWindowsId(UnionQByteArray=None, bytes=None, bytearray=None):
    """ ianaIdToWindowsId(Union[QByteArray, bytes, bytearray]) -> QByteArray """
    return None

  def id(self):
    """ id(self) -> QByteArray """
    return None

  def isDaylightTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ isDaylightTime(self, Union[QDateTime, datetime.datetime]) -> bool """
    return None

  def isTimeZoneIdAvailable(UnionQByteArray=None, bytes=None, bytearray=None):
    """ isTimeZoneIdAvailable(Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def nextTransition(self, UnionQDateTime=None, datetime.datetime=None):
    """ nextTransition(self, Union[QDateTime, datetime.datetime]) -> QTimeZone.OffsetData """
    return None

  def offsetData(self, UnionQDateTime=None, datetime.datetime=None):
    """ offsetData(self, Union[QDateTime, datetime.datetime]) -> QTimeZone.OffsetData """
    return None

  def offsetFromUtc(self, UnionQDateTime=None, datetime.datetime=None):
    """ offsetFromUtc(self, Union[QDateTime, datetime.datetime]) -> int """
    return 1

  def previousTransition(self, UnionQDateTime=None, datetime.datetime=None):
    """ previousTransition(self, Union[QDateTime, datetime.datetime]) -> QTimeZone.OffsetData """
    return None

  def standardTimeOffset(self, UnionQDateTime=None, datetime.datetime=None):
    """ standardTimeOffset(self, Union[QDateTime, datetime.datetime]) -> int """
    return 1

  def swap(self, QTimeZone):
    """ swap(self, QTimeZone) """
    pass

  def systemTimeZone():
    """ systemTimeZone() -> QTimeZone """
    return None

  def systemTimeZoneId():
    """ systemTimeZoneId() -> QByteArray """
    return None

  def transitions(self, UnionQDateTime=None, datetime.datetime=None, UnionQDateTime=None, datetime.datetime=None):
    """ transitions(self, Union[QDateTime, datetime.datetime], Union[QDateTime, datetime.datetime]) -> List[QTimeZone.OffsetData] """
    return None

  def utc():
    """ utc() -> QTimeZone """
    return None

  def windowsIdToDefaultIanaId(UnionQByteArray=None, bytes=None, bytearray=None):
    """ windowsIdToDefaultIanaId(Union[QByteArray, bytes, bytearray]) -> QByteArray
    windowsIdToDefaultIanaId(Union[QByteArray, bytes, bytearray], QLocale.Country) -> QByteArray """
    return None

  def windowsIdToIanaIds(UnionQByteArray=None, bytes=None, bytearray=None):
    """ windowsIdToIanaIds(Union[QByteArray, bytes, bytearray]) -> List[QByteArray]
    windowsIdToIanaIds(Union[QByteArray, bytes, bytearray], QLocale.Country) -> List[QByteArray] """
    return None

class QTimer(QObject):
  """ QTimer(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interval(self):
    """ interval(self) -> int """
    return 1

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isSingleShot(self):
    """ isSingleShot(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remainingTime(self):
    """ remainingTime(self) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setInterval(self, int):
    """ setInterval(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSingleShot(self, bool):
    """ setSingleShot(self, bool) """
    pass

  def setTimerType(self, arg0):
    """ setTimerType(self, Qt.TimerType) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def singleShot(int, PYQT_SLOT):
    """ singleShot(int, PYQT_SLOT)
    singleShot(int, Qt.TimerType, PYQT_SLOT) """
    pass

  def start(self, int):
    """ start(self, int)
    start(self) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timeout(self):
    """ timeout(self) [signal] """
    pass

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def timerId(self):
    """ timerId(self) -> int """
    return 1

  def timerType(self):
    """ timerType(self) -> Qt.TimerType """
    return None

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTimerEvent(QEvent):
  """ QTimerEvent(int)
  QTimerEvent(QTimerEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def timerId(self):
    """ timerId(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QTranslator(QObject):
  """ QTranslator(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def load(self, str, arg0=None, arg1=None, arg2=None):
    """ load(self, str, directory: str = '', searchDelimiters: str = '', suffix: str = '') -> bool
    load(self, QLocale, str, prefix: str = '', directory: str = '', suffix: str = '') -> bool """
    return None

  def loadFromData(self, bytes, arg0=None):
    """ loadFromData(self, bytes, directory: str = '') -> bool """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def translate(self, str, str, arg0=None, arg1=None):
    """ translate(self, str, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTransposeProxyModel(QAbstractProxyModel):
  """ QTransposeProxyModel(parent: QObject = None) """

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.ItemDataRole.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def mapFromSource(self, QModelIndex):
    """ mapFromSource(self, QModelIndex) -> QModelIndex """
    return None

  def mapSelectionFromSource(self, QItemSelection):
    """ mapSelectionFromSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapSelectionToSource(self, QItemSelection):
    """ mapSelectionToSource(self, QItemSelection) -> QItemSelection """
    return None

  def mapToSource(self, QModelIndex):
    """ mapToSource(self, QModelIndex) -> QModelIndex """
    return None

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.ItemDataRole.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSourceModel(self, QAbstractItemModel):
    """ setSourceModel(self, QAbstractItemModel) """
    pass

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def sourceModel(self):
    """ sourceModel(self) -> QAbstractItemModel """
    return ""

  def sourceModelChanged(self):
    """ sourceModelChanged(self) [signal] """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QUrl(simplewrapper):
  """ QUrl()
  QUrl(str, mode: QUrl.ParsingMode = QUrl.TolerantMode)
  QUrl(QUrl) """

  AssumeLocalFile = None

  class ComponentFormattingOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ComponentFormattingOptions(simplewrapper):
    """ QUrl.ComponentFormattingOptions()
    QUrl.ComponentFormattingOptions(Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption])
    QUrl.ComponentFormattingOptions(QUrl.ComponentFormattingOptions) """

    pass

  DecodeReserved = None
  DecodedMode = None
  DefaultResolution = None
  EncodeDelimiters = None
  EncodeReserved = None
  EncodeSpaces = None
  EncodeUnicode = None

  class FormattingOptions(simplewrapper):
    """ QUrl.FormattingOptions(QUrl.FormattingOptions) """

    pass

  FullyDecoded = None
  FullyEncoded = None
  None_ = None
  NormalizePathSegments = None

  class ParsingMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PreferLocalFile = None
  PrettyDecoded = None
  RemoveAuthority = None
  RemoveFilename = None
  RemoveFragment = None
  RemovePassword = None
  RemovePath = None
  RemovePort = None
  RemoveQuery = None
  RemoveScheme = None
  RemoveUserInfo = None
  StrictMode = None
  StripTrailingSlash = None
  TolerantMode = None

  class UrlFormattingOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class UserInputResolutionOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class UserInputResolutionOptions(simplewrapper):
    """ QUrl.UserInputResolutionOptions()
    QUrl.UserInputResolutionOptions(Union[QUrl.UserInputResolutionOptions, QUrl.UserInputResolutionOption])
    QUrl.UserInputResolutionOptions(QUrl.UserInputResolutionOptions) """

    pass

  def adjusted(self, arg0):
    """ adjusted(self, QUrl.FormattingOptions) -> QUrl """
    return None

  def authority(self, arg0=None, arg1=None):
    """ authority(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str """
    return ""

  def clear(self):
    """ clear(self) """
    pass

  def detach(self):
    """ detach(self) """
    pass

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def fileName(self, arg0=None, arg1=None):
    """ fileName(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str """
    return ""

  def fragment(self, arg0=None, arg1=None):
    """ fragment(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str """
    return ""

  def fromAce(UnionQByteArray=None, bytes=None, bytearray=None):
    """ fromAce(Union[QByteArray, bytes, bytearray]) -> str """
    return ""

  def fromEncoded(UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ fromEncoded(Union[QByteArray, bytes, bytearray], mode: QUrl.ParsingMode = QUrl.TolerantMode) -> QUrl """
    return None

  def fromLocalFile(str):
    """ fromLocalFile(str) -> QUrl """
    return None

  def fromPercentEncoding(UnionQByteArray=None, bytes=None, bytearray=None):
    """ fromPercentEncoding(Union[QByteArray, bytes, bytearray]) -> str """
    return ""

  def fromStringList(Iterablestr=None, arg0=None):
    """ fromStringList(Iterable[str], mode: QUrl.ParsingMode = QUrl.TolerantMode) -> List[QUrl] """
    return None

  def fromUserInput(str):
    """ fromUserInput(str) -> QUrl
    fromUserInput(str, str, options: Union[QUrl.UserInputResolutionOptions, QUrl.UserInputResolutionOption] = QUrl.DefaultResolution) -> QUrl """
    return None

  def hasFragment(self):
    """ hasFragment(self) -> bool """
    return None

  def hasQuery(self):
    """ hasQuery(self) -> bool """
    return None

  def host(self, UnionQUrl.ComponentFormattingOptions=None, arg0=None):
    """ host(self, Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str """
    return ""

  def idnWhitelist():
    """ idnWhitelist() -> List[str] """
    return ""

  def isDetached(self):
    """ isDetached(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isLocalFile(self):
    """ isLocalFile(self) -> bool """
    return None

  def isParentOf(self, QUrl):
    """ isParentOf(self, QUrl) -> bool """
    return None

  def isRelative(self):
    """ isRelative(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def matches(self, QUrl, arg0):
    """ matches(self, QUrl, QUrl.FormattingOptions) -> bool """
    return None

  def password(self, arg0=None, arg1=None):
    """ password(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str """
    return ""

  def path(self, arg0=None, arg1=None):
    """ path(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str """
    return ""

  def port(self, arg0=None):
    """ port(self, defaultPort: int = -1) -> int """
    return 1

  def query(self, arg0=None, arg1=None):
    """ query(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str """
    return ""

  def resolved(self, QUrl):
    """ resolved(self, QUrl) -> QUrl """
    return None

  def scheme(self):
    """ scheme(self) -> str """
    return ""

  def setAuthority():
    """ setAuthority(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode) """
    pass

  def setFragment():
    """ setFragment(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode) """
    pass

  def setHost():
    """ setHost(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode) """
    pass

  def setIdnWhitelist(Iterablestr=None):
    """ setIdnWhitelist(Iterable[str]) """
    pass

  def setPassword():
    """ setPassword(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode) """
    pass

  def setPath():
    """ setPath(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode) """
    pass

  def setPort(self, int):
    """ setPort(self, int) """
    pass

  def setQuery(self, QUrlQuery):
    """ setQuery(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)
    setQuery(self, QUrlQuery) """
    pass

  def setScheme(self, str):
    """ setScheme(self, str) """
    pass

  def setUrl():
    """ setUrl(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode) """
    pass

  def setUserInfo():
    """ setUserInfo(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode) """
    pass

  def setUserName():
    """ setUserName(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode) """
    pass

  def swap(self, QUrl):
    """ swap(self, QUrl) """
    pass

  def toAce(str):
    """ toAce(str) -> QByteArray """
    return None

  def toDisplayString(self, arg0=None):
    """ toDisplayString(self, options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> str """
    return ""

  def toEncoded(self, arg0=None):
    """ toEncoded(self, options: QUrl.FormattingOptions = QUrl.FullyEncoded) -> QByteArray """
    return None

  def toLocalFile(self):
    """ toLocalFile(self) -> str """
    return ""

  def toPercentEncoding(str, arg0=None, bytes=None, arg1=None, arg2=None, bytes=None, arg3=None):
    """ toPercentEncoding(str, exclude: Union[QByteArray, bytes, bytearray] = QByteArray(), include: Union[QByteArray, bytes, bytearray] = QByteArray()) -> QByteArray """
    return None

  def toString(self, arg0=None):
    """ toString(self, options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> str """
    return ""

  def toStringList(IterableQUrl=None, arg0=None):
    """ toStringList(Iterable[QUrl], options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> List[str] """
    return ""

  def topLevelDomain(self, arg0=None, arg1=None):
    """ topLevelDomain(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str """
    return ""

  def url(self, arg0=None):
    """ url(self, options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> str """
    return ""

  def userInfo(self, arg0=None, arg1=None):
    """ userInfo(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str """
    return ""

  def userName(self, arg0=None, arg1=None):
    """ userName(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str """
    return ""

class QUrlQuery(simplewrapper):
  """ QUrlQuery()
  QUrlQuery(QUrl)
  QUrlQuery(str)
  QUrlQuery(QUrlQuery) """

  def addQueryItem(self, str, str):
    """ addQueryItem(self, str, str) """
    pass

  def allQueryItemValues(self, str, arg0=None, arg1=None):
    """ allQueryItemValues(self, str, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> List[str] """
    return ""

  def clear(self):
    """ clear(self) """
    pass

  def defaultQueryPairDelimiter():
    """ defaultQueryPairDelimiter() -> str """
    return ""

  def defaultQueryValueDelimiter():
    """ defaultQueryValueDelimiter() -> str """
    return ""

  def hasQueryItem(self, str):
    """ hasQueryItem(self, str) -> bool """
    return None

  def isDetached(self):
    """ isDetached(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def query(self, arg0=None, arg1=None):
    """ query(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str """
    return ""

  def queryItemValue(self, str, arg0=None, arg1=None):
    """ queryItemValue(self, str, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str """
    return ""

  def queryItems(self, arg0=None, arg1=None):
    """ queryItems(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> List[Tuple[str, str]] """
    return ""

  def queryPairDelimiter(self):
    """ queryPairDelimiter(self) -> str """
    return ""

  def queryValueDelimiter(self):
    """ queryValueDelimiter(self) -> str """
    return ""

  def removeAllQueryItems(self, str):
    """ removeAllQueryItems(self, str) """
    pass

  def removeQueryItem(self, str):
    """ removeQueryItem(self, str) """
    pass

  def setQuery(self, str):
    """ setQuery(self, str) """
    pass

  def setQueryDelimiters(self, str, str):
    """ setQueryDelimiters(self, str, str) """
    pass

  def setQueryItems(self, IterableTuplestr=None, str=None):
    """ setQueryItems(self, Iterable[Tuple[str, str]]) """
    pass

  def swap(self, QUrlQuery):
    """ swap(self, QUrlQuery) """
    pass

  def toString(self, arg0=None, arg1=None):
    """ toString(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str """
    return ""

class QUuid(simplewrapper):
  """ QUuid()
  QUuid(int, int, int, int, int, int, int, int, int, int, int)
  QUuid(str)
  QUuid(Union[QByteArray, bytes, bytearray])
  QUuid(QUuid) """

  DCE = None
  EmbeddedPOSIX = None
  Id128 = None
  Md5 = None
  Microsoft = None
  NCS = None
  Name = None
  Random = None
  Reserved = None
  Sha1 = None

  class StringFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Time = None
  VarUnknown = None

  class Variant(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  VerUnknown = None

  class Version(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WithBraces = None
  WithoutBraces = None

  def createUuid():
    """ createUuid() -> QUuid """
    return None

  def createUuidV3(QUuid, UnionQByteArray=None, bytes=None, bytearray=None):
    """ createUuidV3(QUuid, Union[QByteArray, bytes, bytearray]) -> QUuid
    createUuidV3(QUuid, str) -> QUuid """
    return None

  def createUuidV5(QUuid, UnionQByteArray=None, bytes=None, bytearray=None):
    """ createUuidV5(QUuid, Union[QByteArray, bytes, bytearray]) -> QUuid
    createUuidV5(QUuid, str) -> QUuid """
    return None

  def fromRfc4122(UnionQByteArray=None, bytes=None, bytearray=None):
    """ fromRfc4122(Union[QByteArray, bytes, bytearray]) -> QUuid """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def toByteArray(self):
    """ toByteArray(self) -> QByteArray
    toByteArray(self, QUuid.StringFormat) -> QByteArray """
    return None

  def toRfc4122(self):
    """ toRfc4122(self) -> QByteArray """
    return None

  def toString(self):
    """ toString(self) -> str
    toString(self, QUuid.StringFormat) -> str """
    return ""

  def variant(self):
    """ variant(self) -> QUuid.Variant """
    return None

  def version(self):
    """ version(self) -> QUuid.Version """
    return None

class QVariant(simplewrapper):
  """ QVariant()
  QVariant(QVariant.Type)
  QVariant(object)
  QVariant(QVariant) """

  BitArray = None
  Bitmap = None
  Bool = None
  Brush = None
  ByteArray = None
  Char = None
  Color = None
  Cursor = None
  Date = None
  DateTime = None
  Double = None
  EasingCurve = None
  Font = None
  Hash = None
  Icon = None
  Image = None
  Int = None
  Invalid = None
  KeySequence = None
  Line = None
  LineF = None
  List = None
  Locale = None
  LongLong = None
  Map = None
  Matrix = None
  Matrix4x4 = None
  ModelIndex = None
  Palette = None
  Pen = None
  PersistentModelIndex = None
  Pixmap = None
  Point = None
  PointF = None
  Polygon = None
  PolygonF = None
  Quaternion = None
  Rect = None
  RectF = None
  RegExp = None
  Region = None
  RegularExpression = None
  Size = None
  SizeF = None
  SizePolicy = None
  String = None
  StringList = None
  TextFormat = None
  TextLength = None
  Time = None
  Transform = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UInt = None
  ULongLong = None
  Url = None
  UserType = None
  Uuid = None
  Vector2D = None
  Vector3D = None
  Vector4D = None

  def canConvert(self, int):
    """ canConvert(self, int) -> bool """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def convert(self, int):
    """ convert(self, int) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def load(self, QDataStream):
    """ load(self, QDataStream) """
    pass

  def nameToType(str):
    """ nameToType(str) -> QVariant.Type """
    return None

  def save(self, QDataStream):
    """ save(self, QDataStream) """
    pass

  def swap(self, QVariant):
    """ swap(self, QVariant) """
    pass

  def type(self):
    """ type(self) -> QVariant.Type """
    return None

  def typeName(self):
    """ typeName(self) -> str """
    return ""

  def typeToName(int):
    """ typeToName(int) -> str """
    return ""

  def userType(self):
    """ userType(self) -> int """
    return 1

  def value(self):
    """ value(self) -> object """
    return None

class QVariantAnimation(QAbstractAnimation):
  """ QVariantAnimation(parent: QObject = None) """

  Backward = None
  DeleteWhenStopped = None
  Forward = None
  KeepWhenStopped = None
  Paused = None
  Running = None
  Stopped = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentLoop(self):
    """ currentLoop(self) -> int """
    return 1

  def currentLoopChanged(self, int):
    """ currentLoopChanged(self, int) [signal] """
    pass

  def currentLoopTime(self):
    """ currentLoopTime(self) -> int """
    return 1

  def currentTime(self):
    """ currentTime(self) -> int """
    return 1

  def currentValue(self):
    """ currentValue(self) -> Any """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QAbstractAnimation.Direction """
    return ""

  def directionChanged(self, arg0):
    """ directionChanged(self, QAbstractAnimation.Direction) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duration(self):
    """ duration(self) -> int """
    return 1

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def easingCurve(self):
    """ easingCurve(self) -> QEasingCurve """
    return None

  def endValue(self):
    """ endValue(self) -> Any """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def group(self):
    """ group(self) -> QAnimationGroup """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpolated(self, Any, Any, float):
    """ interpolated(self, Any, Any, float) -> Any """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyValueAt(self, float):
    """ keyValueAt(self, float) -> Any """
    return None

  def keyValues(self):
    """ keyValues(self) -> List[Tuple[float, Any]] """
    return 1.0

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pause(self):
    """ pause(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resume(self):
    """ resume(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentTime(self, int):
    """ setCurrentTime(self, int) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QAbstractAnimation.Direction) """
    pass

  def setDuration(self, int):
    """ setDuration(self, int) """
    pass

  def setEasingCurve(self, UnionQEasingCurve=None, QEasingCurve.Type=None):
    """ setEasingCurve(self, Union[QEasingCurve, QEasingCurve.Type]) """
    pass

  def setEndValue(self, Any):
    """ setEndValue(self, Any) """
    pass

  def setKeyValueAt(self, float, Any):
    """ setKeyValueAt(self, float, Any) """
    pass

  def setKeyValues(self, IterableTuplefloat=None, Any=None):
    """ setKeyValues(self, Iterable[Tuple[float, Any]]) """
    pass

  def setLoopCount(self, int):
    """ setLoopCount(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setStartValue(self, Any):
    """ setStartValue(self, Any) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def start():
    """ start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startValue(self):
    """ startValue(self) -> Any """
    return None

  def state(self):
    """ state(self) -> QAbstractAnimation.State """
    return ""

  def stateChanged(self, arg0, arg1):
    """ stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def totalDuration(self):
    """ totalDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCurrentTime(self, int):
    """ updateCurrentTime(self, int) """
    pass

  def updateCurrentValue(self, Any):
    """ updateCurrentValue(self, Any) """
    pass

  def updateDirection():
    pass

  def updateState(self, arg0, arg1):
    """ updateState(self, QAbstractAnimation.State, QAbstractAnimation.State) """
    pass

  def valueChanged(self, Any):
    """ valueChanged(self, Any) [signal] """
    pass

class QVersionNumber(simplewrapper):
  """ QVersionNumber()
  QVersionNumber(Iterable[int])
  QVersionNumber(int)
  QVersionNumber(int, int)
  QVersionNumber(int, int, int)
  QVersionNumber(QVersionNumber) """

  def commonPrefix(QVersionNumber, QVersionNumber):
    """ commonPrefix(QVersionNumber, QVersionNumber) -> QVersionNumber """
    return None

  def compare(QVersionNumber, QVersionNumber):
    """ compare(QVersionNumber, QVersionNumber) -> int """
    return 1

  def fromString(str):
    """ fromString(str) -> Tuple[QVersionNumber, int] """
    return 1

  def isNormalized(self):
    """ isNormalized(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isPrefixOf(self, QVersionNumber):
    """ isPrefixOf(self, QVersionNumber) -> bool """
    return None

  def majorVersion(self):
    """ majorVersion(self) -> int """
    return 1

  def microVersion(self):
    """ microVersion(self) -> int """
    return 1

  def minorVersion(self):
    """ minorVersion(self) -> int """
    return 1

  def normalized(self):
    """ normalized(self) -> QVersionNumber """
    return None

  def segmentAt(self, int):
    """ segmentAt(self, int) -> int """
    return 1

  def segmentCount(self):
    """ segmentCount(self) -> int """
    return 1

  def segments(self):
    """ segments(self) -> List[int] """
    return 1

  def toString(self):
    """ toString(self) -> str """
    return ""

class QWaitCondition(simplewrapper):
  """ QWaitCondition() """

  def wait(self, QMutex, arg0=None):
    """ wait(self, QMutex, msecs: int = ULONG_MAX) -> bool
    wait(self, QReadWriteLock, msecs: int = ULONG_MAX) -> bool
    wait(self, QMutex, QDeadlineTimer) -> bool
    wait(self, QReadWriteLock, QDeadlineTimer) -> bool """
    return None

  def wakeAll(self):
    """ wakeAll(self) """
    pass

  def wakeOne(self):
    """ wakeOne(self) """
    pass

class QWinEventNotifier(QObject):
  """ QWinEventNotifier(parent: QObject = None)
  QWinEventNotifier(sip.voidptr, parent: QObject = None) """

  def activated(self, arg0):
    """ activated(self, sip.voidptr) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def handle(self):
    """ handle(self) -> sip.voidptr """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setHandle(self, arg0):
    """ setHandle(self, sip.voidptr) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QWriteLocker(simplewrapper):
  """ QWriteLocker(QReadWriteLock) """

  def readWriteLock(self):
    """ readWriteLock(self) -> QReadWriteLock """
    return None

  def relock(self):
    """ relock(self) """
    pass

  def unlock(self):
    """ unlock(self) """
    pass

class QXmlStreamAttribute(simplewrapper):
  """ QXmlStreamAttribute()
  QXmlStreamAttribute(str, str)
  QXmlStreamAttribute(str, str, str)
  QXmlStreamAttribute(QXmlStreamAttribute) """

  def isDefault(self):
    """ isDefault(self) -> bool """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def namespaceUri(self):
    """ namespaceUri(self) -> str """
    return ""

  def prefix(self):
    """ prefix(self) -> str """
    return ""

  def qualifiedName(self):
    """ qualifiedName(self) -> str """
    return ""

  def value(self):
    """ value(self) -> str """
    return ""

class QXmlStreamAttributes(simplewrapper):
  """ QXmlStreamAttributes()
  QXmlStreamAttributes(QXmlStreamAttributes) """

  def append(self, str, str, str):
    """ append(self, str, str, str)
    append(self, str, str)
    append(self, QXmlStreamAttribute) """
    pass

  def at(self, int):
    """ at(self, int) -> QXmlStreamAttribute """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def contains(self, QXmlStreamAttribute):
    """ contains(self, QXmlStreamAttribute) -> bool """
    return None

  def count(self, QXmlStreamAttribute):
    """ count(self, QXmlStreamAttribute) -> int
    count(self) -> int """
    return 1

  def data(self):
    """ data(self) -> sip.voidptr """
    return None

  def fill():
    """ fill(self, QXmlStreamAttribute, size: int = -1) """
    pass

  def first(self):
    """ first(self) -> QXmlStreamAttribute """
    return None

  def hasAttribute(self, str):
    """ hasAttribute(self, str) -> bool
    hasAttribute(self, str, str) -> bool """
    return None

  def indexOf(self, QXmlStreamAttribute, arg0=None):
    """ indexOf(self, QXmlStreamAttribute, from_: int = 0) -> int """
    return 1

  def insert(self, int, QXmlStreamAttribute):
    """ insert(self, int, QXmlStreamAttribute) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def last(self):
    """ last(self) -> QXmlStreamAttribute """
    return None

  def lastIndexOf(self, QXmlStreamAttribute, arg0=None):
    """ lastIndexOf(self, QXmlStreamAttribute, from_: int = -1) -> int """
    return 1

  def prepend(self, QXmlStreamAttribute):
    """ prepend(self, QXmlStreamAttribute) """
    pass

  def remove(self, int):
    """ remove(self, int)
    remove(self, int, int) """
    pass

  def replace(self, int, QXmlStreamAttribute):
    """ replace(self, int, QXmlStreamAttribute) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def value(self, str, str):
    """ value(self, str, str) -> str
    value(self, str) -> str """
    return ""

class QXmlStreamEntityDeclaration(simplewrapper):
  """ QXmlStreamEntityDeclaration()
  QXmlStreamEntityDeclaration(QXmlStreamEntityDeclaration) """

  def name(self):
    """ name(self) -> str """
    return ""

  def notationName(self):
    """ notationName(self) -> str """
    return ""

  def publicId(self):
    """ publicId(self) -> str """
    return ""

  def systemId(self):
    """ systemId(self) -> str """
    return ""

  def value(self):
    """ value(self) -> str """
    return ""

class QXmlStreamEntityResolver(simplewrapper):
  """ QXmlStreamEntityResolver()
  QXmlStreamEntityResolver(QXmlStreamEntityResolver) """

  def resolveUndeclaredEntity(self, str):
    """ resolveUndeclaredEntity(self, str) -> str """
    return ""

class QXmlStreamNamespaceDeclaration(simplewrapper):
  """ QXmlStreamNamespaceDeclaration()
  QXmlStreamNamespaceDeclaration(QXmlStreamNamespaceDeclaration)
  QXmlStreamNamespaceDeclaration(str, str) """

  def namespaceUri(self):
    """ namespaceUri(self) -> str """
    return ""

  def prefix(self):
    """ prefix(self) -> str """
    return ""

class QXmlStreamNotationDeclaration(simplewrapper):
  """ QXmlStreamNotationDeclaration()
  QXmlStreamNotationDeclaration(QXmlStreamNotationDeclaration) """

  def name(self):
    """ name(self) -> str """
    return ""

  def publicId(self):
    """ publicId(self) -> str """
    return ""

  def systemId(self):
    """ systemId(self) -> str """
    return ""

class QXmlStreamReader(simplewrapper):
  """ QXmlStreamReader()
  QXmlStreamReader(QIODevice)
  QXmlStreamReader(Union[QByteArray, bytes, bytearray])
  QXmlStreamReader(str) """

  Characters = None
  Comment = None
  CustomError = None
  DTD = None
  EndDocument = None
  EndElement = None
  EntityReference = None

  class Error(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ErrorOnUnexpectedElement = None
  IncludeChildElements = None
  Invalid = None
  NoError = None
  NoToken = None
  NotWellFormedError = None
  PrematureEndOfDocumentError = None
  ProcessingInstruction = None

  class ReadElementTextBehaviour(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SkipChildElements = None
  StartDocument = None
  StartElement = None

  class TokenType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UnexpectedElementError = None

  def addData(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ addData(self, Union[QByteArray, bytes, bytearray])
    addData(self, str) """
    pass

  def addExtraNamespaceDeclaration(self, QXmlStreamNamespaceDeclaration):
    """ addExtraNamespaceDeclaration(self, QXmlStreamNamespaceDeclaration) """
    pass

  def addExtraNamespaceDeclarations(self, IterableQXmlStreamNamespaceDeclaration=None):
    """ addExtraNamespaceDeclarations(self, Iterable[QXmlStreamNamespaceDeclaration]) """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def attributes(self):
    """ attributes(self) -> QXmlStreamAttributes """
    return None

  def characterOffset(self):
    """ characterOffset(self) -> int """
    return 1

  def clear(self):
    """ clear(self) """
    pass

  def columnNumber(self):
    """ columnNumber(self) -> int """
    return 1

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def documentEncoding(self):
    """ documentEncoding(self) -> str """
    return ""

  def documentVersion(self):
    """ documentVersion(self) -> str """
    return ""

  def dtdName(self):
    """ dtdName(self) -> str """
    return ""

  def dtdPublicId(self):
    """ dtdPublicId(self) -> str """
    return ""

  def dtdSystemId(self):
    """ dtdSystemId(self) -> str """
    return ""

  def entityDeclarations(self):
    """ entityDeclarations(self) -> List[QXmlStreamEntityDeclaration] """
    return None

  def entityResolver(self):
    """ entityResolver(self) -> QXmlStreamEntityResolver """
    return None

  def error(self):
    """ error(self) -> QXmlStreamReader.Error """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def hasError(self):
    """ hasError(self) -> bool """
    return None

  def isCDATA(self):
    """ isCDATA(self) -> bool """
    return None

  def isCharacters(self):
    """ isCharacters(self) -> bool """
    return None

  def isComment(self):
    """ isComment(self) -> bool """
    return None

  def isDTD(self):
    """ isDTD(self) -> bool """
    return None

  def isEndDocument(self):
    """ isEndDocument(self) -> bool """
    return None

  def isEndElement(self):
    """ isEndElement(self) -> bool """
    return None

  def isEntityReference(self):
    """ isEntityReference(self) -> bool """
    return None

  def isProcessingInstruction(self):
    """ isProcessingInstruction(self) -> bool """
    return None

  def isStandaloneDocument(self):
    """ isStandaloneDocument(self) -> bool """
    return None

  def isStartDocument(self):
    """ isStartDocument(self) -> bool """
    return None

  def isStartElement(self):
    """ isStartElement(self) -> bool """
    return None

  def isWhitespace(self):
    """ isWhitespace(self) -> bool """
    return None

  def lineNumber(self):
    """ lineNumber(self) -> int """
    return 1

  def name(self):
    """ name(self) -> str """
    return ""

  def namespaceDeclarations(self):
    """ namespaceDeclarations(self) -> List[QXmlStreamNamespaceDeclaration] """
    return None

  def namespaceProcessing(self):
    """ namespaceProcessing(self) -> bool """
    return None

  def namespaceUri(self):
    """ namespaceUri(self) -> str """
    return ""

  def notationDeclarations(self):
    """ notationDeclarations(self) -> List[QXmlStreamNotationDeclaration] """
    return None

  def prefix(self):
    """ prefix(self) -> str """
    return ""

  def processingInstructionData(self):
    """ processingInstructionData(self) -> str """
    return ""

  def processingInstructionTarget(self):
    """ processingInstructionTarget(self) -> str """
    return ""

  def qualifiedName(self):
    """ qualifiedName(self) -> str """
    return ""

  def raiseError():
    """ raiseError(self, message: str = '') """
    pass

  def readElementText(self, arg0=None):
    """ readElementText(self, behaviour: QXmlStreamReader.ReadElementTextBehaviour = QXmlStreamReader.ErrorOnUnexpectedElement) -> str """
    return ""

  def readNext(self):
    """ readNext(self) -> QXmlStreamReader.TokenType """
    return None

  def readNextStartElement(self):
    """ readNextStartElement(self) -> bool """
    return None

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setEntityResolver(self, QXmlStreamEntityResolver):
    """ setEntityResolver(self, QXmlStreamEntityResolver) """
    pass

  def setNamespaceProcessing(self, bool):
    """ setNamespaceProcessing(self, bool) """
    pass

  def skipCurrentElement(self):
    """ skipCurrentElement(self) """
    pass

  def text(self):
    """ text(self) -> str """
    return ""

  def tokenString(self):
    """ tokenString(self) -> str """
    return ""

  def tokenType(self):
    """ tokenType(self) -> QXmlStreamReader.TokenType """
    return None

class QXmlStreamWriter(simplewrapper):
  """ QXmlStreamWriter()
  QXmlStreamWriter(QIODevice)
  QXmlStreamWriter(Union[QByteArray, bytes, bytearray]) """

  def autoFormatting(self):
    """ autoFormatting(self) -> bool """
    return None

  def autoFormattingIndent(self):
    """ autoFormattingIndent(self) -> int """
    return 1

  def codec(self):
    """ codec(self) -> QTextCodec """
    return None

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def hasError(self):
    """ hasError(self) -> bool """
    return None

  def setAutoFormatting(self, bool):
    """ setAutoFormatting(self, bool) """
    pass

  def setAutoFormattingIndent(self, int):
    """ setAutoFormattingIndent(self, int) """
    pass

  def setCodec(self, QTextCodec):
    """ setCodec(self, QTextCodec)
    setCodec(self, str) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def writeAttribute(self, str, str):
    """ writeAttribute(self, str, str)
    writeAttribute(self, str, str, str)
    writeAttribute(self, QXmlStreamAttribute) """
    pass

  def writeAttributes(self, QXmlStreamAttributes):
    """ writeAttributes(self, QXmlStreamAttributes) """
    pass

  def writeCDATA(self, str):
    """ writeCDATA(self, str) """
    pass

  def writeCharacters(self, str):
    """ writeCharacters(self, str) """
    pass

  def writeComment(self, str):
    """ writeComment(self, str) """
    pass

  def writeCurrentToken(self, QXmlStreamReader):
    """ writeCurrentToken(self, QXmlStreamReader) """
    pass

  def writeDTD(self, str):
    """ writeDTD(self, str) """
    pass

  def writeDefaultNamespace(self, str):
    """ writeDefaultNamespace(self, str) """
    pass

  def writeEmptyElement(self, str):
    """ writeEmptyElement(self, str)
    writeEmptyElement(self, str, str) """
    pass

  def writeEndDocument(self):
    """ writeEndDocument(self) """
    pass

  def writeEndElement(self):
    """ writeEndElement(self) """
    pass

  def writeEntityReference(self, str):
    """ writeEntityReference(self, str) """
    pass

  def writeNamespace():
    """ writeNamespace(self, str, prefix: str = '') """
    pass

  def writeProcessingInstruction():
    """ writeProcessingInstruction(self, str, data: str = '') """
    pass

  def writeStartDocument(self):
    """ writeStartDocument(self)
    writeStartDocument(self, str)
    writeStartDocument(self, str, bool) """
    pass

  def writeStartElement(self, str):
    """ writeStartElement(self, str)
    writeStartElement(self, str, str) """
    pass

  def writeTextElement(self, str, str):
    """ writeTextElement(self, str, str)
    writeTextElement(self, str, str, str) """
    pass

def Q_ARG(object, object):
  """ Q_ARG(object, object) -> QGenericArgument """
  return None

def Q_CLASSINFO(str, str):
  """ Q_CLASSINFO(str, str) """
  pass

def Q_ENUM(Uniontype=None, enum.Enum=None):
  """ Q_ENUM(Union[type, enum.Enum]) """
  pass

def Q_ENUMS(arg0):
  """ Q_ENUMS(*) """
  pass

def Q_FLAG(Uniontype=None, enum.Enum=None):
  """ Q_FLAG(Union[type, enum.Enum]) """
  pass

def Q_FLAGS(arg0):
  """ Q_FLAGS(*) """
  pass

def Q_RETURN_ARG(object):
  """ Q_RETURN_ARG(object) -> QGenericReturnArgument """
  return None

class Qt(simplewrapper):

  AA_CompressHighFrequencyEvents = None
  AA_CompressTabletEvents = None
  AA_DisableHighDpiScaling = None
  AA_DisableShaderDiskCache = None
  AA_DisableWindowContextHelpButton = None
  AA_DontCheckOpenGLContextThreadAffinity = None
  AA_DontCreateNativeWidgetSiblings = None
  AA_DontShowIconsInMenus = None
  AA_DontShowShortcutsInContextMenus = None
  AA_DontUseNativeDialogs = None
  AA_DontUseNativeMenuBar = None
  AA_EnableHighDpiScaling = None
  AA_ForceRasterWidgets = None
  AA_ImmediateWidgetCreation = None
  AA_MSWindowsUseDirect3DByDefault = None
  AA_MacDontSwapCtrlAndMeta = None
  AA_MacPluginApplication = None
  AA_NativeWindows = None
  AA_PluginApplication = None
  AA_SetPalette = None
  AA_ShareOpenGLContexts = None
  AA_SynthesizeMouseForUnhandledTabletEvents = None
  AA_SynthesizeMouseForUnhandledTouchEvents = None
  AA_SynthesizeTouchForUnhandledMouseEvents = None
  AA_Use96Dpi = None
  AA_UseDesktopOpenGL = None
  AA_UseHighDpiPixmaps = None
  AA_UseOpenGLES = None
  AA_UseSoftwareOpenGL = None
  AA_UseStyleSheetPropagationInWidgetStyles = None
  AA_X11InitThreads = None
  ALT = None
  AbsoluteSize = None
  AccessibleDescriptionRole = None
  AccessibleTextRole = None
  ActionMask = None
  ActionsContextMenu = None
  ActiveWindowFocusReason = None
  AddToSelection = None
  AlignAbsolute = None
  AlignBaseline = None
  AlignBottom = None
  AlignCenter = None
  AlignHCenter = None
  AlignHorizontal_Mask = None
  AlignJustify = None
  AlignLeading = None
  AlignLeft = None
  AlignRight = None
  AlignTop = None
  AlignTrailing = None
  AlignVCenter = None
  AlignVertical_Mask = None

  class Alignment(simplewrapper):
    """ Qt.Alignment()
    Qt.Alignment(Union[Qt.Alignment, Qt.AlignmentFlag])
    Qt.Alignment(Qt.Alignment) """

    pass

  class AlignmentFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AllButtons = None
  AllDockWidgetAreas = None
  AllToolBarAreas = None
  AltModifier = None
  AnchorBottom = None
  AnchorHorizontalCenter = None
  AnchorLeft = None

  class AnchorPoint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AnchorRight = None
  AnchorTop = None
  AnchorVerticalCenter = None
  ApplicationActive = None

  class ApplicationAttribute(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ApplicationHidden = None
  ApplicationInactive = None
  ApplicationModal = None
  ApplicationShortcut = None

  class ApplicationState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ApplicationStates(simplewrapper):
    """ Qt.ApplicationStates()
    Qt.ApplicationStates(Union[Qt.ApplicationStates, Qt.ApplicationState])
    Qt.ApplicationStates(Qt.ApplicationStates) """

    pass

  ApplicationSuspended = None
  ArrowCursor = None

  class ArrowType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AscendingOrder = None

  class AspectRatioMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AutoColor = None
  AutoConnection = None
  AutoDither = None
  AutoText = None
  AvoidDither = None

  class Axis(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  BDiagPattern = None

  class BGMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  BackButton = None
  BackgroundColorRole = None
  BackgroundRole = None
  BacktabFocusReason = None
  BeginNativeGesture = None
  BevelJoin = None
  BitmapCursor = None
  BlankCursor = None
  BlockingQueuedConnection = None
  BottomDockWidgetArea = None
  BottomEdge = None
  BottomLeftCorner = None
  BottomLeftSection = None
  BottomRightCorner = None
  BottomRightSection = None
  BottomSection = None
  BottomToolBarArea = None

  class BrushStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  BusyCursor = None
  BypassGraphicsProxyWidget = None
  BypassWindowManagerHint = None
  CTRL = None
  CaseInsensitive = None
  CaseSensitive = None

  class CaseSensitivity(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class CheckState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CheckStateRole = None
  Checked = None
  ChecksumIso3309 = None
  ChecksumItuV41 = None

  class ChecksumType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ClickFocus = None

  class ClipOperation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ClosedHandCursor = None
  CoarseTimer = None
  ColorOnly = None
  ConicalGradientPattern = None

  class ConnectionType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ContainsItemBoundingRect = None
  ContainsItemShape = None

  class ContextMenuPolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ControlModifier = None

  class CoordinateSystem(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CopyAction = None

  class Corner(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CoverWindow = None
  CrossCursor = None
  CrossPattern = None

  class CursorMoveStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class CursorShape(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CustomContextMenu = None
  CustomCursor = None
  CustomDashLine = None
  CustomGesture = None
  CustomizeWindowHint = None
  DashDotDotLine = None
  DashDotLine = None
  DashLine = None

  class DateFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class DayOfWeek(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DecorationRole = None
  DefaultContextMenu = None
  DefaultLocaleLongDate = None
  DefaultLocaleShortDate = None
  Dense1Pattern = None
  Dense2Pattern = None
  Dense3Pattern = None
  Dense4Pattern = None
  Dense5Pattern = None
  Dense6Pattern = None
  Dense7Pattern = None
  DescendingOrder = None
  Desktop = None
  DeviceCoordinates = None
  DiagCrossPattern = None
  Dialog = None
  DiffuseAlphaDither = None
  DiffuseDither = None
  DirectConnection = None
  DisplayRole = None

  class DockWidgetArea(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DockWidgetArea_Mask = None

  class DockWidgetAreas(simplewrapper):
    """ Qt.DockWidgetAreas()
    Qt.DockWidgetAreas(Union[Qt.DockWidgetAreas, Qt.DockWidgetArea])
    Qt.DockWidgetAreas(Qt.DockWidgetAreas) """

    pass

  DontStartGestureOnChildren = None
  DotLine = None
  DownArrow = None
  DragCopyCursor = None
  DragLinkCursor = None
  DragMoveCursor = None
  Drawer = None

  class DropAction(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class DropActions(simplewrapper):
    """ Qt.DropActions()
    Qt.DropActions(Union[Qt.DropActions, Qt.DropAction])
    Qt.DropActions(Qt.DropActions) """

    pass

  class Edge(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Edges(simplewrapper):
    """ Qt.Edges()
    Qt.Edges(Union[Qt.Edges, Qt.Edge])
    Qt.Edges(Qt.Edges) """

    pass

  EditRole = None
  ElideLeft = None
  ElideMiddle = None
  ElideNone = None
  ElideRight = None
  EndNativeGesture = None
  EnterKeyDefault = None
  EnterKeyDone = None
  EnterKeyGo = None
  EnterKeyNext = None
  EnterKeyPrevious = None
  EnterKeyReturn = None
  EnterKeySearch = None
  EnterKeySend = None

  class EnterKeyType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class EventPriority(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ExactHit = None
  ExtraButton1 = None
  ExtraButton10 = None
  ExtraButton11 = None
  ExtraButton12 = None
  ExtraButton13 = None
  ExtraButton14 = None
  ExtraButton15 = None
  ExtraButton16 = None
  ExtraButton17 = None
  ExtraButton18 = None
  ExtraButton19 = None
  ExtraButton2 = None
  ExtraButton20 = None
  ExtraButton21 = None
  ExtraButton22 = None
  ExtraButton23 = None
  ExtraButton24 = None
  ExtraButton3 = None
  ExtraButton4 = None
  ExtraButton5 = None
  ExtraButton6 = None
  ExtraButton7 = None
  ExtraButton8 = None
  ExtraButton9 = None
  FDiagPattern = None
  FastTransformation = None

  class FillRule(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FindChildOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FindChildOptions(simplewrapper):
    """ Qt.FindChildOptions()
    Qt.FindChildOptions(Union[Qt.FindChildOptions, Qt.FindChildOption])
    Qt.FindChildOptions(Qt.FindChildOptions) """

    pass

  FindChildrenRecursively = None
  FindDirectChildrenOnly = None
  FlatCap = None

  class FocusPolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FocusReason(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FontRole = None
  ForbiddenCursor = None
  ForegroundRole = None
  ForeignWindow = None
  ForwardButton = None
  FramelessWindowHint = None
  Friday = None
  FuzzyHit = None
  GestureCanceled = None
  GestureFinished = None

  class GestureFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class GestureFlags(simplewrapper):
    """ Qt.GestureFlags()
    Qt.GestureFlags(Union[Qt.GestureFlags, Qt.GestureFlag])
    Qt.GestureFlags(Qt.GestureFlags) """

    pass

  GestureStarted = None

  class GestureState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class GestureType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  GestureUpdated = None

  class GlobalColor(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  GroupSwitchModifier = None
  HighEventPriority = None

  class HitTestAccuracy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  HorPattern = None
  Horizontal = None
  IBeamCursor = None
  ISODate = None
  ISODateWithMs = None
  IgnoreAction = None
  IgnoreAspectRatio = None
  IgnoredGesturesPropagateToParent = None
  ImAbsolutePosition = None
  ImAnchorPosition = None
  ImAnchorRectangle = None
  ImCurrentSelection = None
  ImCursorPosition = None
  ImCursorRectangle = None
  ImEnabled = None
  ImEnterKeyType = None
  ImFont = None
  ImHints = None
  ImInputItemClipRectangle = None
  ImMaximumTextLength = None
  ImMicroFocus = None
  ImPlatformData = None
  ImPreferredLanguage = None
  ImQueryAll = None
  ImQueryInput = None
  ImSurroundingText = None
  ImTextAfterCursor = None
  ImTextBeforeCursor = None

  class ImageConversionFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ImageConversionFlags(simplewrapper):
    """ Qt.ImageConversionFlags()
    Qt.ImageConversionFlags(Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag])
    Qt.ImageConversionFlags(Qt.ImageConversionFlags) """

    pass

  ImhDate = None
  ImhDialableCharactersOnly = None
  ImhDigitsOnly = None
  ImhEmailCharactersOnly = None
  ImhExclusiveInputMask = None
  ImhFormattedNumbersOnly = None
  ImhHiddenText = None
  ImhLatinOnly = None
  ImhLowercaseOnly = None
  ImhMultiLine = None
  ImhNoAutoUppercase = None
  ImhNoEditMenu = None
  ImhNoPredictiveText = None
  ImhNoTextHandles = None
  ImhNone = None
  ImhPreferLatin = None
  ImhPreferLowercase = None
  ImhPreferNumbers = None
  ImhPreferUppercase = None
  ImhSensitiveData = None
  ImhTime = None
  ImhUppercaseOnly = None
  ImhUrlCharactersOnly = None
  InitialSortOrderRole = None

  class InputMethodHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class InputMethodHints(simplewrapper):
    """ Qt.InputMethodHints()
    Qt.InputMethodHints(Union[Qt.InputMethodHints, Qt.InputMethodHint])
    Qt.InputMethodHints(Qt.InputMethodHints) """

    pass

  class InputMethodQueries(simplewrapper):
    """ Qt.InputMethodQueries()
    Qt.InputMethodQueries(Union[Qt.InputMethodQueries, Qt.InputMethodQuery])
    Qt.InputMethodQueries(Qt.InputMethodQueries) """

    pass

  class InputMethodQuery(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  IntersectClip = None
  IntersectsItemBoundingRect = None
  IntersectsItemShape = None
  InvertedLandscapeOrientation = None
  InvertedPortraitOrientation = None

  class ItemDataRole(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ItemFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ItemFlags(simplewrapper):
    """ Qt.ItemFlags()
    Qt.ItemFlags(Union[Qt.ItemFlags, Qt.ItemFlag])
    Qt.ItemFlags(Qt.ItemFlags) """

    pass

  ItemIsAutoTristate = None
  ItemIsDragEnabled = None
  ItemIsDropEnabled = None
  ItemIsEditable = None
  ItemIsEnabled = None
  ItemIsSelectable = None
  ItemIsTristate = None
  ItemIsUserCheckable = None
  ItemIsUserTristate = None
  ItemNeverHasChildren = None

  class ItemSelectionMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ItemSelectionOperation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  KeepAspectRatio = None
  KeepAspectRatioByExpanding = None

  class Key(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Key_0 = None
  Key_1 = None
  Key_2 = None
  Key_3 = None
  Key_4 = None
  Key_5 = None
  Key_6 = None
  Key_7 = None
  Key_8 = None
  Key_9 = None
  Key_A = None
  Key_AE = None
  Key_Aacute = None
  Key_Acircumflex = None
  Key_AddFavorite = None
  Key_Adiaeresis = None
  Key_Agrave = None
  Key_Alt = None
  Key_AltGr = None
  Key_Ampersand = None
  Key_Any = None
  Key_Apostrophe = None
  Key_ApplicationLeft = None
  Key_ApplicationRight = None
  Key_Aring = None
  Key_AsciiCircum = None
  Key_AsciiTilde = None
  Key_Asterisk = None
  Key_At = None
  Key_Atilde = None
  Key_AudioCycleTrack = None
  Key_AudioForward = None
  Key_AudioRandomPlay = None
  Key_AudioRepeat = None
  Key_AudioRewind = None
  Key_Away = None
  Key_B = None
  Key_Back = None
  Key_BackForward = None
  Key_Backslash = None
  Key_Backspace = None
  Key_Backtab = None
  Key_Bar = None
  Key_BassBoost = None
  Key_BassDown = None
  Key_BassUp = None
  Key_Battery = None
  Key_Blue = None
  Key_Bluetooth = None
  Key_Book = None
  Key_BraceLeft = None
  Key_BraceRight = None
  Key_BracketLeft = None
  Key_BracketRight = None
  Key_BrightnessAdjust = None
  Key_C = None
  Key_CD = None
  Key_Calculator = None
  Key_Calendar = None
  Key_Call = None
  Key_Camera = None
  Key_CameraFocus = None
  Key_Cancel = None
  Key_CapsLock = None
  Key_Ccedilla = None
  Key_ChannelDown = None
  Key_ChannelUp = None
  Key_Clear = None
  Key_ClearGrab = None
  Key_Close = None
  Key_Codeinput = None
  Key_Colon = None
  Key_Comma = None
  Key_Community = None
  Key_Context1 = None
  Key_Context2 = None
  Key_Context3 = None
  Key_Context4 = None
  Key_ContrastAdjust = None
  Key_Control = None
  Key_Copy = None
  Key_Cut = None
  Key_D = None
  Key_DOS = None
  Key_Dead_A = None
  Key_Dead_Abovecomma = None
  Key_Dead_Abovedot = None
  Key_Dead_Abovereversedcomma = None
  Key_Dead_Abovering = None
  Key_Dead_Aboveverticalline = None
  Key_Dead_Acute = None
  Key_Dead_Belowbreve = None
  Key_Dead_Belowcircumflex = None
  Key_Dead_Belowcomma = None
  Key_Dead_Belowdiaeresis = None
  Key_Dead_Belowdot = None
  Key_Dead_Belowmacron = None
  Key_Dead_Belowring = None
  Key_Dead_Belowtilde = None
  Key_Dead_Belowverticalline = None
  Key_Dead_Breve = None
  Key_Dead_Capital_Schwa = None
  Key_Dead_Caron = None
  Key_Dead_Cedilla = None
  Key_Dead_Circumflex = None
  Key_Dead_Currency = None
  Key_Dead_Diaeresis = None
  Key_Dead_Doubleacute = None
  Key_Dead_Doublegrave = None
  Key_Dead_E = None
  Key_Dead_Grave = None
  Key_Dead_Greek = None
  Key_Dead_Hook = None
  Key_Dead_Horn = None
  Key_Dead_I = None
  Key_Dead_Invertedbreve = None
  Key_Dead_Iota = None
  Key_Dead_Longsolidusoverlay = None
  Key_Dead_Lowline = None
  Key_Dead_Macron = None
  Key_Dead_O = None
  Key_Dead_Ogonek = None
  Key_Dead_Semivoiced_Sound = None
  Key_Dead_Small_Schwa = None
  Key_Dead_Stroke = None
  Key_Dead_Tilde = None
  Key_Dead_U = None
  Key_Dead_Voiced_Sound = None
  Key_Dead_a = None
  Key_Dead_e = None
  Key_Dead_i = None
  Key_Dead_o = None
  Key_Dead_u = None
  Key_Delete = None
  Key_Direction_L = None
  Key_Direction_R = None
  Key_Display = None
  Key_Documents = None
  Key_Dollar = None
  Key_Down = None
  Key_E = None
  Key_ETH = None
  Key_Eacute = None
  Key_Ecircumflex = None
  Key_Ediaeresis = None
  Key_Egrave = None
  Key_Eisu_Shift = None
  Key_Eisu_toggle = None
  Key_Eject = None
  Key_End = None
  Key_Enter = None
  Key_Equal = None
  Key_Escape = None
  Key_Excel = None
  Key_Exclam = None
  Key_Execute = None
  Key_Exit = None
  Key_Explorer = None
  Key_F = None
  Key_F1 = None
  Key_F10 = None
  Key_F11 = None
  Key_F12 = None
  Key_F13 = None
  Key_F14 = None
  Key_F15 = None
  Key_F16 = None
  Key_F17 = None
  Key_F18 = None
  Key_F19 = None
  Key_F2 = None
  Key_F20 = None
  Key_F21 = None
  Key_F22 = None
  Key_F23 = None
  Key_F24 = None
  Key_F25 = None
  Key_F26 = None
  Key_F27 = None
  Key_F28 = None
  Key_F29 = None
  Key_F3 = None
  Key_F30 = None
  Key_F31 = None
  Key_F32 = None
  Key_F33 = None
  Key_F34 = None
  Key_F35 = None
  Key_F4 = None
  Key_F5 = None
  Key_F6 = None
  Key_F7 = None
  Key_F8 = None
  Key_F9 = None
  Key_Favorites = None
  Key_Finance = None
  Key_Find = None
  Key_Flip = None
  Key_Forward = None
  Key_G = None
  Key_Game = None
  Key_Go = None
  Key_Greater = None
  Key_Green = None
  Key_Guide = None
  Key_H = None
  Key_Hangul = None
  Key_Hangul_Banja = None
  Key_Hangul_End = None
  Key_Hangul_Hanja = None
  Key_Hangul_Jamo = None
  Key_Hangul_Jeonja = None
  Key_Hangul_PostHanja = None
  Key_Hangul_PreHanja = None
  Key_Hangul_Romaja = None
  Key_Hangul_Special = None
  Key_Hangul_Start = None
  Key_Hangup = None
  Key_Hankaku = None
  Key_Help = None
  Key_Henkan = None
  Key_Hibernate = None
  Key_Hiragana = None
  Key_Hiragana_Katakana = None
  Key_History = None
  Key_Home = None
  Key_HomePage = None
  Key_HotLinks = None
  Key_Hyper_L = None
  Key_Hyper_R = None
  Key_I = None
  Key_Iacute = None
  Key_Icircumflex = None
  Key_Idiaeresis = None
  Key_Igrave = None
  Key_Info = None
  Key_Insert = None
  Key_J = None
  Key_K = None
  Key_Kana_Lock = None
  Key_Kana_Shift = None
  Key_Kanji = None
  Key_Katakana = None
  Key_KeyboardBrightnessDown = None
  Key_KeyboardBrightnessUp = None
  Key_KeyboardLightOnOff = None
  Key_L = None
  Key_LastNumberRedial = None
  Key_Launch0 = None
  Key_Launch1 = None
  Key_Launch2 = None
  Key_Launch3 = None
  Key_Launch4 = None
  Key_Launch5 = None
  Key_Launch6 = None
  Key_Launch7 = None
  Key_Launch8 = None
  Key_Launch9 = None
  Key_LaunchA = None
  Key_LaunchB = None
  Key_LaunchC = None
  Key_LaunchD = None
  Key_LaunchE = None
  Key_LaunchF = None
  Key_LaunchG = None
  Key_LaunchH = None
  Key_LaunchMail = None
  Key_LaunchMedia = None
  Key_Left = None
  Key_Less = None
  Key_LightBulb = None
  Key_LogOff = None
  Key_M = None
  Key_MailForward = None
  Key_Market = None
  Key_Massyo = None
  Key_MediaLast = None
  Key_MediaNext = None
  Key_MediaPause = None
  Key_MediaPlay = None
  Key_MediaPrevious = None
  Key_MediaRecord = None
  Key_MediaStop = None
  Key_MediaTogglePlayPause = None
  Key_Meeting = None
  Key_Memo = None
  Key_Menu = None
  Key_MenuKB = None
  Key_MenuPB = None
  Key_Messenger = None
  Key_Meta = None
  Key_MicMute = None
  Key_MicVolumeDown = None
  Key_MicVolumeUp = None
  Key_Minus = None
  Key_Mode_switch = None
  Key_MonBrightnessDown = None
  Key_MonBrightnessUp = None
  Key_Muhenkan = None
  Key_Multi_key = None
  Key_MultipleCandidate = None
  Key_Music = None
  Key_MySites = None
  Key_N = None
  Key_New = None
  Key_News = None
  Key_No = None
  Key_Ntilde = None
  Key_NumLock = None
  Key_NumberSign = None
  Key_O = None
  Key_Oacute = None
  Key_Ocircumflex = None
  Key_Odiaeresis = None
  Key_OfficeHome = None
  Key_Ograve = None
  Key_Ooblique = None
  Key_Open = None
  Key_OpenUrl = None
  Key_Option = None
  Key_Otilde = None
  Key_P = None
  Key_PageDown = None
  Key_PageUp = None
  Key_ParenLeft = None
  Key_ParenRight = None
  Key_Paste = None
  Key_Pause = None
  Key_Percent = None
  Key_Period = None
  Key_Phone = None
  Key_Pictures = None
  Key_Play = None
  Key_Plus = None
  Key_PowerDown = None
  Key_PowerOff = None
  Key_PreviousCandidate = None
  Key_Print = None
  Key_Printer = None
  Key_Q = None
  Key_Question = None
  Key_QuoteDbl = None
  Key_QuoteLeft = None
  Key_R = None
  Key_Red = None
  Key_Redo = None
  Key_Refresh = None
  Key_Reload = None
  Key_Reply = None
  Key_Return = None
  Key_Right = None
  Key_Romaji = None
  Key_RotateWindows = None
  Key_RotationKB = None
  Key_RotationPB = None
  Key_S = None
  Key_Save = None
  Key_ScreenSaver = None
  Key_ScrollLock = None
  Key_Search = None
  Key_Select = None
  Key_Semicolon = None
  Key_Send = None
  Key_Settings = None
  Key_Shift = None
  Key_Shop = None
  Key_SingleCandidate = None
  Key_Slash = None
  Key_Sleep = None
  Key_Space = None
  Key_Spell = None
  Key_SplitScreen = None
  Key_Standby = None
  Key_Stop = None
  Key_Subtitle = None
  Key_Super_L = None
  Key_Super_R = None
  Key_Support = None
  Key_Suspend = None
  Key_SysReq = None
  Key_T = None
  Key_THORN = None
  Key_Tab = None
  Key_TaskPane = None
  Key_Terminal = None
  Key_Time = None
  Key_ToDoList = None
  Key_ToggleCallHangup = None
  Key_Tools = None
  Key_TopMenu = None
  Key_TouchpadOff = None
  Key_TouchpadOn = None
  Key_TouchpadToggle = None
  Key_Touroku = None
  Key_Travel = None
  Key_TrebleDown = None
  Key_TrebleUp = None
  Key_U = None
  Key_UWB = None
  Key_Uacute = None
  Key_Ucircumflex = None
  Key_Udiaeresis = None
  Key_Ugrave = None
  Key_Underscore = None
  Key_Undo = None
  Key_Up = None
  Key_V = None
  Key_Video = None
  Key_View = None
  Key_VoiceDial = None
  Key_VolumeDown = None
  Key_VolumeMute = None
  Key_VolumeUp = None
  Key_W = None
  Key_WLAN = None
  Key_WWW = None
  Key_WakeUp = None
  Key_WebCam = None
  Key_Word = None
  Key_X = None
  Key_Xfer = None
  Key_Y = None
  Key_Yacute = None
  Key_Yellow = None
  Key_Yes = None
  Key_Z = None
  Key_Zenkaku = None
  Key_Zenkaku_Hankaku = None
  Key_Zoom = None
  Key_ZoomIn = None
  Key_ZoomOut = None
  Key_acute = None
  Key_brokenbar = None
  Key_cedilla = None
  Key_cent = None
  Key_copyright = None
  Key_currency = None
  Key_degree = None
  Key_diaeresis = None
  Key_division = None
  Key_exclamdown = None
  Key_guillemotleft = None
  Key_guillemotright = None
  Key_hyphen = None
  Key_iTouch = None
  Key_macron = None
  Key_masculine = None
  Key_mu = None
  Key_multiply = None
  Key_nobreakspace = None
  Key_notsign = None
  Key_onehalf = None
  Key_onequarter = None
  Key_onesuperior = None
  Key_ordfeminine = None
  Key_paragraph = None
  Key_periodcentered = None
  Key_plusminus = None
  Key_questiondown = None
  Key_registered = None
  Key_section = None
  Key_ssharp = None
  Key_sterling = None
  Key_threequarters = None
  Key_threesuperior = None
  Key_twosuperior = None
  Key_unknown = None
  Key_ydiaeresis = None
  Key_yen = None

  class KeyboardModifier(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  KeyboardModifierMask = None

  class KeyboardModifiers(simplewrapper):
    """ Qt.KeyboardModifiers()
    Qt.KeyboardModifiers(Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])
    Qt.KeyboardModifiers(Qt.KeyboardModifiers) """

    pass

  KeypadModifier = None
  LandscapeOrientation = None
  LastCursor = None

  class LayoutDirection(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LayoutDirectionAuto = None
  LeftArrow = None
  LeftButton = None
  LeftDockWidgetArea = None
  LeftEdge = None
  LeftSection = None
  LeftToRight = None
  LeftToolBarArea = None
  LinearGradientPattern = None
  LinkAction = None
  LinksAccessibleByKeyboard = None
  LinksAccessibleByMouse = None
  LocalDate = None
  LocalTime = None
  LocaleDate = None
  LogicalCoordinates = None
  LogicalMoveStyle = None
  LowEventPriority = None
  META = None
  MODIFIER_MASK = None
  MPenCapStyle = None
  MPenJoinStyle = None
  MPenStyle = None
  MSWindowsFixedSizeDialogHint = None
  MSWindowsOwnDC = None
  MacWindowToolBarButtonHint = None
  MaskInColor = None

  class MaskMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MaskOutColor = None
  MatchCaseSensitive = None
  MatchContains = None
  MatchEndsWith = None
  MatchExactly = None
  MatchFixedString = None

  class MatchFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class MatchFlags(simplewrapper):
    """ Qt.MatchFlags()
    Qt.MatchFlags(Union[Qt.MatchFlags, Qt.MatchFlag])
    Qt.MatchFlags(Qt.MatchFlags) """

    pass

  MatchRecursive = None
  MatchRegExp = None
  MatchStartsWith = None
  MatchWildcard = None
  MatchWrap = None
  MaximizeUsingFullscreenGeometryHint = None
  MaximumSize = None
  MenuBarFocusReason = None
  MetaModifier = None
  MidButton = None
  MiddleButton = None
  MinimumDescent = None
  MinimumSize = None
  MiterJoin = None

  class Modifier(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Monday = None
  MonoOnly = None

  class MouseButton(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class MouseButtons(simplewrapper):
    """ Qt.MouseButtons()
    Qt.MouseButtons(Union[Qt.MouseButtons, Qt.MouseButton])
    Qt.MouseButtons(Qt.MouseButtons) """

    pass

  MouseEventCreatedDoubleClick = None

  class MouseEventFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class MouseEventFlags(simplewrapper):
    """ Qt.MouseEventFlags()
    Qt.MouseEventFlags(Union[Qt.MouseEventFlags, Qt.MouseEventFlag])
    Qt.MouseEventFlags(Qt.MouseEventFlags) """

    pass

  MouseEventNotSynthesized = None

  class MouseEventSource(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MouseEventSynthesizedByApplication = None
  MouseEventSynthesizedByQt = None
  MouseEventSynthesizedBySystem = None
  MouseFocusReason = None
  MoveAction = None

  class NativeGestureType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class NavigationMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NavigationModeCursorAuto = None
  NavigationModeCursorForceVisible = None
  NavigationModeKeypadDirectional = None
  NavigationModeKeypadTabOrder = None
  NavigationModeNone = None
  NoArrow = None
  NoBrush = None
  NoButton = None
  NoClip = None
  NoContextMenu = None
  NoDockWidgetArea = None
  NoDropShadowWindowHint = None
  NoFocus = None
  NoFocusReason = None
  NoFormatConversion = None
  NoItemFlags = None
  NoModifier = None
  NoOpaqueDetection = None
  NoPen = None
  NoScrollPhase = None
  NoSection = None
  NoTabFocus = None
  NoTextInteraction = None
  NoToolBarArea = None
  NonModal = None
  NormalEventPriority = None
  OddEvenFill = None
  OffsetFromUTC = None
  OpaqueMode = None
  OpenHandCursor = None
  OrderedAlphaDither = None
  OrderedDither = None

  class Orientation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Orientations(simplewrapper):
    """ Qt.Orientations()
    Qt.Orientations(Union[Qt.Orientations, Qt.Orientation])
    Qt.Orientations(Qt.Orientations) """

    pass

  OtherFocusReason = None
  PanGesture = None
  PanNativeGesture = None
  PartiallyChecked = None

  class PenCapStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PenJoinStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PenStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PinchGesture = None
  PlainText = None
  PointingHandCursor = None
  Popup = None
  PopupFocusReason = None
  PortraitOrientation = None
  PreciseTimer = None
  PreferDither = None
  PreferredSize = None
  PreventContextMenu = None
  PrimaryOrientation = None
  QueuedConnection = None
  RFC2822Date = None
  RadialGradientPattern = None
  ReceivePartialGestures = None
  RelativeSize = None
  RepeatTile = None
  ReplaceClip = None
  ReplaceSelection = None
  RichText = None
  RightArrow = None
  RightButton = None
  RightDockWidgetArea = None
  RightEdge = None
  RightSection = None
  RightToLeft = None
  RightToolBarArea = None
  RotateNativeGesture = None
  RoundCap = None
  RoundJoin = None
  RoundTile = None
  SHIFT = None
  Saturday = None

  class ScreenOrientation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ScreenOrientations(simplewrapper):
    """ Qt.ScreenOrientations()
    Qt.ScreenOrientations(Union[Qt.ScreenOrientations, Qt.ScreenOrientation])
    Qt.ScreenOrientations(Qt.ScreenOrientations) """

    pass

  ScrollBarAlwaysOff = None
  ScrollBarAlwaysOn = None
  ScrollBarAsNeeded = None

  class ScrollBarPolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollBegin = None
  ScrollEnd = None
  ScrollMomentum = None

  class ScrollPhase(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollUpdate = None
  Sheet = None
  ShiftModifier = None

  class ShortcutContext(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ShortcutFocusReason = None
  SizeAllCursor = None
  SizeBDiagCursor = None
  SizeFDiagCursor = None

  class SizeHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SizeHintRole = None
  SizeHorCursor = None

  class SizeMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SizeVerCursor = None
  SmartZoomNativeGesture = None
  SmoothTransformation = None
  SolidLine = None
  SolidPattern = None

  class SortOrder(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SplashScreen = None
  SplitHCursor = None
  SplitVCursor = None
  SquareCap = None
  StatusTipRole = None
  StretchTile = None
  StrongFocus = None
  SubWindow = None
  Sunday = None
  SvgMiterJoin = None
  SwipeGesture = None
  SwipeNativeGesture = None
  SystemLocaleDate = None
  SystemLocaleLongDate = None
  SystemLocaleShortDate = None
  TabFocus = None
  TabFocusAllControls = None

  class TabFocusBehavior(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TabFocusListControls = None
  TabFocusReason = None
  TabFocusTextControls = None
  TapAndHoldGesture = None
  TapGesture = None
  TargetMoveAction = None
  TaskButton = None
  TextAlignmentRole = None
  TextBrowserInteraction = None
  TextColorRole = None
  TextDate = None
  TextDontClip = None
  TextDontPrint = None
  TextEditable = None
  TextEditorInteraction = None

  class TextElideMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TextExpandTabs = None

  class TextFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TextFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TextHideMnemonic = None
  TextIncludeTrailingSpaces = None

  class TextInteractionFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TextInteractionFlags(simplewrapper):
    """ Qt.TextInteractionFlags()
    Qt.TextInteractionFlags(Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])
    Qt.TextInteractionFlags(Qt.TextInteractionFlags) """

    pass

  TextJustificationForced = None
  TextSelectableByKeyboard = None
  TextSelectableByMouse = None
  TextShowMnemonic = None
  TextSingleLine = None
  TextWordWrap = None
  TextWrapAnywhere = None
  TexturePattern = None
  ThresholdAlphaDither = None
  ThresholdDither = None
  Thursday = None

  class TileRule(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TimeSpec(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TimeZone = None

  class TimerType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TitleBarArea = None
  Tool = None

  class ToolBarArea(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ToolBarArea_Mask = None

  class ToolBarAreas(simplewrapper):
    """ Qt.ToolBarAreas()
    Qt.ToolBarAreas(Union[Qt.ToolBarAreas, Qt.ToolBarArea])
    Qt.ToolBarAreas(Qt.ToolBarAreas) """

    pass

  ToolButtonFollowStyle = None
  ToolButtonIconOnly = None

  class ToolButtonStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ToolButtonTextBesideIcon = None
  ToolButtonTextOnly = None
  ToolButtonTextUnderIcon = None
  ToolTip = None
  ToolTipRole = None
  TopDockWidgetArea = None
  TopEdge = None
  TopLeftCorner = None
  TopLeftSection = None
  TopRightCorner = None
  TopRightSection = None
  TopSection = None
  TopToolBarArea = None
  TouchPointMoved = None
  TouchPointPressed = None
  TouchPointReleased = None

  class TouchPointState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TouchPointStates(simplewrapper):
    """ Qt.TouchPointStates()
    Qt.TouchPointStates(Union[Qt.TouchPointStates, Qt.TouchPointState])
    Qt.TouchPointStates(Qt.TouchPointStates) """

    pass

  TouchPointStationary = None

  class TransformationMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TransparentMode = None
  Tuesday = None

  class UIEffect(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UI_AnimateCombo = None
  UI_AnimateMenu = None
  UI_AnimateToolBox = None
  UI_AnimateTooltip = None
  UI_FadeMenu = None
  UI_FadeTooltip = None
  UI_General = None
  UNICODE_ACCEL = None
  UTC = None
  Unchecked = None
  UniqueConnection = None
  UpArrow = None
  UpArrowCursor = None
  UserRole = None
  VerPattern = None
  Vertical = None
  VeryCoarseTimer = None
  VisualMoveStyle = None
  WA_AcceptDrops = None
  WA_AcceptTouchEvents = None
  WA_AlwaysShowToolTips = None
  WA_AlwaysStackOnTop = None
  WA_AttributeCount = None
  WA_ContentsMarginsRespectsSafeArea = None
  WA_CustomWhatsThis = None
  WA_DeleteOnClose = None
  WA_Disabled = None
  WA_DontCreateNativeAncestors = None
  WA_DontShowOnScreen = None
  WA_ForceDisabled = None
  WA_ForceUpdatesDisabled = None
  WA_GrabbedShortcut = None
  WA_GroupLeader = None
  WA_Hover = None
  WA_InputMethodEnabled = None
  WA_InputMethodTransparent = None
  WA_InvalidSize = None
  WA_KeyCompression = None
  WA_KeyboardFocusChange = None
  WA_LaidOut = None
  WA_LayoutOnEntireRect = None
  WA_LayoutUsesWidgetRect = None
  WA_MSWindowsUseDirect3D = None
  WA_MacAlwaysShowToolWindow = None
  WA_MacBrushedMetal = None
  WA_MacFrameworkScaled = None
  WA_MacMetalStyle = None
  WA_MacMiniSize = None
  WA_MacNoClickThrough = None
  WA_MacNoShadow = None
  WA_MacNormalSize = None
  WA_MacOpaqueSizeGrip = None
  WA_MacShowFocusRect = None
  WA_MacSmallSize = None
  WA_MacVariableSize = None
  WA_Mapped = None
  WA_MouseNoMask = None
  WA_MouseTracking = None
  WA_Moved = None
  WA_NativeWindow = None
  WA_NoChildEventsForParent = None
  WA_NoChildEventsFromChildren = None
  WA_NoMousePropagation = None
  WA_NoMouseReplay = None
  WA_NoSystemBackground = None
  WA_NoX11EventCompression = None
  WA_OpaquePaintEvent = None
  WA_OutsideWSRange = None
  WA_PaintOnScreen = None
  WA_PaintUnclipped = None
  WA_PendingMoveEvent = None
  WA_PendingResizeEvent = None
  WA_PendingUpdate = None
  WA_QuitOnClose = None
  WA_Resized = None
  WA_RightToLeft = None
  WA_SetCursor = None
  WA_SetFont = None
  WA_SetLayoutDirection = None
  WA_SetLocale = None
  WA_SetPalette = None
  WA_SetStyle = None
  WA_SetWindowIcon = None
  WA_ShowWithoutActivating = None
  WA_StaticContents = None
  WA_StyleSheet = None
  WA_StyleSheetTarget = None
  WA_StyledBackground = None
  WA_TabletTracking = None
  WA_TintedBackground = None
  WA_TouchPadAcceptSingleTouchEvents = None
  WA_TranslucentBackground = None
  WA_TransparentForMouseEvents = None
  WA_UnderMouse = None
  WA_UpdatesDisabled = None
  WA_WState_CompressKeys = None
  WA_WState_ConfigPending = None
  WA_WState_Created = None
  WA_WState_ExplicitShowHide = None
  WA_WState_Hidden = None
  WA_WState_InPaintEvent = None
  WA_WState_OwnSizePolicy = None
  WA_WState_Polished = None
  WA_WState_Reparented = None
  WA_WState_Visible = None
  WA_WindowModified = None
  WA_WindowPropagation = None
  WA_X11DoNotAcceptFocus = None
  WA_X11NetWmWindowTypeCombo = None
  WA_X11NetWmWindowTypeDND = None
  WA_X11NetWmWindowTypeDesktop = None
  WA_X11NetWmWindowTypeDialog = None
  WA_X11NetWmWindowTypeDock = None
  WA_X11NetWmWindowTypeDropDownMenu = None
  WA_X11NetWmWindowTypeMenu = None
  WA_X11NetWmWindowTypeNotification = None
  WA_X11NetWmWindowTypePopupMenu = None
  WA_X11NetWmWindowTypeSplash = None
  WA_X11NetWmWindowTypeToolBar = None
  WA_X11NetWmWindowTypeToolTip = None
  WA_X11NetWmWindowTypeUtility = None
  WA_X11OpenGLOverlay = None
  WaitCursor = None
  Wednesday = None
  WhatsThisCursor = None
  WhatsThisRole = None
  WheelFocus = None

  class WhiteSpaceMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WhiteSpaceModeUndefined = None
  WhiteSpaceNoWrap = None
  WhiteSpaceNormal = None
  WhiteSpacePre = None
  Widget = None

  class WidgetAttribute(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WidgetShortcut = None
  WidgetWithChildrenShortcut = None
  WindingFill = None
  Window = None
  WindowActive = None
  WindowCloseButtonHint = None
  WindowContextHelpButtonHint = None
  WindowDoesNotAcceptFocus = None

  class WindowFlags(simplewrapper):
    """ Qt.WindowFlags()
    Qt.WindowFlags(Union[Qt.WindowFlags, Qt.WindowType])
    Qt.WindowFlags(Qt.WindowFlags) """

    pass

  class WindowFrameSection(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WindowFullScreen = None
  WindowFullscreenButtonHint = None
  WindowMaximizeButtonHint = None
  WindowMaximized = None
  WindowMinMaxButtonsHint = None
  WindowMinimizeButtonHint = None
  WindowMinimized = None
  WindowModal = None

  class WindowModality(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WindowNoState = None
  WindowOverridesSystemGestures = None
  WindowShadeButtonHint = None
  WindowShortcut = None

  class WindowState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class WindowStates(simplewrapper):
    """ Qt.WindowStates()
    Qt.WindowStates(Union[Qt.WindowStates, Qt.WindowState])
    Qt.WindowStates(Qt.WindowStates) """

    pass

  WindowStaysOnBottomHint = None
  WindowStaysOnTopHint = None
  WindowSystemMenuHint = None
  WindowTitleHint = None
  WindowTransparentForInput = None

  class WindowType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WindowType_Mask = None
  X11BypassWindowManagerHint = None
  XAxis = None
  XButton1 = None
  XButton2 = None
  YAxis = None
  ZAxis = None
  ZoomNativeGesture = None
  black = None
  blue = None
  color0 = None
  color1 = None
  cyan = None
  darkBlue = None
  darkCyan = None
  darkGray = None
  darkGreen = None
  darkMagenta = None
  darkRed = None
  darkYellow = None
  gray = None
  green = None
  lightGray = None
  magenta = None
  red = None
  transparent = None
  white = None
  yellow = None

QtCriticalMsg = None
QtDebugMsg = None
QtFatalMsg = None
QtInfoMsg = None

class QtMsgType(int):

  bit_length = None
  conjugate = None
  denominator = None
  from_bytes = None
  imag = None
  numerator = None
  real = None
  to_bytes = None

QtSystemMsg = None
QtWarningMsg = None
__doc__ = None
__file__ = 'C:\\Users\\Rupka\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\PyQt5\\QtCore.pyd'
__license__ = None
__loader__ = None
__name__ = 'PyQt5.QtCore'
__package__ = 'PyQt5'
__spec__ = None

def bin_(QTextStream):
  """ bin_(QTextStream) -> QTextStream """
  return None

def bom(QTextStream):
  """ bom(QTextStream) -> QTextStream """
  return None

def center(QTextStream):
  """ center(QTextStream) -> QTextStream """
  return None

def dec(QTextStream):
  """ dec(QTextStream) -> QTextStream """
  return None

def endl(QTextStream):
  """ endl(QTextStream) -> QTextStream """
  return None

def fixed(QTextStream):
  """ fixed(QTextStream) -> QTextStream """
  return None

def flush(QTextStream):
  """ flush(QTextStream) -> QTextStream """
  return None

def forcepoint(QTextStream):
  """ forcepoint(QTextStream) -> QTextStream """
  return None

def forcesign(QTextStream):
  """ forcesign(QTextStream) -> QTextStream """
  return None

def hex_(QTextStream):
  """ hex_(QTextStream) -> QTextStream """
  return None

def left(QTextStream):
  """ left(QTextStream) -> QTextStream """
  return None

def lowercasebase(QTextStream):
  """ lowercasebase(QTextStream) -> QTextStream """
  return None

def lowercasedigits(QTextStream):
  """ lowercasedigits(QTextStream) -> QTextStream """
  return None

def noforcepoint(QTextStream):
  """ noforcepoint(QTextStream) -> QTextStream """
  return None

def noforcesign(QTextStream):
  """ noforcesign(QTextStream) -> QTextStream """
  return None

def noshowbase(QTextStream):
  """ noshowbase(QTextStream) -> QTextStream """
  return None

def oct_(QTextStream):
  """ oct_(QTextStream) -> QTextStream """
  return None

def pyqt5_enable_new_onexit_scheme(bool):
  """ pyqt5_enable_new_onexit_scheme(bool) -> bool """
  return None

class pyqtBoundSignal(object):
def pyqtPickleProtocol():
  """ pyqtPickleProtocol() -> Optional[int] """
  return 1

class pyqtProperty(object):
def pyqtRemoveInputHook():
  """ pyqtRemoveInputHook() """
  pass

def pyqtRestoreInputHook():
  """ pyqtRestoreInputHook() """
  pass

def pyqtSetPickleProtocol(Optionalint=None):
  """ pyqtSetPickleProtocol(Optional[int]) """
  pass

class pyqtSignal(object):
def pyqtSlot(arg0, arg1=None, arg2=None):
  """ @pyqtSlot(*types, name: Optional[str], result: Optional[str])
  
  This is a decorator applied to Python methods of a QObject that marks them
  as Qt slots.
  The non-keyword arguments are the types of the slot arguments and each may
  be a Python type object or a string specifying a C++ type.
  name is the name of the slot and defaults to the name of the method.
  result is type of the value returned by the slot. """
  pass

def qAbs(float):
  """ qAbs(float) -> float """
  return 1.0

def qAddPostRoutine(Callable...=None, None=None):
  """ qAddPostRoutine(Callable[..., None]) """
  pass

def qAddPreRoutine(Callable=None, None=None):
  """ qAddPreRoutine(Callable[[], None]) """
  pass

def qChecksum(bytes):
  """ qChecksum(bytes) -> int
  qChecksum(bytes, Qt.ChecksumType) -> int """
  return 1

def qCompress(UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
  """ qCompress(Union[QByteArray, bytes, bytearray], compressionLevel: int = -1) -> QByteArray """
  return None

def qCritical(str):
  """ qCritical(str) """
  pass

def qDebug(str):
  """ qDebug(str) """
  pass

def qEnvironmentVariable(str):
  """ qEnvironmentVariable(str) -> str
  qEnvironmentVariable(str, str) -> str """
  return ""

def qErrnoWarning(int, str):
  """ qErrnoWarning(int, str)
  qErrnoWarning(str) """
  pass

def qFatal(str):
  """ qFatal(str) """
  pass

def qFloatDistance(float, float):
  """ qFloatDistance(float, float) -> int """
  return 1

def qFormatLogMessage(QtMsgType, QMessageLogContext, str):
  """ qFormatLogMessage(QtMsgType, QMessageLogContext, str) -> str """
  return ""

def qFuzzyCompare(float, float):
  """ qFuzzyCompare(float, float) -> bool """
  return None

def qInf():
  """ qInf() -> float """
  return 1.0

def qInfo(str):
  """ qInfo(str) """
  pass

def qInstallMessageHandler(OptionalCallableQtMsgType=None, QMessageLogContext=None, str=None, None=None):
  """ qInstallMessageHandler(Optional[Callable[[QtMsgType, QMessageLogContext, str], None]]) -> Optional[Callable[[QtMsgType, QMessageLogContext, str], None]] """
  return ""

def qIsFinite(float):
  """ qIsFinite(float) -> bool """
  return None

def qIsInf(float):
  """ qIsInf(float) -> bool """
  return None

def qIsNaN(float):
  """ qIsNaN(float) -> bool """
  return None

def qIsNull(float):
  """ qIsNull(float) -> bool """
  return None

def qQNaN():
  """ qQNaN() -> float """
  return 1.0

def qRegisterResourceData(int, bytes, bytes, bytes):
  """ qRegisterResourceData(int, bytes, bytes, bytes) -> bool """
  return None

def qRemovePostRoutine(Callable...=None, None=None):
  """ qRemovePostRoutine(Callable[..., None]) """
  pass

def qRound(float):
  """ qRound(float) -> int """
  return 1

def qRound64(float):
  """ qRound64(float) -> int """
  return 1

def qSNaN():
  """ qSNaN() -> float """
  return 1.0

def qSetFieldWidth(int):
  """ qSetFieldWidth(int) -> QTextStreamManipulator """
  return None

def qSetMessagePattern(str):
  """ qSetMessagePattern(str) """
  pass

def qSetPadChar(str):
  """ qSetPadChar(str) -> QTextStreamManipulator """
  return None

def qSetRealNumberPrecision(int):
  """ qSetRealNumberPrecision(int) -> QTextStreamManipulator """
  return None

def qSharedBuild():
  """ qSharedBuild() -> bool """
  return None

def qUncompress(UnionQByteArray=None, bytes=None, bytearray=None):
  """ qUncompress(Union[QByteArray, bytes, bytearray]) -> QByteArray """
  return None

def qUnregisterResourceData(int, bytes, bytes, bytes):
  """ qUnregisterResourceData(int, bytes, bytes, bytes) -> bool """
  return None

def qVersion():
  """ qVersion() -> str """
  return ""

def qWarning(str):
  """ qWarning(str) """
  pass

def qrand():
  """ qrand() -> int """
  return 1

def qsrand(int):
  """ qsrand(int) """
  pass

def reset(QTextStream):
  """ reset(QTextStream) -> QTextStream """
  return None

def right(QTextStream):
  """ right(QTextStream) -> QTextStream """
  return None

def scientific(QTextStream):
  """ scientific(QTextStream) -> QTextStream """
  return None

def showbase(QTextStream):
  """ showbase(QTextStream) -> QTextStream """
  return None

def uppercasebase(QTextStream):
  """ uppercasebase(QTextStream) -> QTextStream """
  return None

def uppercasedigits(QTextStream):
  """ uppercasedigits(QTextStream) -> QTextStream """
  return None

def ws(QTextStream):
  """ ws(QTextStream) -> QTextStream """
  return None

