# coding: utf-8
# AUTO-GENERATED FILE -- DO NOT EDIT


class QCompressedHelpInfo(simplewrapper):
  """ QCompressedHelpInfo()
  QCompressedHelpInfo(QCompressedHelpInfo) """

  def component(self):
    """ component(self) -> str """
    return ""

  def fromCompressedHelpFile(str):
    """ fromCompressedHelpFile(str) -> QCompressedHelpInfo """
    return None

  def namespaceName(self):
    """ namespaceName(self) -> str """
    return ""

  def swap(self, QCompressedHelpInfo):
    """ swap(self, QCompressedHelpInfo) """
    pass

  def version(self):
    """ version(self) -> QVersionNumber """
    return None

class QHelpContentItem(simplewrapper):

  def child(self, int):
    """ child(self, int) -> QHelpContentItem """
    return None

  def childCount(self):
    """ childCount(self) -> int """
    return 1

  def childPosition(self, QHelpContentItem):
    """ childPosition(self, QHelpContentItem) -> int """
    return 1

  def parent(self):
    """ parent(self) -> QHelpContentItem """
    return None

  def row(self):
    """ row(self) -> int """
    return 1

  def title(self):
    """ title(self) -> str """
    return ""

  def url(self):
    """ url(self) -> QUrl """
    return None

class QHelpContentModel(QAbstractItemModel):

  class CheckIndexOption(IntEnum):
    """ An enumeration. """

    DoNotUseParent = None
    IndexIsValid = None
    NoOption = None
    ParentIsInvalid = None

  class CheckIndexOptions(simplewrapper):
    """ QAbstractItemModel.CheckIndexOptions()
    QAbstractItemModel.CheckIndexOptions(Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption])
    QAbstractItemModel.CheckIndexOptions(QAbstractItemModel.CheckIndexOptions) """

    pass

  HorizontalSortHint = None

  class LayoutChangeHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns(self, QModelIndex, int, int):
    """ beginInsertColumns(self, QModelIndex, int, int) """
    pass

  def beginInsertRows(self, QModelIndex, int, int):
    """ beginInsertRows(self, QModelIndex, int, int) """
    pass

  def beginMoveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ beginMoveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def beginMoveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ beginMoveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def beginRemoveColumns(self, QModelIndex, int, int):
    """ beginRemoveColumns(self, QModelIndex, int, int) """
    pass

  def beginRemoveRows(self, QModelIndex, int, int):
    """ beginRemoveRows(self, QModelIndex, int, int) """
    pass

  def beginResetModel(self):
    """ beginResetModel(self) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex(self, QModelIndex, QModelIndex):
    """ changePersistentIndex(self, QModelIndex, QModelIndex) """
    pass

  def changePersistentIndexList(self, IterableQModelIndex=None, IterableQModelIndex=None):
    """ changePersistentIndexList(self, Iterable[QModelIndex], Iterable[QModelIndex]) """
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def contentItemAt(self, QModelIndex):
    """ contentItemAt(self, QModelIndex) -> QHelpContentItem """
    return None

  def contentsCreated(self):
    """ contentsCreated(self) [signal] """
    pass

  def contentsCreationStarted(self):
    """ contentsCreationStarted(self) [signal] """
    pass

  def createContents(self, str):
    """ createContents(self, str) """
    pass

  def createIndex(self, int, int, arg0=None):
    """ createIndex(self, int, int, object: object = 0) -> QModelIndex """
    return None

  def customEvent():
    pass

  def data(self, QModelIndex, int):
    """ data(self, QModelIndex, int) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData(self, int, int, QModelIndex, QDataStream):
    """ decodeData(self, int, int, QModelIndex, QDataStream) -> bool """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData(self, IterableQModelIndex=None, QDataStream=None):
    """ encodeData(self, Iterable[QModelIndex], QDataStream) """
    pass

  def endInsertColumns(self):
    """ endInsertColumns(self) """
    pass

  def endInsertRows(self):
    """ endInsertRows(self) """
    pass

  def endMoveColumns(self):
    """ endMoveColumns(self) """
    pass

  def endMoveRows(self):
    """ endMoveRows(self) """
    pass

  def endRemoveColumns(self):
    """ endRemoveColumns(self) """
    pass

  def endRemoveRows(self):
    """ endRemoveRows(self) """
    pass

  def endResetModel(self):
    """ endResetModel(self) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCreatingContents(self):
    """ isCreatingContents(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex """
    return None

  def persistentIndexList(self):
    """ persistentIndexList(self) -> List[QModelIndex] """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData(self):
    """ resetInternalData(self) """
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QHelpContentWidget(QTreeView):

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None

  class CursorAction(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DoubleClicked = None
  DragDrop = None

  class DragDropMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None

  class DropIndicatorPosition(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DropOnly = None
  EditKeyPressed = None

  class EditTrigger(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class EditTriggers(simplewrapper):
    """ QAbstractItemView.EditTriggers()
    QAbstractItemView.EditTriggers(Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger])
    QAbstractItemView.EditTriggers(QAbstractItemView.EditTriggers) """

    pass

  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  HLine = None
  IgnoreMask = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None

  class PaintDeviceMetric(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None

  class RenderFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RenderFlags(simplewrapper):
    """ QWidget.RenderFlags()
    QWidget.RenderFlags(Union[QWidget.RenderFlags, QWidget.RenderFlag])
    QWidget.RenderFlags(QWidget.RenderFlags) """

    pass

  class ScrollHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ScrollMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None

  class SelectionBehavior(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SelectionMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Shadow(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Shadow_Mask = None

  class Shape(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Shape_Mask = None
  SingleSelection = None

  class SizeAdjustPolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class State(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleMask(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def allColumnsShowFocus(self):
    """ allColumnsShowFocus(self) -> bool """
    return None

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return None

  def autoExpandDelay(self):
    """ autoExpandDelay(self) -> int """
    return 1

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent():
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def collapse(self, QModelIndex):
    """ collapse(self, QModelIndex) """
    pass

  def collapseAll(self):
    """ collapseAll(self) """
    pass

  def collapsed(self, QModelIndex):
    """ collapsed(self, QModelIndex) [signal] """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def columnAt(self, int):
    """ columnAt(self, int) -> int """
    return 1

  def columnCountChanged(self, int, int):
    """ columnCountChanged(self, int, int) """
    pass

  def columnMoved(self):
    """ columnMoved(self) """
    pass

  def columnResized(self, int, int, int):
    """ columnResized(self, int, int, int) """
    pass

  def columnViewportPosition(self, int):
    """ columnViewportPosition(self, int) -> int """
    return 1

  def columnWidth(self, int):
    """ columnWidth(self, int) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return None

  def create():
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def currentChanged(self, QModelIndex, QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return None

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) """
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def doubleClicked(self, QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return ""

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return None

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return None

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent(self, QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawBranches(self, QPainter, QRect, QModelIndex):
    """ drawBranches(self, QPainter, QRect, QModelIndex) """
    pass

  def drawFrame():
    pass

  def drawRow(self, QPainter, QStyleOptionViewItem, QModelIndex):
    """ drawRow(self, QPainter, QStyleOptionViewItem, QModelIndex) """
    pass

  def drawTree(self, QPainter, QRegion):
    """ drawTree(self, QPainter, QRegion) """
    pass

  def dropEvent():
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return ""

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event():
    pass

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def expand(self, QModelIndex):
    """ expand(self, QModelIndex) """
    pass

  def expandAll(self):
    """ expandAll(self) """
    pass

  def expandRecursively():
    """ expandRecursively(self, QModelIndex, depth: int = -1) """
    pass

  def expandToDepth(self, int):
    """ expandToDepth(self, int) """
    pass

  def expanded(self, QModelIndex):
    """ expanded(self, QModelIndex) [signal] """
    pass

  def expandsOnDoubleClick(self):
    """ expandsOnDoubleClick(self) -> bool """
    return None

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return None

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return None

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def header(self):
    """ header(self) -> QHeaderView """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideColumn(self, int):
    """ hideColumn(self, int) """
    pass

  def hideEvent():
    pass

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return None

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return ""

  def horizontalScrollbarAction(self, int):
    """ horizontalScrollbarAction(self, int) """
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return None

  def iconSizeChanged(self, QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indentation(self):
    """ indentation(self) -> int """
    return 1

  def indexAbove(self, QModelIndex):
    """ indexAbove(self, QModelIndex) -> QModelIndex """
    return None

  def indexAt(self, QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return None

  def indexBelow(self, QModelIndex):
    """ indexBelow(self, QModelIndex) -> QModelIndex """
    return None

  def indexOf(self, QUrl):
    """ indexOf(self, QUrl) -> QModelIndex """
    return None

  def indexRowSizeHint(self, QModelIndex):
    """ indexRowSizeHint(self, QModelIndex) -> int """
    return 1

  def indexWidget(self, QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isAnimated(self):
    """ isAnimated(self) -> bool """
    return None

  def isColumnHidden(self, int):
    """ isColumnHidden(self, int) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isExpanded(self, QModelIndex):
    """ isExpanded(self, QModelIndex) -> bool """
    return None

  def isFirstColumnSpanned(self, int, QModelIndex):
    """ isFirstColumnSpanned(self, int, QModelIndex) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHeaderHidden(self):
    """ isHeaderHidden(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isIndexHidden(self, QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isPersistentEditorOpen(self, QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isRowHidden(self, int, QModelIndex):
    """ isRowHidden(self, int, QModelIndex) -> bool """
    return None

  def isSignalConnected():
    pass

  def isSortingEnabled(self):
    """ isSortingEnabled(self) -> bool """
    return None

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return ""

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return ""

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return ""

  def itemsExpandable(self):
    """ itemsExpandable(self) -> bool """
    return None

  def keyPressEvent(self, QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def linkActivated(self, QUrl):
    """ linkActivated(self, QUrl) [signal] """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return ""

  def mouseDoubleClickEvent(self, QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent(self, QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return None

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent(self, QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def pressed(self, QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def reexpand(self):
    """ reexpand(self) """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetIndentation(self):
    """ resetIndentation(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeColumnToContents(self, int):
    """ resizeColumnToContents(self, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return None

  def rootIsDecorated(self):
    """ rootIsDecorated(self) -> bool """
    return None

  def rowHeight(self, QModelIndex):
    """ rowHeight(self, QModelIndex) -> int """
    return 1

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo():
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes(self):
    """ selectedIndexes(self) -> List[QModelIndex] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return ""

  def selectionChanged(self, QItemSelection, QItemSelection):
    """ selectionChanged(self, QItemSelection, QItemSelection) """
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return ""

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAllColumnsShowFocus(self, bool):
    """ setAllColumnsShowFocus(self, bool) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAnimated(self, bool):
    """ setAnimated(self, bool) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoExpandDelay(self, int):
    """ setAutoExpandDelay(self, int) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setColumnHidden(self, int, bool):
    """ setColumnHidden(self, int, bool) """
    pass

  def setColumnWidth(self, int, int):
    """ setColumnWidth(self, int, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExpanded(self, QModelIndex, bool):
    """ setExpanded(self, QModelIndex, bool) """
    pass

  def setExpandsOnDoubleClick(self, bool):
    """ setExpandsOnDoubleClick(self, bool) """
    pass

  def setFirstColumnSpanned(self, int, QModelIndex, bool):
    """ setFirstColumnSpanned(self, int, QModelIndex, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHeader(self, QHeaderView):
    """ setHeader(self, QHeaderView) """
    pass

  def setHeaderHidden(self, bool):
    """ setHeaderHidden(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndentation(self, int):
    """ setIndentation(self, int) """
    pass

  def setIndexWidget(self, QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setItemsExpandable(self, bool):
    """ setItemsExpandable(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRootIndex(self, QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRootIsDecorated(self, bool):
    """ setRootIsDecorated(self, bool) """
    pass

  def setRowHidden(self, int, QModelIndex, bool):
    """ setRowHidden(self, int, QModelIndex, bool) """
    pass

  def setSelection(self, QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSortingEnabled(self, bool):
    """ setSortingEnabled(self, bool) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTreePosition(self, int):
    """ setTreePosition(self, int) """
    pass

  def setUniformRowHeights(self, bool):
    """ setUniformRowHeights(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showColumn(self, int):
    """ showColumn(self, int) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return None

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return ""

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return None

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def sortByColumn(self, int, arg0):
    """ sortByColumn(self, int, Qt.SortOrder) """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return None

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def treePosition(self):
    """ treePosition(self) -> int """
    return 1

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def uniformRowHeights(self):
    """ uniformRowHeights(self) -> bool """
    return None

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries(self):
    """ updateGeometries(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return None

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return ""

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return None

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent(self, QEvent):
    """ viewportEvent(self, QEvent) -> bool """
    return None

  def viewportMargins():
    pass

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def visualRect(self, QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return None

  def visualRegionForSelection(self, QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QHelpEngine(QHelpEngineCore):
  """ QHelpEngine(str, parent: QObject = None) """

  def addCustomFilter(self, str, Iterablestr=None):
    """ addCustomFilter(self, str, Iterable[str]) -> bool """
    return None

  def autoSaveFilter(self):
    """ autoSaveFilter(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def collectionFile(self):
    """ collectionFile(self) -> str """
    return ""

  def connectNotify():
    pass

  def contentModel(self):
    """ contentModel(self) -> QHelpContentModel """
    return None

  def contentWidget(self):
    """ contentWidget(self) -> QHelpContentWidget """
    return None

  def copyCollectionFile(self, str):
    """ copyCollectionFile(self, str) -> bool """
    return None

  def currentFilter(self):
    """ currentFilter(self) -> str """
    return ""

  def currentFilterChanged(self, str):
    """ currentFilterChanged(self, str) [signal] """
    pass

  def customEvent():
    pass

  def customFilters(self):
    """ customFilters(self) -> List[str] """
    return ""

  def customValue(self, str, arg0=None):
    """ customValue(self, str, defaultValue: Any = None) -> Any """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def documentationFileName(self, str):
    """ documentationFileName(self, str) -> str """
    return ""

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileData(self, QUrl):
    """ fileData(self, QUrl) -> QByteArray """
    return None

  def files(self, str, Iterablestr=None, arg0=None):
    """ files(self, str, Iterable[str], extensionFilter: str = '') -> List[QUrl]
    files(self, str, str, extensionFilter: str = '') -> List[QUrl] """
    return None

  def filterAttributeSets(self, str):
    """ filterAttributeSets(self, str) -> List[List[str]] """
    return ""

  def filterAttributes(self):
    """ filterAttributes(self) -> List[str]
    filterAttributes(self, str) -> List[str] """
    return ""

  def filterEngine(self):
    """ filterEngine(self) -> QHelpFilterEngine """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findFile(self, QUrl):
    """ findFile(self, QUrl) -> QUrl """
    return None

  def indexModel(self):
    """ indexModel(self) -> QHelpIndexModel """
    return None

  def indexWidget(self):
    """ indexWidget(self) -> QHelpIndexWidget """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def linksForIdentifier(self, str):
    """ linksForIdentifier(self, str) -> Dict[str, QUrl] """
    return ""

  def linksForKeyword(self, str):
    """ linksForKeyword(self, str) -> Dict[str, QUrl] """
    return ""

  def metaData(str, str):
    """ metaData(str, str) -> Any """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def namespaceName(str):
    """ namespaceName(str) -> str """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def readersAboutToBeInvalidated(self):
    """ readersAboutToBeInvalidated(self) [signal] """
    pass

  def receivers():
    pass

  def registerDocumentation(self, str):
    """ registerDocumentation(self, str) -> bool """
    return None

  def registeredDocumentations(self):
    """ registeredDocumentations(self) -> List[str] """
    return ""

  def removeCustomFilter(self, str):
    """ removeCustomFilter(self, str) -> bool """
    return None

  def removeCustomValue(self, str):
    """ removeCustomValue(self, str) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def searchEngine(self):
    """ searchEngine(self) -> QHelpSearchEngine """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAutoSaveFilter(self, bool):
    """ setAutoSaveFilter(self, bool) """
    pass

  def setCollectionFile(self, str):
    """ setCollectionFile(self, str) """
    pass

  def setCurrentFilter(self, str):
    """ setCurrentFilter(self, str) """
    pass

  def setCustomValue(self, str, Any):
    """ setCustomValue(self, str, Any) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setUsesFilterEngine(self, bool):
    """ setUsesFilterEngine(self, bool) """
    pass

  def setupData(self):
    """ setupData(self) -> bool """
    return None

  def setupFinished(self):
    """ setupFinished(self) [signal] """
    pass

  def setupStarted(self):
    """ setupStarted(self) [signal] """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unregisterDocumentation(self, str):
    """ unregisterDocumentation(self, str) -> bool """
    return None

  def usesFilterEngine(self):
    """ usesFilterEngine(self) -> bool """
    return None

  def warning(self, str):
    """ warning(self, str) [signal] """
    pass

class QHelpEngineCore(QObject):
  """ QHelpEngineCore(str, parent: QObject = None) """

  def addCustomFilter(self, str, Iterablestr=None):
    """ addCustomFilter(self, str, Iterable[str]) -> bool """
    return None

  def autoSaveFilter(self):
    """ autoSaveFilter(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def collectionFile(self):
    """ collectionFile(self) -> str """
    return ""

  def connectNotify():
    pass

  def copyCollectionFile(self, str):
    """ copyCollectionFile(self, str) -> bool """
    return None

  def currentFilter(self):
    """ currentFilter(self) -> str """
    return ""

  def currentFilterChanged(self, str):
    """ currentFilterChanged(self, str) [signal] """
    pass

  def customEvent():
    pass

  def customFilters(self):
    """ customFilters(self) -> List[str] """
    return ""

  def customValue(self, str, arg0=None):
    """ customValue(self, str, defaultValue: Any = None) -> Any """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def documentationFileName(self, str):
    """ documentationFileName(self, str) -> str """
    return ""

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileData(self, QUrl):
    """ fileData(self, QUrl) -> QByteArray """
    return None

  def files(self, str, Iterablestr=None, arg0=None):
    """ files(self, str, Iterable[str], extensionFilter: str = '') -> List[QUrl]
    files(self, str, str, extensionFilter: str = '') -> List[QUrl] """
    return None

  def filterAttributeSets(self, str):
    """ filterAttributeSets(self, str) -> List[List[str]] """
    return ""

  def filterAttributes(self):
    """ filterAttributes(self) -> List[str]
    filterAttributes(self, str) -> List[str] """
    return ""

  def filterEngine(self):
    """ filterEngine(self) -> QHelpFilterEngine """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findFile(self, QUrl):
    """ findFile(self, QUrl) -> QUrl """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def linksForIdentifier(self, str):
    """ linksForIdentifier(self, str) -> Dict[str, QUrl] """
    return ""

  def linksForKeyword(self, str):
    """ linksForKeyword(self, str) -> Dict[str, QUrl] """
    return ""

  def metaData(str, str):
    """ metaData(str, str) -> Any """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def namespaceName(str):
    """ namespaceName(str) -> str """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def readersAboutToBeInvalidated(self):
    """ readersAboutToBeInvalidated(self) [signal] """
    pass

  def receivers():
    pass

  def registerDocumentation(self, str):
    """ registerDocumentation(self, str) -> bool """
    return None

  def registeredDocumentations(self):
    """ registeredDocumentations(self) -> List[str] """
    return ""

  def removeCustomFilter(self, str):
    """ removeCustomFilter(self, str) -> bool """
    return None

  def removeCustomValue(self, str):
    """ removeCustomValue(self, str) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAutoSaveFilter(self, bool):
    """ setAutoSaveFilter(self, bool) """
    pass

  def setCollectionFile(self, str):
    """ setCollectionFile(self, str) """
    pass

  def setCurrentFilter(self, str):
    """ setCurrentFilter(self, str) """
    pass

  def setCustomValue(self, str, Any):
    """ setCustomValue(self, str, Any) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setUsesFilterEngine(self, bool):
    """ setUsesFilterEngine(self, bool) """
    pass

  def setupData(self):
    """ setupData(self) -> bool """
    return None

  def setupFinished(self):
    """ setupFinished(self) [signal] """
    pass

  def setupStarted(self):
    """ setupStarted(self) [signal] """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unregisterDocumentation(self, str):
    """ unregisterDocumentation(self, str) -> bool """
    return None

  def usesFilterEngine(self):
    """ usesFilterEngine(self) -> bool """
    return None

  def warning(self, str):
    """ warning(self, str) [signal] """
    pass

class QHelpFilterData(simplewrapper):
  """ QHelpFilterData()
  QHelpFilterData(QHelpFilterData) """

  def components(self):
    """ components(self) -> List[str] """
    return ""

  def setComponents(self, Iterablestr=None):
    """ setComponents(self, Iterable[str]) """
    pass

  def setVersions(self, IterableQVersionNumber=None):
    """ setVersions(self, Iterable[QVersionNumber]) """
    pass

  def swap(self, QHelpFilterData):
    """ swap(self, QHelpFilterData) """
    pass

  def versions(self):
    """ versions(self) -> List[QVersionNumber] """
    return None

class QHelpFilterEngine(QObject):

  def activeFilter(self):
    """ activeFilter(self) -> str """
    return ""

  def availableComponents(self):
    """ availableComponents(self) -> List[str] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def filterActivated(self, str):
    """ filterActivated(self, str) [signal] """
    pass

  def filterData(self, str):
    """ filterData(self, str) -> QHelpFilterData """
    return None

  def filters(self):
    """ filters(self) -> List[str] """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def namespaceToComponent(self):
    """ namespaceToComponent(self) -> Dict[str, str] """
    return ""

  def namespaceToVersion(self):
    """ namespaceToVersion(self) -> Dict[str, QVersionNumber] """
    return ""

  def namespacesForFilter(self, str):
    """ namespacesForFilter(self, str) -> List[str] """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeFilter(self, str):
    """ removeFilter(self, str) -> bool """
    return None

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setActiveFilter(self, str):
    """ setActiveFilter(self, str) -> bool """
    return None

  def setFilterData(self, str, QHelpFilterData):
    """ setFilterData(self, str, QHelpFilterData) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QHelpIndexModel(QStringListModel):

  HorizontalSortHint = None
  NoLayoutChangeHint = None
  VerticalSortHint = None

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount():
    pass

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex(self, str):
    """ createIndex(self, str) """
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, int):
    """ data(self, QModelIndex, int) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def filter(self, str, arg0=None):
    """ filter(self, str, wildcard: str = '') -> QModelIndex """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren():
    pass

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def index(self, int, arg0=None, arg1=None):
    """ index(self, int, column: int = 0, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def indexCreated(self):
    """ indexCreated(self) [signal] """
    pass

  def indexCreationStarted(self):
    """ indexCreationStarted(self) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCreatingIndex(self):
    """ isCreatingIndex(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def linksForKeyword(self, str):
    """ linksForKeyword(self, str) -> Dict[str, QUrl] """
    return ""

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setStringList(self, Iterablestr=None):
    """ setStringList(self, Iterable[str]) """
    pass

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stringList(self):
    """ stringList(self) -> List[str] """
    return ""

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QHelpIndexWidget(QListView):

  AboveItem = None
  Adjust = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  Batched = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  Fixed = None

  class Flow(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Free = None
  HLine = None
  IconMode = None
  IgnoreMask = None
  InternalMove = None

  class LayoutMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LeftToRight = None
  ListMode = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None

  class Movement(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  class ResizeMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SinglePass = None
  SingleSelection = None
  Snap = None
  Static = None
  StyledPanel = None
  Sunken = None
  TopToBottom = None
  VLine = None

  class ViewMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WinPanel = None

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateCurrentItem(self):
    """ activateCurrentItem(self) """
    pass

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def batchSize(self):
    """ batchSize(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent():
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearPropertyFlags(self):
    """ clearPropertyFlags(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return None

  def create():
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def currentChanged(self, QModelIndex, QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return None

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) """
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def doubleClicked(self, QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return ""

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return None

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return None

  def dragEnterEvent():
    pass

  def dragLeaveEvent(self, QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawFrame():
    pass

  def dropEvent(self, QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return ""

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def filterIndices():
    """ filterIndices(self, str, wildcard: str = '') """
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flow(self):
    """ flow(self) -> QListView.Flow """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return None

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return None

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def gridSize(self):
    """ gridSize(self) -> QSize """
    return None

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return None

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return ""

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return None

  def iconSizeChanged(self, QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return None

  def indexWidget(self, QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return None

  def indexesMoved(self, IterableQModelIndex=None):
    """ indexesMoved(self, Iterable[QModelIndex]) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isIndexHidden(self, QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isPersistentEditorOpen(self, QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isRowHidden(self, int):
    """ isRowHidden(self, int) -> bool """
    return None

  def isSelectionRectVisible(self):
    """ isSelectionRectVisible(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWrapping(self):
    """ isWrapping(self) -> bool """
    return None

  def itemAlignment(self):
    """ itemAlignment(self) -> Qt.Alignment """
    return None

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return ""

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return ""

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return ""

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def layoutMode(self):
    """ layoutMode(self) -> QListView.LayoutMode """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def linkActivated(self, QUrl, str):
    """ linkActivated(self, QUrl, str) [signal] """
    pass

  def linksActivated(self, Dictstr=None, QUrl=None, str=None):
    """ linksActivated(self, Dict[str, QUrl], str) [signal] """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return ""

  def modelColumn(self):
    """ modelColumn(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent(self, QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent(self, QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return None

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def movement(self):
    """ movement(self) -> QListView.Movement """
    return None

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent(self, QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def pressed(self, QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def rectForIndex(self, QModelIndex):
    """ rectForIndex(self, QModelIndex) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def resizeMode(self):
    """ resizeMode(self) -> QListView.ResizeMode """
    return None

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return None

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo():
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes(self):
    """ selectedIndexes(self) -> List[QModelIndex] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return ""

  def selectionChanged(self, QItemSelection, QItemSelection):
    """ selectionChanged(self, QItemSelection, QItemSelection) """
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return ""

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setBatchSize(self, int):
    """ setBatchSize(self, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFlow(self, arg0):
    """ setFlow(self, QListView.Flow) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGridSize(self, QSize):
    """ setGridSize(self, QSize) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setItemAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLayoutMode(self, arg0):
    """ setLayoutMode(self, QListView.LayoutMode) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setModelColumn(self, int):
    """ setModelColumn(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovement(self, arg0):
    """ setMovement(self, QListView.Movement) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPositionForIndex(self, QPoint, QModelIndex):
    """ setPositionForIndex(self, QPoint, QModelIndex) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setResizeMode(self, arg0):
    """ setResizeMode(self, QListView.ResizeMode) """
    pass

  def setRootIndex(self, QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRowHidden(self, int, bool):
    """ setRowHidden(self, int, bool) """
    pass

  def setSelection(self, QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setSelectionRectVisible(self, bool):
    """ setSelectionRectVisible(self, bool) """
    pass

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUniformItemSizes(self, bool):
    """ setUniformItemSizes(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewMode(self, arg0):
    """ setViewMode(self, QListView.ViewMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return None

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return ""

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return None

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag(self, UnionQt.DropActions=None, Qt.DropAction=None):
    """ startDrag(self, Union[Qt.DropActions, Qt.DropAction]) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return None

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def uniformItemSizes(self):
    """ uniformItemSizes(self) -> bool """
    return None

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries(self):
    """ updateGeometries(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return None

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return ""

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewMode(self):
    """ viewMode(self) -> QListView.ViewMode """
    return None

  def viewOptions(self):
    """ viewOptions(self) -> QStyleOptionViewItem """
    return None

  def viewport(self):
    """ viewport(self) -> QWidget """
    return None

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def visualRect(self, QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return None

  def visualRegionForSelection(self, QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QHelpSearchEngine(QObject):
  """ QHelpSearchEngine(QHelpEngineCore, parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cancelIndexing(self):
    """ cancelIndexing(self) """
    pass

  def cancelSearching(self):
    """ cancelSearching(self) """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hitCount(self):
    """ hitCount(self) -> int """
    return 1

  def hits(self, int, int):
    """ hits(self, int, int) -> List[Tuple[str, str]] """
    return ""

  def indexingFinished(self):
    """ indexingFinished(self) [signal] """
    pass

  def indexingStarted(self):
    """ indexingStarted(self) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def query(self):
    """ query(self) -> List[QHelpSearchQuery] """
    return None

  def queryWidget(self):
    """ queryWidget(self) -> QHelpSearchQueryWidget """
    return None

  def receivers():
    pass

  def reindexDocumentation(self):
    """ reindexDocumentation(self) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resultWidget(self):
    """ resultWidget(self) -> QHelpSearchResultWidget """
    return None

  def search(self, IterableQHelpSearchQuery=None):
    """ search(self, Iterable[QHelpSearchQuery])
    search(self, str) """
    pass

  def searchInput(self):
    """ searchInput(self) -> str """
    return ""

  def searchResultCount(self):
    """ searchResultCount(self) -> int """
    return 1

  def searchResults(self, int, int):
    """ searchResults(self, int, int) -> List[QHelpSearchResult] """
    return None

  def searchingFinished(self, int):
    """ searchingFinished(self, int) [signal] """
    pass

  def searchingStarted(self):
    """ searchingStarted(self) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QHelpSearchQuery(simplewrapper):
  """ QHelpSearchQuery()
  QHelpSearchQuery(QHelpSearchQuery.FieldName, Iterable[str])
  QHelpSearchQuery(QHelpSearchQuery) """

  ALL = None
  ATLEAST = None
  DEFAULT = None
  FUZZY = None

  class FieldName(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PHRASE = None
  WITHOUT = None

class QHelpSearchQueryWidget(QWidget):
  """ QHelpSearchQueryWidget(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent():
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEvent():
    pass

  def collapseExtendedSearch(self):
    """ collapseExtendedSearch(self) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def expandExtendedSearch(self):
    """ expandExtendedSearch(self) """
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isCompactMode(self):
    """ isCompactMode(self) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def query(self):
    """ query(self) -> List[QHelpSearchQuery] """
    return None

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def search(self):
    """ search(self) [signal] """
    pass

  def searchInput(self):
    """ searchInput(self) -> str """
    return ""

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCompactMode(self, bool):
    """ setCompactMode(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setQuery(self, IterableQHelpSearchQuery=None):
    """ setQuery(self, Iterable[QHelpSearchQuery]) """
    pass

  def setSearchInput(self, str):
    """ setSearchInput(self, str) """
    pass

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QHelpSearchResult(simplewrapper):
  """ QHelpSearchResult()
  QHelpSearchResult(QHelpSearchResult)
  QHelpSearchResult(QUrl, str, str) """

  def snippet(self):
    """ snippet(self) -> str """
    return ""

  def title(self):
    """ title(self) -> str """
    return ""

  def url(self):
    """ url(self) -> QUrl """
    return None

class QHelpSearchResultWidget(QWidget):

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent(self, QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return None

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return None

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeEvent(self, QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return None

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return None

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return None

  def closeEvent(self, QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return None

  def contextMenuEvent(self, QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    """ create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) """
    pass

  def createWindowContainer(QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return None

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customContextMenuRequested(self, QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    """ destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def dropEvent(self, QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent(self, QEvent):
    """ enterEvent(self, QEvent) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild(self):
    """ focusNextChild(self) -> bool """
    return None

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return None

  def focusOutEvent(self, QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild(self):
    """ focusPreviousChild(self) -> bool """
    return None

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return None

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(_1=None, _1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return None

  def grabGesture():
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return None

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return None

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return None

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return None

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initPainter(self, QPainter):
    """ initPainter(self, QPainter) """
    pass

  def inputMethodEvent(self, QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return None

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return None

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return None

  def isHidden(self):
    """ isHidden(self) -> bool """
    return None

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return None

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return None

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindow(self):
    """ isWindow(self) -> bool """
    return None

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent(self, QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent(self, QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def linkAt(self, QPoint):
    """ linkAt(self, QPoint) -> QUrl """
    return None

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapFromParent(self, QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return 1

  def mapTo(self, QWidget, QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToParent(self, QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return None

  def mouseMoveEvent(self, QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent(self, QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent(self, UnionQByteArray=None, bytes=None, bytearray=None, sip.voidptr=None):
    """ nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int] """
    return 1

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return None

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return None

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent(self, QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def palette(self):
    """ palette(self) -> QPalette """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render():
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def requestShowLink(self, QUrl):
    """ requestShowLink(self, QUrl) [signal] """
    pass

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return None

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute():
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setShortcutAutoRepeat():
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled():
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag():
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter(self):
    """ sharedPainter(self) -> QPainter """
    return 1

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return None

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return None

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent(self, QTabletEvent):
    """ tabletEvent(self, QTabletEvent) """
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return None

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus(self):
    """ updateMicroFocus(self) """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return None

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return None

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return None

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return None

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return None

  def windowIconChanged(self, QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

__doc__ = None
__file__ = 'C:\\Users\\Rupka\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\PyQt5\\QtHelp.pyd'
__loader__ = None
__name__ = 'PyQt5.QtHelp'
__package__ = 'PyQt5'
__spec__ = None

