# coding: utf-8
# AUTO-GENERATED FILE -- DO NOT EDIT


from PyQt5 import QtCore
from PyQt5 import QtGui

class QAbstractButton(QWidget):
  """ QAbstractButton(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None

  class PaintDeviceMetric(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  class RenderFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RenderFlags(simplewrapper):
    """ QWidget.RenderFlags()
    QWidget.RenderFlags(Union[QWidget.RenderFlags, QWidget.RenderFlag])
    QWidget.RenderFlags(QWidget.RenderFlags) """

    def __init__(self):
      pass

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def animateClick(self, arg0=None):
    """ animateClick(self, msecs: int = 100) """
    pass

  def autoExclusive(self):
    """ autoExclusive(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def autoRepeatDelay(self):
    """ autoRepeatDelay(self) -> int """
    return 1

  def autoRepeatInterval(self):
    """ autoRepeatInterval(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def checkStateSet(self):
    """ checkStateSet(self) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def click(self):
    """ click(self) """
    pass

  def clicked(self, arg0=None):
    """ clicked(self, checked: bool = False) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def group(self):
    """ group(self) -> QButtonGroup """
    return QButtonGroup()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hitButton(self, QtCore.QPoint):
    """ hitButton(self, QPoint) -> bool """
    return True

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isDown(self):
    """ isDown(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextCheckState(self):
    """ nextCheckState(self) """
    pass

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self):
    """ pressed(self) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def released(self):
    """ released(self) [signal] """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoExclusive(self, bool):
    """ setAutoExclusive(self, bool) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setAutoRepeatDelay(self, int):
    """ setAutoRepeatDelay(self, int) """
    pass

  def setAutoRepeatInterval(self, int):
    """ setAutoRepeatInterval(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDown(self, bool):
    """ setDown(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QAbstractGraphicsShapeItem(QGraphicsItem):
  """ QAbstractGraphicsShapeItem(parent: QGraphicsItem = None) """

  class CacheMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DeviceCoordinateCache = None

  class GraphicsItemChange(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class GraphicsItemFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class GraphicsItemFlags(simplewrapper):
    """ QGraphicsItem.GraphicsItemFlags()
    QGraphicsItem.GraphicsItemFlags(Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag])
    QGraphicsItem.GraphicsItemFlags(QGraphicsItem.GraphicsItemFlags) """

    def __init__(self):
      pass

  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None

  class PanelModality(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def brush(self):
    """ brush(self) -> QBrush """
    return QtGui.QBrush()

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPen(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QAbstractItemDelegate(QObject):
  """ QAbstractItemDelegate(parent: QObject = None) """

  EditNextItem = None
  EditPreviousItem = None

  class EndEditHint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoHint = None
  RevertModelCache = None
  SubmitModelCache = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closeEditor(self, QWidget, arg0=None):
    """ closeEditor(self, QWidget, hint: QAbstractItemDelegate.EndEditHint = QAbstractItemDelegate.NoHint) [signal] """
    pass

  def commitData(self, QWidget):
    """ commitData(self, QWidget) [signal] """
    pass

  def connectNotify():
    pass

  def createEditor(self, QWidget, QStyleOptionViewItem, QtCore.QModelIndex):
    """ createEditor(self, QWidget, QStyleOptionViewItem, QModelIndex) -> QWidget """
    return QWidget()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyEditor(self, QWidget, QtCore.QModelIndex):
    """ destroyEditor(self, QWidget, QModelIndex) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editorEvent(self, QtCore.QEvent, QtCore.QAbstractItemModel, QStyleOptionViewItem, QtCore.QModelIndex):
    """ editorEvent(self, QEvent, QAbstractItemModel, QStyleOptionViewItem, QModelIndex) -> bool """
    return True

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def helpEvent(self, QtGui.QHelpEvent, QAbstractItemView, QStyleOptionViewItem, QtCore.QModelIndex):
    """ helpEvent(self, QHelpEvent, QAbstractItemView, QStyleOptionViewItem, QModelIndex) -> bool """
    return True

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def paint(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QModelIndex):
    """ paint(self, QPainter, QStyleOptionViewItem, QModelIndex) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEditorData(self, QWidget, QtCore.QModelIndex):
    """ setEditorData(self, QWidget, QModelIndex) """
    pass

  def setModelData(self, QWidget, QtCore.QAbstractItemModel, QtCore.QModelIndex):
    """ setModelData(self, QWidget, QAbstractItemModel, QModelIndex) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeHint(self, QStyleOptionViewItem, QtCore.QModelIndex):
    """ sizeHint(self, QStyleOptionViewItem, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintChanged(self, QtCore.QModelIndex):
    """ sizeHintChanged(self, QModelIndex) [signal] """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateEditorGeometry(self, QWidget, QStyleOptionViewItem, QtCore.QModelIndex):
    """ updateEditorGeometry(self, QWidget, QStyleOptionViewItem, QModelIndex) """
    pass

class QAbstractItemView(QAbstractScrollArea):
  """ QAbstractItemView(parent: QWidget = None) """

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None

  class CursorAction(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DoubleClicked = None
  DragDrop = None

  class DragDropMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None

  class DropIndicatorPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DropOnly = None
  EditKeyPressed = None

  class EditTrigger(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class EditTriggers(simplewrapper):
    """ QAbstractItemView.EditTriggers()
    QAbstractItemView.EditTriggers(Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger])
    QAbstractItemView.EditTriggers(QAbstractItemView.EditTriggers) """

    def __init__(self):
      pass

  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  HLine = None
  IgnoreMask = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  class ScrollHint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ScrollMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None

  class SelectionBehavior(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SelectionMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Shadow(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Shadow_Mask = None

  class Shape(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Shape_Mask = None
  SingleSelection = None

  class SizeAdjustPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class State(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleMask(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor(self, QWidget, arg0):
    """ closeEditor(self, QWidget, QAbstractItemDelegate.EndEditHint) """
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QtCore.QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def commitData(self, QWidget):
    """ commitData(self, QWidget) """
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, QtCore.QModelIndex, QtCore.QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged(self, QtCore.QModelIndex, QtCore.QModelIndex, arg0=None):
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) """
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset(self):
    """ dirtyRegionOffset(self) -> QPoint """
    return QtCore.QPoint()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent(self, QtGui.QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dropIndicatorPosition(self):
    """ dropIndicatorPosition(self) -> QAbstractItemView.DropIndicatorPosition """
    return QAbstractItemView.DropIndicatorPosition()

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit(self, QtCore.QModelIndex):
    """ edit(self, QModelIndex)
    edit(self, QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool """
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed(self, QtCore.QObject):
    """ editorDestroyed(self, QObject) """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def executeDelayedItemsLayout(self):
    """ executeDelayedItemsLayout(self) """
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction(self, int):
    """ horizontalScrollbarAction(self, int) """
    pass

  def horizontalScrollbarValueChanged(self, int):
    """ horizontalScrollbarValueChanged(self, int) """
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden(self, QtCore.QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QtCore.QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return QtCore.QModelIndex()

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QtCore.QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rowsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) """
    pass

  def rowsInserted(self, QtCore.QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout(self):
    """ scheduleDelayedItemsLayout(self) """
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy():
    pass

  def scrollDirtyRegion(self, int, int):
    """ scrollDirtyRegion(self, int, int) """
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes(self):
    """ selectedIndexes(self) -> List[QModelIndex] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged(self, QtCore.QItemSelection, QtCore.QItemSelection):
    """ selectionChanged(self, QItemSelection, QItemSelection) """
    pass

  def selectionCommand(self, QtCore.QModelIndex, arg0=None):
    """ selectionCommand(self, QModelIndex, event: QEvent = None) -> QItemSelectionModel.SelectionFlags """
    return QItemSelectionModel.SelectionFlags()

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion(self, QtGui.QRegion):
    """ setDirtyRegion(self, QRegion) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setSelection(self, QtCore.QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setState(self, arg0):
    """ setState(self, QAbstractItemView.State) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag(self, UnionQt.DropActions=None, Qt.DropAction=None):
    """ startDrag(self, Union[Qt.DropActions, Qt.DropAction]) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QAbstractItemView.State """
    return QAbstractItemView.State()

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData(self):
    """ updateEditorData(self) """
    pass

  def updateEditorGeometries(self):
    """ updateEditorGeometries(self) """
    pass

  def updateGeometries(self):
    """ updateGeometries(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction(self, int):
    """ verticalScrollbarAction(self, int) """
    pass

  def verticalScrollbarValueChanged(self, int):
    """ verticalScrollbarValueChanged(self, int) """
    pass

  def viewOptions(self):
    """ viewOptions(self) -> QStyleOptionViewItem """
    return QStyleOptionViewItem()

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent(self, QtCore.QEvent):
    """ viewportEvent(self, QEvent) -> bool """
    return True

  def viewportMargins():
    pass

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return QtCore.QSize()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection(self, QtCore.QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QAbstractScrollArea(QFrame):
  """ QAbstractScrollArea(parent: QWidget = None) """

  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QtGui.QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins(self, int, int, int, int):
    """ setViewportMargins(self, int, int, int, int)
    setViewportMargins(self, QMargins) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEvent(self, QtCore.QEvent):
    """ viewportEvent(self, QEvent) -> bool """
    return True

  def viewportMargins(self):
    """ viewportMargins(self) -> QMargins """
    return QtCore.QMargins()

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return QtCore.QSize()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QAbstractSlider(QWidget):
  """ QAbstractSlider(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  class SliderAction(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SliderChange(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SliderMove = None
  SliderNoAction = None
  SliderOrientationChange = None
  SliderPageStepAdd = None
  SliderPageStepSub = None
  SliderRangeChange = None
  SliderSingleStepAdd = None
  SliderSingleStepSub = None
  SliderStepsChange = None
  SliderToMaximum = None
  SliderToMinimum = None
  SliderValueChange = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actionTriggered(self, int):
    """ actionTriggered(self, int) [signal] """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def hasTracking(self):
    """ hasTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invertedAppearance(self):
    """ invertedAppearance(self) -> bool """
    return True

  def invertedControls(self):
    """ invertedControls(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSliderDown(self):
    """ isSliderDown(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def pageStep(self):
    """ pageStep(self) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def rangeChanged(self, int, int):
    """ rangeChanged(self, int, int) [signal] """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def repeatAction(self):
    """ repeatAction(self) -> QAbstractSlider.SliderAction """
    return QAbstractSlider.SliderAction()

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInvertedAppearance(self, bool):
    """ setInvertedAppearance(self, bool) """
    pass

  def setInvertedControls(self, bool):
    """ setInvertedControls(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, int):
    """ setMaximum(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, int):
    """ setMinimum(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPageStep(self, int):
    """ setPageStep(self, int) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setRepeatAction(self, arg0, arg1=None, arg2=None):
    """ setRepeatAction(self, QAbstractSlider.SliderAction, thresholdTime: int = 500, repeatTime: int = 50) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSingleStep(self, int):
    """ setSingleStep(self, int) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSliderDown(self, bool):
    """ setSliderDown(self, bool) """
    pass

  def setSliderPosition(self, int):
    """ setSliderPosition(self, int) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTracking(self, bool):
    """ setTracking(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, int):
    """ setValue(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def singleStep(self):
    """ singleStep(self) -> int """
    return 1

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sliderChange(self, arg0):
    """ sliderChange(self, QAbstractSlider.SliderChange) """
    pass

  def sliderMoved(self, int):
    """ sliderMoved(self, int) [signal] """
    pass

  def sliderPosition(self):
    """ sliderPosition(self) -> int """
    return 1

  def sliderPressed(self):
    """ sliderPressed(self) [signal] """
    pass

  def sliderReleased(self):
    """ sliderReleased(self) [signal] """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggerAction(self, arg0):
    """ triggerAction(self, QAbstractSlider.SliderAction) """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def value(self):
    """ value(self) -> int """
    return 1

  def valueChanged(self, int):
    """ valueChanged(self, int) [signal] """
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QAbstractSpinBox(QWidget):
  """ QAbstractSpinBox(parent: QWidget = None) """

  AdaptiveDecimalStepType = None

  class ButtonSymbols(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CorrectToNearestValue = None
  CorrectToPreviousValue = None

  class CorrectionMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DefaultStepType = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  NoButtons = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  PlusMinus = None
  StepDownEnabled = None

  class StepEnabled(simplewrapper):
    """ QAbstractSpinBox.StepEnabled()
    QAbstractSpinBox.StepEnabled(Union[QAbstractSpinBox.StepEnabled, QAbstractSpinBox.StepEnabledFlag])
    QAbstractSpinBox.StepEnabled(QAbstractSpinBox.StepEnabled) """

    def __init__(self):
      pass

  class StepEnabledFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StepNone = None

  class StepType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StepUpEnabled = None
  UpDownArrows = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buttonSymbols(self):
    """ buttonSymbols(self) -> QAbstractSpinBox.ButtonSymbols """
    return QAbstractSpinBox.ButtonSymbols()

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def correctionMode(self):
    """ correctionMode(self) -> QAbstractSpinBox.CorrectionMode """
    return QAbstractSpinBox.CorrectionMode()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAcceptableInput(self):
    """ hasAcceptableInput(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionSpinBox):
    """ initStyleOption(self, QStyleOptionSpinBox) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpretText(self):
    """ interpretText(self) """
    pass

  def isAccelerated(self):
    """ isAccelerated(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isGroupSeparatorShown(self):
    """ isGroupSeparatorShown(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardTracking(self):
    """ keyboardTracking(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit(self):
    """ lineEdit(self) -> QLineEdit """
    return QLineEdit()

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAccelerated(self, bool):
    """ setAccelerated(self, bool) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButtonSymbols(self, arg0):
    """ setButtonSymbols(self, QAbstractSpinBox.ButtonSymbols) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCorrectionMode(self, arg0):
    """ setCorrectionMode(self, QAbstractSpinBox.CorrectionMode) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroupSeparatorShown(self, bool):
    """ setGroupSeparatorShown(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeyboardTracking(self, bool):
    """ setKeyboardTracking(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit(self, QLineEdit):
    """ setLineEdit(self, QLineEdit) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpecialValueText(self, str):
    """ setSpecialValueText(self, str) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def specialValueText(self):
    """ specialValueText(self) -> str """
    return ""

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def stepBy(self, int):
    """ stepBy(self, int) """
    pass

  def stepDown(self):
    """ stepDown(self) """
    pass

  def stepEnabled(self):
    """ stepEnabled(self) -> QAbstractSpinBox.StepEnabled """
    return QAbstractSpinBox.StepEnabled()

  def stepUp(self):
    """ stepUp(self) """
    pass

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wrapping(self):
    """ wrapping(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QAction(QObject):
  """ QAction(parent: QObject = None)
  QAction(str, parent: QObject = None)
  QAction(QIcon, str, parent: QObject = None) """

  AboutQtRole = None
  AboutRole = None

  class ActionEvent(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ApplicationSpecificRole = None
  HighPriority = None
  Hover = None
  LowPriority = None

  class MenuRole(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoRole = None
  NormalPriority = None
  PreferencesRole = None

  class Priority(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  QuitRole = None
  TextHeuristicRole = None
  Trigger = None

  def __init__(self, arg0=None):
    pass

  def actionGroup(self):
    """ actionGroup(self) -> QActionGroup """
    return QActionGroup()

  def activate(self, arg0):
    """ activate(self, QAction.ActionEvent) """
    pass

  def associatedGraphicsWidgets(self):
    """ associatedGraphicsWidgets(self) -> List[QGraphicsWidget] """
    return None

  def associatedWidgets(self):
    """ associatedWidgets(self) -> List[QWidget] """
    return None

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changed(self):
    """ changed(self) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def data(self):
    """ data(self) -> Any """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def hover(self):
    """ hover(self) """
    pass

  def hovered(self):
    """ hovered(self) [signal] """
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconText(self):
    """ iconText(self) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isIconVisibleInMenu(self):
    """ isIconVisibleInMenu(self) -> bool """
    return True

  def isSeparator(self):
    """ isSeparator(self) -> bool """
    return True

  def isShortcutVisibleInContextMenu(self):
    """ isShortcutVisibleInContextMenu(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def menu(self):
    """ menu(self) -> QMenu """
    return QMenu()

  def menuRole(self):
    """ menuRole(self) -> QAction.MenuRole """
    return QAction.MenuRole()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def priority(self):
    """ priority(self) -> QAction.Priority """
    return QAction.Priority()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setActionGroup(self, QActionGroup):
    """ setActionGroup(self, QActionGroup) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setData(self, Any):
    """ setData(self, Any) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconText(self, str):
    """ setIconText(self, str) """
    pass

  def setIconVisibleInMenu(self, bool):
    """ setIconVisibleInMenu(self, bool) """
    pass

  def setMenu(self, QMenu):
    """ setMenu(self, QMenu) """
    pass

  def setMenuRole(self, arg0):
    """ setMenuRole(self, QAction.MenuRole) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setPriority(self, arg0):
    """ setPriority(self, QAction.Priority) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSeparator(self, bool):
    """ setSeparator(self, bool) """
    pass

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutContext(self, arg0):
    """ setShortcutContext(self, Qt.ShortcutContext) """
    pass

  def setShortcutVisibleInContextMenu(self, bool):
    """ setShortcutVisibleInContextMenu(self, bool) """
    pass

  def setShortcuts(self, IterableUnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcuts(self, Iterable[Union[QKeySequence, QKeySequence.StandardKey, str, int]])
    setShortcuts(self, QKeySequence.StandardKey) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def shortcutContext(self):
    """ shortcutContext(self) -> Qt.ShortcutContext """
    return None

  def shortcuts(self):
    """ shortcuts(self) -> List[QKeySequence] """
    return None

  def showStatusText(self, arg0=None):
    """ showStatusText(self, widget: QWidget = None) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def trigger(self):
    """ trigger(self) """
    pass

  def triggered(self, arg0=None):
    """ triggered(self, checked: bool = False) [signal] """
    pass

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

class QActionGroup(QObject):
  """ QActionGroup(QObject) """

  def __init__(self, QtCore.QObject):
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def addAction(self, QAction):
    """ addAction(self, QAction) -> QAction
    addAction(self, str) -> QAction
    addAction(self, QIcon, str) -> QAction """
    return QAction()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def checkedAction(self):
    """ checkedAction(self) -> QAction """
    return QAction()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hovered(self, QAction):
    """ hovered(self, QAction) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isExclusive(self):
    """ isExclusive(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExclusive(self, bool):
    """ setExclusive(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggered(self, QAction):
    """ triggered(self, QAction) [signal] """
    pass

class QApplication(QGuiApplication):
  """ QApplication(List[str]) """

  class ColorSpec(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CustomColor = None
  ManyColor = None
  NormalColor = None

  def __init__(self, Liststr=None):
    pass

  def aboutQt():
    """ aboutQt() """
    pass

  def aboutToQuit(self):
    """ aboutToQuit(self) [signal] """
    pass

  def activeModalWidget():
    """ activeModalWidget() -> QWidget """
    return QWidget()

  def activePopupWidget():
    """ activePopupWidget() -> QWidget """
    return QWidget()

  def activeWindow():
    """ activeWindow() -> QWidget """
    return QWidget()

  def addLibraryPath(str):
    """ addLibraryPath(str) """
    pass

  def alert(QWidget, arg0=None):
    """ alert(QWidget, msecs: int = 0) """
    pass

  def allWidgets():
    """ allWidgets() -> List[QWidget] """
    return None

  def allWindows():
    """ allWindows() -> List[QWindow] """
    return None

  def applicationDirPath():
    """ applicationDirPath() -> str """
    return ""

  def applicationDisplayName():
    """ applicationDisplayName() -> str """
    return ""

  def applicationDisplayNameChanged(self):
    """ applicationDisplayNameChanged(self) [signal] """
    pass

  def applicationFilePath():
    """ applicationFilePath() -> str """
    return ""

  def applicationName():
    """ applicationName() -> str """
    return ""

  def applicationPid():
    """ applicationPid() -> int """
    return 1

  def applicationState():
    """ applicationState() -> Qt.ApplicationState """
    return None

  def applicationStateChanged(self, arg0):
    """ applicationStateChanged(self, Qt.ApplicationState) [signal] """
    pass

  def applicationVersion():
    """ applicationVersion() -> str """
    return ""

  def arguments():
    """ arguments() -> List[str] """
    return ""

  def autoSipEnabled(self):
    """ autoSipEnabled(self) -> bool """
    return True

  def beep():
    """ beep() """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeOverrideCursor(UnionQCursor=None, Qt.CursorShape=None):
    """ changeOverrideCursor(Union[QCursor, Qt.CursorShape]) """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clipboard():
    """ clipboard() -> QClipboard """
    return QtGui.QClipboard()

  def closeAllWindows():
    """ closeAllWindows() """
    pass

  def closingDown():
    """ closingDown() -> bool """
    return True

  def colorSpec():
    """ colorSpec() -> int """
    return 1

  def commitDataRequest(self, QtGui.QSessionManager):
    """ commitDataRequest(self, QSessionManager) [signal] """
    pass

  def connectNotify():
    pass

  def cursorFlashTime():
    """ cursorFlashTime() -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def desktop():
    """ desktop() -> QDesktopWidget """
    return QDesktopWidget()

  def desktopFileName():
    """ desktopFileName() -> str """
    return ""

  def desktopSettingsAware():
    """ desktopSettingsAware() -> bool """
    return True

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClickInterval():
    """ doubleClickInterval() -> int """
    return 1

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventDispatcher():
    """ eventDispatcher() -> QAbstractEventDispatcher """
    return QtCore.QAbstractEventDispatcher()

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def exec():
    """ exec() -> int """
    return 1

  def exec_():
    """ exec_() -> int """
    return 1

  def exit(arg0=None):
    """ exit(returnCode: int = 0) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush():
    """ flush() """
    pass

  def focusChanged(self, QWidget, QWidget):
    """ focusChanged(self, QWidget, QWidget) [signal] """
    pass

  def focusObject():
    """ focusObject() -> QObject """
    return QtCore.QObject()

  def focusObjectChanged(self, QtCore.QObject):
    """ focusObjectChanged(self, QObject) [signal] """
    pass

  def focusWidget():
    """ focusWidget() -> QWidget """
    return QWidget()

  def focusWindow():
    """ focusWindow() -> QWindow """
    return QtGui.QWindow()

  def focusWindowChanged(self, QtGui.QWindow):
    """ focusWindowChanged(self, QWindow) [signal] """
    pass

  def font():
    """ font() -> QFont
    font(QWidget) -> QFont
    font(str) -> QFont """
    return QtGui.QFont()

  def fontChanged(self, QtGui.QFont):
    """ fontChanged(self, QFont) [signal] """
    pass

  def fontDatabaseChanged(self):
    """ fontDatabaseChanged(self) [signal] """
    pass

  def fontMetrics():
    """ fontMetrics() -> QFontMetrics """
    return QtGui.QFontMetrics()

  def globalStrut():
    """ globalStrut() -> QSize """
    return QtCore.QSize()

  def hasPendingEvents():
    """ hasPendingEvents() -> bool """
    return True

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def inputMethod():
    """ inputMethod() -> QInputMethod """
    return QtGui.QInputMethod()

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installNativeEventFilter(self, QtCore.QAbstractNativeEventFilter):
    """ installNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def installTranslator(QtCore.QTranslator):
    """ installTranslator(QTranslator) -> bool """
    return True

  def instance():
    """ instance() -> QCoreApplication """
    return QtCore.QCoreApplication()

  def isEffectEnabled(arg0):
    """ isEffectEnabled(Qt.UIEffect) -> bool """
    return True

  def isFallbackSessionManagementEnabled():
    """ isFallbackSessionManagementEnabled() -> bool """
    return True

  def isLeftToRight():
    """ isLeftToRight() -> bool """
    return True

  def isQuitLockEnabled():
    """ isQuitLockEnabled() -> bool """
    return True

  def isRightToLeft():
    """ isRightToLeft() -> bool """
    return True

  def isSavingSession(self):
    """ isSavingSession(self) -> bool """
    return True

  def isSessionRestored(self):
    """ isSessionRestored(self) -> bool """
    return True

  def isSetuidAllowed():
    """ isSetuidAllowed() -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyboardInputInterval():
    """ keyboardInputInterval() -> int """
    return 1

  def keyboardModifiers():
    """ keyboardModifiers() -> Qt.KeyboardModifiers """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastWindowClosed(self):
    """ lastWindowClosed(self) [signal] """
    pass

  def layoutDirection():
    """ layoutDirection() -> Qt.LayoutDirection """
    return None

  def layoutDirectionChanged(self, arg0):
    """ layoutDirectionChanged(self, Qt.LayoutDirection) [signal] """
    pass

  def libraryPaths():
    """ libraryPaths() -> List[str] """
    return ""

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def modalWindow():
    """ modalWindow() -> QWindow """
    return QtGui.QWindow()

  def mouseButtons():
    """ mouseButtons() -> Qt.MouseButtons """
    return None

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def notify(self, QtCore.QObject, QtCore.QEvent):
    """ notify(self, QObject, QEvent) -> bool """
    return True

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def organizationDomain():
    """ organizationDomain() -> str """
    return ""

  def organizationName():
    """ organizationName() -> str """
    return ""

  def overrideCursor():
    """ overrideCursor() -> QCursor """
    return QtGui.QCursor()

  def palette():
    """ palette() -> QPalette
    palette(QWidget) -> QPalette
    palette(str) -> QPalette """
    return QtGui.QPalette()

  def paletteChanged(self, QtGui.QPalette):
    """ paletteChanged(self, QPalette) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def platformName():
    """ platformName() -> str """
    return ""

  def postEvent(QtCore.QObject, QtCore.QEvent, arg0=None):
    """ postEvent(QObject, QEvent, priority: int = Qt.NormalEventPriority) """
    pass

  def primaryScreen():
    """ primaryScreen() -> QScreen """
    return QtGui.QScreen()

  def primaryScreenChanged(self, QtGui.QScreen):
    """ primaryScreenChanged(self, QScreen) [signal] """
    pass

  def processEvents(arg0=None, arg1=None):
    """ processEvents(flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents)
    processEvents(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def queryKeyboardModifiers():
    """ queryKeyboardModifiers() -> Qt.KeyboardModifiers """
    return None

  def quit():
    """ quit() """
    pass

  def quitOnLastWindowClosed():
    """ quitOnLastWindowClosed() -> bool """
    return True

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeLibraryPath(str):
    """ removeLibraryPath(str) """
    pass

  def removeNativeEventFilter(self, QtCore.QAbstractNativeEventFilter):
    """ removeNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def removePostedEvents(QtCore.QObject, arg0=None):
    """ removePostedEvents(QObject, eventType: int = 0) """
    pass

  def removeTranslator(QtCore.QTranslator):
    """ removeTranslator(QTranslator) -> bool """
    return True

  def restoreOverrideCursor():
    """ restoreOverrideCursor() """
    pass

  def saveStateRequest(self, QtGui.QSessionManager):
    """ saveStateRequest(self, QSessionManager) [signal] """
    pass

  def screenAdded(self, QtGui.QScreen):
    """ screenAdded(self, QScreen) [signal] """
    pass

  def screenAt(QtCore.QPoint):
    """ screenAt(QPoint) -> QScreen """
    return QtGui.QScreen()

  def screenRemoved(self, QtGui.QScreen):
    """ screenRemoved(self, QScreen) [signal] """
    pass

  def screens():
    """ screens() -> List[QScreen] """
    return None

  def sendEvent(QtCore.QObject, QtCore.QEvent):
    """ sendEvent(QObject, QEvent) -> bool """
    return True

  def sendPostedEvents(arg0=None, arg1=None):
    """ sendPostedEvents(receiver: QObject = None, eventType: int = 0) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def sessionId(self):
    """ sessionId(self) -> str """
    return ""

  def sessionKey(self):
    """ sessionKey(self) -> str """
    return ""

  def setActiveWindow(QWidget):
    """ setActiveWindow(QWidget) """
    pass

  def setApplicationDisplayName(str):
    """ setApplicationDisplayName(str) """
    pass

  def setApplicationName(str):
    """ setApplicationName(str) """
    pass

  def setApplicationVersion(str):
    """ setApplicationVersion(str) """
    pass

  def setAttribute(arg0, arg1=None):
    """ setAttribute(Qt.ApplicationAttribute, on: bool = True) """
    pass

  def setAutoSipEnabled(self, bool):
    """ setAutoSipEnabled(self, bool) """
    pass

  def setColorSpec(int):
    """ setColorSpec(int) """
    pass

  def setCursorFlashTime(int):
    """ setCursorFlashTime(int) """
    pass

  def setDesktopFileName(str):
    """ setDesktopFileName(str) """
    pass

  def setDesktopSettingsAware(bool):
    """ setDesktopSettingsAware(bool) """
    pass

  def setDoubleClickInterval(int):
    """ setDoubleClickInterval(int) """
    pass

  def setEffectEnabled(arg0, arg1=None):
    """ setEffectEnabled(Qt.UIEffect, enabled: bool = True) """
    pass

  def setEventDispatcher(QtCore.QAbstractEventDispatcher):
    """ setEventDispatcher(QAbstractEventDispatcher) """
    pass

  def setFallbackSessionManagementEnabled(bool):
    """ setFallbackSessionManagementEnabled(bool) """
    pass

  def setFont(QtGui.QFont, arg0=None):
    """ setFont(QFont, className: str = None) """
    pass

  def setGlobalStrut(QtCore.QSize):
    """ setGlobalStrut(QSize) """
    pass

  def setKeyboardInputInterval(int):
    """ setKeyboardInputInterval(int) """
    pass

  def setLayoutDirection(arg0):
    """ setLayoutDirection(Qt.LayoutDirection) """
    pass

  def setLibraryPaths(Iterablestr=None):
    """ setLibraryPaths(Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrganizationDomain(str):
    """ setOrganizationDomain(str) """
    pass

  def setOrganizationName(str):
    """ setOrganizationName(str) """
    pass

  def setOverrideCursor(UnionQCursor=None, Qt.CursorShape=None):
    """ setOverrideCursor(Union[QCursor, Qt.CursorShape]) """
    pass

  def setPalette(QtGui.QPalette, arg0=None):
    """ setPalette(QPalette, className: str = None) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setQuitLockEnabled(bool):
    """ setQuitLockEnabled(bool) """
    pass

  def setQuitOnLastWindowClosed(bool):
    """ setQuitOnLastWindowClosed(bool) """
    pass

  def setSetuidAllowed(bool):
    """ setSetuidAllowed(bool) """
    pass

  def setStartDragDistance(int):
    """ setStartDragDistance(int) """
    pass

  def setStartDragTime(int):
    """ setStartDragTime(int) """
    pass

  def setStyle(QStyle):
    """ setStyle(QStyle)
    setStyle(str) -> QStyle """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setWheelScrollLines(int):
    """ setWheelScrollLines(int) """
    pass

  def setWindowIcon(QtGui.QIcon):
    """ setWindowIcon(QIcon) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startDragDistance():
    """ startDragDistance() -> int """
    return 1

  def startDragTime():
    """ startDragTime() -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startingUp():
    """ startingUp() -> bool """
    return True

  staticMetaObject = None

  def style():
    """ style() -> QStyle """
    return QStyle()

  def styleHints():
    """ styleHints() -> QStyleHints """
    return QtGui.QStyleHints()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def sync():
    """ sync() """
    pass

  def testAttribute(arg0):
    """ testAttribute(Qt.ApplicationAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def topLevelAt(QtCore.QPoint):
    """ topLevelAt(QPoint) -> QWidget
    topLevelAt(int, int) -> QWidget """
    return QWidget()

  def topLevelWidgets():
    """ topLevelWidgets() -> List[QWidget] """
    return None

  def topLevelWindows():
    """ topLevelWindows() -> List[QWindow] """
    return None

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def translate(str, str, arg0=None, arg1=None):
    """ translate(str, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def wheelScrollLines():
    """ wheelScrollLines() -> int """
    return 1

  def widgetAt(QtCore.QPoint):
    """ widgetAt(QPoint) -> QWidget
    widgetAt(int, int) -> QWidget """
    return QWidget()

  def windowIcon():
    """ windowIcon() -> QIcon """
    return QtGui.QIcon()

class QBoxLayout(QLayout):
  """ QBoxLayout(QBoxLayout.Direction, parent: QWidget = None) """

  BottomToTop = None

  class Direction(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Down = None
  LeftToRight = None
  RightToLeft = None
  SetDefaultConstraint = None
  SetFixedSize = None
  SetMaximumSize = None
  SetMinAndMaxSize = None
  SetMinimumSize = None
  SetNoConstraint = None

  class SizeConstraint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TopToBottom = None
  Up = None

  def __init__(self, arg0, arg1=None):
    pass

  def activate(self):
    """ activate(self) -> bool """
    return True

  def addChildLayout():
    pass

  def addChildWidget():
    pass

  def addItem(self, QLayoutItem):
    """ addItem(self, QLayoutItem) """
    pass

  def addLayout(self, QLayout, arg0=None):
    """ addLayout(self, QLayout, stretch: int = 0) """
    pass

  def addSpacerItem(self, QSpacerItem):
    """ addSpacerItem(self, QSpacerItem) """
    pass

  def addSpacing(self, int):
    """ addSpacing(self, int) """
    pass

  def addStretch(self, arg0=None):
    """ addStretch(self, stretch: int = 0) """
    pass

  def addStrut(self, int):
    """ addStrut(self, int) """
    pass

  def addWidget(self, QWidget, arg0=None, arg1=None, arg2=None):
    """ addWidget(self, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def alignmentRect():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closestAcceptableSize(QWidget, QtCore.QSize):
    """ closestAcceptableSize(QWidget, QSize) -> QSize """
    return QtCore.QSize()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QBoxLayout.Direction """
    return QBoxLayout.Direction()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int
    indexOf(self, QLayoutItem) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def insertItem(self, int, QLayoutItem):
    """ insertItem(self, int, QLayoutItem) """
    pass

  def insertLayout(self, int, QLayout, arg0=None):
    """ insertLayout(self, int, QLayout, stretch: int = 0) """
    pass

  def insertSpacerItem(self, int, QSpacerItem):
    """ insertSpacerItem(self, int, QSpacerItem) """
    pass

  def insertSpacing(self, int, int):
    """ insertSpacing(self, int, int) """
    pass

  def insertStretch(self, int, arg0=None):
    """ insertStretch(self, int, stretch: int = 0) """
    pass

  def insertWidget(self, int, QWidget, arg0=None, arg1=None, arg2=None):
    """ insertWidget(self, int, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def menuBar(self):
    """ menuBar(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QLayoutItem):
    """ removeItem(self, QLayoutItem) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def replaceWidget(self, QWidget, QWidget, arg0=None, arg1=None):
    """ replaceWidget(self, QWidget, QWidget, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QLayoutItem """
    return QLayoutItem()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAlignment(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    return True

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QBoxLayout.Direction) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def setMenuBar(self, QWidget):
    """ setMenuBar(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSizeConstraint(self, arg0):
    """ setSizeConstraint(self, QLayout.SizeConstraint) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setStretch(self, int, int):
    """ setStretch(self, int, int) """
    pass

  def setStretchFactor(self, QWidget, int):
    """ setStretchFactor(self, QWidget, int) -> bool
    setStretchFactor(self, QLayout, int) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeConstraint(self):
    """ sizeConstraint(self) -> QLayout.SizeConstraint """
    return QLayout.SizeConstraint()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stretch(self, int):
    """ stretch(self, int) -> int """
    return 1

  def takeAt(self, int):
    """ takeAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalHeightForWidth(self, int):
    """ totalHeightForWidth(self, int) -> int """
    return 1

  def totalMaximumSize(self):
    """ totalMaximumSize(self) -> QSize """
    return QtCore.QSize()

  def totalMinimumSize(self):
    """ totalMinimumSize(self) -> QSize """
    return QtCore.QSize()

  def totalSizeHint(self):
    """ totalSizeHint(self) -> QSize """
    return QtCore.QSize()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def widgetEvent():
    pass

class QButtonGroup(QObject):
  """ QButtonGroup(parent: QObject = None) """

  def __init__(self, arg0=None):
    pass

  def addButton(self, QAbstractButton, arg0=None):
    """ addButton(self, QAbstractButton, id: int = -1) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def button(self, int):
    """ button(self, int) -> QAbstractButton """
    return QAbstractButton()

  def buttonClicked(self, QAbstractButton):
    """ buttonClicked(self, QAbstractButton) [signal]
    buttonClicked(self, int) [signal] """
    pass

  def buttonPressed(self, QAbstractButton):
    """ buttonPressed(self, QAbstractButton) [signal]
    buttonPressed(self, int) [signal] """
    pass

  def buttonReleased(self, QAbstractButton):
    """ buttonReleased(self, QAbstractButton) [signal]
    buttonReleased(self, int) [signal] """
    pass

  def buttonToggled(self, QAbstractButton, bool):
    """ buttonToggled(self, QAbstractButton, bool) [signal]
    buttonToggled(self, int, bool) [signal] """
    pass

  def buttons(self):
    """ buttons(self) -> List[QAbstractButton] """
    return ""

  def checkedButton(self):
    """ checkedButton(self) -> QAbstractButton """
    return QAbstractButton()

  def checkedId(self):
    """ checkedId(self) -> int """
    return 1

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def exclusive(self):
    """ exclusive(self) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def id(self, QAbstractButton):
    """ id(self, QAbstractButton) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeButton(self, QAbstractButton):
    """ removeButton(self, QAbstractButton) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setExclusive(self, bool):
    """ setExclusive(self, bool) """
    pass

  def setId(self, QAbstractButton, int):
    """ setId(self, QAbstractButton, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QCalendarWidget(QWidget):
  """ QCalendarWidget(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None

  class HorizontalHeaderFormat(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ISOWeekNumbers = None
  IgnoreMask = None
  LongDayNames = None
  NoHorizontalHeader = None
  NoSelection = None
  NoVerticalHeader = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  class SelectionMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ShortDayNames = None
  SingleLetterDayNames = None
  SingleSelection = None

  class VerticalHeaderFormat(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, arg0, arg1):
    """ activated(self, Union[QDate, datetime.date]) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clicked(self, arg0, arg1):
    """ clicked(self, Union[QDate, datetime.date]) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentPageChanged(self, int, int):
    """ currentPageChanged(self, int, int) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dateEditAcceptDelay(self):
    """ dateEditAcceptDelay(self) -> int """
    return 1

  def dateTextFormat(self):
    """ dateTextFormat(self) -> Dict[QDate, QTextCharFormat]
    dateTextFormat(self, Union[QDate, datetime.date]) -> QTextCharFormat """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def firstDayOfWeek(self):
    """ firstDayOfWeek(self) -> Qt.DayOfWeek """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def headerTextFormat(self):
    """ headerTextFormat(self) -> QTextCharFormat """
    return QtGui.QTextCharFormat()

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalHeaderFormat(self):
    """ horizontalHeaderFormat(self) -> QCalendarWidget.HorizontalHeaderFormat """
    return QCalendarWidget.HorizontalHeaderFormat()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isDateEditEnabled(self):
    """ isDateEditEnabled(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isGridVisible(self):
    """ isGridVisible(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isNavigationBarVisible(self):
    """ isNavigationBarVisible(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumDate(self):
    """ maximumDate(self) -> QDate """
    return QtCore.QDate()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumDate(self):
    """ minimumDate(self) -> QDate """
    return QtCore.QDate()

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def monthShown(self):
    """ monthShown(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintCell(self, QtGui.QPainter, QtCore.QRect, UnionQDate=None, datetime.date=None):
    """ paintCell(self, QPainter, QRect, Union[QDate, datetime.date]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectedDate(self):
    """ selectedDate(self) -> QDate """
    return QtCore.QDate()

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QCalendarWidget.SelectionMode """
    return QCalendarWidget.SelectionMode()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentPage(self, int, int):
    """ setCurrentPage(self, int, int) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDateEditAcceptDelay(self, int):
    """ setDateEditAcceptDelay(self, int) """
    pass

  def setDateEditEnabled(self, bool):
    """ setDateEditEnabled(self, bool) """
    pass

  def setDateRange(self, UnionQDate=None, datetime.date=None, UnionQDate=None, datetime.date=None):
    """ setDateRange(self, Union[QDate, datetime.date], Union[QDate, datetime.date]) """
    pass

  def setDateTextFormat(self, UnionQDate=None, datetime.date=None, QTextCharFormat=None):
    """ setDateTextFormat(self, Union[QDate, datetime.date], QTextCharFormat) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFirstDayOfWeek(self, arg0):
    """ setFirstDayOfWeek(self, Qt.DayOfWeek) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGridVisible(self, bool):
    """ setGridVisible(self, bool) """
    pass

  def setHeaderTextFormat(self, QtGui.QTextCharFormat):
    """ setHeaderTextFormat(self, QTextCharFormat) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalHeaderFormat(self, arg0):
    """ setHorizontalHeaderFormat(self, QCalendarWidget.HorizontalHeaderFormat) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumDate(self, UnionQDate=None, datetime.date=None):
    """ setMaximumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumDate(self, UnionQDate=None, datetime.date=None):
    """ setMinimumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setNavigationBarVisible(self, bool):
    """ setNavigationBarVisible(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSelectedDate(self, UnionQDate=None, datetime.date=None):
    """ setSelectedDate(self, Union[QDate, datetime.date]) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QCalendarWidget.SelectionMode) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalHeaderFormat(self, arg0):
    """ setVerticalHeaderFormat(self, QCalendarWidget.VerticalHeaderFormat) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWeekdayTextFormat(self, arg0, QtGui.QTextCharFormat):
    """ setWeekdayTextFormat(self, Qt.DayOfWeek, QTextCharFormat) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNextMonth(self):
    """ showNextMonth(self) """
    pass

  def showNextYear(self):
    """ showNextYear(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showPreviousMonth(self):
    """ showPreviousMonth(self) """
    pass

  def showPreviousYear(self):
    """ showPreviousYear(self) """
    pass

  def showSelectedDate(self):
    """ showSelectedDate(self) """
    pass

  def showToday(self):
    """ showToday(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateCell(self, UnionQDate=None, datetime.date=None):
    """ updateCell(self, Union[QDate, datetime.date]) """
    pass

  def updateCells(self):
    """ updateCells(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalHeaderFormat(self):
    """ verticalHeaderFormat(self) -> QCalendarWidget.VerticalHeaderFormat """
    return QCalendarWidget.VerticalHeaderFormat()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def weekdayTextFormat(self, arg0):
    """ weekdayTextFormat(self, Qt.DayOfWeek) -> QTextCharFormat """
    return QtGui.QTextCharFormat()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

  def yearShown(self):
    """ yearShown(self) -> int """
    return 1

class QCheckBox(QAbstractButton):
  """ QCheckBox(parent: QWidget = None)
  QCheckBox(str, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def animateClick(self, arg0=None):
    """ animateClick(self, msecs: int = 100) """
    pass

  def autoExclusive(self):
    """ autoExclusive(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def autoRepeatDelay(self):
    """ autoRepeatDelay(self) -> int """
    return 1

  def autoRepeatInterval(self):
    """ autoRepeatInterval(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def checkState(self):
    """ checkState(self) -> Qt.CheckState """
    return None

  def checkStateSet(self):
    """ checkStateSet(self) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def click(self):
    """ click(self) """
    pass

  def clicked(self, arg0=None):
    """ clicked(self, checked: bool = False) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def group(self):
    """ group(self) -> QButtonGroup """
    return QButtonGroup()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hitButton(self, QtCore.QPoint):
    """ hitButton(self, QPoint) -> bool """
    return True

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionButton):
    """ initStyleOption(self, QStyleOptionButton) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isDown(self):
    """ isDown(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isTristate(self):
    """ isTristate(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextCheckState(self):
    """ nextCheckState(self) """
    pass

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self):
    """ pressed(self) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def released(self):
    """ released(self) [signal] """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoExclusive(self, bool):
    """ setAutoExclusive(self, bool) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setAutoRepeatDelay(self, int):
    """ setAutoRepeatDelay(self, int) """
    pass

  def setAutoRepeatInterval(self, int):
    """ setAutoRepeatInterval(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckState(self, arg0):
    """ setCheckState(self, Qt.CheckState) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDown(self, bool):
    """ setDown(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTristate(self, arg0=None):
    """ setTristate(self, on: bool = True) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def stateChanged(self, int):
    """ stateChanged(self, int) [signal] """
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QColorDialog(QDialog):
  """ QColorDialog(parent: QWidget = None)
  QColorDialog(Union[QColor, Qt.GlobalColor, QGradient], parent: QWidget = None) """

  Accepted = None

  class ColorDialogOption(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ColorDialogOptions(simplewrapper):
    """ QColorDialog.ColorDialogOptions()
    QColorDialog.ColorDialogOptions(Union[QColorDialog.ColorDialogOptions, QColorDialog.ColorDialogOption])
    QColorDialog.ColorDialogOptions(QColorDialog.ColorDialogOptions) """

    def __init__(self):
      pass

  class DialogCode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DontUseNativeDialog = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  NoButtons = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rejected = None
  ShowAlphaChannel = None

  def __init__(self, arg0=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def colorSelected(self, arg0, arg1, arg2):
    """ colorSelected(self, Union[QColor, Qt.GlobalColor, QGradient]) [signal] """
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentColor(self):
    """ currentColor(self) -> QColor """
    return QtGui.QColor()

  def currentColorChanged(self, arg0, arg1, arg2):
    """ currentColorChanged(self, Union[QColor, Qt.GlobalColor, QGradient]) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customColor(int):
    """ customColor(int) -> QColor """
    return QtGui.QColor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customCount():
    """ customCount() -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter():
    pass

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getColor(arg0=None, Qt.GlobalColor=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None):
    """ getColor(initial: Union[QColor, Qt.GlobalColor, QGradient] = Qt.white, parent: QWidget = None, title: str = '', options: Union[QColorDialog.ColorDialogOptions, QColorDialog.ColorDialogOption] = QColorDialog.ColorDialogOptions()) -> QColor """
    return QtGui.QColor()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self)
    open(self, PYQT_SLOT) """
    pass

  def options(self):
    """ options(self) -> QColorDialog.ColorDialogOptions """
    return QColorDialog.ColorDialogOptions()

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectedColor(self):
    """ selectedColor(self) -> QColor """
    return QtGui.QColor()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setCurrentColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setCustomColor(int, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setCustomColor(int, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOption(self, arg0, arg1=None):
    """ setOption(self, QColorDialog.ColorDialogOption, on: bool = True) """
    pass

  def setOptions(self, UnionQColorDialog.ColorDialogOptions=None, QColorDialog.ColorDialogOption=None):
    """ setOptions(self, Union[QColorDialog.ColorDialogOptions, QColorDialog.ColorDialogOption]) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStandardColor(int, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setStandardColor(int, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def standardColor(int):
    """ standardColor(int) -> QColor """
    return QtGui.QColor()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def testOption(self, arg0):
    """ testOption(self, QColorDialog.ColorDialogOption) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QColumnView(QAbstractItemView):
  """ QColumnView(parent: QWidget = None) """

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  HLine = None
  IgnoreMask = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SingleSelection = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QtCore.QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def columnWidths(self):
    """ columnWidths(self) -> List[int] """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createColumn(self, QtCore.QModelIndex):
    """ createColumn(self, QModelIndex) -> QAbstractItemView """
    return QAbstractItemView()

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, QtCore.QModelIndex, QtCore.QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged():
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event():
    pass

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def initializeColumn(self, QAbstractItemView):
    """ initializeColumn(self, QAbstractItemView) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden(self, QtCore.QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QtCore.QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return QtCore.QModelIndex()

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QtCore.QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previewWidget(self):
    """ previewWidget(self) -> QWidget """
    return QWidget()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def resizeGripsVisible(self):
    """ resizeGripsVisible(self) -> bool """
    return True

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rowsAboutToBeRemoved():
    pass

  def rowsInserted(self, QtCore.QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes():
    pass

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged():
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setColumnWidths(self, Iterableint=None):
    """ setColumnWidths(self, Iterable[int]) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPreviewWidget(self, QWidget):
    """ setPreviewWidget(self, QWidget) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResizeGripsVisible(self, bool):
    """ setResizeGripsVisible(self, bool) """
    pass

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setSelection(self, QtCore.QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries():
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatePreviewWidget(self, QtCore.QModelIndex):
    """ updatePreviewWidget(self, QModelIndex) [signal] """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection(self, QtCore.QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QComboBox(QWidget):
  """ QComboBox(parent: QWidget = None) """

  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AdjustToMinimumContentsLength = None
  AdjustToMinimumContentsLengthWithIcon = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  InsertAfterCurrent = None
  InsertAlphabetically = None
  InsertAtBottom = None
  InsertAtCurrent = None
  InsertAtTop = None
  InsertBeforeCurrent = None

  class InsertPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoInsert = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  class SizeAdjustPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, int):
    """ activated(self, int) [signal]
    activated(self, str) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addItem(self, str, arg0=None):
    """ addItem(self, str, userData: Any = None)
    addItem(self, QIcon, str, userData: Any = None) """
    pass

  def addItems(self, Iterablestr=None):
    """ addItems(self, Iterable[str]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearEditText(self):
    """ clearEditText(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def completer(self):
    """ completer(self) -> QCompleter """
    return QCompleter()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentData(self, arg0=None):
    """ currentData(self, role: int = Qt.ItemDataRole.UserRole) -> Any """
    return None

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def currentIndexChanged(self, int):
    """ currentIndexChanged(self, int) [signal]
    currentIndexChanged(self, str) [signal] """
    pass

  def currentText(self):
    """ currentText(self) -> str """
    return ""

  def currentTextChanged(self, str):
    """ currentTextChanged(self, str) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duplicatesEnabled(self):
    """ duplicatesEnabled(self) -> bool """
    return True

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editTextChanged(self, str):
    """ editTextChanged(self, str) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findData(self, Any, arg0=None, arg1=None, arg2=None):
    """ findData(self, Any, role: int = Qt.UserRole, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchExactly|Qt.MatchCaseSensitive) -> int """
    return 1

  def findText(self, str, arg0=None, arg1=None):
    """ findText(self, str, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchExactly|Qt.MatchCaseSensitive) -> int """
    return 1

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def hidePopup(self):
    """ hidePopup(self) """
    pass

  def highlighted(self, int):
    """ highlighted(self, int) [signal]
    highlighted(self, str) [signal] """
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionComboBox):
    """ initStyleOption(self, QStyleOptionComboBox) """
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any
    inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertItem(self, int, str, arg0=None):
    """ insertItem(self, int, str, userData: Any = None)
    insertItem(self, int, QIcon, str, userData: Any = None) """
    pass

  def insertItems(self, int, Iterablestr=None):
    """ insertItems(self, int, Iterable[str]) """
    pass

  def insertPolicy(self):
    """ insertPolicy(self) -> QComboBox.InsertPolicy """
    return QComboBox.InsertPolicy()

  def insertSeparator(self, int):
    """ insertSeparator(self, int) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEditable(self):
    """ isEditable(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemData(self, int, arg0=None):
    """ itemData(self, int, role: int = Qt.UserRole) -> Any """
    return None

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemIcon(self, int):
    """ itemIcon(self, int) -> QIcon """
    return QtGui.QIcon()

  def itemText(self, int):
    """ itemText(self, int) -> str """
    return ""

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit(self):
    """ lineEdit(self) -> QLineEdit """
    return QLineEdit()

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maxCount(self):
    """ maxCount(self) -> int """
    return 1

  def maxVisibleItems(self):
    """ maxVisibleItems(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumContentsLength(self):
    """ minimumContentsLength(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def modelColumn(self):
    """ modelColumn(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, int):
    """ removeItem(self, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootModelIndex(self):
    """ rootModelIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCompleter(self, QCompleter):
    """ setCompleter(self, QCompleter) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCurrentText(self, str):
    """ setCurrentText(self, str) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDuplicatesEnabled(self, bool):
    """ setDuplicatesEnabled(self, bool) """
    pass

  def setEditText(self, str):
    """ setEditText(self, str) """
    pass

  def setEditable(self, bool):
    """ setEditable(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInsertPolicy(self, arg0):
    """ setInsertPolicy(self, QComboBox.InsertPolicy) """
    pass

  def setItemData(self, int, Any, arg0=None):
    """ setItemData(self, int, Any, role: int = Qt.ItemDataRole.UserRole) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemIcon(self, int, QtGui.QIcon):
    """ setItemIcon(self, int, QIcon) """
    pass

  def setItemText(self, int, str):
    """ setItemText(self, int, str) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit(self, QLineEdit):
    """ setLineEdit(self, QLineEdit) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaxCount(self, int):
    """ setMaxCount(self, int) """
    pass

  def setMaxVisibleItems(self, int):
    """ setMaxVisibleItems(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumContentsLength(self, int):
    """ setMinimumContentsLength(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setModelColumn(self, int):
    """ setModelColumn(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRootModelIndex(self, QtCore.QModelIndex):
    """ setRootModelIndex(self, QModelIndex) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QComboBox.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValidator(self, QtGui.QValidator):
    """ setValidator(self, QValidator) """
    pass

  def setView(self, QAbstractItemView):
    """ setView(self, QAbstractItemView) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showPopup(self):
    """ showPopup(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QComboBox.SizeAdjustPolicy """
    return QComboBox.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validator(self):
    """ validator(self) -> QValidator """
    return QtGui.QValidator()

  def view(self):
    """ view(self) -> QAbstractItemView """
    return QAbstractItemView()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QCommandLinkButton(QPushButton):
  """ QCommandLinkButton(parent: QWidget = None)
  QCommandLinkButton(str, parent: QWidget = None)
  QCommandLinkButton(str, str, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def animateClick(self, arg0=None):
    """ animateClick(self, msecs: int = 100) """
    pass

  def autoDefault(self):
    """ autoDefault(self) -> bool """
    return True

  def autoExclusive(self):
    """ autoExclusive(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def autoRepeatDelay(self):
    """ autoRepeatDelay(self) -> int """
    return 1

  def autoRepeatInterval(self):
    """ autoRepeatInterval(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def checkStateSet():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def click(self):
    """ click(self) """
    pass

  def clicked(self, arg0=None):
    """ clicked(self, checked: bool = False) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def description(self):
    """ description(self) -> str """
    return ""

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def group(self):
    """ group(self) -> QButtonGroup """
    return QButtonGroup()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hitButton():
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isDefault(self):
    """ isDefault(self) -> bool """
    return True

  def isDown(self):
    """ isDown(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFlat(self):
    """ isFlat(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def menu(self):
    """ menu(self) -> QMenu """
    return QMenu()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextCheckState():
    pass

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self):
    """ pressed(self) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def released(self):
    """ released(self) [signal] """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoDefault(self, bool):
    """ setAutoDefault(self, bool) """
    pass

  def setAutoExclusive(self, bool):
    """ setAutoExclusive(self, bool) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setAutoRepeatDelay(self, int):
    """ setAutoRepeatDelay(self, int) """
    pass

  def setAutoRepeatInterval(self, int):
    """ setAutoRepeatInterval(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefault(self, bool):
    """ setDefault(self, bool) """
    pass

  def setDescription(self, str):
    """ setDescription(self, str) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDown(self, bool):
    """ setDown(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFlat(self, bool):
    """ setFlat(self, bool) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMenu(self, QMenu):
    """ setMenu(self, QMenu) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMenu(self):
    """ showMenu(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QCommonStyle(QStyle):
  """ QCommonStyle() """

  CC_ComboBox = None
  CC_CustomBase = None
  CC_Dial = None
  CC_GroupBox = None
  CC_MdiControls = None
  CC_ScrollBar = None
  CC_Slider = None
  CC_SpinBox = None
  CC_TitleBar = None
  CC_ToolButton = None
  CE_CheckBox = None
  CE_CheckBoxLabel = None
  CE_ColumnViewGrip = None
  CE_ComboBoxLabel = None
  CE_CustomBase = None
  CE_DockWidgetTitle = None
  CE_FocusFrame = None
  CE_Header = None
  CE_HeaderEmptyArea = None
  CE_HeaderLabel = None
  CE_HeaderSection = None
  CE_ItemViewItem = None
  CE_MenuBarEmptyArea = None
  CE_MenuBarItem = None
  CE_MenuEmptyArea = None
  CE_MenuHMargin = None
  CE_MenuItem = None
  CE_MenuScroller = None
  CE_MenuTearoff = None
  CE_MenuVMargin = None
  CE_ProgressBar = None
  CE_ProgressBarContents = None
  CE_ProgressBarGroove = None
  CE_ProgressBarLabel = None
  CE_PushButton = None
  CE_PushButtonBevel = None
  CE_PushButtonLabel = None
  CE_RadioButton = None
  CE_RadioButtonLabel = None
  CE_RubberBand = None
  CE_ScrollBarAddLine = None
  CE_ScrollBarAddPage = None
  CE_ScrollBarFirst = None
  CE_ScrollBarLast = None
  CE_ScrollBarSlider = None
  CE_ScrollBarSubLine = None
  CE_ScrollBarSubPage = None
  CE_ShapedFrame = None
  CE_SizeGrip = None
  CE_Splitter = None
  CE_TabBarTab = None
  CE_TabBarTabLabel = None
  CE_TabBarTabShape = None
  CE_ToolBar = None
  CE_ToolBoxTab = None
  CE_ToolBoxTabLabel = None
  CE_ToolBoxTabShape = None
  CE_ToolButtonLabel = None
  CT_CheckBox = None
  CT_ComboBox = None
  CT_CustomBase = None
  CT_DialogButtons = None
  CT_GroupBox = None
  CT_HeaderSection = None
  CT_ItemViewItem = None
  CT_LineEdit = None
  CT_MdiControls = None
  CT_Menu = None
  CT_MenuBar = None
  CT_MenuBarItem = None
  CT_MenuItem = None
  CT_ProgressBar = None
  CT_PushButton = None
  CT_RadioButton = None
  CT_ScrollBar = None
  CT_SizeGrip = None
  CT_Slider = None
  CT_SpinBox = None
  CT_Splitter = None
  CT_TabBarTab = None
  CT_TabWidget = None
  CT_ToolButton = None

  class ComplexControl(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ContentsType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ControlElement(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PE_CustomBase = None
  PE_Frame = None
  PE_FrameButtonBevel = None
  PE_FrameButtonTool = None
  PE_FrameDefaultButton = None
  PE_FrameDockWidget = None
  PE_FrameFocusRect = None
  PE_FrameGroupBox = None
  PE_FrameLineEdit = None
  PE_FrameMenu = None
  PE_FrameStatusBar = None
  PE_FrameStatusBarItem = None
  PE_FrameTabBarBase = None
  PE_FrameTabWidget = None
  PE_FrameWindow = None
  PE_IndicatorArrowDown = None
  PE_IndicatorArrowLeft = None
  PE_IndicatorArrowRight = None
  PE_IndicatorArrowUp = None
  PE_IndicatorBranch = None
  PE_IndicatorButtonDropDown = None
  PE_IndicatorCheckBox = None
  PE_IndicatorColumnViewArrow = None
  PE_IndicatorDockWidgetResizeHandle = None
  PE_IndicatorHeaderArrow = None
  PE_IndicatorItemViewItemCheck = None
  PE_IndicatorItemViewItemDrop = None
  PE_IndicatorMenuCheckMark = None
  PE_IndicatorProgressChunk = None
  PE_IndicatorRadioButton = None
  PE_IndicatorSpinDown = None
  PE_IndicatorSpinMinus = None
  PE_IndicatorSpinPlus = None
  PE_IndicatorSpinUp = None
  PE_IndicatorTabClose = None
  PE_IndicatorTabTear = None
  PE_IndicatorTabTearLeft = None
  PE_IndicatorTabTearRight = None
  PE_IndicatorToolBarHandle = None
  PE_IndicatorToolBarSeparator = None
  PE_IndicatorViewItemCheck = None
  PE_PanelButtonBevel = None
  PE_PanelButtonCommand = None
  PE_PanelButtonTool = None
  PE_PanelItemViewItem = None
  PE_PanelItemViewRow = None
  PE_PanelLineEdit = None
  PE_PanelMenu = None
  PE_PanelMenuBar = None
  PE_PanelScrollAreaCorner = None
  PE_PanelStatusBar = None
  PE_PanelTipLabel = None
  PE_PanelToolBar = None
  PE_Widget = None
  PM_ButtonDefaultIndicator = None
  PM_ButtonIconSize = None
  PM_ButtonMargin = None
  PM_ButtonShiftHorizontal = None
  PM_ButtonShiftVertical = None
  PM_CheckBoxLabelSpacing = None
  PM_ComboBoxFrameWidth = None
  PM_CustomBase = None
  PM_DefaultChildMargin = None
  PM_DefaultFrameWidth = None
  PM_DefaultLayoutSpacing = None
  PM_DefaultTopLevelMargin = None
  PM_DialogButtonsButtonHeight = None
  PM_DialogButtonsButtonWidth = None
  PM_DialogButtonsSeparator = None
  PM_DockWidgetFrameWidth = None
  PM_DockWidgetHandleExtent = None
  PM_DockWidgetSeparatorExtent = None
  PM_DockWidgetTitleBarButtonMargin = None
  PM_DockWidgetTitleMargin = None
  PM_ExclusiveIndicatorHeight = None
  PM_ExclusiveIndicatorWidth = None
  PM_FocusFrameHMargin = None
  PM_FocusFrameVMargin = None
  PM_HeaderDefaultSectionSizeHorizontal = None
  PM_HeaderDefaultSectionSizeVertical = None
  PM_HeaderGripMargin = None
  PM_HeaderMargin = None
  PM_HeaderMarkSize = None
  PM_IconViewIconSize = None
  PM_IndicatorHeight = None
  PM_IndicatorWidth = None
  PM_LargeIconSize = None
  PM_LayoutBottomMargin = None
  PM_LayoutHorizontalSpacing = None
  PM_LayoutLeftMargin = None
  PM_LayoutRightMargin = None
  PM_LayoutTopMargin = None
  PM_LayoutVerticalSpacing = None
  PM_ListViewIconSize = None
  PM_MDIFrameWidth = None
  PM_MDIMinimizedWidth = None
  PM_MaximumDragDistance = None
  PM_MdiSubWindowFrameWidth = None
  PM_MdiSubWindowMinimizedWidth = None
  PM_MenuBarHMargin = None
  PM_MenuBarItemSpacing = None
  PM_MenuBarPanelWidth = None
  PM_MenuBarVMargin = None
  PM_MenuButtonIndicator = None
  PM_MenuDesktopFrameWidth = None
  PM_MenuHMargin = None
  PM_MenuPanelWidth = None
  PM_MenuScrollerHeight = None
  PM_MenuTearoffHeight = None
  PM_MenuVMargin = None
  PM_MessageBoxIconSize = None
  PM_ProgressBarChunkWidth = None
  PM_RadioButtonLabelSpacing = None
  PM_ScrollBarExtent = None
  PM_ScrollBarSliderMin = None
  PM_ScrollView_ScrollBarOverlap = None
  PM_ScrollView_ScrollBarSpacing = None
  PM_SizeGripSize = None
  PM_SliderControlThickness = None
  PM_SliderLength = None
  PM_SliderSpaceAvailable = None
  PM_SliderThickness = None
  PM_SliderTickmarkOffset = None
  PM_SmallIconSize = None
  PM_SpinBoxFrameWidth = None
  PM_SpinBoxSliderHeight = None
  PM_SplitterWidth = None
  PM_SubMenuOverlap = None
  PM_TabBarBaseHeight = None
  PM_TabBarBaseOverlap = None
  PM_TabBarIconSize = None
  PM_TabBarScrollButtonWidth = None
  PM_TabBarTabHSpace = None
  PM_TabBarTabOverlap = None
  PM_TabBarTabShiftHorizontal = None
  PM_TabBarTabShiftVertical = None
  PM_TabBarTabVSpace = None
  PM_TabBar_ScrollButtonOverlap = None
  PM_TabCloseIndicatorHeight = None
  PM_TabCloseIndicatorWidth = None
  PM_TextCursorWidth = None
  PM_TitleBarButtonIconSize = None
  PM_TitleBarButtonSize = None
  PM_TitleBarHeight = None
  PM_ToolBarExtensionExtent = None
  PM_ToolBarFrameWidth = None
  PM_ToolBarHandleExtent = None
  PM_ToolBarIconSize = None
  PM_ToolBarItemMargin = None
  PM_ToolBarItemSpacing = None
  PM_ToolBarSeparatorExtent = None
  PM_ToolTipLabelFrameWidth = None
  PM_TreeViewIndentation = None

  class PixelMetric(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PrimitiveElement(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RSIP_OnMouseClick = None
  RSIP_OnMouseClickAndAlreadyFocused = None

  class RequestSoftwareInputPanel(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SC_All = None
  SC_ComboBoxArrow = None
  SC_ComboBoxEditField = None
  SC_ComboBoxFrame = None
  SC_ComboBoxListBoxPopup = None
  SC_CustomBase = None
  SC_DialGroove = None
  SC_DialHandle = None
  SC_DialTickmarks = None
  SC_GroupBoxCheckBox = None
  SC_GroupBoxContents = None
  SC_GroupBoxFrame = None
  SC_GroupBoxLabel = None
  SC_MdiCloseButton = None
  SC_MdiMinButton = None
  SC_MdiNormalButton = None
  SC_None = None
  SC_ScrollBarAddLine = None
  SC_ScrollBarAddPage = None
  SC_ScrollBarFirst = None
  SC_ScrollBarGroove = None
  SC_ScrollBarLast = None
  SC_ScrollBarSlider = None
  SC_ScrollBarSubLine = None
  SC_ScrollBarSubPage = None
  SC_SliderGroove = None
  SC_SliderHandle = None
  SC_SliderTickmarks = None
  SC_SpinBoxDown = None
  SC_SpinBoxEditField = None
  SC_SpinBoxFrame = None
  SC_SpinBoxUp = None
  SC_TitleBarCloseButton = None
  SC_TitleBarContextHelpButton = None
  SC_TitleBarLabel = None
  SC_TitleBarMaxButton = None
  SC_TitleBarMinButton = None
  SC_TitleBarNormalButton = None
  SC_TitleBarShadeButton = None
  SC_TitleBarSysMenu = None
  SC_TitleBarUnshadeButton = None
  SC_ToolButton = None
  SC_ToolButtonMenu = None
  SE_CheckBoxClickRect = None
  SE_CheckBoxContents = None
  SE_CheckBoxFocusRect = None
  SE_CheckBoxIndicator = None
  SE_CheckBoxLayoutItem = None
  SE_ComboBoxFocusRect = None
  SE_ComboBoxLayoutItem = None
  SE_CustomBase = None
  SE_DateTimeEditLayoutItem = None
  SE_DialogButtonBoxLayoutItem = None
  SE_DockWidgetCloseButton = None
  SE_DockWidgetFloatButton = None
  SE_DockWidgetIcon = None
  SE_DockWidgetTitleBarText = None
  SE_FrameContents = None
  SE_FrameLayoutItem = None
  SE_GroupBoxLayoutItem = None
  SE_HeaderArrow = None
  SE_HeaderLabel = None
  SE_ItemViewItemCheckIndicator = None
  SE_ItemViewItemDecoration = None
  SE_ItemViewItemFocusRect = None
  SE_ItemViewItemText = None
  SE_LabelLayoutItem = None
  SE_LineEditContents = None
  SE_ProgressBarContents = None
  SE_ProgressBarGroove = None
  SE_ProgressBarLabel = None
  SE_ProgressBarLayoutItem = None
  SE_PushButtonContents = None
  SE_PushButtonFocusRect = None
  SE_PushButtonLayoutItem = None
  SE_RadioButtonClickRect = None
  SE_RadioButtonContents = None
  SE_RadioButtonFocusRect = None
  SE_RadioButtonIndicator = None
  SE_RadioButtonLayoutItem = None
  SE_ShapedFrameContents = None
  SE_SliderFocusRect = None
  SE_SliderLayoutItem = None
  SE_SpinBoxLayoutItem = None
  SE_TabBarScrollLeftButton = None
  SE_TabBarScrollRightButton = None
  SE_TabBarTabLeftButton = None
  SE_TabBarTabRightButton = None
  SE_TabBarTabText = None
  SE_TabBarTearIndicator = None
  SE_TabBarTearIndicatorLeft = None
  SE_TabBarTearIndicatorRight = None
  SE_TabWidgetLayoutItem = None
  SE_TabWidgetLeftCorner = None
  SE_TabWidgetRightCorner = None
  SE_TabWidgetTabBar = None
  SE_TabWidgetTabContents = None
  SE_TabWidgetTabPane = None
  SE_ToolBarHandle = None
  SE_ToolBoxTabContents = None
  SE_ToolButtonLayoutItem = None
  SE_TreeViewDisclosureItem = None
  SE_ViewItemCheckIndicator = None
  SH_BlinkCursorWhenTextSelected = None
  SH_Button_FocusPolicy = None
  SH_ComboBox_AllowWheelScrolling = None
  SH_ComboBox_LayoutDirection = None
  SH_ComboBox_ListMouseTracking = None
  SH_ComboBox_Popup = None
  SH_ComboBox_PopupFrameStyle = None
  SH_CustomBase = None
  SH_Dial_BackgroundRole = None
  SH_DialogButtonBox_ButtonsHaveIcons = None
  SH_DialogButtonLayout = None
  SH_DialogButtons_DefaultButton = None
  SH_DitherDisabledText = None
  SH_DockWidget_ButtonsHaveFrame = None
  SH_DrawMenuBarSeparator = None
  SH_EtchDisabledText = None
  SH_FocusFrame_AboveWidget = None
  SH_FocusFrame_Mask = None
  SH_FontDialog_SelectAssociatedText = None
  SH_FormLayoutFieldGrowthPolicy = None
  SH_FormLayoutFormAlignment = None
  SH_FormLayoutLabelAlignment = None
  SH_FormLayoutWrapPolicy = None
  SH_GroupBox_TextLabelColor = None
  SH_GroupBox_TextLabelVerticalAlignment = None
  SH_Header_ArrowAlignment = None
  SH_ItemView_ActivateItemOnSingleClick = None
  SH_ItemView_ArrowKeysNavigateIntoChildren = None
  SH_ItemView_ChangeHighlightOnFocus = None
  SH_ItemView_DrawDelegateFrame = None
  SH_ItemView_EllipsisLocation = None
  SH_ItemView_MovementWithoutUpdatingSelection = None
  SH_ItemView_PaintAlternatingRowColorsForEmptyArea = None
  SH_ItemView_ScrollMode = None
  SH_ItemView_ShowDecorationSelected = None
  SH_LineEdit_PasswordCharacter = None
  SH_LineEdit_PasswordMaskDelay = None
  SH_ListViewExpand_SelectMouseType = None
  SH_MainWindow_SpaceBelowMenuBar = None
  SH_MenuBar_AltKeyNavigation = None
  SH_MenuBar_MouseTracking = None
  SH_Menu_AllowActiveAndDisabled = None
  SH_Menu_FadeOutOnHide = None
  SH_Menu_FillScreenWithScroll = None
  SH_Menu_FlashTriggeredItem = None
  SH_Menu_KeyboardSearch = None
  SH_Menu_Mask = None
  SH_Menu_MouseTracking = None
  SH_Menu_Scrollable = None
  SH_Menu_SelectionWrap = None
  SH_Menu_SloppySubMenus = None
  SH_Menu_SpaceActivatesItem = None
  SH_Menu_SubMenuDontStartSloppyOnLeave = None
  SH_Menu_SubMenuPopupDelay = None
  SH_Menu_SubMenuResetWhenReenteringParent = None
  SH_Menu_SubMenuSloppyCloseTimeout = None
  SH_Menu_SubMenuSloppySelectOtherActions = None
  SH_Menu_SubMenuUniDirection = None
  SH_Menu_SubMenuUniDirectionFailCount = None
  SH_Menu_SupportsSections = None
  SH_MessageBox_CenterButtons = None
  SH_MessageBox_TextInteractionFlags = None
  SH_MessageBox_UseBorderForButtonSpacing = None
  SH_PrintDialog_RightAlignButtons = None
  SH_ProgressDialog_CenterCancelButton = None
  SH_ProgressDialog_TextLabelAlignment = None
  SH_RequestSoftwareInputPanel = None
  SH_RichText_FullWidthSelection = None
  SH_RubberBand_Mask = None
  SH_ScrollBar_ContextMenu = None
  SH_ScrollBar_LeftClickAbsolutePosition = None
  SH_ScrollBar_MiddleClickAbsolutePosition = None
  SH_ScrollBar_RollBetweenButtons = None
  SH_ScrollBar_ScrollWhenPointerLeavesControl = None
  SH_ScrollBar_StopMouseOverSlider = None
  SH_ScrollBar_Transient = None
  SH_ScrollView_FrameOnlyAroundContents = None
  SH_Slider_AbsoluteSetButtons = None
  SH_Slider_PageSetButtons = None
  SH_Slider_SloppyKeyEvents = None
  SH_Slider_SnapToValue = None
  SH_Slider_StopMouseOverSlider = None
  SH_SpellCheckUnderlineStyle = None
  SH_SpinBox_AnimateButton = None
  SH_SpinBox_ButtonsInsideFrame = None
  SH_SpinBox_ClickAutoRepeatRate = None
  SH_SpinBox_ClickAutoRepeatThreshold = None
  SH_SpinBox_KeyPressAutoRepeatRate = None
  SH_SpinBox_StepModifier = None
  SH_SpinControls_DisableOnBounds = None
  SH_Splitter_OpaqueResize = None
  SH_TabBar_Alignment = None
  SH_TabBar_ChangeCurrentDelay = None
  SH_TabBar_CloseButtonPosition = None
  SH_TabBar_ElideMode = None
  SH_TabBar_PreferNoArrows = None
  SH_TabBar_SelectMouseType = None
  SH_TabWidget_DefaultTabPosition = None
  SH_Table_GridLineColor = None
  SH_TextControl_FocusIndicatorTextCharFormat = None
  SH_TitleBar_AutoRaise = None
  SH_TitleBar_ModifyNotification = None
  SH_TitleBar_NoBorder = None
  SH_TitleBar_ShowToolTipsOnButtons = None
  SH_ToolBar_Movable = None
  SH_ToolBox_SelectedPageTitleBold = None
  SH_ToolButtonStyle = None
  SH_ToolButton_PopupDelay = None
  SH_ToolTipLabel_Opacity = None
  SH_ToolTip_FallAsleepDelay = None
  SH_ToolTip_Mask = None
  SH_ToolTip_WakeUpDelay = None
  SH_UnderlineShortcut = None
  SH_Widget_Animate = None
  SH_Widget_Animation_Duration = None
  SH_Widget_ShareActivation = None
  SH_WindowFrame_Mask = None
  SH_WizardStyle = None
  SH_Workspace_FillSpaceOnMaximize = None
  SP_ArrowBack = None
  SP_ArrowDown = None
  SP_ArrowForward = None
  SP_ArrowLeft = None
  SP_ArrowRight = None
  SP_ArrowUp = None
  SP_BrowserReload = None
  SP_BrowserStop = None
  SP_CommandLink = None
  SP_ComputerIcon = None
  SP_CustomBase = None
  SP_DesktopIcon = None
  SP_DialogApplyButton = None
  SP_DialogCancelButton = None
  SP_DialogCloseButton = None
  SP_DialogDiscardButton = None
  SP_DialogHelpButton = None
  SP_DialogNoButton = None
  SP_DialogOkButton = None
  SP_DialogOpenButton = None
  SP_DialogResetButton = None
  SP_DialogSaveButton = None
  SP_DialogYesButton = None
  SP_DirClosedIcon = None
  SP_DirHomeIcon = None
  SP_DirIcon = None
  SP_DirLinkIcon = None
  SP_DirLinkOpenIcon = None
  SP_DirOpenIcon = None
  SP_DockWidgetCloseButton = None
  SP_DriveCDIcon = None
  SP_DriveDVDIcon = None
  SP_DriveFDIcon = None
  SP_DriveHDIcon = None
  SP_DriveNetIcon = None
  SP_FileDialogBack = None
  SP_FileDialogContentsView = None
  SP_FileDialogDetailedView = None
  SP_FileDialogEnd = None
  SP_FileDialogInfoView = None
  SP_FileDialogListView = None
  SP_FileDialogNewFolder = None
  SP_FileDialogStart = None
  SP_FileDialogToParent = None
  SP_FileIcon = None
  SP_FileLinkIcon = None
  SP_LineEditClearButton = None
  SP_MediaPause = None
  SP_MediaPlay = None
  SP_MediaSeekBackward = None
  SP_MediaSeekForward = None
  SP_MediaSkipBackward = None
  SP_MediaSkipForward = None
  SP_MediaStop = None
  SP_MediaVolume = None
  SP_MediaVolumeMuted = None
  SP_MessageBoxCritical = None
  SP_MessageBoxInformation = None
  SP_MessageBoxQuestion = None
  SP_MessageBoxWarning = None
  SP_TitleBarCloseButton = None
  SP_TitleBarContextHelpButton = None
  SP_TitleBarMaxButton = None
  SP_TitleBarMenuButton = None
  SP_TitleBarMinButton = None
  SP_TitleBarNormalButton = None
  SP_TitleBarShadeButton = None
  SP_TitleBarUnshadeButton = None
  SP_ToolBarHorizontalExtensionButton = None
  SP_ToolBarVerticalExtensionButton = None
  SP_TrashIcon = None
  SP_VistaShield = None

  class StandardPixmap(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class State(simplewrapper):
    """ QStyle.State()
    QStyle.State(Union[QStyle.State, QStyle.StateFlag])
    QStyle.State(QStyle.State) """

    def __init__(self):
      pass

  class StateFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  State_Active = None
  State_AutoRaise = None
  State_Bottom = None
  State_Children = None
  State_DownArrow = None
  State_Editing = None
  State_Enabled = None
  State_FocusAtBorder = None
  State_HasFocus = None
  State_Horizontal = None
  State_Item = None
  State_KeyboardFocusChange = None
  State_Mini = None
  State_MouseOver = None
  State_NoChange = None
  State_None = None
  State_Off = None
  State_On = None
  State_Open = None
  State_Raised = None
  State_ReadOnly = None
  State_Selected = None
  State_Sibling = None
  State_Small = None
  State_Sunken = None
  State_Top = None
  State_UpArrow = None
  State_Window = None

  class StyleHint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SubControl(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SubControls(simplewrapper):
    """ QStyle.SubControls()
    QStyle.SubControls(Union[QStyle.SubControls, QStyle.SubControl])
    QStyle.SubControls(QStyle.SubControls) """

    def __init__(self):
      pass

  class SubElement(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self):
    pass

  def alignedRect(arg0, UnionQt.Alignment=None, Qt.AlignmentFlag=None, QSize=None, QRect=None):
    """ alignedRect(Qt.LayoutDirection, Union[Qt.Alignment, Qt.AlignmentFlag], QSize, QRect) -> QRect """
    return QtCore.QRect()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def combinedLayoutSpacing(self, UnionQSizePolicy.ControlTypes=None, QSizePolicy.ControlType=None, UnionQSizePolicy.ControlTypes=None, QSizePolicy.ControlType=None, Qt.Orientation=None, arg0=None, arg1=None):
    """ combinedLayoutSpacing(self, Union[QSizePolicy.ControlTypes, QSizePolicy.ControlType], Union[QSizePolicy.ControlTypes, QSizePolicy.ControlType], Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def drawComplexControl(self, arg0, QStyleOptionComplex, QtGui.QPainter, arg1=None):
    """ drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPainter, widget: QWidget = None) """
    pass

  def drawControl(self, arg0, QStyleOption, QtGui.QPainter, arg1=None):
    """ drawControl(self, QStyle.ControlElement, QStyleOption, QPainter, widget: QWidget = None) """
    pass

  def drawItemPixmap(self, QtGui.QPainter, QtCore.QRect, int, QtGui.QPixmap):
    """ drawItemPixmap(self, QPainter, QRect, int, QPixmap) """
    pass

  def drawItemText(self, QtGui.QPainter, QtCore.QRect, int, QtGui.QPalette, bool, str, arg0=None):
    """ drawItemText(self, QPainter, QRect, int, QPalette, bool, str, textRole: QPalette.ColorRole = QPalette.NoRole) """
    pass

  def drawPrimitive(self, arg0, QStyleOption, QtGui.QPainter, arg1=None):
    """ drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption, QPainter, widget: QWidget = None) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def generatedIconPixmap(self, arg0, QtGui.QPixmap, QStyleOption):
    """ generatedIconPixmap(self, QIcon.Mode, QPixmap, QStyleOption) -> QPixmap """
    return QtGui.QPixmap()

  def hitTestComplexControl(self, arg0, QStyleOptionComplex, QtCore.QPoint, arg1=None):
    """ hitTestComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPoint, widget: QWidget = None) -> QStyle.SubControl """
    return QStyle.SubControl()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemPixmapRect(self, QtCore.QRect, int, QtGui.QPixmap):
    """ itemPixmapRect(self, QRect, int, QPixmap) -> QRect """
    return QtCore.QRect()

  def itemTextRect(self, QtGui.QFontMetrics, QtCore.QRect, int, bool, str):
    """ itemTextRect(self, QFontMetrics, QRect, int, bool, str) -> QRect """
    return QtCore.QRect()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutSpacing(self, arg0, arg1, arg2, arg3=None, arg4=None):
    """ layoutSpacing(self, QSizePolicy.ControlType, QSizePolicy.ControlType, Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def pixelMetric(self, arg0, arg1=None, arg2=None):
    """ pixelMetric(self, QStyle.PixelMetric, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def polish(self, QWidget):
    """ polish(self, QWidget)
    polish(self, QApplication)
    polish(self, QPalette) -> QPalette """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def proxy(self):
    """ proxy(self) -> QStyle """
    return QStyle()

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeFromContents(self, arg0, QStyleOption, QtCore.QSize, arg1=None):
    """ sizeFromContents(self, QStyle.ContentsType, QStyleOption, QSize, widget: QWidget = None) -> QSize """
    return QtCore.QSize()

  def sliderPositionFromValue(int, int, int, int, arg0=None):
    """ sliderPositionFromValue(int, int, int, int, upsideDown: bool = False) -> int """
    return 1

  def sliderValueFromPosition(int, int, int, int, arg0=None):
    """ sliderValueFromPosition(int, int, int, int, upsideDown: bool = False) -> int """
    return 1

  def standardIcon(self, arg0, arg1=None, arg2=None):
    """ standardIcon(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QIcon """
    return QtGui.QIcon()

  def standardPalette(self):
    """ standardPalette(self) -> QPalette """
    return QtGui.QPalette()

  def standardPixmap(self, arg0, arg1=None, arg2=None):
    """ standardPixmap(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QPixmap """
    return QtGui.QPixmap()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def styleHint(self, arg0, arg1=None, arg2=None, arg3=None):
    """ styleHint(self, QStyle.StyleHint, option: QStyleOption = None, widget: QWidget = None, returnData: QStyleHintReturn = None) -> int """
    return 1

  def subControlRect(self, arg0, QStyleOptionComplex, arg1, arg2=None):
    """ subControlRect(self, QStyle.ComplexControl, QStyleOptionComplex, QStyle.SubControl, widget: QWidget = None) -> QRect """
    return QtCore.QRect()

  def subElementRect(self, arg0, QStyleOption, arg1=None):
    """ subElementRect(self, QStyle.SubElement, QStyleOption, widget: QWidget = None) -> QRect """
    return QtCore.QRect()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unpolish(self, QWidget):
    """ unpolish(self, QWidget)
    unpolish(self, QApplication) """
    pass

  def visualAlignment(arg0, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ visualAlignment(Qt.LayoutDirection, Union[Qt.Alignment, Qt.AlignmentFlag]) -> Qt.Alignment """
    return None

  def visualPos(arg0, QtCore.QRect, QtCore.QPoint):
    """ visualPos(Qt.LayoutDirection, QRect, QPoint) -> QPoint """
    return QtCore.QPoint()

  def visualRect(arg0, QtCore.QRect, QtCore.QRect):
    """ visualRect(Qt.LayoutDirection, QRect, QRect) -> QRect """
    return QtCore.QRect()

class QCompleter(QObject):
  """ QCompleter(parent: QObject = None)
  QCompleter(QAbstractItemModel, parent: QObject = None)
  QCompleter(Iterable[str], parent: QObject = None) """

  CaseInsensitivelySortedModel = None
  CaseSensitivelySortedModel = None

  class CompletionMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  InlineCompletion = None

  class ModelSorting(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PopupCompletion = None
  UnfilteredPopupCompletion = None
  UnsortedModel = None

  def __init__(self, arg0=None):
    pass

  def activated(self, str):
    """ activated(self, str) [signal]
    activated(self, QModelIndex) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def caseSensitivity(self):
    """ caseSensitivity(self) -> Qt.CaseSensitivity """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def complete(self, arg0=None):
    """ complete(self, rect: QRect = QRect()) """
    pass

  def completionColumn(self):
    """ completionColumn(self) -> int """
    return 1

  def completionCount(self):
    """ completionCount(self) -> int """
    return 1

  def completionMode(self):
    """ completionMode(self) -> QCompleter.CompletionMode """
    return QCompleter.CompletionMode()

  def completionModel(self):
    """ completionModel(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def completionPrefix(self):
    """ completionPrefix(self) -> str """
    return ""

  def completionRole(self):
    """ completionRole(self) -> int """
    return 1

  def connectNotify():
    pass

  def currentCompletion(self):
    """ currentCompletion(self) -> str """
    return ""

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def currentRow(self):
    """ currentRow(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def filterMode(self):
    """ filterMode(self) -> Qt.MatchFlags """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def highlighted(self, str):
    """ highlighted(self, str) [signal]
    highlighted(self, QModelIndex) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def maxVisibleItems(self):
    """ maxVisibleItems(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def modelSorting(self):
    """ modelSorting(self) -> QCompleter.ModelSorting """
    return QCompleter.ModelSorting()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def pathFromIndex(self, QtCore.QModelIndex):
    """ pathFromIndex(self, QModelIndex) -> str """
    return ""

  def popup(self):
    """ popup(self) -> QAbstractItemView """
    return QAbstractItemView()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCaseSensitivity(self, arg0):
    """ setCaseSensitivity(self, Qt.CaseSensitivity) """
    pass

  def setCompletionColumn(self, int):
    """ setCompletionColumn(self, int) """
    pass

  def setCompletionMode(self, arg0):
    """ setCompletionMode(self, QCompleter.CompletionMode) """
    pass

  def setCompletionPrefix(self, str):
    """ setCompletionPrefix(self, str) """
    pass

  def setCompletionRole(self, int):
    """ setCompletionRole(self, int) """
    pass

  def setCurrentRow(self, int):
    """ setCurrentRow(self, int) -> bool """
    return True

  def setFilterMode(self, UnionQt.MatchFlags=None, Qt.MatchFlag=None):
    """ setFilterMode(self, Union[Qt.MatchFlags, Qt.MatchFlag]) """
    pass

  def setMaxVisibleItems(self, int):
    """ setMaxVisibleItems(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setModelSorting(self, arg0):
    """ setModelSorting(self, QCompleter.ModelSorting) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setPopup(self, QAbstractItemView):
    """ setPopup(self, QAbstractItemView) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setWidget(self, QWidget):
    """ setWidget(self, QWidget) """
    pass

  def setWrapAround(self, bool):
    """ setWrapAround(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def splitPath(self, str):
    """ splitPath(self, str) -> List[str] """
    return ""

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def wrapAround(self):
    """ wrapAround(self) -> bool """
    return True

class QDataWidgetMapper(QObject):
  """ QDataWidgetMapper(parent: QObject = None) """

  AutoSubmit = None
  ManualSubmit = None

  class SubmitPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None):
    pass

  def addMapping(self, QWidget, int):
    """ addMapping(self, QWidget, int)
    addMapping(self, QWidget, int, Union[QByteArray, bytes, bytearray]) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clearMapping(self):
    """ clearMapping(self) """
    pass

  def connectNotify():
    pass

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def currentIndexChanged(self, int):
    """ currentIndexChanged(self, int) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def mappedPropertyName(self, QWidget):
    """ mappedPropertyName(self, QWidget) -> QByteArray """
    return QtCore.QByteArray()

  def mappedSection(self, QWidget):
    """ mappedSection(self, QWidget) -> int """
    return 1

  def mappedWidgetAt(self, int):
    """ mappedWidgetAt(self, int) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeMapping(self, QWidget):
    """ removeMapping(self, QWidget) """
    pass

  def revert(self):
    """ revert(self) """
    pass

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCurrentModelIndex(self, QtCore.QModelIndex):
    """ setCurrentModelIndex(self, QModelIndex) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setSubmitPolicy(self, arg0):
    """ setSubmitPolicy(self, QDataWidgetMapper.SubmitPolicy) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return True

  def submitPolicy(self):
    """ submitPolicy(self) -> QDataWidgetMapper.SubmitPolicy """
    return QDataWidgetMapper.SubmitPolicy()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toFirst(self):
    """ toFirst(self) """
    pass

  def toLast(self):
    """ toLast(self) """
    pass

  def toNext(self):
    """ toNext(self) """
    pass

  def toPrevious(self):
    """ toPrevious(self) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QDateEdit(QDateTimeEdit):
  """ QDateEdit(parent: QWidget = None)
  QDateEdit(Union[QDate, datetime.date], parent: QWidget = None) """

  AdaptiveDecimalStepType = None
  AmPmSection = None
  CorrectToNearestValue = None
  CorrectToPreviousValue = None
  DateSections_Mask = None
  DaySection = None
  DefaultStepType = None
  DrawChildren = None
  DrawWindowBackground = None
  HourSection = None
  IgnoreMask = None
  MSecSection = None
  MinuteSection = None
  MonthSection = None
  NoButtons = None
  NoSection = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  PlusMinus = None
  SecondSection = None

  class Section(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Sections(simplewrapper):
    """ QDateTimeEdit.Sections()
    QDateTimeEdit.Sections(Union[QDateTimeEdit.Sections, QDateTimeEdit.Section])
    QDateTimeEdit.Sections(QDateTimeEdit.Sections) """

    def __init__(self):
      pass

  StepDownEnabled = None
  StepNone = None
  StepUpEnabled = None
  TimeSections_Mask = None
  UpDownArrows = None
  YearSection = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buttonSymbols(self):
    """ buttonSymbols(self) -> QAbstractSpinBox.ButtonSymbols """
    return QAbstractSpinBox.ButtonSymbols()

  def calendarPopup(self):
    """ calendarPopup(self) -> bool """
    return True

  def calendarWidget(self):
    """ calendarWidget(self) -> QCalendarWidget """
    return QCalendarWidget()

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearMaximumDate(self):
    """ clearMaximumDate(self) """
    pass

  def clearMaximumDateTime(self):
    """ clearMaximumDateTime(self) """
    pass

  def clearMaximumTime(self):
    """ clearMaximumTime(self) """
    pass

  def clearMinimumDate(self):
    """ clearMinimumDate(self) """
    pass

  def clearMinimumDateTime(self):
    """ clearMinimumDateTime(self) """
    pass

  def clearMinimumTime(self):
    """ clearMinimumTime(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def correctionMode(self):
    """ correctionMode(self) -> QAbstractSpinBox.CorrectionMode """
    return QAbstractSpinBox.CorrectionMode()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentSection(self):
    """ currentSection(self) -> QDateTimeEdit.Section """
    return QDateTimeEdit.Section()

  def currentSectionIndex(self):
    """ currentSectionIndex(self) -> int """
    return 1

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def date(self):
    """ date(self) -> QDate """
    return QtCore.QDate()

  def dateChanged(self, arg0, arg1):
    """ dateChanged(self, Union[QDate, datetime.date]) [signal] """
    pass

  def dateTime(self):
    """ dateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def dateTimeChanged(self, arg0, arg1):
    """ dateTimeChanged(self, Union[QDateTime, datetime.datetime]) [signal] """
    pass

  def dateTimeFromText():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def displayFormat(self):
    """ displayFormat(self) -> str """
    return ""

  def displayedSections(self):
    """ displayedSections(self) -> QDateTimeEdit.Sections """
    return QDateTimeEdit.Sections()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup():
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAcceptableInput(self):
    """ hasAcceptableInput(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpretText(self):
    """ interpretText(self) """
    pass

  def isAccelerated(self):
    """ isAccelerated(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isGroupSeparatorShown(self):
    """ isGroupSeparatorShown(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardTracking(self):
    """ keyboardTracking(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumDate(self):
    """ maximumDate(self) -> QDate """
    return QtCore.QDate()

  def maximumDateTime(self):
    """ maximumDateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumTime(self):
    """ maximumTime(self) -> QTime """
    return QtCore.QTime()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumDate(self):
    """ minimumDate(self) -> QDate """
    return QtCore.QDate()

  def minimumDateTime(self):
    """ minimumDateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumTime(self):
    """ minimumTime(self) -> QTime """
    return QtCore.QTime()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sectionAt(self, int):
    """ sectionAt(self, int) -> QDateTimeEdit.Section """
    return QDateTimeEdit.Section()

  def sectionCount(self):
    """ sectionCount(self) -> int """
    return 1

  def sectionText(self, arg0):
    """ sectionText(self, QDateTimeEdit.Section) -> str """
    return ""

  def selectAll(self):
    """ selectAll(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAccelerated(self, bool):
    """ setAccelerated(self, bool) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButtonSymbols(self, arg0):
    """ setButtonSymbols(self, QAbstractSpinBox.ButtonSymbols) """
    pass

  def setCalendarPopup(self, bool):
    """ setCalendarPopup(self, bool) """
    pass

  def setCalendarWidget(self, QCalendarWidget):
    """ setCalendarWidget(self, QCalendarWidget) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCorrectionMode(self, arg0):
    """ setCorrectionMode(self, QAbstractSpinBox.CorrectionMode) """
    pass

  def setCurrentSection(self, arg0):
    """ setCurrentSection(self, QDateTimeEdit.Section) """
    pass

  def setCurrentSectionIndex(self, int):
    """ setCurrentSectionIndex(self, int) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDate(self, UnionQDate=None, datetime.date=None):
    """ setDate(self, Union[QDate, datetime.date]) """
    pass

  def setDateRange(self, UnionQDate=None, datetime.date=None, UnionQDate=None, datetime.date=None):
    """ setDateRange(self, Union[QDate, datetime.date], Union[QDate, datetime.date]) """
    pass

  def setDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setDateTimeRange(self, UnionQDateTime=None, datetime.datetime=None, UnionQDateTime=None, datetime.datetime=None):
    """ setDateTimeRange(self, Union[QDateTime, datetime.datetime], Union[QDateTime, datetime.datetime]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDisplayFormat(self, str):
    """ setDisplayFormat(self, str) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroupSeparatorShown(self, bool):
    """ setGroupSeparatorShown(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeyboardTracking(self, bool):
    """ setKeyboardTracking(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit():
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumDate(self, UnionQDate=None, datetime.date=None):
    """ setMaximumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMaximumDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setMaximumDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumTime(self, UnionQTime=None, datetime.time=None):
    """ setMaximumTime(self, Union[QTime, datetime.time]) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumDate(self, UnionQDate=None, datetime.date=None):
    """ setMinimumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMinimumDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setMinimumDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumTime(self, UnionQTime=None, datetime.time=None):
    """ setMinimumTime(self, Union[QTime, datetime.time]) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setSelectedSection(self, arg0):
    """ setSelectedSection(self, QDateTimeEdit.Section) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpecialValueText(self, str):
    """ setSpecialValueText(self, str) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTime(self, UnionQTime=None, datetime.time=None):
    """ setTime(self, Union[QTime, datetime.time]) """
    pass

  def setTimeRange(self, UnionQTime=None, datetime.time=None, UnionQTime=None, datetime.time=None):
    """ setTimeRange(self, Union[QTime, datetime.time], Union[QTime, datetime.time]) """
    pass

  def setTimeSpec(self, arg0):
    """ setTimeSpec(self, Qt.TimeSpec) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def specialValueText(self):
    """ specialValueText(self) -> str """
    return ""

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def stepBy(self, int):
    """ stepBy(self, int) """
    pass

  def stepDown(self):
    """ stepDown(self) """
    pass

  def stepEnabled():
    pass

  def stepUp(self):
    """ stepUp(self) """
    pass

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textFromDateTime():
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def time(self):
    """ time(self) -> QTime """
    return QtCore.QTime()

  def timeChanged(self, arg0, arg1):
    """ timeChanged(self, Union[QTime, datetime.time]) [signal] """
    pass

  def timeSpec(self):
    """ timeSpec(self) -> Qt.TimeSpec """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validate():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wrapping(self):
    """ wrapping(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDateTimeEdit(QAbstractSpinBox):
  """ QDateTimeEdit(parent: QWidget = None)
  QDateTimeEdit(Union[QDateTime, datetime.datetime], parent: QWidget = None)
  QDateTimeEdit(Union[QDate, datetime.date], parent: QWidget = None)
  QDateTimeEdit(Union[QTime, datetime.time], parent: QWidget = None) """

  AdaptiveDecimalStepType = None
  AmPmSection = None
  CorrectToNearestValue = None
  CorrectToPreviousValue = None
  DateSections_Mask = None
  DaySection = None
  DefaultStepType = None
  DrawChildren = None
  DrawWindowBackground = None
  HourSection = None
  IgnoreMask = None
  MSecSection = None
  MinuteSection = None
  MonthSection = None
  NoButtons = None
  NoSection = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  PlusMinus = None
  SecondSection = None
  StepDownEnabled = None
  StepNone = None
  StepUpEnabled = None
  TimeSections_Mask = None
  UpDownArrows = None
  YearSection = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buttonSymbols(self):
    """ buttonSymbols(self) -> QAbstractSpinBox.ButtonSymbols """
    return QAbstractSpinBox.ButtonSymbols()

  def calendarPopup(self):
    """ calendarPopup(self) -> bool """
    return True

  def calendarWidget(self):
    """ calendarWidget(self) -> QCalendarWidget """
    return QCalendarWidget()

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearMaximumDate(self):
    """ clearMaximumDate(self) """
    pass

  def clearMaximumDateTime(self):
    """ clearMaximumDateTime(self) """
    pass

  def clearMaximumTime(self):
    """ clearMaximumTime(self) """
    pass

  def clearMinimumDate(self):
    """ clearMinimumDate(self) """
    pass

  def clearMinimumDateTime(self):
    """ clearMinimumDateTime(self) """
    pass

  def clearMinimumTime(self):
    """ clearMinimumTime(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def correctionMode(self):
    """ correctionMode(self) -> QAbstractSpinBox.CorrectionMode """
    return QAbstractSpinBox.CorrectionMode()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentSection(self):
    """ currentSection(self) -> QDateTimeEdit.Section """
    return QDateTimeEdit.Section()

  def currentSectionIndex(self):
    """ currentSectionIndex(self) -> int """
    return 1

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def date(self):
    """ date(self) -> QDate """
    return QtCore.QDate()

  def dateChanged(self, arg0, arg1):
    """ dateChanged(self, Union[QDate, datetime.date]) [signal] """
    pass

  def dateTime(self):
    """ dateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def dateTimeChanged(self, arg0, arg1):
    """ dateTimeChanged(self, Union[QDateTime, datetime.datetime]) [signal] """
    pass

  def dateTimeFromText(self, str):
    """ dateTimeFromText(self, str) -> QDateTime """
    return QtCore.QDateTime()

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def displayFormat(self):
    """ displayFormat(self) -> str """
    return ""

  def displayedSections(self):
    """ displayedSections(self) -> QDateTimeEdit.Sections """
    return QDateTimeEdit.Sections()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAcceptableInput(self):
    """ hasAcceptableInput(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionSpinBox):
    """ initStyleOption(self, QStyleOptionSpinBox) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpretText(self):
    """ interpretText(self) """
    pass

  def isAccelerated(self):
    """ isAccelerated(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isGroupSeparatorShown(self):
    """ isGroupSeparatorShown(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardTracking(self):
    """ keyboardTracking(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumDate(self):
    """ maximumDate(self) -> QDate """
    return QtCore.QDate()

  def maximumDateTime(self):
    """ maximumDateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumTime(self):
    """ maximumTime(self) -> QTime """
    return QtCore.QTime()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumDate(self):
    """ minimumDate(self) -> QDate """
    return QtCore.QDate()

  def minimumDateTime(self):
    """ minimumDateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumTime(self):
    """ minimumTime(self) -> QTime """
    return QtCore.QTime()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sectionAt(self, int):
    """ sectionAt(self, int) -> QDateTimeEdit.Section """
    return QDateTimeEdit.Section()

  def sectionCount(self):
    """ sectionCount(self) -> int """
    return 1

  def sectionText(self, arg0):
    """ sectionText(self, QDateTimeEdit.Section) -> str """
    return ""

  def selectAll(self):
    """ selectAll(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAccelerated(self, bool):
    """ setAccelerated(self, bool) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButtonSymbols(self, arg0):
    """ setButtonSymbols(self, QAbstractSpinBox.ButtonSymbols) """
    pass

  def setCalendarPopup(self, bool):
    """ setCalendarPopup(self, bool) """
    pass

  def setCalendarWidget(self, QCalendarWidget):
    """ setCalendarWidget(self, QCalendarWidget) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCorrectionMode(self, arg0):
    """ setCorrectionMode(self, QAbstractSpinBox.CorrectionMode) """
    pass

  def setCurrentSection(self, arg0):
    """ setCurrentSection(self, QDateTimeEdit.Section) """
    pass

  def setCurrentSectionIndex(self, int):
    """ setCurrentSectionIndex(self, int) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDate(self, UnionQDate=None, datetime.date=None):
    """ setDate(self, Union[QDate, datetime.date]) """
    pass

  def setDateRange(self, UnionQDate=None, datetime.date=None, UnionQDate=None, datetime.date=None):
    """ setDateRange(self, Union[QDate, datetime.date], Union[QDate, datetime.date]) """
    pass

  def setDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setDateTimeRange(self, UnionQDateTime=None, datetime.datetime=None, UnionQDateTime=None, datetime.datetime=None):
    """ setDateTimeRange(self, Union[QDateTime, datetime.datetime], Union[QDateTime, datetime.datetime]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDisplayFormat(self, str):
    """ setDisplayFormat(self, str) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroupSeparatorShown(self, bool):
    """ setGroupSeparatorShown(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeyboardTracking(self, bool):
    """ setKeyboardTracking(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit():
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumDate(self, UnionQDate=None, datetime.date=None):
    """ setMaximumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMaximumDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setMaximumDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumTime(self, UnionQTime=None, datetime.time=None):
    """ setMaximumTime(self, Union[QTime, datetime.time]) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumDate(self, UnionQDate=None, datetime.date=None):
    """ setMinimumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMinimumDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setMinimumDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumTime(self, UnionQTime=None, datetime.time=None):
    """ setMinimumTime(self, Union[QTime, datetime.time]) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setSelectedSection(self, arg0):
    """ setSelectedSection(self, QDateTimeEdit.Section) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpecialValueText(self, str):
    """ setSpecialValueText(self, str) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTime(self, UnionQTime=None, datetime.time=None):
    """ setTime(self, Union[QTime, datetime.time]) """
    pass

  def setTimeRange(self, UnionQTime=None, datetime.time=None, UnionQTime=None, datetime.time=None):
    """ setTimeRange(self, Union[QTime, datetime.time], Union[QTime, datetime.time]) """
    pass

  def setTimeSpec(self, arg0):
    """ setTimeSpec(self, Qt.TimeSpec) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def specialValueText(self):
    """ specialValueText(self) -> str """
    return ""

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def stepBy(self, int):
    """ stepBy(self, int) """
    pass

  def stepDown(self):
    """ stepDown(self) """
    pass

  def stepEnabled(self):
    """ stepEnabled(self) -> QAbstractSpinBox.StepEnabled """
    return QAbstractSpinBox.StepEnabled()

  def stepUp(self):
    """ stepUp(self) """
    pass

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textFromDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ textFromDateTime(self, Union[QDateTime, datetime.datetime]) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def time(self):
    """ time(self) -> QTime """
    return QtCore.QTime()

  def timeChanged(self, arg0, arg1):
    """ timeChanged(self, Union[QTime, datetime.time]) [signal] """
    pass

  def timeSpec(self):
    """ timeSpec(self) -> Qt.TimeSpec """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wrapping(self):
    """ wrapping(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDesktopWidget(QWidget):
  """ QDesktopWidget() """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def availableGeometry(self, arg0=None):
    """ availableGeometry(self, screen: int = -1) -> QRect
    availableGeometry(self, QWidget) -> QRect
    availableGeometry(self, QPoint) -> QRect """
    return QtCore.QRect()

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVirtualDesktop(self):
    """ isVirtualDesktop(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def primaryScreen(self):
    """ primaryScreen(self) -> int """
    return 1

  def primaryScreenChanged(self):
    """ primaryScreenChanged(self) [signal] """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def resized(self, int):
    """ resized(self, int) [signal] """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def screen(self, arg0=None):
    """ screen(self, screen: int = -1) -> QWidget """
    return QWidget()

  def screenCount(self):
    """ screenCount(self) -> int """
    return 1

  def screenCountChanged(self, int):
    """ screenCountChanged(self, int) [signal] """
    pass

  def screenGeometry(self, arg0=None):
    """ screenGeometry(self, screen: int = -1) -> QRect
    screenGeometry(self, QWidget) -> QRect
    screenGeometry(self, QPoint) -> QRect """
    return QtCore.QRect()

  def screenNumber(self, arg0=None):
    """ screenNumber(self, widget: QWidget = None) -> int
    screenNumber(self, QPoint) -> int """
    return 1

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def workAreaResized(self, int):
    """ workAreaResized(self, int) [signal] """
    pass

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDial(QAbstractSlider):
  """ QDial(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  SliderMove = None
  SliderNoAction = None
  SliderOrientationChange = None
  SliderPageStepAdd = None
  SliderPageStepSub = None
  SliderRangeChange = None
  SliderSingleStepAdd = None
  SliderSingleStepSub = None
  SliderStepsChange = None
  SliderToMaximum = None
  SliderToMinimum = None
  SliderValueChange = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actionTriggered(self, int):
    """ actionTriggered(self, int) [signal] """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def hasTracking(self):
    """ hasTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionSlider):
    """ initStyleOption(self, QStyleOptionSlider) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invertedAppearance(self):
    """ invertedAppearance(self) -> bool """
    return True

  def invertedControls(self):
    """ invertedControls(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSliderDown(self):
    """ isSliderDown(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def notchSize(self):
    """ notchSize(self) -> int """
    return 1

  def notchTarget(self):
    """ notchTarget(self) -> float """
    return 1.0

  def notchesVisible(self):
    """ notchesVisible(self) -> bool """
    return True

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def pageStep(self):
    """ pageStep(self) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def rangeChanged(self, int, int):
    """ rangeChanged(self, int, int) [signal] """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def repeatAction():
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInvertedAppearance(self, bool):
    """ setInvertedAppearance(self, bool) """
    pass

  def setInvertedControls(self, bool):
    """ setInvertedControls(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, int):
    """ setMaximum(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, int):
    """ setMinimum(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setNotchTarget(self, float):
    """ setNotchTarget(self, float) """
    pass

  def setNotchesVisible(self, bool):
    """ setNotchesVisible(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPageStep(self, int):
    """ setPageStep(self, int) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setRepeatAction():
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSingleStep(self, int):
    """ setSingleStep(self, int) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSliderDown(self, bool):
    """ setSliderDown(self, bool) """
    pass

  def setSliderPosition(self, int):
    """ setSliderPosition(self, int) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTracking(self, bool):
    """ setTracking(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, int):
    """ setValue(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def singleStep(self):
    """ singleStep(self) -> int """
    return 1

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sliderChange(self, arg0):
    """ sliderChange(self, QAbstractSlider.SliderChange) """
    pass

  def sliderMoved(self, int):
    """ sliderMoved(self, int) [signal] """
    pass

  def sliderPosition(self):
    """ sliderPosition(self) -> int """
    return 1

  def sliderPressed(self):
    """ sliderPressed(self) [signal] """
    pass

  def sliderReleased(self):
    """ sliderReleased(self) [signal] """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggerAction(self, arg0):
    """ triggerAction(self, QAbstractSlider.SliderAction) """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def value(self):
    """ value(self) -> int """
    return 1

  def valueChanged(self, int):
    """ valueChanged(self, int) [signal] """
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wrapping(self):
    """ wrapping(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDialog(QWidget):
  """ QDialog(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  Accepted = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rejected = None
  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDialogButtonBox(QWidget):
  """ QDialogButtonBox(parent: QWidget = None)
  QDialogButtonBox(Qt.Orientation, parent: QWidget = None)
  QDialogButtonBox(Union[QDialogButtonBox.StandardButtons, QDialogButtonBox.StandardButton], parent: QWidget = None)
  QDialogButtonBox(Union[QDialogButtonBox.StandardButtons, QDialogButtonBox.StandardButton], Qt.Orientation, parent: QWidget = None) """

  Abort = None
  AcceptRole = None
  ActionRole = None
  AndroidLayout = None
  Apply = None
  ApplyRole = None

  class ButtonLayout(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ButtonRole(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Cancel = None
  Close = None
  DestructiveRole = None
  Discard = None
  DrawChildren = None
  DrawWindowBackground = None
  GnomeLayout = None
  Help = None
  HelpRole = None
  Ignore = None
  IgnoreMask = None
  InvalidRole = None
  KdeLayout = None
  MacLayout = None
  No = None
  NoButton = None
  NoRole = None
  NoToAll = None
  Ok = None
  Open = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  RejectRole = None
  Reset = None
  ResetRole = None
  RestoreDefaults = None
  Retry = None
  Save = None
  SaveAll = None

  class StandardButton(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StandardButtons(simplewrapper):
    """ QDialogButtonBox.StandardButtons()
    QDialogButtonBox.StandardButtons(Union[QDialogButtonBox.StandardButtons, QDialogButtonBox.StandardButton])
    QDialogButtonBox.StandardButtons(QDialogButtonBox.StandardButtons) """

    def __init__(self):
      pass

  WinLayout = None
  Yes = None
  YesRole = None
  YesToAll = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addButton(self, QAbstractButton, arg0):
    """ addButton(self, QAbstractButton, QDialogButtonBox.ButtonRole)
    addButton(self, str, QDialogButtonBox.ButtonRole) -> QPushButton
    addButton(self, QDialogButtonBox.StandardButton) -> QPushButton """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def button(self, arg0):
    """ button(self, QDialogButtonBox.StandardButton) -> QPushButton """
    return QPushButton()

  def buttonRole(self, QAbstractButton):
    """ buttonRole(self, QAbstractButton) -> QDialogButtonBox.ButtonRole """
    return QDialogButtonBox.ButtonRole()

  def buttons(self):
    """ buttons(self) -> List[QAbstractButton] """
    return ""

  def centerButtons(self):
    """ centerButtons(self) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clicked(self, QAbstractButton):
    """ clicked(self, QAbstractButton) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def helpRequested(self):
    """ helpRequested(self) [signal] """
    pass

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeButton(self, QAbstractButton):
    """ removeButton(self, QAbstractButton) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCenterButtons(self, bool):
    """ setCenterButtons(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStandardButtons(self, UnionQDialogButtonBox.StandardButtons=None, QDialogButtonBox.StandardButton=None):
    """ setStandardButtons(self, Union[QDialogButtonBox.StandardButtons, QDialogButtonBox.StandardButton]) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def standardButton(self, QAbstractButton):
    """ standardButton(self, QAbstractButton) -> QDialogButtonBox.StandardButton """
    return QDialogButtonBox.StandardButton()

  def standardButtons(self):
    """ standardButtons(self) -> QDialogButtonBox.StandardButtons """
    return QDialogButtonBox.StandardButtons()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDirModel(QAbstractItemModel):
  """ QDirModel(Iterable[str], Union[QDir.Filters, QDir.Filter], Union[QDir.SortFlags, QDir.SortFlag], parent: QObject = None)
  QDirModel(parent: QObject = None) """

  class CheckIndexOption(IntEnum):
    """ An enumeration. """

    DoNotUseParent = None
    IndexIsValid = None
    NoOption = None
    ParentIsInvalid = None

  class CheckIndexOptions(simplewrapper):
    """ QAbstractItemModel.CheckIndexOptions()
    QAbstractItemModel.CheckIndexOptions(Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption])
    QAbstractItemModel.CheckIndexOptions(QAbstractItemModel.CheckIndexOptions) """

    def __init__(self):
      pass

  FileIconRole = None
  FileNameRole = None
  FilePathRole = None
  HorizontalSortHint = None

  class LayoutChangeHint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoLayoutChangeHint = None

  class Roles(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  VerticalSortHint = None

  def __init__(self, Iterablestr=None, UnionQDir.Filters=None, QDir.Filter=None, UnionQDir.SortFlags=None, QDir.SortFlag=None, arg0=None):
    pass

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buddy(self, QtCore.QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def canDropMimeData(self, QtCore.QMimeData, arg0, int, int, QtCore.QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return True

  def canFetchMore(self, QtCore.QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return True

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QtCore.QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QtCore.QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QtCore.QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QtCore.QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QtCore.QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged(self, QtCore.QModelIndex, QtCore.QModelIndex, arg0=None):
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dropMimeData(self, QtCore.QMimeData, arg0, int, int, QtCore.QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return True

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def fetchMore(self, QtCore.QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def fileIcon(self, QtCore.QModelIndex):
    """ fileIcon(self, QModelIndex) -> QIcon """
    return QtGui.QIcon()

  def fileInfo(self, QtCore.QModelIndex):
    """ fileInfo(self, QModelIndex) -> QFileInfo """
    return QtCore.QFileInfo()

  def fileName(self, QtCore.QModelIndex):
    """ fileName(self, QModelIndex) -> str """
    return ""

  def filePath(self, QtCore.QModelIndex):
    """ filePath(self, QModelIndex) -> str """
    return ""

  def filter(self):
    """ filter(self) -> QDir.Filters """
    return QDir.Filters()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QtCore.QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def iconProvider(self):
    """ iconProvider(self) -> QFileIconProvider """
    return QFileIconProvider()

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex
    index(self, str, column: int = 0) -> QModelIndex """
    return QtCore.QModelIndex()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isDir(self, QtCore.QModelIndex):
    """ isDir(self, QModelIndex) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemData(self, QtCore.QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged(self, arg0=None, arg1=None):
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged(self, arg0=None, arg1=None):
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def lazyChildCount(self):
    """ lazyChildCount(self) -> bool """
    return True

  def match(self, QtCore.QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return QtCore.QMimeData()

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def mkdir(self, QtCore.QModelIndex, str):
    """ mkdir(self, QModelIndex, str) -> QModelIndex """
    return QtCore.QModelIndex()

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QtCore.QModelIndex, int, QtCore.QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return True

  def moveColumns(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return True

  def moveRow(self, QtCore.QModelIndex, int, QtCore.QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return True

  def moveRows(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return True

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nameFilters(self):
    """ nameFilters(self) -> List[str] """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QtCore.QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex
    parent(self) -> QObject """
    return QtCore.QModelIndex()

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def refresh(self, arg0=None):
    """ refresh(self, parent: QModelIndex = QModelIndex()) """
    pass

  def remove(self, QtCore.QModelIndex):
    """ remove(self, QModelIndex) -> bool """
    return True

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def resetInternalData():
    pass

  def resolveSymlinks(self):
    """ resolveSymlinks(self) -> bool """
    return True

  def revert(self):
    """ revert(self) """
    pass

  def rmdir(self, QtCore.QModelIndex):
    """ rmdir(self, QModelIndex) -> bool """
    return True

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QtCore.QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QtCore.QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QtCore.QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return True

  def setFilter(self, UnionQDir.Filters=None, QDir.Filter=None):
    """ setFilter(self, Union[QDir.Filters, QDir.Filter]) """
    pass

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return True

  def setIconProvider(self, QFileIconProvider):
    """ setIconProvider(self, QFileIconProvider) """
    pass

  def setItemData(self, QtCore.QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return True

  def setLazyChildCount(self, bool):
    """ setLazyChildCount(self, bool) """
    pass

  def setNameFilters(self, Iterablestr=None):
    """ setNameFilters(self, Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setResolveSymlinks(self, bool):
    """ setResolveSymlinks(self, bool) """
    pass

  def setSorting(self, UnionQDir.SortFlags=None, QDir.SortFlag=None):
    """ setSorting(self, Union[QDir.SortFlags, QDir.SortFlag]) """
    pass

  def sibling(self, int, int, QtCore.QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sort(self, int, arg0=None):
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def sorting(self):
    """ sorting(self) -> QDir.SortFlags """
    return QDir.SortFlags()

  def span(self, QtCore.QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return True

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QDockWidget(QWidget):
  """ QDockWidget(str, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())
  QDockWidget(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  AllDockWidgetFeatures = None
  DockWidgetClosable = None

  class DockWidgetFeature(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class DockWidgetFeatures(simplewrapper):
    """ QDockWidget.DockWidgetFeatures()
    QDockWidget.DockWidgetFeatures(Union[QDockWidget.DockWidgetFeatures, QDockWidget.DockWidgetFeature])
    QDockWidget.DockWidgetFeatures(QDockWidget.DockWidgetFeatures) """

    def __init__(self):
      pass

  DockWidgetFloatable = None
  DockWidgetMovable = None
  DockWidgetVerticalTitleBar = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  NoDockWidgetFeatures = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, str, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def allowedAreas(self):
    """ allowedAreas(self) -> Qt.DockWidgetAreas """
    return None

  def allowedAreasChanged(self, arg0, arg1):
    """ allowedAreasChanged(self, Union[Qt.DockWidgetAreas, Qt.DockWidgetArea]) [signal] """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dockLocationChanged(self, arg0):
    """ dockLocationChanged(self, Qt.DockWidgetArea) [signal] """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def features(self):
    """ features(self) -> QDockWidget.DockWidgetFeatures """
    return QDockWidget.DockWidgetFeatures()

  def featuresChanged(self, arg0, arg1):
    """ featuresChanged(self, Union[QDockWidget.DockWidgetFeatures, QDockWidget.DockWidgetFeature]) [signal] """
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionDockWidget):
    """ initStyleOption(self, QStyleOptionDockWidget) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isAreaAllowed(self, arg0):
    """ isAreaAllowed(self, Qt.DockWidgetArea) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFloating(self):
    """ isFloating(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAllowedAreas(self, UnionQt.DockWidgetAreas=None, Qt.DockWidgetArea=None):
    """ setAllowedAreas(self, Union[Qt.DockWidgetAreas, Qt.DockWidgetArea]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFeatures(self, UnionQDockWidget.DockWidgetFeatures=None, QDockWidget.DockWidgetFeature=None):
    """ setFeatures(self, Union[QDockWidget.DockWidgetFeatures, QDockWidget.DockWidgetFeature]) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFloating(self, bool):
    """ setFloating(self, bool) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTitleBarWidget(self, QWidget):
    """ setTitleBarWidget(self, QWidget) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWidget(self, QWidget):
    """ setWidget(self, QWidget) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def titleBarWidget(self):
    """ titleBarWidget(self) -> QWidget """
    return QWidget()

  def toggleViewAction(self):
    """ toggleViewAction(self) -> QAction """
    return QAction()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def topLevelChanged(self, bool):
    """ topLevelChanged(self, bool) [signal] """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibilityChanged(self, bool):
    """ visibilityChanged(self, bool) [signal] """
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QDoubleSpinBox(QAbstractSpinBox):
  """ QDoubleSpinBox(parent: QWidget = None) """

  AdaptiveDecimalStepType = None
  CorrectToNearestValue = None
  CorrectToPreviousValue = None
  DefaultStepType = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  NoButtons = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  PlusMinus = None
  StepDownEnabled = None
  StepNone = None
  StepUpEnabled = None
  UpDownArrows = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buttonSymbols(self):
    """ buttonSymbols(self) -> QAbstractSpinBox.ButtonSymbols """
    return QAbstractSpinBox.ButtonSymbols()

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def cleanText(self):
    """ cleanText(self) -> str """
    return ""

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def correctionMode(self):
    """ correctionMode(self) -> QAbstractSpinBox.CorrectionMode """
    return QAbstractSpinBox.CorrectionMode()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def decimals(self):
    """ decimals(self) -> int """
    return 1

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAcceptableInput(self):
    """ hasAcceptableInput(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpretText(self):
    """ interpretText(self) """
    pass

  def isAccelerated(self):
    """ isAccelerated(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isGroupSeparatorShown(self):
    """ isGroupSeparatorShown(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardTracking(self):
    """ keyboardTracking(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> float """
    return 1.0

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> float """
    return 1.0

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def prefix(self):
    """ prefix(self) -> str """
    return ""

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAccelerated(self, bool):
    """ setAccelerated(self, bool) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButtonSymbols(self, arg0):
    """ setButtonSymbols(self, QAbstractSpinBox.ButtonSymbols) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCorrectionMode(self, arg0):
    """ setCorrectionMode(self, QAbstractSpinBox.CorrectionMode) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDecimals(self, int):
    """ setDecimals(self, int) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroupSeparatorShown(self, bool):
    """ setGroupSeparatorShown(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeyboardTracking(self, bool):
    """ setKeyboardTracking(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit():
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, float):
    """ setMaximum(self, float) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, float):
    """ setMinimum(self, float) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPrefix(self, str):
    """ setPrefix(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, float, float):
    """ setRange(self, float, float) """
    pass

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSingleStep(self, float):
    """ setSingleStep(self, float) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpecialValueText(self, str):
    """ setSpecialValueText(self, str) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStepType(self, arg0):
    """ setStepType(self, QAbstractSpinBox.StepType) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setSuffix(self, str):
    """ setSuffix(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, float):
    """ setValue(self, float) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def singleStep(self):
    """ singleStep(self) -> float """
    return 1.0

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def specialValueText(self):
    """ specialValueText(self) -> str """
    return ""

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def stepBy(self, int):
    """ stepBy(self, int) """
    pass

  def stepDown(self):
    """ stepDown(self) """
    pass

  def stepEnabled():
    pass

  def stepType(self):
    """ stepType(self) -> QAbstractSpinBox.StepType """
    return QAbstractSpinBox.StepType()

  def stepUp(self):
    """ stepUp(self) """
    pass

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def suffix(self):
    """ suffix(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textFromValue(self, float):
    """ textFromValue(self, float) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

  def value(self):
    """ value(self) -> float """
    return 1.0

  def valueChanged(self, float):
    """ valueChanged(self, float) [signal]
    valueChanged(self, str) [signal] """
    pass

  def valueFromText(self, str):
    """ valueFromText(self, str) -> float """
    return 1.0

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wrapping(self):
    """ wrapping(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QErrorMessage(QDialog):
  """ QErrorMessage(parent: QWidget = None) """

  Accepted = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rejected = None
  def __init__(self, arg0=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter():
    pass

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def qtHandler():
    """ qtHandler() -> QErrorMessage """
    return QErrorMessage()

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMessage(self, str):
    """ showMessage(self, str)
    showMessage(self, str, str) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QFileDialog(QDialog):
  """ QFileDialog(QWidget, Union[Qt.WindowFlags, Qt.WindowType])
  QFileDialog(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '') """

  Accept = None

  class AcceptMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AcceptOpen = None
  AcceptSave = None
  Accepted = None
  AnyFile = None
  Detail = None
  class DialogLabel(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Directory = None
  DirectoryOnly = None
  DontConfirmOverwrite = None
  DontResolveSymlinks = None
  DontUseCustomDirectoryIcons = None
  DontUseNativeDialog = None
  DontUseSheet = None
  DrawChildren = None
  DrawWindowBackground = None
  ExistingFile = None
  ExistingFiles = None

  class FileMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FileName = None
  FileType = None
  HideNameFilterDetails = None
  IgnoreMask = None
  List = None
  LookIn = None

  class Option(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Options(simplewrapper):
    """ QFileDialog.Options()
    QFileDialog.Options(Union[QFileDialog.Options, QFileDialog.Option])
    QFileDialog.Options(QFileDialog.Options) """

    def __init__(self):
      pass

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  ReadOnly = None
  Reject = None
  Rejected = None
  ShowDirsOnly = None

  class ViewMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, QWidget, UnionQt.WindowFlags=None, Qt.WindowType=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptMode(self):
    """ acceptMode(self) -> QFileDialog.AcceptMode """
    return QFileDialog.AcceptMode()

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, str):
    """ currentChanged(self, str) [signal] """
    pass

  def currentUrlChanged(self, QtCore.QUrl):
    """ currentUrlChanged(self, QUrl) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def defaultSuffix(self):
    """ defaultSuffix(self) -> str """
    return ""

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def directory(self):
    """ directory(self) -> QDir """
    return QtCore.QDir()

  def directoryEntered(self, str):
    """ directoryEntered(self, str) [signal] """
    pass

  def directoryUrl(self):
    """ directoryUrl(self) -> QUrl """
    return QtCore.QUrl()

  def directoryUrlEntered(self, QtCore.QUrl):
    """ directoryUrlEntered(self, QUrl) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter():
    pass

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def fileMode(self):
    """ fileMode(self) -> QFileDialog.FileMode """
    return QFileDialog.FileMode()

  def fileSelected(self, str):
    """ fileSelected(self, str) [signal] """
    pass

  def filesSelected(self, arg0):
    """ filesSelected(self, Iterable[str]) [signal] """
    pass

  def filter(self):
    """ filter(self) -> QDir.Filters """
    return QDir.Filters()

  def filterSelected(self, str):
    """ filterSelected(self, str) [signal] """
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getExistingDirectory(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None):
    """ getExistingDirectory(parent: QWidget = None, caption: str = '', directory: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = QFileDialog.ShowDirsOnly) -> str """
    return ""

  def getExistingDirectoryUrl(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None):
    """ getExistingDirectoryUrl(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), options: Union[QFileDialog.Options, QFileDialog.Option] = QFileDialog.ShowDirsOnly, supportedSchemes: Iterable[str] = []) -> QUrl """
    return QtCore.QUrl()

  def getOpenFileName(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None):
    """ getOpenFileName(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[str, str] """
    return ""

  def getOpenFileNames(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None):
    """ getOpenFileNames(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[List[str], str] """
    return ""

  def getOpenFileUrl(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None):
    """ getOpenFileUrl(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0, supportedSchemes: Iterable[str] = []) -> Tuple[QUrl, str] """
    return ""

  def getOpenFileUrls(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None):
    """ getOpenFileUrls(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0, supportedSchemes: Iterable[str] = []) -> Tuple[List[QUrl], str] """
    return ""

  def getSaveFileName(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None):
    """ getSaveFileName(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[str, str] """
    return ""

  def getSaveFileUrl(arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None):
    """ getSaveFileUrl(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0, supportedSchemes: Iterable[str] = []) -> Tuple[QUrl, str] """
    return ""

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def history(self):
    """ history(self) -> List[str] """
    return ""

  def iconProvider(self):
    """ iconProvider(self) -> QFileIconProvider """
    return QFileIconProvider()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def labelText(self, arg0):
    """ labelText(self, QFileDialog.DialogLabel) -> str """
    return ""

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def mimeTypeFilters(self):
    """ mimeTypeFilters(self) -> List[str] """
    return ""

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nameFilters(self):
    """ nameFilters(self) -> List[str] """
    return ""

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self)
    open(self, PYQT_SLOT) """
    pass

  def options(self):
    """ options(self) -> QFileDialog.Options """
    return QFileDialog.Options()

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def proxyModel(self):
    """ proxyModel(self) -> QAbstractProxyModel """
    return QtCore.QAbstractProxyModel()

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def restoreState(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def saveState(self):
    """ saveState(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectFile(self, str):
    """ selectFile(self, str) """
    pass

  def selectMimeTypeFilter(self, str):
    """ selectMimeTypeFilter(self, str) """
    pass

  def selectNameFilter(self, str):
    """ selectNameFilter(self, str) """
    pass

  def selectUrl(self, QtCore.QUrl):
    """ selectUrl(self, QUrl) """
    pass

  def selectedFiles(self):
    """ selectedFiles(self) -> List[str] """
    return ""

  def selectedMimeTypeFilter(self):
    """ selectedMimeTypeFilter(self) -> str """
    return ""

  def selectedNameFilter(self):
    """ selectedNameFilter(self) -> str """
    return ""

  def selectedUrls(self):
    """ selectedUrls(self) -> List[QUrl] """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptMode(self, arg0):
    """ setAcceptMode(self, QFileDialog.AcceptMode) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultSuffix(self, str):
    """ setDefaultSuffix(self, str) """
    pass

  def setDirectory(self, str):
    """ setDirectory(self, str)
    setDirectory(self, QDir) """
    pass

  def setDirectoryUrl(self, QtCore.QUrl):
    """ setDirectoryUrl(self, QUrl) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFileMode(self, arg0):
    """ setFileMode(self, QFileDialog.FileMode) """
    pass

  def setFilter(self, UnionQDir.Filters=None, QDir.Filter=None):
    """ setFilter(self, Union[QDir.Filters, QDir.Filter]) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHistory(self, Iterablestr=None):
    """ setHistory(self, Iterable[str]) """
    pass

  def setIconProvider(self, QFileIconProvider):
    """ setIconProvider(self, QFileIconProvider) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setLabelText(self, arg0, str):
    """ setLabelText(self, QFileDialog.DialogLabel, str) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMimeTypeFilters(self, Iterablestr=None):
    """ setMimeTypeFilters(self, Iterable[str]) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setNameFilter(self, str):
    """ setNameFilter(self, str) """
    pass

  def setNameFilters(self, Iterablestr=None):
    """ setNameFilters(self, Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOption(self, arg0, arg1=None):
    """ setOption(self, QFileDialog.Option, on: bool = True) """
    pass

  def setOptions(self, UnionQFileDialog.Options=None, QFileDialog.Option=None):
    """ setOptions(self, Union[QFileDialog.Options, QFileDialog.Option]) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setProxyModel(self, QtCore.QAbstractProxyModel):
    """ setProxyModel(self, QAbstractProxyModel) """
    pass

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSidebarUrls(self, IterableQUrl=None):
    """ setSidebarUrls(self, Iterable[QUrl]) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setSupportedSchemes(self, Iterablestr=None):
    """ setSupportedSchemes(self, Iterable[str]) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setViewMode(self, arg0):
    """ setViewMode(self, QFileDialog.ViewMode) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def sidebarUrls(self):
    """ sidebarUrls(self) -> List[QUrl] """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def supportedSchemes(self):
    """ supportedSchemes(self) -> List[str] """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def testOption(self, arg0):
    """ testOption(self, QFileDialog.Option) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def urlSelected(self, QtCore.QUrl):
    """ urlSelected(self, QUrl) [signal] """
    pass

  def urlsSelected(self, arg0):
    """ urlsSelected(self, Iterable[QUrl]) [signal] """
    pass

  def viewMode(self):
    """ viewMode(self) -> QFileDialog.ViewMode """
    return QFileDialog.ViewMode()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QFileIconProvider(simplewrapper):
  """ QFileIconProvider() """

  Computer = None
  Desktop = None
  DontUseCustomDirectoryIcons = None
  Drive = None
  File = None
  Folder = None

  class IconType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Network = None

  class Option(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Options(simplewrapper):
    """ QFileIconProvider.Options()
    QFileIconProvider.Options(Union[QFileIconProvider.Options, QFileIconProvider.Option])
    QFileIconProvider.Options(QFileIconProvider.Options) """

    def __init__(self):
      pass

  Trashcan = None

  def __init__(self):
    pass

  def icon(self, arg0):
    """ icon(self, QFileIconProvider.IconType) -> QIcon
    icon(self, QFileInfo) -> QIcon """
    return QtGui.QIcon()

  def options(self):
    """ options(self) -> QFileIconProvider.Options """
    return QFileIconProvider.Options()

  def setOptions(self, UnionQFileIconProvider.Options=None, QFileIconProvider.Option=None):
    """ setOptions(self, Union[QFileIconProvider.Options, QFileIconProvider.Option]) """
    pass

  def type(self, QtCore.QFileInfo):
    """ type(self, QFileInfo) -> str """
    return ""

class QFileSystemModel(QAbstractItemModel):
  """ QFileSystemModel(parent: QObject = None) """

  FileIconRole = None
  FileNameRole = None
  FilePathRole = None
  FilePermissions = None
  HorizontalSortHint = None
  NoLayoutChangeHint = None

  class Roles(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  VerticalSortHint = None

  def __init__(self, arg0=None):
    pass

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buddy(self, QtCore.QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def canDropMimeData(self, QtCore.QMimeData, arg0, int, int, QtCore.QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return True

  def canFetchMore(self, QtCore.QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return True

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QtCore.QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QtCore.QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QtCore.QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QtCore.QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QtCore.QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged(self, QtCore.QModelIndex, QtCore.QModelIndex, arg0=None):
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def directoryLoaded(self, str):
    """ directoryLoaded(self, str) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dropMimeData(self, QtCore.QMimeData, arg0, int, int, QtCore.QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return True

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def fetchMore(self, QtCore.QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def fileIcon(self, QtCore.QModelIndex):
    """ fileIcon(self, QModelIndex) -> QIcon """
    return QtGui.QIcon()

  def fileInfo(self, QtCore.QModelIndex):
    """ fileInfo(self, QModelIndex) -> QFileInfo """
    return QtCore.QFileInfo()

  def fileName(self, QtCore.QModelIndex):
    """ fileName(self, QModelIndex) -> str """
    return ""

  def filePath(self, QtCore.QModelIndex):
    """ filePath(self, QModelIndex) -> str """
    return ""

  def fileRenamed(self, str, str, str):
    """ fileRenamed(self, str, str, str) [signal] """
    pass

  def filter(self):
    """ filter(self) -> QDir.Filters """
    return QDir.Filters()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self, QtCore.QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def iconProvider(self):
    """ iconProvider(self) -> QFileIconProvider """
    return QFileIconProvider()

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex
    index(self, str, column: int = 0) -> QModelIndex """
    return QtCore.QModelIndex()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def insertColumn(self, int, arg0=None):
    """ insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def insertRow(self, int, arg0=None):
    """ insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isDir(self, QtCore.QModelIndex):
    """ isDir(self, QModelIndex) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemData(self, QtCore.QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastModified(self, QtCore.QModelIndex):
    """ lastModified(self, QModelIndex) -> QDateTime """
    return QtCore.QDateTime()

  def layoutAboutToBeChanged(self, arg0=None, arg1=None):
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged(self, arg0=None, arg1=None):
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def match(self, QtCore.QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return QtCore.QMimeData()

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def mkdir(self, QtCore.QModelIndex, str):
    """ mkdir(self, QModelIndex, str) -> QModelIndex """
    return QtCore.QModelIndex()

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QtCore.QModelIndex, int, QtCore.QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return True

  def moveColumns(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return True

  def moveRow(self, QtCore.QModelIndex, int, QtCore.QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return True

  def moveRows(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return True

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def myComputer(self, arg0=None):
    """ myComputer(self, role: int = Qt.DisplayRole) -> Any """
    return None

  def nameFilterDisables(self):
    """ nameFilterDisables(self) -> bool """
    return True

  def nameFilters(self):
    """ nameFilters(self) -> List[str] """
    return ""

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QtCore.QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def permissions(self, QtCore.QModelIndex):
    """ permissions(self, QModelIndex) -> QFileDevice.Permissions """
    return QFileDevice.Permissions()

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remove(self, QtCore.QModelIndex):
    """ remove(self, QModelIndex) -> bool """
    return True

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return True

  def resetInternalData():
    pass

  def resolveSymlinks(self):
    """ resolveSymlinks(self) -> bool """
    return True

  def revert(self):
    """ revert(self) """
    pass

  def rmdir(self, QtCore.QModelIndex):
    """ rmdir(self, QModelIndex) -> bool """
    return True

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rootDirectory(self):
    """ rootDirectory(self) -> QDir """
    return QtCore.QDir()

  def rootPath(self):
    """ rootPath(self) -> str """
    return ""

  def rootPathChanged(self, str):
    """ rootPathChanged(self, str) [signal] """
    pass

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QtCore.QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QtCore.QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QtCore.QModelIndex, int, int, QtCore.QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setData(self, QtCore.QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return True

  def setFilter(self, UnionQDir.Filters=None, QDir.Filter=None):
    """ setFilter(self, Union[QDir.Filters, QDir.Filter]) """
    pass

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return True

  def setIconProvider(self, QFileIconProvider):
    """ setIconProvider(self, QFileIconProvider) """
    pass

  def setItemData(self, QtCore.QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return True

  def setNameFilterDisables(self, bool):
    """ setNameFilterDisables(self, bool) """
    pass

  def setNameFilters(self, Iterablestr=None):
    """ setNameFilters(self, Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setResolveSymlinks(self, bool):
    """ setResolveSymlinks(self, bool) """
    pass

  def setRootPath(self, str):
    """ setRootPath(self, str) -> QModelIndex """
    return QtCore.QModelIndex()

  def sibling(self, int, int, QtCore.QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self, QtCore.QModelIndex):
    """ size(self, QModelIndex) -> int """
    return 1

  def sort(self, int, arg0=None):
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def span(self, QtCore.QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return True

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def type(self, QtCore.QModelIndex):
    """ type(self, QModelIndex) -> str """
    return ""

class QFocusFrame(QWidget):
  """ QFocusFrame(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOption):
    """ initStyleOption(self, QStyleOption) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWidget(self, QWidget):
    """ setWidget(self, QWidget) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QFontComboBox(QComboBox):
  """ QFontComboBox(parent: QWidget = None) """

  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AdjustToMinimumContentsLength = None
  AdjustToMinimumContentsLengthWithIcon = None
  AllFonts = None
  DrawChildren = None
  DrawWindowBackground = None

  class FontFilter(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FontFilters(simplewrapper):
    """ QFontComboBox.FontFilters()
    QFontComboBox.FontFilters(Union[QFontComboBox.FontFilters, QFontComboBox.FontFilter])
    QFontComboBox.FontFilters(QFontComboBox.FontFilters) """

    def __init__(self):
      pass

  IgnoreMask = None
  InsertAfterCurrent = None
  InsertAlphabetically = None
  InsertAtBottom = None
  InsertAtCurrent = None
  InsertAtTop = None
  InsertBeforeCurrent = None
  MonospacedFonts = None
  NoInsert = None
  NonScalableFonts = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  ProportionalFonts = None
  ScalableFonts = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, int):
    """ activated(self, int) [signal]
    activated(self, str) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addItem(self, str, arg0=None):
    """ addItem(self, str, userData: Any = None)
    addItem(self, QIcon, str, userData: Any = None) """
    pass

  def addItems(self, Iterablestr=None):
    """ addItems(self, Iterable[str]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearEditText(self):
    """ clearEditText(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def completer(self):
    """ completer(self) -> QCompleter """
    return QCompleter()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentData(self, arg0=None):
    """ currentData(self, role: int = Qt.ItemDataRole.UserRole) -> Any """
    return None

  def currentFont(self):
    """ currentFont(self) -> QFont """
    return QtGui.QFont()

  def currentFontChanged(self, QtGui.QFont):
    """ currentFontChanged(self, QFont) [signal] """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def currentIndexChanged(self, int):
    """ currentIndexChanged(self, int) [signal]
    currentIndexChanged(self, str) [signal] """
    pass

  def currentText(self):
    """ currentText(self) -> str """
    return ""

  def currentTextChanged(self, str):
    """ currentTextChanged(self, str) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def duplicatesEnabled(self):
    """ duplicatesEnabled(self) -> bool """
    return True

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editTextChanged(self, str):
    """ editTextChanged(self, str) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findData(self, Any, arg0=None, arg1=None, arg2=None):
    """ findData(self, Any, role: int = Qt.UserRole, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchExactly|Qt.MatchCaseSensitive) -> int """
    return 1

  def findText(self, str, arg0=None, arg1=None):
    """ findText(self, str, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchExactly|Qt.MatchCaseSensitive) -> int """
    return 1

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontFilters(self):
    """ fontFilters(self) -> QFontComboBox.FontFilters """
    return QFontComboBox.FontFilters()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hidePopup(self):
    """ hidePopup(self) """
    pass

  def highlighted(self, int):
    """ highlighted(self, int) [signal]
    highlighted(self, str) [signal] """
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any
    inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertItem(self, int, str, arg0=None):
    """ insertItem(self, int, str, userData: Any = None)
    insertItem(self, int, QIcon, str, userData: Any = None) """
    pass

  def insertItems(self, int, Iterablestr=None):
    """ insertItems(self, int, Iterable[str]) """
    pass

  def insertPolicy(self):
    """ insertPolicy(self) -> QComboBox.InsertPolicy """
    return QComboBox.InsertPolicy()

  def insertSeparator(self, int):
    """ insertSeparator(self, int) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEditable(self):
    """ isEditable(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemData(self, int, arg0=None):
    """ itemData(self, int, role: int = Qt.UserRole) -> Any """
    return None

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemIcon(self, int):
    """ itemIcon(self, int) -> QIcon """
    return QtGui.QIcon()

  def itemText(self, int):
    """ itemText(self, int) -> str """
    return ""

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit(self):
    """ lineEdit(self) -> QLineEdit """
    return QLineEdit()

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maxCount(self):
    """ maxCount(self) -> int """
    return 1

  def maxVisibleItems(self):
    """ maxVisibleItems(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumContentsLength(self):
    """ minimumContentsLength(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def modelColumn(self):
    """ modelColumn(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, int):
    """ removeItem(self, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootModelIndex(self):
    """ rootModelIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCompleter(self, QCompleter):
    """ setCompleter(self, QCompleter) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentFont(self, QtGui.QFont):
    """ setCurrentFont(self, QFont) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCurrentText(self, str):
    """ setCurrentText(self, str) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDuplicatesEnabled(self, bool):
    """ setDuplicatesEnabled(self, bool) """
    pass

  def setEditText(self, str):
    """ setEditText(self, str) """
    pass

  def setEditable(self, bool):
    """ setEditable(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setFontFilters(self, UnionQFontComboBox.FontFilters=None, QFontComboBox.FontFilter=None):
    """ setFontFilters(self, Union[QFontComboBox.FontFilters, QFontComboBox.FontFilter]) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInsertPolicy(self, arg0):
    """ setInsertPolicy(self, QComboBox.InsertPolicy) """
    pass

  def setItemData(self, int, Any, arg0=None):
    """ setItemData(self, int, Any, role: int = Qt.ItemDataRole.UserRole) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemIcon(self, int, QtGui.QIcon):
    """ setItemIcon(self, int, QIcon) """
    pass

  def setItemText(self, int, str):
    """ setItemText(self, int, str) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit(self, QLineEdit):
    """ setLineEdit(self, QLineEdit) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaxCount(self, int):
    """ setMaxCount(self, int) """
    pass

  def setMaxVisibleItems(self, int):
    """ setMaxVisibleItems(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumContentsLength(self, int):
    """ setMinimumContentsLength(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setModelColumn(self, int):
    """ setModelColumn(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRootModelIndex(self, QtCore.QModelIndex):
    """ setRootModelIndex(self, QModelIndex) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QComboBox.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValidator(self, QtGui.QValidator):
    """ setValidator(self, QValidator) """
    pass

  def setView(self, QAbstractItemView):
    """ setView(self, QAbstractItemView) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWritingSystem(self, arg0):
    """ setWritingSystem(self, QFontDatabase.WritingSystem) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showPopup(self):
    """ showPopup(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QComboBox.SizeAdjustPolicy """
    return QComboBox.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validator(self):
    """ validator(self) -> QValidator """
    return QtGui.QValidator()

  def view(self):
    """ view(self) -> QAbstractItemView """
    return QAbstractItemView()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def writingSystem(self):
    """ writingSystem(self) -> QFontDatabase.WritingSystem """
    return QFontDatabase.WritingSystem()

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QFontDialog(QDialog):
  """ QFontDialog(parent: QWidget = None)
  QFontDialog(QFont, parent: QWidget = None) """

  Accepted = None
  DontUseNativeDialog = None
  DrawChildren = None
  DrawWindowBackground = None

  class FontDialogOption(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FontDialogOptions(simplewrapper):
    """ QFontDialog.FontDialogOptions()
    QFontDialog.FontDialogOptions(Union[QFontDialog.FontDialogOptions, QFontDialog.FontDialogOption])
    QFontDialog.FontDialogOptions(QFontDialog.FontDialogOptions) """

    def __init__(self):
      pass

  IgnoreMask = None
  MonospacedFonts = None
  NoButtons = None
  NonScalableFonts = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  ProportionalFonts = None
  Rejected = None
  ScalableFonts = None

  def __init__(self, arg0=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentFont(self):
    """ currentFont(self) -> QFont """
    return QtGui.QFont()

  def currentFontChanged(self, QtGui.QFont):
    """ currentFontChanged(self, QFont) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def fontSelected(self, QtGui.QFont):
    """ fontSelected(self, QFont) [signal] """
    pass

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getFont(QtGui.QFont, arg0=None, arg1=None, arg2=None, arg3=None):
    """ getFont(QFont, parent: QWidget = None, caption: str = '', options: Union[QFontDialog.FontDialogOptions, QFontDialog.FontDialogOption] = QFontDialog.FontDialogOptions()) -> Tuple[QFont, bool]
    getFont(parent: QWidget = None) -> Tuple[QFont, bool] """
    return True

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self)
    open(self, PYQT_SLOT) """
    pass

  def options(self):
    """ options(self) -> QFontDialog.FontDialogOptions """
    return QFontDialog.FontDialogOptions()

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectedFont(self):
    """ selectedFont(self) -> QFont """
    return QtGui.QFont()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentFont(self, QtGui.QFont):
    """ setCurrentFont(self, QFont) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOption(self, arg0, arg1=None):
    """ setOption(self, QFontDialog.FontDialogOption, on: bool = True) """
    pass

  def setOptions(self, UnionQFontDialog.FontDialogOptions=None, QFontDialog.FontDialogOption=None):
    """ setOptions(self, Union[QFontDialog.FontDialogOptions, QFontDialog.FontDialogOption]) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def testOption(self, arg0):
    """ testOption(self, QFontDialog.FontDialogOption) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QFormLayout(QLayout):
  """ QFormLayout(parent: QWidget = None) """

  AllNonFixedFieldsGrow = None
  DontWrapRows = None
  ExpandingFieldsGrow = None

  class FieldGrowthPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FieldRole = None
  FieldsStayAtSizeHint = None

  class ItemRole(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LabelRole = None

  class RowWrapPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SetDefaultConstraint = None
  SetFixedSize = None
  SetMaximumSize = None
  SetMinAndMaxSize = None
  SetMinimumSize = None
  SetNoConstraint = None
  SpanningRole = None

  class TakeRowResult(simplewrapper):
    """ QFormLayout.TakeRowResult()
    QFormLayout.TakeRowResult(QFormLayout.TakeRowResult) """

    def __init__(self):
      pass

    fieldItem = None
    labelItem = None

  WrapAllRows = None
  WrapLongRows = None

  def __init__(self, arg0=None):
    pass

  def activate(self):
    """ activate(self) -> bool """
    return True

  def addChildLayout():
    pass

  def addChildWidget():
    pass

  def addItem(self, QLayoutItem):
    """ addItem(self, QLayoutItem) """
    pass

  def addRow(self, QWidget, QWidget):
    """ addRow(self, QWidget, QWidget)
    addRow(self, QWidget, QLayout)
    addRow(self, str, QWidget)
    addRow(self, str, QLayout)
    addRow(self, QWidget)
    addRow(self, QLayout) """
    pass

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def alignmentRect():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closestAcceptableSize(QWidget, QtCore.QSize):
    """ closestAcceptableSize(QWidget, QSize) -> QSize """
    return QtCore.QSize()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def fieldGrowthPolicy(self):
    """ fieldGrowthPolicy(self) -> QFormLayout.FieldGrowthPolicy """
    return QFormLayout.FieldGrowthPolicy()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def formAlignment(self):
    """ formAlignment(self) -> Qt.Alignment """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getItemPosition(self, int):
    """ getItemPosition(self, int) -> Tuple[int, QFormLayout.ItemRole] """
    return 1

  def getLayoutPosition(self, QLayout):
    """ getLayoutPosition(self, QLayout) -> Tuple[int, QFormLayout.ItemRole] """
    return 1

  def getWidgetPosition(self, QWidget):
    """ getWidgetPosition(self, QWidget) -> Tuple[int, QFormLayout.ItemRole] """
    return 1

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def horizontalSpacing(self):
    """ horizontalSpacing(self) -> int """
    return 1

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int
    indexOf(self, QLayoutItem) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def insertRow(self, int, QWidget, QWidget):
    """ insertRow(self, int, QWidget, QWidget)
    insertRow(self, int, QWidget, QLayout)
    insertRow(self, int, str, QWidget)
    insertRow(self, int, str, QLayout)
    insertRow(self, int, QWidget)
    insertRow(self, int, QLayout) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, int, arg0):
    """ itemAt(self, int, QFormLayout.ItemRole) -> QLayoutItem
    itemAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def labelAlignment(self):
    """ labelAlignment(self) -> Qt.Alignment """
    return None

  def labelForField(self, QWidget):
    """ labelForField(self, QWidget) -> QWidget
    labelForField(self, QLayout) -> QWidget """
    return QWidget()

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def menuBar(self):
    """ menuBar(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QLayoutItem):
    """ removeItem(self, QLayoutItem) """
    pass

  def removeRow(self, int):
    """ removeRow(self, int)
    removeRow(self, QWidget)
    removeRow(self, QLayout) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def replaceWidget(self, QWidget, QWidget, arg0=None, arg1=None):
    """ replaceWidget(self, QWidget, QWidget, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QLayoutItem """
    return QLayoutItem()

  def rowCount(self):
    """ rowCount(self) -> int """
    return 1

  def rowWrapPolicy(self):
    """ rowWrapPolicy(self) -> QFormLayout.RowWrapPolicy """
    return QFormLayout.RowWrapPolicy()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAlignment(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    return True

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFieldGrowthPolicy(self, arg0):
    """ setFieldGrowthPolicy(self, QFormLayout.FieldGrowthPolicy) """
    pass

  def setFormAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setFormAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def setHorizontalSpacing(self, int):
    """ setHorizontalSpacing(self, int) """
    pass

  def setItem(self, int, arg0, QLayoutItem):
    """ setItem(self, int, QFormLayout.ItemRole, QLayoutItem) """
    pass

  def setLabelAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setLabelAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setLayout(self, int, arg0, QLayout):
    """ setLayout(self, int, QFormLayout.ItemRole, QLayout) """
    pass

  def setMenuBar(self, QWidget):
    """ setMenuBar(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRowWrapPolicy(self, arg0):
    """ setRowWrapPolicy(self, QFormLayout.RowWrapPolicy) """
    pass

  def setSizeConstraint(self, arg0):
    """ setSizeConstraint(self, QLayout.SizeConstraint) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setVerticalSpacing(self, int):
    """ setVerticalSpacing(self, int) """
    pass

  def setWidget(self, int, arg0, QWidget):
    """ setWidget(self, int, QFormLayout.ItemRole, QWidget) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeConstraint(self):
    """ sizeConstraint(self) -> QLayout.SizeConstraint """
    return QLayout.SizeConstraint()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def takeAt(self, int):
    """ takeAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def takeRow(self, int):
    """ takeRow(self, int) -> QFormLayout.TakeRowResult
    takeRow(self, QWidget) -> QFormLayout.TakeRowResult
    takeRow(self, QLayout) -> QFormLayout.TakeRowResult """
    return QFormLayout.TakeRowResult()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalHeightForWidth(self, int):
    """ totalHeightForWidth(self, int) -> int """
    return 1

  def totalMaximumSize(self):
    """ totalMaximumSize(self) -> QSize """
    return QtCore.QSize()

  def totalMinimumSize(self):
    """ totalMinimumSize(self) -> QSize """
    return QtCore.QSize()

  def totalSizeHint(self):
    """ totalSizeHint(self) -> QSize """
    return QtCore.QSize()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def verticalSpacing(self):
    """ verticalSpacing(self) -> int """
    return 1

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def widgetEvent():
    pass

class QFrame(QWidget):
  """ QFrame(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame(self, QtGui.QPainter):
    """ drawFrame(self, QPainter) """
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionFrame):
    """ initStyleOption(self, QStyleOptionFrame) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QGesture(QObject):
  """ QGesture(parent: QObject = None) """

  CancelAllInContext = None
  CancelNone = None

  class GestureCancelPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def gestureCancelPolicy(self):
    """ gestureCancelPolicy(self) -> QGesture.GestureCancelPolicy """
    return QGesture.GestureCancelPolicy()

  def gestureType(self):
    """ gestureType(self) -> Qt.GestureType """
    return None

  def hasHotSpot(self):
    """ hasHotSpot(self) -> bool """
    return True

  def hotSpot(self):
    """ hotSpot(self) -> QPointF """
    return QtCore.QPointF()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setGestureCancelPolicy(self, arg0):
    """ setGestureCancelPolicy(self, QGesture.GestureCancelPolicy) """
    pass

  def setHotSpot(self, UnionQPointF=None, QPoint=None):
    """ setHotSpot(self, Union[QPointF, QPoint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> Qt.GestureState """
    return None

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unsetHotSpot(self):
    """ unsetHotSpot(self) """
    pass

class QGestureEvent(QEvent):
  """ QGestureEvent(Iterable[QGesture])
  QGestureEvent(QGestureEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None

  class Type(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self, IterableQGesture=None):
    pass

  def accept(self):
    """ accept(self)
    accept(self, QGesture)
    accept(self, Qt.GestureType) """
    pass

  def activeGestures(self):
    """ activeGestures(self) -> List[QGesture] """
    return None

  def canceledGestures(self):
    """ canceledGestures(self) -> List[QGesture] """
    return None

  def gesture(self, arg0):
    """ gesture(self, Qt.GestureType) -> QGesture """
    return QGesture()

  def gestures(self):
    """ gestures(self) -> List[QGesture] """
    return None

  def ignore(self):
    """ ignore(self)
    ignore(self, QGesture)
    ignore(self, Qt.GestureType) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool
    isAccepted(self, QGesture) -> bool
    isAccepted(self, Qt.GestureType) -> bool """
    return True

  def mapToGraphicsScene(self, UnionQPointF=None, QPoint=None):
    """ mapToGraphicsScene(self, Union[QPointF, QPoint]) -> QPointF """
    return QtCore.QPointF()

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool)
    setAccepted(self, QGesture, bool)
    setAccepted(self, Qt.GestureType, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGestureRecognizer(wrapper):
  """ QGestureRecognizer()
  QGestureRecognizer(QGestureRecognizer) """

  CancelGesture = None
  ConsumeEventHint = None
  FinishGesture = None
  Ignore = None
  MayBeGesture = None

  class Result(simplewrapper):
    """ QGestureRecognizer.Result()
    QGestureRecognizer.Result(Union[QGestureRecognizer.Result, QGestureRecognizer.ResultFlag])
    QGestureRecognizer.Result(QGestureRecognizer.Result) """

    def __init__(self):
      pass

  class ResultFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TriggerGesture = None

  def __init__(self):
    pass

  def create(self, QtCore.QObject):
    """ create(self, QObject) -> QGesture """
    return QGesture()

  def recognize(self, QGesture, QtCore.QObject, QtCore.QEvent):
    """ recognize(self, QGesture, QObject, QEvent) -> QGestureRecognizer.Result """
    return QGestureRecognizer.Result()

  def registerRecognizer(QGestureRecognizer):
    """ registerRecognizer(QGestureRecognizer) -> Qt.GestureType """
    return None

  def reset(self, QGesture):
    """ reset(self, QGesture) """
    pass

  def unregisterRecognizer(arg0):
    """ unregisterRecognizer(Qt.GestureType) """
    pass

class QGraphicsAnchor(QObject):

  def __init__(self):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent(self, QtCore.QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QtCore.QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent(self, QtCore.QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify(self, QtCore.QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QtCore.QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return QtCore.QObject()

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSizePolicy(self, arg0):
    """ setSizePolicy(self, QSizePolicy.Policy) """
    pass

  def setSpacing(self, float):
    """ setSpacing(self, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy.Policy """
    return QSizePolicy.Policy()

  def spacing(self):
    """ spacing(self) -> float """
    return 1.0

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unsetSpacing(self):
    """ unsetSpacing(self) """
    pass

class QGraphicsAnchorLayout(QGraphicsLayout):
  """ QGraphicsAnchorLayout(parent: QGraphicsLayoutItem = None) """

  def __init__(self, arg0=None):
    pass

  def activate(self):
    """ activate(self) """
    pass

  def addAnchor(self, QGraphicsLayoutItem, arg0, QGraphicsLayoutItem, arg1):
    """ addAnchor(self, QGraphicsLayoutItem, Qt.AnchorPoint, QGraphicsLayoutItem, Qt.AnchorPoint) -> QGraphicsAnchor """
    return QGraphicsAnchor()

  def addAnchors(self, QGraphicsLayoutItem, QGraphicsLayoutItem, arg0=None, arg1=None):
    """ addAnchors(self, QGraphicsLayoutItem, QGraphicsLayoutItem, orientations: Union[Qt.Orientations, Qt.Orientation] = Qt.Horizontal|Qt.Vertical) """
    pass

  def addChildLayoutItem():
    pass

  def addCornerAnchors(self, QGraphicsLayoutItem, arg0, QGraphicsLayoutItem, arg1):
    """ addCornerAnchors(self, QGraphicsLayoutItem, Qt.Corner, QGraphicsLayoutItem, Qt.Corner) """
    pass

  def anchor(self, QGraphicsLayoutItem, arg0, QGraphicsLayoutItem, arg1):
    """ anchor(self, QGraphicsLayoutItem, Qt.AnchorPoint, QGraphicsLayoutItem, Qt.AnchorPoint) -> QGraphicsAnchor """
    return QGraphicsAnchor()

  def contentsRect(self):
    """ contentsRect(self) -> QRectF """
    return QtCore.QRectF()

  def count(self):
    """ count(self) -> int """
    return 1

  def effectiveSizeHint(self, arg0, arg1=None):
    """ effectiveSizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def geometry(self):
    """ geometry(self) -> QRectF """
    return QtCore.QRectF()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def graphicsItem(self):
    """ graphicsItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def horizontalSpacing(self):
    """ horizontalSpacing(self) -> float """
    return 1.0

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isActivated(self):
    """ isActivated(self) -> bool """
    return True

  def isLayout(self):
    """ isLayout(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def maximumHeight(self):
    """ maximumHeight(self) -> float """
    return 1.0

  def maximumSize(self):
    """ maximumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def minimumHeight(self):
    """ minimumHeight(self) -> float """
    return 1.0

  def minimumSize(self):
    """ minimumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def ownedByLayout(self):
    """ ownedByLayout(self) -> bool """
    return True

  def parentLayoutItem(self):
    """ parentLayoutItem(self) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def preferredHeight(self):
    """ preferredHeight(self) -> float """
    return 1.0

  def preferredSize(self):
    """ preferredSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def preferredWidth(self):
    """ preferredWidth(self) -> float """
    return 1.0

  def removeAt(self, int):
    """ removeAt(self, int) """
    pass

  def setContentsMargins(self, float, float, float, float):
    """ setContentsMargins(self, float, float, float, float) """
    pass

  def setGeometry(self, QtCore.QRectF):
    """ setGeometry(self, QRectF) """
    pass

  def setGraphicsItem():
    pass

  def setHorizontalSpacing(self, float):
    """ setHorizontalSpacing(self, float) """
    pass

  def setMaximumHeight(self, float):
    """ setMaximumHeight(self, float) """
    pass

  def setMaximumSize(self, QtCore.QSizeF):
    """ setMaximumSize(self, QSizeF)
    setMaximumSize(self, float, float) """
    pass

  def setMaximumWidth(self, float):
    """ setMaximumWidth(self, float) """
    pass

  def setMinimumHeight(self, float):
    """ setMinimumHeight(self, float) """
    pass

  def setMinimumSize(self, QtCore.QSizeF):
    """ setMinimumSize(self, QSizeF)
    setMinimumSize(self, float, float) """
    pass

  def setMinimumWidth(self, float):
    """ setMinimumWidth(self, float) """
    pass

  def setOwnedByLayout():
    pass

  def setParentLayoutItem(self, QGraphicsLayoutItem):
    """ setParentLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def setPreferredHeight(self, float):
    """ setPreferredHeight(self, float) """
    pass

  def setPreferredSize(self, QtCore.QSizeF):
    """ setPreferredSize(self, QSizeF)
    setPreferredSize(self, float, float) """
    pass

  def setPreferredWidth(self, float):
    """ setPreferredWidth(self, float) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy, controlType: QSizePolicy.ControlType = QSizePolicy.DefaultType) """
    pass

  def setSpacing(self, float):
    """ setSpacing(self, float) """
    pass

  def setVerticalSpacing(self, float):
    """ setVerticalSpacing(self, float) """
    pass

  def sizeHint(self, arg0, arg1=None):
    """ sizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def verticalSpacing(self):
    """ verticalSpacing(self) -> float """
    return 1.0

  def widgetEvent(self, QtCore.QEvent):
    """ widgetEvent(self, QEvent) """
    pass

class QGraphicsBlurEffect(QGraphicsEffect):
  """ QGraphicsBlurEffect(parent: QObject = None) """

  AnimationHint = None

  class BlurHint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class BlurHints(simplewrapper):
    """ QGraphicsBlurEffect.BlurHints()
    QGraphicsBlurEffect.BlurHints(Union[QGraphicsBlurEffect.BlurHints, QGraphicsBlurEffect.BlurHint])
    QGraphicsBlurEffect.BlurHints(QGraphicsBlurEffect.BlurHints) """

    def __init__(self):
      pass

  class ChangeFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ChangeFlags(simplewrapper):
    """ QGraphicsEffect.ChangeFlags()
    QGraphicsEffect.ChangeFlags(Union[QGraphicsEffect.ChangeFlags, QGraphicsEffect.ChangeFlag])
    QGraphicsEffect.ChangeFlags(QGraphicsEffect.ChangeFlags) """

    def __init__(self):
      pass

  NoPad = None
  PadToEffectiveBoundingRect = None
  PadToTransparentBorder = None
  PerformanceHint = None

  class PixmapPadMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  QualityHint = None
  SourceAttached = None
  SourceBoundingRectChanged = None
  SourceDetached = None
  SourceInvalidated = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def blurHints(self):
    """ blurHints(self) -> QGraphicsBlurEffect.BlurHints """
    return QGraphicsBlurEffect.BlurHints()

  def blurHintsChanged(self, arg0, arg1):
    """ blurHintsChanged(self, Union[QGraphicsBlurEffect.BlurHints, QGraphicsBlurEffect.BlurHint]) [signal] """
    pass

  def blurRadius(self):
    """ blurRadius(self) -> float """
    return 1.0

  def blurRadiusChanged(self, float):
    """ blurRadiusChanged(self, float) [signal] """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRectFor(self, QtCore.QRectF):
    """ boundingRectFor(self, QRectF) -> QRectF """
    return QtCore.QRectF()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def draw(self, QtGui.QPainter):
    """ draw(self, QPainter) """
    pass

  def drawSource():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enabledChanged(self, bool):
    """ enabledChanged(self, bool) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBlurHints(self, UnionQGraphicsBlurEffect.BlurHints=None, QGraphicsBlurEffect.BlurHint=None):
    """ setBlurHints(self, Union[QGraphicsBlurEffect.BlurHints, QGraphicsBlurEffect.BlurHint]) """
    pass

  def setBlurRadius(self, float):
    """ setBlurRadius(self, float) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sourceBoundingRect():
    pass

  def sourceChanged():
    pass

  def sourceIsPixmap():
    pass

  def sourcePixmap():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def updateBoundingRect():
    pass

class QGraphicsColorizeEffect(QGraphicsEffect):
  """ QGraphicsColorizeEffect(parent: QObject = None) """

  NoPad = None
  PadToEffectiveBoundingRect = None
  PadToTransparentBorder = None
  SourceAttached = None
  SourceBoundingRectChanged = None
  SourceDetached = None
  SourceInvalidated = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRectFor(self, QtCore.QRectF):
    """ boundingRectFor(self, QRectF) -> QRectF """
    return QtCore.QRectF()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def color(self):
    """ color(self) -> QColor """
    return QtGui.QColor()

  def colorChanged(self, arg0, arg1, arg2):
    """ colorChanged(self, Union[QColor, Qt.GlobalColor, QGradient]) [signal] """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def draw(self, QtGui.QPainter):
    """ draw(self, QPainter) """
    pass

  def drawSource():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enabledChanged(self, bool):
    """ enabledChanged(self, bool) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setStrength(self, float):
    """ setStrength(self, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sourceBoundingRect():
    pass

  def sourceChanged():
    pass

  def sourceIsPixmap():
    pass

  def sourcePixmap():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def strength(self):
    """ strength(self) -> float """
    return 1.0

  def strengthChanged(self, float):
    """ strengthChanged(self, float) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def updateBoundingRect():
    pass

class QGraphicsDropShadowEffect(QGraphicsEffect):
  """ QGraphicsDropShadowEffect(parent: QObject = None) """

  NoPad = None
  PadToEffectiveBoundingRect = None
  PadToTransparentBorder = None
  SourceAttached = None
  SourceBoundingRectChanged = None
  SourceDetached = None
  SourceInvalidated = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def blurRadius(self):
    """ blurRadius(self) -> float """
    return 1.0

  def blurRadiusChanged(self, float):
    """ blurRadiusChanged(self, float) [signal] """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRectFor(self, QtCore.QRectF):
    """ boundingRectFor(self, QRectF) -> QRectF """
    return QtCore.QRectF()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def color(self):
    """ color(self) -> QColor """
    return QtGui.QColor()

  def colorChanged(self, arg0, arg1, arg2):
    """ colorChanged(self, Union[QColor, Qt.GlobalColor, QGradient]) [signal] """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def draw(self, QtGui.QPainter):
    """ draw(self, QPainter) """
    pass

  def drawSource():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enabledChanged(self, bool):
    """ enabledChanged(self, bool) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def offset(self):
    """ offset(self) -> QPointF """
    return QtCore.QPointF()

  def offsetChanged(self, arg0, arg1):
    """ offsetChanged(self, Union[QPointF, QPoint]) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBlurRadius(self, float):
    """ setBlurRadius(self, float) """
    pass

  def setColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOffset(self, UnionQPointF=None, QPoint=None):
    """ setOffset(self, Union[QPointF, QPoint])
    setOffset(self, float, float)
    setOffset(self, float) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setXOffset(self, float):
    """ setXOffset(self, float) """
    pass

  def setYOffset(self, float):
    """ setYOffset(self, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sourceBoundingRect():
    pass

  def sourceChanged():
    pass

  def sourceIsPixmap():
    pass

  def sourcePixmap():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def updateBoundingRect():
    pass

  def xOffset(self):
    """ xOffset(self) -> float """
    return 1.0

  def yOffset(self):
    """ yOffset(self) -> float """
    return 1.0

class QGraphicsEffect(QObject):
  """ QGraphicsEffect(parent: QObject = None) """

  NoPad = None
  PadToEffectiveBoundingRect = None
  PadToTransparentBorder = None
  SourceAttached = None
  SourceBoundingRectChanged = None
  SourceDetached = None
  SourceInvalidated = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRectFor(self, QtCore.QRectF):
    """ boundingRectFor(self, QRectF) -> QRectF """
    return QtCore.QRectF()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def draw(self, QtGui.QPainter):
    """ draw(self, QPainter) """
    pass

  def drawSource(self, QtGui.QPainter):
    """ drawSource(self, QPainter) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enabledChanged(self, bool):
    """ enabledChanged(self, bool) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sourceBoundingRect(self, arg0=None):
    """ sourceBoundingRect(self, system: Qt.CoordinateSystem = Qt.LogicalCoordinates) -> QRectF """
    return QtCore.QRectF()

  def sourceChanged(self, UnionQGraphicsEffect.ChangeFlags=None, QGraphicsEffect.ChangeFlag=None):
    """ sourceChanged(self, Union[QGraphicsEffect.ChangeFlags, QGraphicsEffect.ChangeFlag]) """
    pass

  def sourceIsPixmap(self):
    """ sourceIsPixmap(self) -> bool """
    return True

  def sourcePixmap(self, arg0=None, arg1=None):
    """ sourcePixmap(self, system: Qt.CoordinateSystem = Qt.LogicalCoordinates, mode: QGraphicsEffect.PixmapPadMode = QGraphicsEffect.PadToEffectiveBoundingRect) -> Tuple[QPixmap, QPoint] """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def updateBoundingRect(self):
    """ updateBoundingRect(self) """
    pass

class QGraphicsEllipseItem(QAbstractGraphicsShapeItem):
  """ QGraphicsEllipseItem(parent: QGraphicsItem = None)
  QGraphicsEllipseItem(QRectF, parent: QGraphicsItem = None)
  QGraphicsEllipseItem(float, float, float, float, parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def brush(self):
    """ brush(self) -> QBrush """
    return QtGui.QBrush()

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def rect(self):
    """ rect(self) -> QRectF """
    return QtCore.QRectF()

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPen(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRect(self, QtCore.QRectF):
    """ setRect(self, QRectF)
    setRect(self, float, float, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setSpanAngle(self, int):
    """ setSpanAngle(self, int) """
    pass

  def setStartAngle(self, int):
    """ setStartAngle(self, int) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def spanAngle(self):
    """ spanAngle(self) -> int """
    return 1

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def startAngle(self):
    """ startAngle(self) -> int """
    return 1

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsGridLayout(QGraphicsLayout):
  """ QGraphicsGridLayout(parent: QGraphicsLayoutItem = None) """

  def __init__(self, arg0=None):
    pass

  def activate(self):
    """ activate(self) """
    pass

  def addChildLayoutItem():
    pass

  def addItem(self, QGraphicsLayoutItem, int, int, int, int, arg0=None, arg1=None):
    """ addItem(self, QGraphicsLayoutItem, int, int, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())
    addItem(self, QGraphicsLayoutItem, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def alignment(self, QGraphicsLayoutItem):
    """ alignment(self, QGraphicsLayoutItem) -> Qt.Alignment """
    return None

  def columnAlignment(self, int):
    """ columnAlignment(self, int) -> Qt.Alignment """
    return None

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def columnMaximumWidth(self, int):
    """ columnMaximumWidth(self, int) -> float """
    return 1.0

  def columnMinimumWidth(self, int):
    """ columnMinimumWidth(self, int) -> float """
    return 1.0

  def columnPreferredWidth(self, int):
    """ columnPreferredWidth(self, int) -> float """
    return 1.0

  def columnSpacing(self, int):
    """ columnSpacing(self, int) -> float """
    return 1.0

  def columnStretchFactor(self, int):
    """ columnStretchFactor(self, int) -> int """
    return 1

  def contentsRect(self):
    """ contentsRect(self) -> QRectF """
    return QtCore.QRectF()

  def count(self):
    """ count(self) -> int """
    return 1

  def effectiveSizeHint(self, arg0, arg1=None):
    """ effectiveSizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def geometry(self):
    """ geometry(self) -> QRectF """
    return QtCore.QRectF()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def graphicsItem(self):
    """ graphicsItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def horizontalSpacing(self):
    """ horizontalSpacing(self) -> float """
    return 1.0

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isActivated(self):
    """ isActivated(self) -> bool """
    return True

  def isLayout(self):
    """ isLayout(self) -> bool """
    return True

  def itemAt(self, int, int):
    """ itemAt(self, int, int) -> QGraphicsLayoutItem
    itemAt(self, int) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def maximumHeight(self):
    """ maximumHeight(self) -> float """
    return 1.0

  def maximumSize(self):
    """ maximumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def minimumHeight(self):
    """ minimumHeight(self) -> float """
    return 1.0

  def minimumSize(self):
    """ minimumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def ownedByLayout(self):
    """ ownedByLayout(self) -> bool """
    return True

  def parentLayoutItem(self):
    """ parentLayoutItem(self) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def preferredHeight(self):
    """ preferredHeight(self) -> float """
    return 1.0

  def preferredSize(self):
    """ preferredSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def preferredWidth(self):
    """ preferredWidth(self) -> float """
    return 1.0

  def removeAt(self, int):
    """ removeAt(self, int) """
    pass

  def removeItem(self, QGraphicsLayoutItem):
    """ removeItem(self, QGraphicsLayoutItem) """
    pass

  def rowAlignment(self, int):
    """ rowAlignment(self, int) -> Qt.Alignment """
    return None

  def rowCount(self):
    """ rowCount(self) -> int """
    return 1

  def rowMaximumHeight(self, int):
    """ rowMaximumHeight(self, int) -> float """
    return 1.0

  def rowMinimumHeight(self, int):
    """ rowMinimumHeight(self, int) -> float """
    return 1.0

  def rowPreferredHeight(self, int):
    """ rowPreferredHeight(self, int) -> float """
    return 1.0

  def rowSpacing(self, int):
    """ rowSpacing(self, int) -> float """
    return 1.0

  def rowStretchFactor(self, int):
    """ rowStretchFactor(self, int) -> int """
    return 1

  def setAlignment(self, QGraphicsLayoutItem, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QGraphicsLayoutItem, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setColumnAlignment(self, int, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setColumnAlignment(self, int, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setColumnFixedWidth(self, int, float):
    """ setColumnFixedWidth(self, int, float) """
    pass

  def setColumnMaximumWidth(self, int, float):
    """ setColumnMaximumWidth(self, int, float) """
    pass

  def setColumnMinimumWidth(self, int, float):
    """ setColumnMinimumWidth(self, int, float) """
    pass

  def setColumnPreferredWidth(self, int, float):
    """ setColumnPreferredWidth(self, int, float) """
    pass

  def setColumnSpacing(self, int, float):
    """ setColumnSpacing(self, int, float) """
    pass

  def setColumnStretchFactor(self, int, int):
    """ setColumnStretchFactor(self, int, int) """
    pass

  def setContentsMargins(self, float, float, float, float):
    """ setContentsMargins(self, float, float, float, float) """
    pass

  def setGeometry(self, QtCore.QRectF):
    """ setGeometry(self, QRectF) """
    pass

  def setGraphicsItem():
    pass

  def setHorizontalSpacing(self, float):
    """ setHorizontalSpacing(self, float) """
    pass

  def setMaximumHeight(self, float):
    """ setMaximumHeight(self, float) """
    pass

  def setMaximumSize(self, QtCore.QSizeF):
    """ setMaximumSize(self, QSizeF)
    setMaximumSize(self, float, float) """
    pass

  def setMaximumWidth(self, float):
    """ setMaximumWidth(self, float) """
    pass

  def setMinimumHeight(self, float):
    """ setMinimumHeight(self, float) """
    pass

  def setMinimumSize(self, QtCore.QSizeF):
    """ setMinimumSize(self, QSizeF)
    setMinimumSize(self, float, float) """
    pass

  def setMinimumWidth(self, float):
    """ setMinimumWidth(self, float) """
    pass

  def setOwnedByLayout():
    pass

  def setParentLayoutItem(self, QGraphicsLayoutItem):
    """ setParentLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def setPreferredHeight(self, float):
    """ setPreferredHeight(self, float) """
    pass

  def setPreferredSize(self, QtCore.QSizeF):
    """ setPreferredSize(self, QSizeF)
    setPreferredSize(self, float, float) """
    pass

  def setPreferredWidth(self, float):
    """ setPreferredWidth(self, float) """
    pass

  def setRowAlignment(self, int, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setRowAlignment(self, int, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setRowFixedHeight(self, int, float):
    """ setRowFixedHeight(self, int, float) """
    pass

  def setRowMaximumHeight(self, int, float):
    """ setRowMaximumHeight(self, int, float) """
    pass

  def setRowMinimumHeight(self, int, float):
    """ setRowMinimumHeight(self, int, float) """
    pass

  def setRowPreferredHeight(self, int, float):
    """ setRowPreferredHeight(self, int, float) """
    pass

  def setRowSpacing(self, int, float):
    """ setRowSpacing(self, int, float) """
    pass

  def setRowStretchFactor(self, int, int):
    """ setRowStretchFactor(self, int, int) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy, controlType: QSizePolicy.ControlType = QSizePolicy.DefaultType) """
    pass

  def setSpacing(self, float):
    """ setSpacing(self, float) """
    pass

  def setVerticalSpacing(self, float):
    """ setVerticalSpacing(self, float) """
    pass

  def sizeHint(self, arg0, arg1=None):
    """ sizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def verticalSpacing(self):
    """ verticalSpacing(self) -> float """
    return 1.0

  def widgetEvent(self, QtCore.QEvent):
    """ widgetEvent(self, QEvent) """
    pass

class QGraphicsItem(wrapper):
  """ QGraphicsItem(parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent(self, QGraphicsSceneContextMenuEvent):
    """ contextMenuEvent(self, QGraphicsSceneContextMenuEvent) """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent(self, QGraphicsSceneDragDropEvent):
    """ dragEnterEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragLeaveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragLeaveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragMoveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragMoveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dropEvent(self, QGraphicsSceneDragDropEvent):
    """ dropEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent(self, QGraphicsSceneHoverEvent):
    """ hoverEnterEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def hoverLeaveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverLeaveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def hoverMoveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverMoveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange(self, arg0, Any):
    """ itemChange(self, QGraphicsItem.GraphicsItemChange, Any) -> Any """
    return None

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent):
    """ mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseMoveEvent(self, QGraphicsSceneMouseEvent):
    """ mouseMoveEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mousePressEvent(self, QGraphicsSceneMouseEvent):
    """ mousePressEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseReleaseEvent(self, QGraphicsSceneMouseEvent):
    """ mouseReleaseEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange(self):
    """ prepareGeometryChange(self) """
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent(self, QtCore.QEvent):
    """ sceneEvent(self, QEvent) -> bool """
    return True

  def sceneEventFilter(self, QGraphicsItem, QtCore.QEvent):
    """ sceneEventFilter(self, QGraphicsItem, QEvent) -> bool """
    return True

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus(self):
    """ updateMicroFocus(self) """
    pass

  def wheelEvent(self, QGraphicsSceneWheelEvent):
    """ wheelEvent(self, QGraphicsSceneWheelEvent) """
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsItemGroup(QGraphicsItem):
  """ QGraphicsItemGroup(parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def addToGroup(self, QGraphicsItem):
    """ addToGroup(self, QGraphicsItem) """
    pass

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def removeFromGroup(self, QGraphicsItem):
    """ removeFromGroup(self, QGraphicsItem) """
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsLayout(QGraphicsLayoutItem):
  """ QGraphicsLayout(parent: QGraphicsLayoutItem = None) """

  def __init__(self, arg0=None):
    pass

  def activate(self):
    """ activate(self) """
    pass

  def addChildLayoutItem(self, QGraphicsLayoutItem):
    """ addChildLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def contentsRect(self):
    """ contentsRect(self) -> QRectF """
    return QtCore.QRectF()

  def count(self):
    """ count(self) -> int """
    return 1

  def effectiveSizeHint(self, arg0, arg1=None):
    """ effectiveSizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def geometry(self):
    """ geometry(self) -> QRectF """
    return QtCore.QRectF()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def graphicsItem(self):
    """ graphicsItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isActivated(self):
    """ isActivated(self) -> bool """
    return True

  def isLayout(self):
    """ isLayout(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def maximumHeight(self):
    """ maximumHeight(self) -> float """
    return 1.0

  def maximumSize(self):
    """ maximumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def minimumHeight(self):
    """ minimumHeight(self) -> float """
    return 1.0

  def minimumSize(self):
    """ minimumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def ownedByLayout(self):
    """ ownedByLayout(self) -> bool """
    return True

  def parentLayoutItem(self):
    """ parentLayoutItem(self) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def preferredHeight(self):
    """ preferredHeight(self) -> float """
    return 1.0

  def preferredSize(self):
    """ preferredSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def preferredWidth(self):
    """ preferredWidth(self) -> float """
    return 1.0

  def removeAt(self, int):
    """ removeAt(self, int) """
    pass

  def setContentsMargins(self, float, float, float, float):
    """ setContentsMargins(self, float, float, float, float) """
    pass

  def setGeometry(self, QtCore.QRectF):
    """ setGeometry(self, QRectF) """
    pass

  def setGraphicsItem():
    pass

  def setMaximumHeight(self, float):
    """ setMaximumHeight(self, float) """
    pass

  def setMaximumSize(self, QtCore.QSizeF):
    """ setMaximumSize(self, QSizeF)
    setMaximumSize(self, float, float) """
    pass

  def setMaximumWidth(self, float):
    """ setMaximumWidth(self, float) """
    pass

  def setMinimumHeight(self, float):
    """ setMinimumHeight(self, float) """
    pass

  def setMinimumSize(self, QtCore.QSizeF):
    """ setMinimumSize(self, QSizeF)
    setMinimumSize(self, float, float) """
    pass

  def setMinimumWidth(self, float):
    """ setMinimumWidth(self, float) """
    pass

  def setOwnedByLayout():
    pass

  def setParentLayoutItem(self, QGraphicsLayoutItem):
    """ setParentLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def setPreferredHeight(self, float):
    """ setPreferredHeight(self, float) """
    pass

  def setPreferredSize(self, QtCore.QSizeF):
    """ setPreferredSize(self, QSizeF)
    setPreferredSize(self, float, float) """
    pass

  def setPreferredWidth(self, float):
    """ setPreferredWidth(self, float) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy, controlType: QSizePolicy.ControlType = QSizePolicy.DefaultType) """
    pass

  def sizeHint():
    pass

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def widgetEvent(self, QtCore.QEvent):
    """ widgetEvent(self, QEvent) """
    pass

class QGraphicsLayoutItem(wrapper):
  """ QGraphicsLayoutItem(parent: QGraphicsLayoutItem = None, isLayout: bool = False) """

  def __init__(self, arg0=None, arg1=None):
    pass

  def contentsRect(self):
    """ contentsRect(self) -> QRectF """
    return QtCore.QRectF()

  def effectiveSizeHint(self, arg0, arg1=None):
    """ effectiveSizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def geometry(self):
    """ geometry(self) -> QRectF """
    return QtCore.QRectF()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def graphicsItem(self):
    """ graphicsItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def isLayout(self):
    """ isLayout(self) -> bool """
    return True

  def maximumHeight(self):
    """ maximumHeight(self) -> float """
    return 1.0

  def maximumSize(self):
    """ maximumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def minimumHeight(self):
    """ minimumHeight(self) -> float """
    return 1.0

  def minimumSize(self):
    """ minimumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def ownedByLayout(self):
    """ ownedByLayout(self) -> bool """
    return True

  def parentLayoutItem(self):
    """ parentLayoutItem(self) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def preferredHeight(self):
    """ preferredHeight(self) -> float """
    return 1.0

  def preferredSize(self):
    """ preferredSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def preferredWidth(self):
    """ preferredWidth(self) -> float """
    return 1.0

  def setGeometry(self, QtCore.QRectF):
    """ setGeometry(self, QRectF) """
    pass

  def setGraphicsItem(self, QGraphicsItem):
    """ setGraphicsItem(self, QGraphicsItem) """
    pass

  def setMaximumHeight(self, float):
    """ setMaximumHeight(self, float) """
    pass

  def setMaximumSize(self, QtCore.QSizeF):
    """ setMaximumSize(self, QSizeF)
    setMaximumSize(self, float, float) """
    pass

  def setMaximumWidth(self, float):
    """ setMaximumWidth(self, float) """
    pass

  def setMinimumHeight(self, float):
    """ setMinimumHeight(self, float) """
    pass

  def setMinimumSize(self, QtCore.QSizeF):
    """ setMinimumSize(self, QSizeF)
    setMinimumSize(self, float, float) """
    pass

  def setMinimumWidth(self, float):
    """ setMinimumWidth(self, float) """
    pass

  def setOwnedByLayout(self, bool):
    """ setOwnedByLayout(self, bool) """
    pass

  def setParentLayoutItem(self, QGraphicsLayoutItem):
    """ setParentLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def setPreferredHeight(self, float):
    """ setPreferredHeight(self, float) """
    pass

  def setPreferredSize(self, QtCore.QSizeF):
    """ setPreferredSize(self, QSizeF)
    setPreferredSize(self, float, float) """
    pass

  def setPreferredWidth(self, float):
    """ setPreferredWidth(self, float) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy, controlType: QSizePolicy.ControlType = QSizePolicy.DefaultType) """
    pass

  def sizeHint(self, arg0, arg1=None):
    """ sizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

class QGraphicsLineItem(QGraphicsItem):
  """ QGraphicsLineItem(parent: QGraphicsItem = None)
  QGraphicsLineItem(QLineF, parent: QGraphicsItem = None)
  QGraphicsLineItem(float, float, float, float, parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def line(self):
    """ line(self) -> QLineF """
    return QtCore.QLineF()

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLine(self, QtCore.QLineF):
    """ setLine(self, QLineF)
    setLine(self, float, float, float, float) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPen(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsLinearLayout(QGraphicsLayout):
  """ QGraphicsLinearLayout(parent: QGraphicsLayoutItem = None)
  QGraphicsLinearLayout(Qt.Orientation, parent: QGraphicsLayoutItem = None) """

  def __init__(self, arg0=None):
    pass

  def activate(self):
    """ activate(self) """
    pass

  def addChildLayoutItem():
    pass

  def addItem(self, QGraphicsLayoutItem):
    """ addItem(self, QGraphicsLayoutItem) """
    pass

  def addStretch(self, arg0=None):
    """ addStretch(self, stretch: int = 1) """
    pass

  def alignment(self, QGraphicsLayoutItem):
    """ alignment(self, QGraphicsLayoutItem) -> Qt.Alignment """
    return None

  def contentsRect(self):
    """ contentsRect(self) -> QRectF """
    return QtCore.QRectF()

  def count(self):
    """ count(self) -> int """
    return 1

  def effectiveSizeHint(self, arg0, arg1=None):
    """ effectiveSizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def geometry(self):
    """ geometry(self) -> QRectF """
    return QtCore.QRectF()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def graphicsItem(self):
    """ graphicsItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def insertItem(self, int, QGraphicsLayoutItem):
    """ insertItem(self, int, QGraphicsLayoutItem) """
    pass

  def insertStretch(self, int, arg0=None):
    """ insertStretch(self, int, stretch: int = 1) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isActivated(self):
    """ isActivated(self) -> bool """
    return True

  def isLayout(self):
    """ isLayout(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def itemSpacing(self, int):
    """ itemSpacing(self, int) -> float """
    return 1.0

  def maximumHeight(self):
    """ maximumHeight(self) -> float """
    return 1.0

  def maximumSize(self):
    """ maximumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def minimumHeight(self):
    """ minimumHeight(self) -> float """
    return 1.0

  def minimumSize(self):
    """ minimumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def ownedByLayout(self):
    """ ownedByLayout(self) -> bool """
    return True

  def parentLayoutItem(self):
    """ parentLayoutItem(self) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def preferredHeight(self):
    """ preferredHeight(self) -> float """
    return 1.0

  def preferredSize(self):
    """ preferredSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def preferredWidth(self):
    """ preferredWidth(self) -> float """
    return 1.0

  def removeAt(self, int):
    """ removeAt(self, int) """
    pass

  def removeItem(self, QGraphicsLayoutItem):
    """ removeItem(self, QGraphicsLayoutItem) """
    pass

  def setAlignment(self, QGraphicsLayoutItem, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QGraphicsLayoutItem, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setContentsMargins(self, float, float, float, float):
    """ setContentsMargins(self, float, float, float, float) """
    pass

  def setGeometry(self, QtCore.QRectF):
    """ setGeometry(self, QRectF) """
    pass

  def setGraphicsItem():
    pass

  def setItemSpacing(self, int, float):
    """ setItemSpacing(self, int, float) """
    pass

  def setMaximumHeight(self, float):
    """ setMaximumHeight(self, float) """
    pass

  def setMaximumSize(self, QtCore.QSizeF):
    """ setMaximumSize(self, QSizeF)
    setMaximumSize(self, float, float) """
    pass

  def setMaximumWidth(self, float):
    """ setMaximumWidth(self, float) """
    pass

  def setMinimumHeight(self, float):
    """ setMinimumHeight(self, float) """
    pass

  def setMinimumSize(self, QtCore.QSizeF):
    """ setMinimumSize(self, QSizeF)
    setMinimumSize(self, float, float) """
    pass

  def setMinimumWidth(self, float):
    """ setMinimumWidth(self, float) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setOwnedByLayout():
    pass

  def setParentLayoutItem(self, QGraphicsLayoutItem):
    """ setParentLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def setPreferredHeight(self, float):
    """ setPreferredHeight(self, float) """
    pass

  def setPreferredSize(self, QtCore.QSizeF):
    """ setPreferredSize(self, QSizeF)
    setPreferredSize(self, float, float) """
    pass

  def setPreferredWidth(self, float):
    """ setPreferredWidth(self, float) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy, controlType: QSizePolicy.ControlType = QSizePolicy.DefaultType) """
    pass

  def setSpacing(self, float):
    """ setSpacing(self, float) """
    pass

  def setStretchFactor(self, QGraphicsLayoutItem, int):
    """ setStretchFactor(self, QGraphicsLayoutItem, int) """
    pass

  def sizeHint(self, arg0, arg1=None):
    """ sizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def spacing(self):
    """ spacing(self) -> float """
    return 1.0

  def stretchFactor(self, QGraphicsLayoutItem):
    """ stretchFactor(self, QGraphicsLayoutItem) -> int """
    return 1

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def widgetEvent(self, QtCore.QEvent):
    """ widgetEvent(self, QEvent) """
    pass

class QGraphicsObject(QObject):
  """ QGraphicsObject(parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childEvent():
    pass

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def connectNotify():
    pass

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customEvent():
    pass

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def enabledChanged(self):
    """ enabledChanged(self) [signal] """
    pass

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self):
    """ opacityChanged(self) [signal] """
    pass

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentChanged(self):
    """ parentChanged(self) [signal] """
    pass

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def rotationChanged(self):
    """ rotationChanged(self) [signal] """
    pass

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scaleChanged(self):
    """ scaleChanged(self) [signal] """
    pass

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus(self):
    """ updateMicroFocus(self) """
    pass

  def visibleChanged(self):
    """ visibleChanged(self) [signal] """
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def xChanged(self):
    """ xChanged(self) [signal] """
    pass

  def y(self):
    """ y(self) -> float """
    return 1.0

  def yChanged(self):
    """ yChanged(self) [signal] """
    pass

  def zChanged(self):
    """ zChanged(self) [signal] """
    pass

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsOpacityEffect(QGraphicsEffect):
  """ QGraphicsOpacityEffect(parent: QObject = None) """

  NoPad = None
  PadToEffectiveBoundingRect = None
  PadToTransparentBorder = None
  SourceAttached = None
  SourceBoundingRectChanged = None
  SourceDetached = None
  SourceInvalidated = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRectFor(self, QtCore.QRectF):
    """ boundingRectFor(self, QRectF) -> QRectF """
    return QtCore.QRectF()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def draw(self, QtGui.QPainter):
    """ draw(self, QPainter) """
    pass

  def drawSource():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enabledChanged(self, bool):
    """ enabledChanged(self, bool) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self, float):
    """ opacityChanged(self, float) [signal] """
    pass

  def opacityMask(self):
    """ opacityMask(self) -> QBrush """
    return QtGui.QBrush()

  def opacityMaskChanged(self, arg0, QtGui.QColor, arg1, arg2):
    """ opacityMaskChanged(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setOpacityMask(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setOpacityMask(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sourceBoundingRect():
    pass

  def sourceChanged():
    pass

  def sourceIsPixmap():
    pass

  def sourcePixmap():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def updateBoundingRect():
    pass

class QGraphicsPathItem(QAbstractGraphicsShapeItem):
  """ QGraphicsPathItem(parent: QGraphicsItem = None)
  QGraphicsPathItem(QPainterPath, parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def brush(self):
    """ brush(self) -> QBrush """
    return QtGui.QBrush()

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def path(self):
    """ path(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPath(self, QtGui.QPainterPath):
    """ setPath(self, QPainterPath) """
    pass

  def setPen(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsPixmapItem(QGraphicsItem):
  """ QGraphicsPixmapItem(parent: QGraphicsItem = None)
  QGraphicsPixmapItem(QPixmap, parent: QGraphicsItem = None) """

  BoundingRectShape = None
  DeviceCoordinateCache = None
  HeuristicMaskShape = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  MaskShape = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None

  class ShapeMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def offset(self):
    """ offset(self) -> QPointF """
    return QtCore.QPointF()

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, QWidget):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, QWidget) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pixmap(self):
    """ pixmap(self) -> QPixmap """
    return QtGui.QPixmap()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOffset(self, UnionQPointF=None, QPoint=None):
    """ setOffset(self, Union[QPointF, QPoint])
    setOffset(self, float, float) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPixmap(self, QtGui.QPixmap):
    """ setPixmap(self, QPixmap) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setShapeMode(self, arg0):
    """ setShapeMode(self, QGraphicsPixmapItem.ShapeMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformationMode(self, arg0):
    """ setTransformationMode(self, Qt.TransformationMode) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def shapeMode(self):
    """ shapeMode(self) -> QGraphicsPixmapItem.ShapeMode """
    return QGraphicsPixmapItem.ShapeMode()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformationMode(self):
    """ transformationMode(self) -> Qt.TransformationMode """
    return None

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsPolygonItem(QAbstractGraphicsShapeItem):
  """ QGraphicsPolygonItem(parent: QGraphicsItem = None)
  QGraphicsPolygonItem(QPolygonF, parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def brush(self):
    """ brush(self) -> QBrush """
    return QtGui.QBrush()

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def fillRule(self):
    """ fillRule(self) -> Qt.FillRule """
    return None

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def polygon(self):
    """ polygon(self) -> QPolygonF """
    return QtGui.QPolygonF()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFillRule(self, arg0):
    """ setFillRule(self, Qt.FillRule) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPen(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setPolygon(self, QtGui.QPolygonF):
    """ setPolygon(self, QPolygonF) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsProxyWidget(QGraphicsWidget):
  """ QGraphicsProxyWidget(parent: QGraphicsItem = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def advance(self, int):
    """ advance(self, int) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def changeEvent():
    pass

  def childEvent():
    pass

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def connectNotify():
    pass

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contentsRect(self):
    """ contentsRect(self) -> QRectF """
    return QtCore.QRectF()

  def contextMenuEvent(self, QGraphicsSceneContextMenuEvent):
    """ contextMenuEvent(self, QGraphicsSceneContextMenuEvent) """
    pass

  def createProxyForChildWidget(self, QWidget):
    """ createProxyForChildWidget(self, QWidget) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customEvent():
    pass

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QGraphicsSceneDragDropEvent):
    """ dragEnterEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragLeaveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragLeaveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragMoveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragMoveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dropEvent(self, QGraphicsSceneDragDropEvent):
    """ dropEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def effectiveSizeHint(self, arg0, arg1=None):
    """ effectiveSizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def enabledChanged(self):
    """ enabledChanged(self) [signal] """
    pass

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusWidget(self):
    """ focusWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def geometry(self):
    """ geometry(self) -> QRectF """
    return QtCore.QRectF()

  def geometryChanged(self):
    """ geometryChanged(self) [signal] """
    pass

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def getWindowFrameMargins(self):
    """ getWindowFrameMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabKeyboardEvent():
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def grabMouseEvent(self, QtCore.QEvent):
    """ grabMouseEvent(self, QEvent) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsItem(self):
    """ graphicsItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def hoverEnterEvent(self, QGraphicsSceneHoverEvent):
    """ hoverEnterEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def hoverLeaveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverLeaveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def hoverMoveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverMoveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initStyleOption():
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isLayout(self):
    """ isLayout(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemChange(self, arg0, Any):
    """ itemChange(self, QGraphicsItem.GraphicsItemChange, Any) -> Any """
    return None

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QGraphicsLayout """
    return QGraphicsLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def maximumHeight(self):
    """ maximumHeight(self) -> float """
    return 1.0

  def maximumSize(self):
    """ maximumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeight(self):
    """ minimumHeight(self) -> float """
    return 1.0

  def minimumSize(self):
    """ minimumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent):
    """ mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseMoveEvent(self, QGraphicsSceneMouseEvent):
    """ mouseMoveEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mousePressEvent(self, QGraphicsSceneMouseEvent):
    """ mousePressEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseReleaseEvent(self, QGraphicsSceneMouseEvent):
    """ mouseReleaseEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def newProxyWidget(self, QWidget):
    """ newProxyWidget(self, QWidget) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self):
    """ opacityChanged(self) [signal] """
    pass

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def ownedByLayout(self):
    """ ownedByLayout(self) -> bool """
    return True

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, QWidget):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, QWidget) """
    pass

  def paintWindowFrame(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paintWindowFrame(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentChanged(self):
    """ parentChanged(self) [signal] """
    pass

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentLayoutItem(self):
    """ parentLayoutItem(self) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def polishEvent():
    pass

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def preferredHeight(self):
    """ preferredHeight(self) -> float """
    return 1.0

  def preferredSize(self):
    """ preferredSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def preferredWidth(self):
    """ preferredWidth(self) -> float """
    return 1.0

  def prepareGeometryChange():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRectF """
    return QtCore.QRectF()

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def resize(self, QtCore.QSizeF):
    """ resize(self, QSizeF)
    resize(self, float, float) """
    pass

  def resizeEvent(self, QGraphicsSceneResizeEvent):
    """ resizeEvent(self, QGraphicsSceneResizeEvent) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def rotationChanged(self):
    """ rotationChanged(self) [signal] """
    pass

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scaleChanged(self):
    """ scaleChanged(self) [signal] """
    pass

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setContentsMargins(self, float, float, float, float):
    """ setContentsMargins(self, float, float, float, float) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setGeometry(self, QtCore.QRectF):
    """ setGeometry(self, QRectF) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGraphicsItem():
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QGraphicsLayout):
    """ setLayout(self, QGraphicsLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setMaximumHeight(self, float):
    """ setMaximumHeight(self, float) """
    pass

  def setMaximumSize(self, QtCore.QSizeF):
    """ setMaximumSize(self, QSizeF)
    setMaximumSize(self, float, float) """
    pass

  def setMaximumWidth(self, float):
    """ setMaximumWidth(self, float) """
    pass

  def setMinimumHeight(self, float):
    """ setMinimumHeight(self, float) """
    pass

  def setMinimumSize(self, QtCore.QSizeF):
    """ setMinimumSize(self, QSizeF)
    setMinimumSize(self, float, float) """
    pass

  def setMinimumWidth(self, float):
    """ setMinimumWidth(self, float) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setOwnedByLayout():
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setParentLayoutItem(self, QGraphicsLayoutItem):
    """ setParentLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setPreferredHeight(self, float):
    """ setPreferredHeight(self, float) """
    pass

  def setPreferredSize(self, QtCore.QSizeF):
    """ setPreferredSize(self, QSizeF)
    setPreferredSize(self, float, float) """
    pass

  def setPreferredWidth(self, float):
    """ setPreferredWidth(self, float) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy, controlType: QSizePolicy.ControlType = QSizePolicy.DefaultType) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setTabOrder(QGraphicsWidget, QGraphicsWidget):
    """ setTabOrder(QGraphicsWidget, QGraphicsWidget) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWidget(self, QWidget):
    """ setWidget(self, QWidget) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowFrameMargins(self, float, float, float, float):
    """ setWindowFrameMargins(self, float, float, float, float) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSizeF """
    return QtCore.QSizeF()

  def sizeHint(self, arg0, arg1=None):
    """ sizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def subWidgetRect(self, QWidget):
    """ subWidgetRect(self, QWidget) -> QRectF """
    return QtCore.QRectF()

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabKeyboardEvent():
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def ungrabMouseEvent(self, QtCore.QEvent):
    """ ungrabMouseEvent(self, QEvent) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetWindowFrameMargins(self):
    """ unsetWindowFrameMargins(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateGeometry():
    pass

  def updateMicroFocus():
    pass

  def visibleChanged(self):
    """ visibleChanged(self) [signal] """
    pass

  def wheelEvent(self, QGraphicsSceneWheelEvent):
    """ wheelEvent(self, QGraphicsSceneWheelEvent) """
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowFrameEvent():
    pass

  def windowFrameGeometry(self):
    """ windowFrameGeometry(self) -> QRectF """
    return QtCore.QRectF()

  def windowFrameRect(self):
    """ windowFrameRect(self) -> QRectF """
    return QtCore.QRectF()

  def windowFrameSectionAt():
    pass

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> float """
    return 1.0

  def xChanged(self):
    """ xChanged(self) [signal] """
    pass

  def y(self):
    """ y(self) -> float """
    return 1.0

  def yChanged(self):
    """ yChanged(self) [signal] """
    pass

  def zChanged(self):
    """ zChanged(self) [signal] """
    pass

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsRectItem(QAbstractGraphicsShapeItem):
  """ QGraphicsRectItem(parent: QGraphicsItem = None)
  QGraphicsRectItem(QRectF, parent: QGraphicsItem = None)
  QGraphicsRectItem(float, float, float, float, parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def brush(self):
    """ brush(self) -> QBrush """
    return QtGui.QBrush()

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def rect(self):
    """ rect(self) -> QRectF """
    return QtCore.QRectF()

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPen(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRect(self, QtCore.QRectF):
    """ setRect(self, QRectF)
    setRect(self, float, float, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsRotation(QGraphicsTransform):
  """ QGraphicsRotation(parent: QObject = None) """

  def __init__(self, arg0=None):
    pass

  def angle(self):
    """ angle(self) -> float """
    return 1.0

  def angleChanged(self):
    """ angleChanged(self) [signal] """
    pass

  def applyTo(self, QtGui.QMatrix4x4):
    """ applyTo(self, QMatrix4x4) """
    pass

  def axis(self):
    """ axis(self) -> QVector3D """
    return QtGui.QVector3D()

  def axisChanged(self):
    """ axisChanged(self) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def origin(self):
    """ origin(self) -> QVector3D """
    return QtGui.QVector3D()

  def originChanged(self):
    """ originChanged(self) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAngle(self, float):
    """ setAngle(self, float) """
    pass

  def setAxis(self, QtGui.QVector3D):
    """ setAxis(self, QVector3D)
    setAxis(self, Qt.Axis) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrigin(self, QtGui.QVector3D):
    """ setOrigin(self, QVector3D) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update():
    pass

class QGraphicsScale(QGraphicsTransform):
  """ QGraphicsScale(parent: QObject = None) """

  def __init__(self, arg0=None):
    pass

  def applyTo(self, QtGui.QMatrix4x4):
    """ applyTo(self, QMatrix4x4) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def origin(self):
    """ origin(self) -> QVector3D """
    return QtGui.QVector3D()

  def originChanged(self):
    """ originChanged(self) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def scaleChanged(self):
    """ scaleChanged(self) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrigin(self, QtGui.QVector3D):
    """ setOrigin(self, QVector3D) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setXScale(self, float):
    """ setXScale(self, float) """
    pass

  def setYScale(self, float):
    """ setYScale(self, float) """
    pass

  def setZScale(self, float):
    """ setZScale(self, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update():
    pass

  def xScale(self):
    """ xScale(self) -> float """
    return 1.0

  def xScaleChanged(self):
    """ xScaleChanged(self) [signal] """
    pass

  def yScale(self):
    """ yScale(self) -> float """
    return 1.0

  def yScaleChanged(self):
    """ yScaleChanged(self) [signal] """
    pass

  def zScale(self):
    """ zScale(self) -> float """
    return 1.0

  def zScaleChanged(self):
    """ zScaleChanged(self) [signal] """
    pass

class QGraphicsScene(QObject):
  """ QGraphicsScene(parent: QObject = None)
  QGraphicsScene(QRectF, parent: QObject = None)
  QGraphicsScene(float, float, float, float, parent: QObject = None) """

  AllLayers = None
  BackgroundLayer = None
  BspTreeIndex = None
  ForegroundLayer = None

  class ItemIndexMethod(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ItemLayer = None
  NoIndex = None

  class SceneLayer(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SceneLayers(simplewrapper):
    """ QGraphicsScene.SceneLayers()
    QGraphicsScene.SceneLayers(Union[QGraphicsScene.SceneLayers, QGraphicsScene.SceneLayer])
    QGraphicsScene.SceneLayers(QGraphicsScene.SceneLayers) """

    def __init__(self):
      pass

  def __init__(self, arg0=None):
    pass

  def activePanel(self):
    """ activePanel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def activeWindow(self):
    """ activeWindow(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def addEllipse(self, QtCore.QRectF, arg0=None, QColor=None, Qt.GlobalColor=None, arg1=None, arg2=None, QColor=None, Qt.GlobalColor=None, arg3=None):
    """ addEllipse(self, QRectF, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen(), brush: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = QBrush()) -> QGraphicsEllipseItem
    addEllipse(self, float, float, float, float, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen(), brush: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = QBrush()) -> QGraphicsEllipseItem """
    return QGraphicsEllipseItem()

  def addItem(self, QGraphicsItem):
    """ addItem(self, QGraphicsItem) """
    pass

  def addLine(self, QtCore.QLineF, arg0=None, QColor=None, Qt.GlobalColor=None, arg1=None):
    """ addLine(self, QLineF, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen()) -> QGraphicsLineItem
    addLine(self, float, float, float, float, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen()) -> QGraphicsLineItem """
    return QGraphicsLineItem()

  def addPath(self, QtGui.QPainterPath, arg0=None, QColor=None, Qt.GlobalColor=None, arg1=None, arg2=None, QColor=None, Qt.GlobalColor=None, arg3=None):
    """ addPath(self, QPainterPath, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen(), brush: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = QBrush()) -> QGraphicsPathItem """
    return QGraphicsPathItem()

  def addPixmap(self, QtGui.QPixmap):
    """ addPixmap(self, QPixmap) -> QGraphicsPixmapItem """
    return QGraphicsPixmapItem()

  def addPolygon(self, QtGui.QPolygonF, arg0=None, QColor=None, Qt.GlobalColor=None, arg1=None, arg2=None, QColor=None, Qt.GlobalColor=None, arg3=None):
    """ addPolygon(self, QPolygonF, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen(), brush: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = QBrush()) -> QGraphicsPolygonItem """
    return QGraphicsPolygonItem()

  def addRect(self, QtCore.QRectF, arg0=None, QColor=None, Qt.GlobalColor=None, arg1=None, arg2=None, QColor=None, Qt.GlobalColor=None, arg3=None):
    """ addRect(self, QRectF, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen(), brush: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = QBrush()) -> QGraphicsRectItem
    addRect(self, float, float, float, float, pen: Union[QPen, QColor, Qt.GlobalColor, QGradient] = QPen(), brush: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = QBrush()) -> QGraphicsRectItem """
    return QGraphicsRectItem()

  def addSimpleText(self, str, arg0=None):
    """ addSimpleText(self, str, font: QFont = QFont()) -> QGraphicsSimpleTextItem """
    return QGraphicsSimpleTextItem()

  def addText(self, str, arg0=None):
    """ addText(self, str, font: QFont = QFont()) -> QGraphicsTextItem """
    return QGraphicsTextItem()

  def addWidget(self, QWidget, arg0=None, arg1=None):
    """ addWidget(self, QWidget, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def advance(self):
    """ advance(self) """
    pass

  def backgroundBrush(self):
    """ backgroundBrush(self) -> QBrush """
    return QtGui.QBrush()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def bspTreeDepth(self):
    """ bspTreeDepth(self) -> int """
    return 1

  def changed(self, arg0):
    """ changed(self, Iterable[QRectF]) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def collidingItems(self, QGraphicsItem, arg0=None):
    """ collidingItems(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def connectNotify():
    pass

  def contextMenuEvent(self, QGraphicsSceneContextMenuEvent):
    """ contextMenuEvent(self, QGraphicsSceneContextMenuEvent) """
    pass

  def createItemGroup(self, IterableQGraphicsItem=None):
    """ createItemGroup(self, Iterable[QGraphicsItem]) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyItemGroup(self, QGraphicsItemGroup):
    """ destroyItemGroup(self, QGraphicsItemGroup) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QGraphicsSceneDragDropEvent):
    """ dragEnterEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragLeaveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragLeaveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragMoveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragMoveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def drawBackground(self, QtGui.QPainter, QtCore.QRectF):
    """ drawBackground(self, QPainter, QRectF) """
    pass

  def drawForeground(self, QtGui.QPainter, QtCore.QRectF):
    """ drawForeground(self, QPainter, QRectF) """
    pass

  def dropEvent(self, QGraphicsSceneDragDropEvent):
    """ dropEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusItemChanged(self, QGraphicsItem, QGraphicsItem, arg0):
    """ focusItemChanged(self, QGraphicsItem, QGraphicsItem, Qt.FocusReason) [signal] """
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOnTouch(self):
    """ focusOnTouch(self) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def foregroundBrush(self):
    """ foregroundBrush(self) -> QBrush """
    return QtGui.QBrush()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def height(self):
    """ height(self) -> float """
    return 1.0

  def helpEvent(self, QGraphicsSceneHelpEvent):
    """ helpEvent(self, QGraphicsSceneHelpEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self, arg0=None, arg1=None, arg2=None):
    """ invalidate(self, rect: QRectF = QRectF(), layers: Union[QGraphicsScene.SceneLayers, QGraphicsScene.SceneLayer] = QGraphicsScene.AllLayers)
    invalidate(self, float, float, float, float, layers: Union[QGraphicsScene.SceneLayers, QGraphicsScene.SceneLayer] = QGraphicsScene.AllLayers) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, UnionQPointF=None, QPoint=None, QTransform=None):
    """ itemAt(self, Union[QPointF, QPoint], QTransform) -> QGraphicsItem
    itemAt(self, float, float, QTransform) -> QGraphicsItem """
    return QGraphicsItem()

  def itemIndexMethod(self):
    """ itemIndexMethod(self) -> QGraphicsScene.ItemIndexMethod """
    return QGraphicsScene.ItemIndexMethod()

  def items(self, arg0=None):
    """ items(self, order: Qt.SortOrder = Qt.DescendingOrder) -> List[QGraphicsItem]
    items(self, Union[QPointF, QPoint], mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape, order: Qt.SortOrder = Qt.DescendingOrder, deviceTransform: QTransform = QTransform()) -> List[QGraphicsItem]
    items(self, QRectF, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape, order: Qt.SortOrder = Qt.DescendingOrder, deviceTransform: QTransform = QTransform()) -> List[QGraphicsItem]
    items(self, QPolygonF, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape, order: Qt.SortOrder = Qt.DescendingOrder, deviceTransform: QTransform = QTransform()) -> List[QGraphicsItem]
    items(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape, order: Qt.SortOrder = Qt.DescendingOrder, deviceTransform: QTransform = QTransform()) -> List[QGraphicsItem]
    items(self, float, float, float, float, Qt.ItemSelectionMode, Qt.SortOrder, deviceTransform: QTransform = QTransform()) -> List[QGraphicsItem] """
    return None

  def itemsBoundingRect(self):
    """ itemsBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumRenderSize(self):
    """ minimumRenderSize(self) -> float """
    return 1.0

  def mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent):
    """ mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseGrabberItem(self):
    """ mouseGrabberItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def mouseMoveEvent(self, QGraphicsSceneMouseEvent):
    """ mouseMoveEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mousePressEvent(self, QGraphicsSceneMouseEvent):
    """ mousePressEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseReleaseEvent(self, QGraphicsSceneMouseEvent):
    """ mouseReleaseEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QGraphicsItem):
    """ removeItem(self, QGraphicsItem) """
    pass

  def render(self, QtGui.QPainter, arg0=None, arg1=None, arg2=None):
    """ render(self, QPainter, target: QRectF = QRectF(), source: QRectF = QRectF(), mode: Qt.AspectRatioMode = Qt.KeepAspectRatio) """
    pass

  def sceneRect(self):
    """ sceneRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneRectChanged(self, QtCore.QRectF):
    """ sceneRectChanged(self, QRectF) [signal] """
    pass

  def selectedItems(self):
    """ selectedItems(self) -> List[QGraphicsItem] """
    return None

  def selectionArea(self):
    """ selectionArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def sendEvent(self, QGraphicsItem, QtCore.QEvent):
    """ sendEvent(self, QGraphicsItem, QEvent) -> bool """
    return True

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setActivePanel(self, QGraphicsItem):
    """ setActivePanel(self, QGraphicsItem) """
    pass

  def setActiveWindow(self, QGraphicsWidget):
    """ setActiveWindow(self, QGraphicsWidget) """
    pass

  def setBackgroundBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackgroundBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBspTreeDepth(self, int):
    """ setBspTreeDepth(self, int) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusItem(self, QGraphicsItem, arg0=None):
    """ setFocusItem(self, QGraphicsItem, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusOnTouch(self, bool):
    """ setFocusOnTouch(self, bool) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForegroundBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setItemIndexMethod(self, arg0):
    """ setItemIndexMethod(self, QGraphicsScene.ItemIndexMethod) """
    pass

  def setMinimumRenderSize(self, float):
    """ setMinimumRenderSize(self, float) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSceneRect(self, QtCore.QRectF):
    """ setSceneRect(self, QRectF)
    setSceneRect(self, float, float, float, float) """
    pass

  def setSelectionArea(self, QtGui.QPainterPath, QtGui.QTransform):
    """ setSelectionArea(self, QPainterPath, QTransform)
    setSelectionArea(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape, deviceTransform: QTransform = QTransform())
    setSelectionArea(self, QPainterPath, Qt.ItemSelectionOperation, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape, deviceTransform: QTransform = QTransform()) """
    pass

  def setStickyFocus(self, bool):
    """ setStickyFocus(self, bool) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stickyFocus(self):
    """ stickyFocus(self) -> bool """
    return True

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def views(self):
    """ views(self) -> List[QGraphicsView] """
    return None

  def wheelEvent(self, QGraphicsSceneWheelEvent):
    """ wheelEvent(self, QGraphicsSceneWheelEvent) """
    pass

  def width(self):
    """ width(self) -> float """
    return 1.0

class QGraphicsSceneContextMenuEvent(QGraphicsSceneEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  Keyboard = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  Mouse = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Other = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None

  class Reason(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def reason(self):
    """ reason(self) -> QGraphicsSceneContextMenuEvent.Reason """
    return QGraphicsSceneContextMenuEvent.Reason()

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def screenPos(self):
    """ screenPos(self) -> QPoint """
    return QtCore.QPoint()

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneDragDropEvent(QGraphicsSceneEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptProposedAction(self):
    """ acceptProposedAction(self) """
    pass

  def buttons(self):
    """ buttons(self) -> Qt.MouseButtons """
    return None

  def dropAction(self):
    """ dropAction(self) -> Qt.DropAction """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def mimeData(self):
    """ mimeData(self) -> QMimeData """
    return QtCore.QMimeData()

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def possibleActions(self):
    """ possibleActions(self) -> Qt.DropActions """
    return None

  def proposedAction(self):
    """ proposedAction(self) -> Qt.DropAction """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def screenPos(self):
    """ screenPos(self) -> QPoint """
    return QtCore.QPoint()

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setDropAction(self, arg0):
    """ setDropAction(self, Qt.DropAction) """
    pass

  def source(self):
    """ source(self) -> QWidget """
    return QWidget()

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneEvent(QEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneHelpEvent(QGraphicsSceneEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def screenPos(self):
    """ screenPos(self) -> QPoint """
    return QtCore.QPoint()

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneHoverEvent(QGraphicsSceneEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def lastPos(self):
    """ lastPos(self) -> QPointF """
    return QtCore.QPointF()

  def lastScenePos(self):
    """ lastScenePos(self) -> QPointF """
    return QtCore.QPointF()

  def lastScreenPos(self):
    """ lastScreenPos(self) -> QPoint """
    return QtCore.QPoint()

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def screenPos(self):
    """ screenPos(self) -> QPoint """
    return QtCore.QPoint()

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneMouseEvent(QGraphicsSceneEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def button(self):
    """ button(self) -> Qt.MouseButton """
    return None

  def buttonDownPos(self, arg0):
    """ buttonDownPos(self, Qt.MouseButton) -> QPointF """
    return QtCore.QPointF()

  def buttonDownScenePos(self, arg0):
    """ buttonDownScenePos(self, Qt.MouseButton) -> QPointF """
    return QtCore.QPointF()

  def buttonDownScreenPos(self, arg0):
    """ buttonDownScreenPos(self, Qt.MouseButton) -> QPoint """
    return QtCore.QPoint()

  def buttons(self):
    """ buttons(self) -> Qt.MouseButtons """
    return None

  def flags(self):
    """ flags(self) -> Qt.MouseEventFlags """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def lastPos(self):
    """ lastPos(self) -> QPointF """
    return QtCore.QPointF()

  def lastScenePos(self):
    """ lastScenePos(self) -> QPointF """
    return QtCore.QPointF()

  def lastScreenPos(self):
    """ lastScreenPos(self) -> QPoint """
    return QtCore.QPoint()

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def screenPos(self):
    """ screenPos(self) -> QPoint """
    return QtCore.QPoint()

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def source(self):
    """ source(self) -> Qt.MouseEventSource """
    return None

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneMoveEvent(QGraphicsSceneEvent):
  """ QGraphicsSceneMoveEvent() """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def newPos(self):
    """ newPos(self) -> QPointF """
    return QtCore.QPointF()

  def oldPos(self):
    """ oldPos(self) -> QPointF """
    return QtCore.QPointF()

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneResizeEvent(QGraphicsSceneEvent):
  """ QGraphicsSceneResizeEvent() """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def newSize(self):
    """ newSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def oldSize(self):
    """ oldSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSceneWheelEvent(QGraphicsSceneEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def __init__(self):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def buttons(self):
    """ buttons(self) -> Qt.MouseButtons """
    return None

  def delta(self):
    """ delta(self) -> int """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return True

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def screenPos(self):
    """ screenPos(self) -> QPoint """
    return QtCore.QPoint()

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return True

  def type(self):
    """ type(self) -> QEvent.Type """
    return QEvent.Type()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QGraphicsSimpleTextItem(QAbstractGraphicsShapeItem):
  """ QGraphicsSimpleTextItem(parent: QGraphicsItem = None)
  QGraphicsSimpleTextItem(str, parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def advance(self, int):
    """ advance(self, int) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def brush(self):
    """ brush(self) -> QBrush """
    return QtGui.QBrush()

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent():
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent():
    pass

  def hoverMoveEvent():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, QWidget):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, QWidget) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent():
    pass

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPen(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def text(self):
    """ text(self) -> str """
    return ""

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsTextItem(QGraphicsObject):
  """ QGraphicsTextItem(parent: QGraphicsItem = None)
  QGraphicsTextItem(str, parent: QGraphicsItem = None) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def advance(self, int):
    """ advance(self, int) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def childEvent():
    pass

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def connectNotify():
    pass

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contextMenuEvent(self, QGraphicsSceneContextMenuEvent):
    """ contextMenuEvent(self, QGraphicsSceneContextMenuEvent) """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customEvent():
    pass

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def defaultTextColor(self):
    """ defaultTextColor(self) -> QColor """
    return QtGui.QColor()

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return QtGui.QTextDocument()

  def dragEnterEvent(self, QGraphicsSceneDragDropEvent):
    """ dragEnterEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragLeaveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragLeaveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dragMoveEvent(self, QGraphicsSceneDragDropEvent):
    """ dragMoveEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dropEvent(self, QGraphicsSceneDragDropEvent):
    """ dropEvent(self, QGraphicsSceneDragDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def enabledChanged(self):
    """ enabledChanged(self) [signal] """
    pass

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def event():
    pass

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hoverEnterEvent(self, QGraphicsSceneHoverEvent):
    """ hoverEnterEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def hoverLeaveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverLeaveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def hoverMoveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverMoveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemChange():
    pass

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def linkActivated(self, str):
    """ linkActivated(self, str) [signal] """
    pass

  def linkHovered(self, str):
    """ linkHovered(self, str) [signal] """
    pass

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent):
    """ mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseMoveEvent(self, QGraphicsSceneMouseEvent):
    """ mouseMoveEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mousePressEvent(self, QGraphicsSceneMouseEvent):
    """ mousePressEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def mouseReleaseEvent(self, QGraphicsSceneMouseEvent):
    """ mouseReleaseEvent(self, QGraphicsSceneMouseEvent) """
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self):
    """ opacityChanged(self) [signal] """
    pass

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def openExternalLinks(self):
    """ openExternalLinks(self) -> bool """
    return True

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, QWidget):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, QWidget) """
    pass

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentChanged(self):
    """ parentChanged(self) [signal] """
    pass

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def prepareGeometryChange():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def rotationChanged(self):
    """ rotationChanged(self) [signal] """
    pass

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scaleChanged(self):
    """ scaleChanged(self) [signal] """
    pass

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent(self, QtCore.QEvent):
    """ sceneEvent(self, QEvent) -> bool """
    return True

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setDefaultTextColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setDefaultTextColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setDocument(self, QtGui.QTextDocument):
    """ setDocument(self, QTextDocument) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setHtml(self, str):
    """ setHtml(self, str) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setOpenExternalLinks(self, bool):
    """ setOpenExternalLinks(self, bool) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setPlainText(self, str):
    """ setPlainText(self, str) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setTabChangesFocus(self, bool):
    """ setTabChangesFocus(self, bool) """
    pass

  def setTextCursor(self, QtGui.QTextCursor):
    """ setTextCursor(self, QTextCursor) """
    pass

  def setTextInteractionFlags(self, UnionQt.TextInteractionFlags=None, Qt.TextInteractionFlag=None):
    """ setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag]) """
    pass

  def setTextWidth(self, float):
    """ setTextWidth(self, float) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def tabChangesFocus(self):
    """ tabChangesFocus(self) -> bool """
    return True

  def textCursor(self):
    """ textCursor(self) -> QTextCursor """
    return QtGui.QTextCursor()

  def textInteractionFlags(self):
    """ textInteractionFlags(self) -> Qt.TextInteractionFlags """
    return None

  def textWidth(self):
    """ textWidth(self) -> float """
    return 1.0

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toHtml(self):
    """ toHtml(self) -> str """
    return ""

  def toPlainText(self):
    """ toPlainText(self) -> str """
    return ""

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateMicroFocus():
    pass

  def visibleChanged(self):
    """ visibleChanged(self) [signal] """
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def x(self):
    """ x(self) -> float """
    return 1.0

  def xChanged(self):
    """ xChanged(self) [signal] """
    pass

  def y(self):
    """ y(self) -> float """
    return 1.0

  def yChanged(self):
    """ yChanged(self) [signal] """
    pass

  def zChanged(self):
    """ zChanged(self) [signal] """
    pass

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGraphicsTransform(QObject):
  """ QGraphicsTransform(parent: QObject = None) """

  def __init__(self, arg0=None):
    pass

  def applyTo(self, QtGui.QMatrix4x4):
    """ applyTo(self, QMatrix4x4) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

class QGraphicsView(QAbstractScrollArea):
  """ QGraphicsView(parent: QWidget = None)
  QGraphicsView(QGraphicsScene, parent: QWidget = None) """

  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AnchorUnderMouse = None
  AnchorViewCenter = None
  BoundingRectViewportUpdate = None
  Box = None
  CacheBackground = None

  class CacheMode(simplewrapper):
    """ QGraphicsView.CacheMode()
    QGraphicsView.CacheMode(Union[QGraphicsView.CacheMode, QGraphicsView.CacheModeFlag])
    QGraphicsView.CacheMode(QGraphicsView.CacheMode) """

    def __init__(self):
      pass

  class CacheModeFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CacheNone = None
  DontAdjustForAntialiasing = None
  DontClipPainter = None
  DontSavePainterState = None

  class DragMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DrawChildren = None
  DrawWindowBackground = None
  FullViewportUpdate = None
  HLine = None
  IgnoreMask = None
  MinimalViewportUpdate = None
  NoAnchor = None
  NoDrag = None
  NoFrame = None
  NoViewportUpdate = None

  class OptimizationFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class OptimizationFlags(simplewrapper):
    """ QGraphicsView.OptimizationFlags()
    QGraphicsView.OptimizationFlags(Union[QGraphicsView.OptimizationFlags, QGraphicsView.OptimizationFlag])
    QGraphicsView.OptimizationFlags(QGraphicsView.OptimizationFlags) """

    def __init__(self):
      pass

  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  RubberBandDrag = None
  ScrollHandDrag = None
  Shadow_Mask = None
  Shape_Mask = None
  SmartViewportUpdate = None
  StyledPanel = None
  Sunken = None
  VLine = None

  class ViewportAnchor(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ViewportUpdateMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundBrush(self):
    """ backgroundBrush(self) -> QBrush """
    return QtGui.QBrush()

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsView.CacheMode """
    return QGraphicsView.CacheMode()

  def centerOn(self, UnionQPointF=None, QPoint=None):
    """ centerOn(self, Union[QPointF, QPoint])
    centerOn(self, QGraphicsItem)
    centerOn(self, float, float) """
    pass

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QtGui.QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMode(self):
    """ dragMode(self) -> QGraphicsView.DragMode """
    return QGraphicsView.DragMode()

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawBackground(self, QtGui.QPainter, QtCore.QRectF):
    """ drawBackground(self, QPainter, QRectF) """
    pass

  def drawForeground(self, QtGui.QPainter, QtCore.QRectF):
    """ drawForeground(self, QPainter, QRectF) """
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def ensureVisible(self, QtCore.QRectF, arg0=None, arg1=None):
    """ ensureVisible(self, QRectF, xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, QGraphicsItem, xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fitInView(self, QtCore.QRectF, arg0=None):
    """ fitInView(self, QRectF, mode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio)
    fitInView(self, QGraphicsItem, mode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio)
    fitInView(self, float, float, float, float, mode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio) """
    pass

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundBrush(self):
    """ foregroundBrush(self) -> QBrush """
    return QtGui.QBrush()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidateScene(self, arg0=None, arg1=None, arg2=None):
    """ invalidateScene(self, rect: QRectF = QRectF(), layers: Union[QGraphicsScene.SceneLayers, QGraphicsScene.SceneLayer] = QGraphicsScene.AllLayers) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isInteractive(self):
    """ isInteractive(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isTransformed(self):
    """ isTransformed(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, QtCore.QPoint):
    """ itemAt(self, QPoint) -> QGraphicsItem
    itemAt(self, int, int) -> QGraphicsItem """
    return QGraphicsItem()

  def items(self):
    """ items(self) -> List[QGraphicsItem]
    items(self, QPoint) -> List[QGraphicsItem]
    items(self, int, int) -> List[QGraphicsItem]
    items(self, int, int, int, int, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem]
    items(self, QRect, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem]
    items(self, QPolygon, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem]
    items(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPoint
    mapFromScene(self, QRectF) -> QPolygon
    mapFromScene(self, QPolygonF) -> QPolygon
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPoint
    mapFromScene(self, float, float, float, float) -> QPolygon """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToScene(self, QtCore.QPoint):
    """ mapToScene(self, QPoint) -> QPointF
    mapToScene(self, QRect) -> QPolygonF
    mapToScene(self, QPolygon) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, int, int) -> QPointF
    mapToScene(self, int, int, int, int) -> QPolygonF """
    return QtCore.QPointF()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def optimizationFlags(self):
    """ optimizationFlags(self) -> QGraphicsView.OptimizationFlags """
    return QGraphicsView.OptimizationFlags()

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPainter, arg0=None, arg1=None, arg2=None):
    """ render(self, QPainter, target: QRectF = QRectF(), source: QRect = QRect(), mode: Qt.AspectRatioMode = Qt.KeepAspectRatio) """
    pass

  def renderHints(self):
    """ renderHints(self) -> QPainter.RenderHints """
    return QPainter.RenderHints()

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resetCachedContent(self):
    """ resetCachedContent(self) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeAnchor(self):
    """ resizeAnchor(self) -> QGraphicsView.ViewportAnchor """
    return QGraphicsView.ViewportAnchor()

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rotate(self, float):
    """ rotate(self, float) """
    pass

  def rubberBandChanged(self, QtCore.QRect, arg0, arg1, arg2, arg3):
    """ rubberBandChanged(self, QRect, Union[QPointF, QPoint], Union[QPointF, QPoint]) [signal] """
    pass

  def rubberBandRect(self):
    """ rubberBandRect(self) -> QRect """
    return QtCore.QRect()

  def rubberBandSelectionMode(self):
    """ rubberBandSelectionMode(self) -> Qt.ItemSelectionMode """
    return None

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scale(self, float, float):
    """ scale(self, float, float) """
    pass

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneRect(self):
    """ sceneRect(self) -> QRectF """
    return QtCore.QRectF()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackgroundBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCacheMode(self, UnionQGraphicsView.CacheMode=None, QGraphicsView.CacheModeFlag=None):
    """ setCacheMode(self, Union[QGraphicsView.CacheMode, QGraphicsView.CacheModeFlag]) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragMode(self, arg0):
    """ setDragMode(self, QGraphicsView.DragMode) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForegroundBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInteractive(self, bool):
    """ setInteractive(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOptimizationFlag(self, arg0, arg1=None):
    """ setOptimizationFlag(self, QGraphicsView.OptimizationFlag, enabled: bool = True) """
    pass

  def setOptimizationFlags(self, UnionQGraphicsView.OptimizationFlags=None, QGraphicsView.OptimizationFlag=None):
    """ setOptimizationFlags(self, Union[QGraphicsView.OptimizationFlags, QGraphicsView.OptimizationFlag]) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRenderHint(self, arg0, arg1=None):
    """ setRenderHint(self, QPainter.RenderHint, on: bool = True) """
    pass

  def setRenderHints(self, UnionQPainter.RenderHints=None, QPainter.RenderHint=None):
    """ setRenderHints(self, Union[QPainter.RenderHints, QPainter.RenderHint]) """
    pass

  def setResizeAnchor(self, arg0):
    """ setResizeAnchor(self, QGraphicsView.ViewportAnchor) """
    pass

  def setRubberBandSelectionMode(self, arg0):
    """ setRubberBandSelectionMode(self, Qt.ItemSelectionMode) """
    pass

  def setScene(self, QGraphicsScene):
    """ setScene(self, QGraphicsScene) """
    pass

  def setSceneRect(self, QtCore.QRectF):
    """ setSceneRect(self, QRectF)
    setSceneRect(self, float, float, float, float) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformationAnchor(self, arg0):
    """ setTransformationAnchor(self, QGraphicsView.ViewportAnchor) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setViewportUpdateMode(self, arg0):
    """ setViewportUpdateMode(self, QGraphicsView.ViewportUpdateMode) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def shear(self, float, float):
    """ shear(self, float, float) """
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformationAnchor(self):
    """ transformationAnchor(self) -> QGraphicsView.ViewportAnchor """
    return QGraphicsView.ViewportAnchor()

  def translate(self, float, float):
    """ translate(self, float, float) """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updateScene(self, IterableQRectF=None):
    """ updateScene(self, Iterable[QRectF]) """
    pass

  def updateSceneRect(self, QtCore.QRectF):
    """ updateSceneRect(self, QRectF) """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEvent(self, QtCore.QEvent):
    """ viewportEvent(self, QEvent) -> bool """
    return True

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def viewportTransform(self):
    """ viewportTransform(self) -> QTransform """
    return QtGui.QTransform()

  def viewportUpdateMode(self):
    """ viewportUpdateMode(self) -> QGraphicsView.ViewportUpdateMode """
    return QGraphicsView.ViewportUpdateMode()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QGraphicsWidget(QGraphicsObject):
  """ QGraphicsWidget(parent: QGraphicsItem = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  DeviceCoordinateCache = None
  ItemAcceptsInputMethod = None
  ItemChildAddedChange = None
  ItemChildRemovedChange = None
  ItemClipsChildrenToShape = None
  ItemClipsToShape = None
  ItemContainsChildrenInShape = None
  ItemCoordinateCache = None
  ItemCursorChange = None
  ItemCursorHasChanged = None
  ItemDoesntPropagateOpacityToChildren = None
  ItemEnabledChange = None
  ItemEnabledHasChanged = None
  ItemFlagsChange = None
  ItemFlagsHaveChanged = None
  ItemHasNoContents = None
  ItemIgnoresParentOpacity = None
  ItemIgnoresTransformations = None
  ItemIsFocusable = None
  ItemIsMovable = None
  ItemIsPanel = None
  ItemIsSelectable = None
  ItemMatrixChange = None
  ItemNegativeZStacksBehindParent = None
  ItemOpacityChange = None
  ItemOpacityHasChanged = None
  ItemParentChange = None
  ItemParentHasChanged = None
  ItemPositionChange = None
  ItemPositionHasChanged = None
  ItemRotationChange = None
  ItemRotationHasChanged = None
  ItemScaleChange = None
  ItemScaleHasChanged = None
  ItemSceneChange = None
  ItemSceneHasChanged = None
  ItemScenePositionHasChanged = None
  ItemSelectedChange = None
  ItemSelectedHasChanged = None
  ItemSendsGeometryChanges = None
  ItemSendsScenePositionChanges = None
  ItemStacksBehindParent = None
  ItemToolTipChange = None
  ItemToolTipHasChanged = None
  ItemTransformChange = None
  ItemTransformHasChanged = None
  ItemTransformOriginPointChange = None
  ItemTransformOriginPointHasChanged = None
  ItemUsesExtendedStyleOption = None
  ItemVisibleChange = None
  ItemVisibleHasChanged = None
  ItemZValueChange = None
  ItemZValueHasChanged = None
  NoCache = None
  NonModal = None
  PanelModal = None
  SceneModal = None
  Type = 1
  UserType = 65536

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptHoverEvents(self):
    """ acceptHoverEvents(self) -> bool """
    return True

  def acceptTouchEvents(self):
    """ acceptTouchEvents(self) -> bool """
    return True

  def acceptedMouseButtons(self):
    """ acceptedMouseButtons(self) -> Qt.MouseButtons """
    return None

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def advance(self, int):
    """ advance(self, int) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def boundingRegion(self, QtGui.QTransform):
    """ boundingRegion(self, QTransform) -> QRegion """
    return QtGui.QRegion()

  def boundingRegionGranularity(self):
    """ boundingRegionGranularity(self) -> float """
    return 1.0

  def cacheMode(self):
    """ cacheMode(self) -> QGraphicsItem.CacheMode """
    return QGraphicsItem.CacheMode()

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childEvent():
    pass

  def childItems(self):
    """ childItems(self) -> List[QGraphicsItem] """
    return None

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenBoundingRect(self):
    """ childrenBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def collidesWithItem(self, QGraphicsItem, arg0=None):
    """ collidesWithItem(self, QGraphicsItem, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidesWithPath(self, QtGui.QPainterPath, arg0=None):
    """ collidesWithPath(self, QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> bool """
    return True

  def collidingItems(self, arg0=None):
    """ collidingItems(self, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape) -> List[QGraphicsItem] """
    return None

  def commonAncestorItem(self, QGraphicsItem):
    """ commonAncestorItem(self, QGraphicsItem) -> QGraphicsItem """
    return QGraphicsItem()

  def connectNotify():
    pass

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return True

  def contentsRect(self):
    """ contentsRect(self) -> QRectF """
    return QtCore.QRectF()

  def contextMenuEvent():
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customEvent():
    pass

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def deviceTransform(self, QtGui.QTransform):
    """ deviceTransform(self, QTransform) -> QTransform """
    return QtGui.QTransform()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveOpacity(self):
    """ effectiveOpacity(self) -> float """
    return 1.0

  def effectiveSizeHint(self, arg0, arg1=None):
    """ effectiveSizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def enabledChanged(self):
    """ enabledChanged(self) [signal] """
    pass

  def ensureVisible(self, arg0=None, arg1=None, arg2=None):
    """ ensureVisible(self, rect: QRectF = QRectF(), xMargin: int = 50, yMargin: int = 50)
    ensureVisible(self, float, float, float, float, xMargin: int = 50, yMargin: int = 50) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def filtersChildEvents(self):
    """ filtersChildEvents(self) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> QGraphicsItem.GraphicsItemFlags """
    return QGraphicsItem.GraphicsItemFlags()

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusItem(self):
    """ focusItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusProxy(self):
    """ focusProxy(self) -> QGraphicsItem """
    return QGraphicsItem()

  def focusWidget(self):
    """ focusWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def geometry(self):
    """ geometry(self) -> QRectF """
    return QtCore.QRectF()

  def geometryChanged(self):
    """ geometryChanged(self) [signal] """
    pass

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def getWindowFrameMargins(self):
    """ getWindowFrameMargins(self) -> Tuple[float, float, float, float] """
    return 1.0

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabKeyboardEvent(self, QtCore.QEvent):
    """ grabKeyboardEvent(self, QEvent) """
    pass

  def grabMouse(self):
    """ grabMouse(self) """
    pass

  def grabMouseEvent(self, QtCore.QEvent):
    """ grabMouseEvent(self, QEvent) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsItem(self):
    """ graphicsItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def group(self):
    """ group(self) -> QGraphicsItemGroup """
    return QGraphicsItemGroup()

  def hasCursor(self):
    """ hasCursor(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def hoverEnterEvent():
    pass

  def hoverLeaveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverLeaveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def hoverMoveEvent(self, QGraphicsSceneHoverEvent):
    """ hoverMoveEvent(self, QGraphicsSceneHoverEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initStyleOption(self, QStyleOption):
    """ initStyleOption(self, QStyleOption) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery():
    pass

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installSceneEventFilter(self, QGraphicsItem):
    """ installSceneEventFilter(self, QGraphicsItem) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QGraphicsItem):
    """ isAncestorOf(self, QGraphicsItem) -> bool """
    return True

  def isBlockedByModalPanel(self):
    """ isBlockedByModalPanel(self) -> Tuple[bool, QGraphicsItem] """
    return True

  def isClipped(self):
    """ isClipped(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isLayout(self):
    """ isLayout(self) -> bool """
    return True

  def isObscured(self, arg0=None):
    """ isObscured(self, rect: QRectF = QRectF()) -> bool
    isObscured(self, float, float, float, float) -> bool """
    return True

  def isObscuredBy(self, QGraphicsItem):
    """ isObscuredBy(self, QGraphicsItem) -> bool """
    return True

  def isPanel(self):
    """ isPanel(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUnderMouse(self):
    """ isUnderMouse(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QGraphicsItem):
    """ isVisibleTo(self, QGraphicsItem) -> bool """
    return True

  def isWidget(self):
    """ isWidget(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemChange(self, arg0, Any):
    """ itemChange(self, QGraphicsItem.GraphicsItemChange, Any) -> Any """
    return None

  def itemTransform(self, QGraphicsItem):
    """ itemTransform(self, QGraphicsItem) -> Tuple[QTransform, bool] """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QGraphicsLayout """
    return QGraphicsLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def mapFromItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapFromItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapFromItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapFromItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapFromItem(self, QGraphicsItem, float, float) -> QPointF
    mapFromItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromParent(self, UnionQPointF=None, QPoint=None):
    """ mapFromParent(self, Union[QPointF, QPoint]) -> QPointF
    mapFromParent(self, QRectF) -> QPolygonF
    mapFromParent(self, QPolygonF) -> QPolygonF
    mapFromParent(self, QPainterPath) -> QPainterPath
    mapFromParent(self, float, float) -> QPointF
    mapFromParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapFromScene(self, UnionQPointF=None, QPoint=None):
    """ mapFromScene(self, Union[QPointF, QPoint]) -> QPointF
    mapFromScene(self, QRectF) -> QPolygonF
    mapFromScene(self, QPolygonF) -> QPolygonF
    mapFromScene(self, QPainterPath) -> QPainterPath
    mapFromScene(self, float, float) -> QPointF
    mapFromScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapRectFromItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectFromItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectFromItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromParent(self, QtCore.QRectF):
    """ mapRectFromParent(self, QRectF) -> QRectF
    mapRectFromParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectFromScene(self, QtCore.QRectF):
    """ mapRectFromScene(self, QRectF) -> QRectF
    mapRectFromScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToItem(self, QGraphicsItem, QtCore.QRectF):
    """ mapRectToItem(self, QGraphicsItem, QRectF) -> QRectF
    mapRectToItem(self, QGraphicsItem, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToParent(self, QtCore.QRectF):
    """ mapRectToParent(self, QRectF) -> QRectF
    mapRectToParent(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapRectToScene(self, QtCore.QRectF):
    """ mapRectToScene(self, QRectF) -> QRectF
    mapRectToScene(self, float, float, float, float) -> QRectF """
    return QtCore.QRectF()

  def mapToItem(self, QGraphicsItem, UnionQPointF=None, QPoint=None):
    """ mapToItem(self, QGraphicsItem, Union[QPointF, QPoint]) -> QPointF
    mapToItem(self, QGraphicsItem, QRectF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPolygonF) -> QPolygonF
    mapToItem(self, QGraphicsItem, QPainterPath) -> QPainterPath
    mapToItem(self, QGraphicsItem, float, float) -> QPointF
    mapToItem(self, QGraphicsItem, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToParent(self, UnionQPointF=None, QPoint=None):
    """ mapToParent(self, Union[QPointF, QPoint]) -> QPointF
    mapToParent(self, QRectF) -> QPolygonF
    mapToParent(self, QPolygonF) -> QPolygonF
    mapToParent(self, QPainterPath) -> QPainterPath
    mapToParent(self, float, float) -> QPointF
    mapToParent(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def mapToScene(self, UnionQPointF=None, QPoint=None):
    """ mapToScene(self, Union[QPointF, QPoint]) -> QPointF
    mapToScene(self, QRectF) -> QPolygonF
    mapToScene(self, QPolygonF) -> QPolygonF
    mapToScene(self, QPainterPath) -> QPainterPath
    mapToScene(self, float, float) -> QPointF
    mapToScene(self, float, float, float, float) -> QPolygonF """
    return QtCore.QPointF()

  def maximumHeight(self):
    """ maximumHeight(self) -> float """
    return 1.0

  def maximumSize(self):
    """ maximumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeight(self):
    """ minimumHeight(self) -> float """
    return 1.0

  def minimumSize(self):
    """ minimumSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveBy(self, float, float):
    """ moveBy(self, float, float) """
    pass

  def moveEvent(self, QGraphicsSceneMoveEvent):
    """ moveEvent(self, QGraphicsSceneMoveEvent) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self):
    """ opacityChanged(self) [signal] """
    pass

  def opaqueArea(self):
    """ opaqueArea(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def ownedByLayout(self):
    """ ownedByLayout(self) -> bool """
    return True

  def paint(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def paintWindowFrame(self, QtGui.QPainter, QStyleOptionGraphicsItem, arg0=None):
    """ paintWindowFrame(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None) """
    pass

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def panel(self):
    """ panel(self) -> QGraphicsItem """
    return QGraphicsItem()

  def panelModality(self):
    """ panelModality(self) -> QGraphicsItem.PanelModality """
    return QGraphicsItem.PanelModality()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentChanged(self):
    """ parentChanged(self) [signal] """
    pass

  def parentItem(self):
    """ parentItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def parentLayoutItem(self):
    """ parentLayoutItem(self) -> QGraphicsLayoutItem """
    return QGraphicsLayoutItem()

  def parentObject(self):
    """ parentObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def parentWidget(self):
    """ parentWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def polishEvent(self):
    """ polishEvent(self) """
    pass

  def pos(self):
    """ pos(self) -> QPointF """
    return QtCore.QPointF()

  def preferredHeight(self):
    """ preferredHeight(self) -> float """
    return 1.0

  def preferredSize(self):
    """ preferredSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def preferredWidth(self):
    """ preferredWidth(self) -> float """
    return 1.0

  def prepareGeometryChange():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRectF """
    return QtCore.QRectF()

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeSceneEventFilter(self, QGraphicsItem):
    """ removeSceneEventFilter(self, QGraphicsItem) """
    pass

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def resize(self, QtCore.QSizeF):
    """ resize(self, QSizeF)
    resize(self, float, float) """
    pass

  def resizeEvent(self, QGraphicsSceneResizeEvent):
    """ resizeEvent(self, QGraphicsSceneResizeEvent) """
    pass

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def rotationChanged(self):
    """ rotationChanged(self) [signal] """
    pass

  def scale(self):
    """ scale(self) -> float """
    return 1.0

  def scaleChanged(self):
    """ scaleChanged(self) [signal] """
    pass

  def scene(self):
    """ scene(self) -> QGraphicsScene """
    return QGraphicsScene()

  def sceneBoundingRect(self):
    """ sceneBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def sceneEvent(self, QtCore.QEvent):
    """ sceneEvent(self, QEvent) -> bool """
    return True

  def sceneEventFilter():
    pass

  def scenePos(self):
    """ scenePos(self) -> QPointF """
    return QtCore.QPointF()

  def sceneTransform(self):
    """ sceneTransform(self) -> QTransform """
    return QtGui.QTransform()

  def scroll(self, float, float, arg0=None):
    """ scroll(self, float, float, rect: QRectF = QRectF()) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptHoverEvents(self, bool):
    """ setAcceptHoverEvents(self, bool) """
    pass

  def setAcceptTouchEvents(self, bool):
    """ setAcceptTouchEvents(self, bool) """
    pass

  def setAcceptedMouseButtons(self, UnionQt.MouseButtons=None, Qt.MouseButton=None):
    """ setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton]) """
    pass

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBoundingRegionGranularity(self, float):
    """ setBoundingRegionGranularity(self, float) """
    pass

  def setCacheMode(self, arg0, arg1=None):
    """ setCacheMode(self, QGraphicsItem.CacheMode, logicalCacheSize: QSize = QSize()) """
    pass

  def setContentsMargins(self, float, float, float, float):
    """ setContentsMargins(self, float, float, float, float) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFiltersChildEvents(self, bool):
    """ setFiltersChildEvents(self, bool) """
    pass

  def setFlag(self, arg0, arg1=None):
    """ setFlag(self, QGraphicsItem.GraphicsItemFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGraphicsItem.GraphicsItemFlags=None, QGraphicsItem.GraphicsItemFlag=None):
    """ setFlags(self, Union[QGraphicsItem.GraphicsItemFlags, QGraphicsItem.GraphicsItemFlag]) """
    pass

  def setFocus(self, arg0=None):
    """ setFocus(self, focusReason: Qt.FocusReason = Qt.OtherFocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QGraphicsItem):
    """ setFocusProxy(self, QGraphicsItem) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setGeometry(self, QtCore.QRectF):
    """ setGeometry(self, QRectF)
    setGeometry(self, float, float, float, float) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGraphicsItem():
    pass

  def setGroup(self, QGraphicsItemGroup):
    """ setGroup(self, QGraphicsItemGroup) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QGraphicsLayout):
    """ setLayout(self, QGraphicsLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setMaximumHeight(self, float):
    """ setMaximumHeight(self, float) """
    pass

  def setMaximumSize(self, QtCore.QSizeF):
    """ setMaximumSize(self, QSizeF)
    setMaximumSize(self, float, float) """
    pass

  def setMaximumWidth(self, float):
    """ setMaximumWidth(self, float) """
    pass

  def setMinimumHeight(self, float):
    """ setMinimumHeight(self, float) """
    pass

  def setMinimumSize(self, QtCore.QSizeF):
    """ setMinimumSize(self, QSizeF)
    setMinimumSize(self, float, float) """
    pass

  def setMinimumWidth(self, float):
    """ setMinimumWidth(self, float) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setOwnedByLayout():
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setPanelModality(self, arg0):
    """ setPanelModality(self, QGraphicsItem.PanelModality) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setParentItem(self, QGraphicsItem):
    """ setParentItem(self, QGraphicsItem) """
    pass

  def setParentLayoutItem(self, QGraphicsLayoutItem):
    """ setParentLayoutItem(self, QGraphicsLayoutItem) """
    pass

  def setPos(self, UnionQPointF=None, QPoint=None):
    """ setPos(self, Union[QPointF, QPoint])
    setPos(self, float, float) """
    pass

  def setPreferredHeight(self, float):
    """ setPreferredHeight(self, float) """
    pass

  def setPreferredSize(self, QtCore.QSizeF):
    """ setPreferredSize(self, QSizeF)
    setPreferredSize(self, float, float) """
    pass

  def setPreferredWidth(self, float):
    """ setPreferredWidth(self, float) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRotation(self, float):
    """ setRotation(self, float) """
    pass

  def setScale(self, float):
    """ setScale(self, float) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy, controlType: QSizePolicy.ControlType = QSizePolicy.DefaultType) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setTabOrder(QGraphicsWidget, QGraphicsWidget):
    """ setTabOrder(QGraphicsWidget, QGraphicsWidget) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setTransformOriginPoint(self, UnionQPointF=None, QPoint=None):
    """ setTransformOriginPoint(self, Union[QPointF, QPoint])
    setTransformOriginPoint(self, float, float) """
    pass

  def setTransformations(self, IterableQGraphicsTransform=None):
    """ setTransformations(self, Iterable[QGraphicsTransform]) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowFrameMargins(self, float, float, float, float):
    """ setWindowFrameMargins(self, float, float, float, float) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZValue(self, float):
    """ setZValue(self, float) """
    pass

  def shape(self):
    """ shape(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSizeF """
    return QtCore.QSizeF()

  def sizeHint(self, arg0, arg1=None):
    """ sizeHint(self, Qt.SizeHint, constraint: QSizeF = QSizeF()) -> QSizeF """
    return QtCore.QSizeF()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackBefore(self, QGraphicsItem):
    """ stackBefore(self, QGraphicsItem) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toGraphicsObject(self):
    """ toGraphicsObject(self) -> QGraphicsObject """
    return QGraphicsObject()

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topLevelItem(self):
    """ topLevelItem(self) -> QGraphicsItem """
    return QGraphicsItem()

  def topLevelWidget(self):
    """ topLevelWidget(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def transformOriginPoint(self):
    """ transformOriginPoint(self) -> QPointF """
    return QtCore.QPointF()

  def transformations(self):
    """ transformations(self) -> List[QGraphicsTransform] """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def ungrabKeyboard(self):
    """ ungrabKeyboard(self) """
    pass

  def ungrabKeyboardEvent(self, QtCore.QEvent):
    """ ungrabKeyboardEvent(self, QEvent) """
    pass

  def ungrabMouse(self):
    """ ungrabMouse(self) """
    pass

  def ungrabMouseEvent(self, QtCore.QEvent):
    """ ungrabMouseEvent(self, QEvent) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetWindowFrameMargins(self):
    """ unsetWindowFrameMargins(self) """
    pass

  def update(self, arg0=None):
    """ update(self, rect: QRectF = QRectF())
    update(self, float, float, float, float) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def visibleChanged(self):
    """ visibleChanged(self) [signal] """
    pass

  def wheelEvent():
    pass

  def window(self):
    """ window(self) -> QGraphicsWidget """
    return QGraphicsWidget()

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowFrameEvent(self, QtCore.QEvent):
    """ windowFrameEvent(self, QEvent) -> bool """
    return True

  def windowFrameGeometry(self):
    """ windowFrameGeometry(self) -> QRectF """
    return QtCore.QRectF()

  def windowFrameRect(self):
    """ windowFrameRect(self) -> QRectF """
    return QtCore.QRectF()

  def windowFrameSectionAt(self, UnionQPointF=None, QPoint=None):
    """ windowFrameSectionAt(self, Union[QPointF, QPoint]) -> Qt.WindowFrameSection """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> float """
    return 1.0

  def xChanged(self):
    """ xChanged(self) [signal] """
    pass

  def y(self):
    """ y(self) -> float """
    return 1.0

  def yChanged(self):
    """ yChanged(self) [signal] """
    pass

  def zChanged(self):
    """ zChanged(self) [signal] """
    pass

  def zValue(self):
    """ zValue(self) -> float """
    return 1.0

class QGridLayout(QLayout):
  """ QGridLayout(QWidget)
  QGridLayout() """

  SetDefaultConstraint = None
  SetFixedSize = None
  SetMaximumSize = None
  SetMinAndMaxSize = None
  SetMinimumSize = None
  SetNoConstraint = None
  def __init__(self, QWidget):
    pass

  def activate(self):
    """ activate(self) -> bool """
    return True

  def addChildLayout():
    pass

  def addChildWidget():
    pass

  def addItem(self, QLayoutItem, int, int, arg0=None, arg1=None, arg2=None, arg3=None):
    """ addItem(self, QLayoutItem, int, int, rowSpan: int = 1, columnSpan: int = 1, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())
    addItem(self, QLayoutItem) """
    pass

  def addLayout(self, QLayout, int, int, arg0=None, arg1=None):
    """ addLayout(self, QLayout, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())
    addLayout(self, QLayout, int, int, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget)
    addWidget(self, QWidget, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())
    addWidget(self, QWidget, int, int, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def alignmentRect():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def cellRect(self, int, int):
    """ cellRect(self, int, int) -> QRect """
    return QtCore.QRect()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closestAcceptableSize(QWidget, QtCore.QSize):
    """ closestAcceptableSize(QWidget, QSize) -> QSize """
    return QtCore.QSize()

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def columnMinimumWidth(self, int):
    """ columnMinimumWidth(self, int) -> int """
    return 1

  def columnStretch(self, int):
    """ columnStretch(self, int) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getItemPosition(self, int):
    """ getItemPosition(self, int) -> Tuple[int, int, int, int] """
    return 1

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def horizontalSpacing(self):
    """ horizontalSpacing(self) -> int """
    return 1

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int
    indexOf(self, QLayoutItem) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def itemAtPosition(self, int, int):
    """ itemAtPosition(self, int, int) -> QLayoutItem """
    return QLayoutItem()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def menuBar(self):
    """ menuBar(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def originCorner(self):
    """ originCorner(self) -> Qt.Corner """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QLayoutItem):
    """ removeItem(self, QLayoutItem) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def replaceWidget(self, QWidget, QWidget, arg0=None, arg1=None):
    """ replaceWidget(self, QWidget, QWidget, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QLayoutItem """
    return QLayoutItem()

  def rowCount(self):
    """ rowCount(self) -> int """
    return 1

  def rowMinimumHeight(self, int):
    """ rowMinimumHeight(self, int) -> int """
    return 1

  def rowStretch(self, int):
    """ rowStretch(self, int) -> int """
    return 1

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAlignment(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    return True

  def setColumnMinimumWidth(self, int, int):
    """ setColumnMinimumWidth(self, int, int) """
    pass

  def setColumnStretch(self, int, int):
    """ setColumnStretch(self, int, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setDefaultPositioning(self, int, arg0):
    """ setDefaultPositioning(self, int, Qt.Orientation) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def setHorizontalSpacing(self, int):
    """ setHorizontalSpacing(self, int) """
    pass

  def setMenuBar(self, QWidget):
    """ setMenuBar(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOriginCorner(self, arg0):
    """ setOriginCorner(self, Qt.Corner) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRowMinimumHeight(self, int, int):
    """ setRowMinimumHeight(self, int, int) """
    pass

  def setRowStretch(self, int, int):
    """ setRowStretch(self, int, int) """
    pass

  def setSizeConstraint(self, arg0):
    """ setSizeConstraint(self, QLayout.SizeConstraint) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setVerticalSpacing(self, int):
    """ setVerticalSpacing(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeConstraint(self):
    """ sizeConstraint(self) -> QLayout.SizeConstraint """
    return QLayout.SizeConstraint()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def takeAt(self, int):
    """ takeAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalHeightForWidth(self, int):
    """ totalHeightForWidth(self, int) -> int """
    return 1

  def totalMaximumSize(self):
    """ totalMaximumSize(self) -> QSize """
    return QtCore.QSize()

  def totalMinimumSize(self):
    """ totalMinimumSize(self) -> QSize """
    return QtCore.QSize()

  def totalSizeHint(self):
    """ totalSizeHint(self) -> QSize """
    return QtCore.QSize()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def verticalSpacing(self):
    """ verticalSpacing(self) -> int """
    return 1

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def widgetEvent():
    pass

class QGroupBox(QWidget):
  """ QGroupBox(parent: QWidget = None)
  QGroupBox(str, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent(self, QtCore.QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clicked(self, arg0=None):
    """ clicked(self, checked: bool = False) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionGroupBox):
    """ initStyleOption(self, QStyleOptionGroupBox) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFlat(self):
    """ isFlat(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, int):
    """ setAlignment(self, int) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFlat(self, bool):
    """ setFlat(self, bool) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QHBoxLayout(QBoxLayout):
  """ QHBoxLayout()
  QHBoxLayout(QWidget) """

  BottomToTop = None
  Down = None
  LeftToRight = None
  RightToLeft = None
  SetDefaultConstraint = None
  SetFixedSize = None
  SetMaximumSize = None
  SetMinAndMaxSize = None
  SetMinimumSize = None
  SetNoConstraint = None
  TopToBottom = None
  Up = None

  def __init__(self):
    pass

  def activate(self):
    """ activate(self) -> bool """
    return True

  def addChildLayout():
    pass

  def addChildWidget():
    pass

  def addItem(self, QLayoutItem):
    """ addItem(self, QLayoutItem) """
    pass

  def addLayout(self, QLayout, arg0=None):
    """ addLayout(self, QLayout, stretch: int = 0) """
    pass

  def addSpacerItem(self, QSpacerItem):
    """ addSpacerItem(self, QSpacerItem) """
    pass

  def addSpacing(self, int):
    """ addSpacing(self, int) """
    pass

  def addStretch(self, arg0=None):
    """ addStretch(self, stretch: int = 0) """
    pass

  def addStrut(self, int):
    """ addStrut(self, int) """
    pass

  def addWidget(self, QWidget, arg0=None, arg1=None, arg2=None):
    """ addWidget(self, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def alignmentRect():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closestAcceptableSize(QWidget, QtCore.QSize):
    """ closestAcceptableSize(QWidget, QSize) -> QSize """
    return QtCore.QSize()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QBoxLayout.Direction """
    return QBoxLayout.Direction()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int
    indexOf(self, QLayoutItem) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def insertItem(self, int, QLayoutItem):
    """ insertItem(self, int, QLayoutItem) """
    pass

  def insertLayout(self, int, QLayout, arg0=None):
    """ insertLayout(self, int, QLayout, stretch: int = 0) """
    pass

  def insertSpacerItem(self, int, QSpacerItem):
    """ insertSpacerItem(self, int, QSpacerItem) """
    pass

  def insertSpacing(self, int, int):
    """ insertSpacing(self, int, int) """
    pass

  def insertStretch(self, int, arg0=None):
    """ insertStretch(self, int, stretch: int = 0) """
    pass

  def insertWidget(self, int, QWidget, arg0=None, arg1=None, arg2=None):
    """ insertWidget(self, int, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def menuBar(self):
    """ menuBar(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QLayoutItem):
    """ removeItem(self, QLayoutItem) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def replaceWidget(self, QWidget, QWidget, arg0=None, arg1=None):
    """ replaceWidget(self, QWidget, QWidget, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QLayoutItem """
    return QLayoutItem()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAlignment(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    return True

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QBoxLayout.Direction) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def setMenuBar(self, QWidget):
    """ setMenuBar(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSizeConstraint(self, arg0):
    """ setSizeConstraint(self, QLayout.SizeConstraint) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setStretch(self, int, int):
    """ setStretch(self, int, int) """
    pass

  def setStretchFactor(self, QWidget, int):
    """ setStretchFactor(self, QWidget, int) -> bool
    setStretchFactor(self, QLayout, int) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeConstraint(self):
    """ sizeConstraint(self) -> QLayout.SizeConstraint """
    return QLayout.SizeConstraint()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stretch(self, int):
    """ stretch(self, int) -> int """
    return 1

  def takeAt(self, int):
    """ takeAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalHeightForWidth(self, int):
    """ totalHeightForWidth(self, int) -> int """
    return 1

  def totalMaximumSize(self):
    """ totalMaximumSize(self) -> QSize """
    return QtCore.QSize()

  def totalMinimumSize(self):
    """ totalMinimumSize(self) -> QSize """
    return QtCore.QSize()

  def totalSizeHint(self):
    """ totalSizeHint(self) -> QSize """
    return QtCore.QSize()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def widgetEvent():
    pass

class QHeaderView(QAbstractItemView):
  """ QHeaderView(Qt.Orientation, parent: QWidget = None) """

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  Custom = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  Fixed = None
  HLine = None
  IgnoreMask = None
  Interactive = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  class ResizeMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ResizeToContents = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SingleSelection = None
  Stretch = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0, arg1=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def cascadingSectionResizes(self):
    """ cascadingSectionResizes(self) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QtCore.QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, QtCore.QModelIndex, QtCore.QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged(self, QtCore.QModelIndex, QtCore.QModelIndex, arg0=None):
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) """
    pass

  def defaultAlignment(self):
    """ defaultAlignment(self) -> Qt.Alignment """
    return None

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def defaultSectionSize(self):
    """ defaultSectionSize(self) -> int """
    return 1

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometriesChanged(self):
    """ geometriesChanged(self) [signal] """
    pass

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) """
    pass

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hiddenSectionCount(self):
    """ hiddenSectionCount(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hideSection(self, int):
    """ hideSection(self, int) """
    pass

  def highlightSections(self):
    """ highlightSections(self) -> bool """
    return True

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionHeader):
    """ initStyleOption(self, QStyleOptionHeader) """
    pass

  def initialize(self):
    """ initialize(self) """
    pass

  def initializeSections(self):
    """ initializeSections(self)
    initializeSections(self, int, int) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFirstSectionMovable(self):
    """ isFirstSectionMovable(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden(self, QtCore.QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QtCore.QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSectionHidden(self, int):
    """ isSectionHidden(self, int) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSortIndicatorShown(self):
    """ isSortIndicatorShown(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def length(self):
    """ length(self) -> int """
    return 1

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def logicalIndex(self, int):
    """ logicalIndex(self, int) -> int """
    return 1

  def logicalIndexAt(self, int):
    """ logicalIndexAt(self, int) -> int
    logicalIndexAt(self, int, int) -> int
    logicalIndexAt(self, QPoint) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSectionSize(self):
    """ maximumSectionSize(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSectionSize(self):
    """ minimumSectionSize(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return QtCore.QModelIndex()

  def moveEvent():
    pass

  def moveSection(self, int, int):
    """ moveSection(self, int, int) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def offset(self):
    """ offset(self) -> int """
    return 1

  def openPersistentEditor(self, QtCore.QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintSection(self, QtGui.QPainter, QtCore.QRect, int):
    """ paintSection(self, QPainter, QRect, int) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetDefaultSectionSize(self):
    """ resetDefaultSectionSize(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeContentsPrecision(self):
    """ resizeContentsPrecision(self) -> int """
    return 1

  def resizeEvent():
    pass

  def resizeSection(self, int, int):
    """ resizeSection(self, int, int) """
    pass

  def resizeSections(self):
    """ resizeSections(self)
    resizeSections(self, QHeaderView.ResizeMode) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def restoreState(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rowsAboutToBeRemoved():
    pass

  def rowsInserted(self, QtCore.QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def saveState(self):
    """ saveState(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0):
    """ scrollTo(self, QModelIndex, QAbstractItemView.ScrollHint) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def sectionClicked(self, int):
    """ sectionClicked(self, int) [signal] """
    pass

  def sectionCountChanged(self, int, int):
    """ sectionCountChanged(self, int, int) [signal] """
    pass

  def sectionDoubleClicked(self, int):
    """ sectionDoubleClicked(self, int) [signal] """
    pass

  def sectionEntered(self, int):
    """ sectionEntered(self, int) [signal] """
    pass

  def sectionHandleDoubleClicked(self, int):
    """ sectionHandleDoubleClicked(self, int) [signal] """
    pass

  def sectionMoved(self, int, int, int):
    """ sectionMoved(self, int, int, int) [signal] """
    pass

  def sectionPosition(self, int):
    """ sectionPosition(self, int) -> int """
    return 1

  def sectionPressed(self, int):
    """ sectionPressed(self, int) [signal] """
    pass

  def sectionResizeMode(self, int):
    """ sectionResizeMode(self, int) -> QHeaderView.ResizeMode """
    return QHeaderView.ResizeMode()

  def sectionResized(self, int, int, int):
    """ sectionResized(self, int, int, int) [signal] """
    pass

  def sectionSize(self, int):
    """ sectionSize(self, int) -> int """
    return 1

  def sectionSizeFromContents(self, int):
    """ sectionSizeFromContents(self, int) -> QSize """
    return QtCore.QSize()

  def sectionSizeHint(self, int):
    """ sectionSizeHint(self, int) -> int """
    return 1

  def sectionViewportPosition(self, int):
    """ sectionViewportPosition(self, int) -> int """
    return 1

  def sectionsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ sectionsAboutToBeRemoved(self, QModelIndex, int, int) """
    pass

  def sectionsClickable(self):
    """ sectionsClickable(self) -> bool """
    return True

  def sectionsHidden(self):
    """ sectionsHidden(self) -> bool """
    return True

  def sectionsInserted(self, QtCore.QModelIndex, int, int):
    """ sectionsInserted(self, QModelIndex, int, int) """
    pass

  def sectionsMovable(self):
    """ sectionsMovable(self) -> bool """
    return True

  def sectionsMoved(self):
    """ sectionsMoved(self) -> bool """
    return True

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes():
    pass

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged():
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCascadingSectionResizes(self, bool):
    """ setCascadingSectionResizes(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setDefaultAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDefaultSectionSize(self, int):
    """ setDefaultSectionSize(self, int) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFirstSectionMovable(self, bool):
    """ setFirstSectionMovable(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHighlightSections(self, bool):
    """ setHighlightSections(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSectionSize(self, int):
    """ setMaximumSectionSize(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSectionSize(self, int):
    """ setMinimumSectionSize(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOffset(self, int):
    """ setOffset(self, int) """
    pass

  def setOffsetToLastSection(self):
    """ setOffsetToLastSection(self) """
    pass

  def setOffsetToSectionPosition(self, int):
    """ setOffsetToSectionPosition(self, int) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResizeContentsPrecision(self, int):
    """ setResizeContentsPrecision(self, int) """
    pass

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setSectionHidden(self, int, bool):
    """ setSectionHidden(self, int, bool) """
    pass

  def setSectionResizeMode(self, int, arg0):
    """ setSectionResizeMode(self, int, QHeaderView.ResizeMode)
    setSectionResizeMode(self, QHeaderView.ResizeMode) """
    pass

  def setSectionsClickable(self, bool):
    """ setSectionsClickable(self, bool) """
    pass

  def setSectionsMovable(self, bool):
    """ setSectionsMovable(self, bool) """
    pass

  def setSelection(self, QtCore.QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSortIndicator(self, int, arg0):
    """ setSortIndicator(self, int, Qt.SortOrder) """
    pass

  def setSortIndicatorShown(self, bool):
    """ setSortIndicatorShown(self, bool) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStretchLastSection(self, bool):
    """ setStretchLastSection(self, bool) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showSection(self, int):
    """ showSection(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sortIndicatorChanged(self, int, arg0):
    """ sortIndicatorChanged(self, int, Qt.SortOrder) [signal] """
    pass

  def sortIndicatorOrder(self):
    """ sortIndicatorOrder(self) -> Qt.SortOrder """
    return None

  def sortIndicatorSection(self):
    """ sortIndicatorSection(self) -> int """
    return 1

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def stretchLastSection(self):
    """ stretchLastSection(self) -> bool """
    return True

  def stretchSectionCount(self):
    """ stretchSectionCount(self) -> int """
    return 1

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def swapSections(self, int, int):
    """ swapSections(self, int, int) """
    pass

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries(self):
    """ updateGeometries(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updateSection(self, int):
    """ updateSection(self, int) """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent(self, QtCore.QEvent):
    """ viewportEvent(self, QEvent) -> bool """
    return True

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualIndex(self, int):
    """ visualIndex(self, int) -> int """
    return 1

  def visualIndexAt(self, int):
    """ visualIndexAt(self, int) -> int """
    return 1

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection(self, QtCore.QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QInputDialog(QDialog):
  """ QInputDialog(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  Accepted = None
  DoubleInput = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None

  class InputDialogOption(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class InputDialogOptions(simplewrapper):
    """ QInputDialog.InputDialogOptions()
    QInputDialog.InputDialogOptions(Union[QInputDialog.InputDialogOptions, QInputDialog.InputDialogOption])
    QInputDialog.InputDialogOptions(QInputDialog.InputDialogOptions) """

    def __init__(self):
      pass

  class InputMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  IntInput = None
  NoButtons = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rejected = None
  TextInput = None
  UseListViewForComboBoxItems = None
  UsePlainTextEditForTextInput = None

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def cancelButtonText(self):
    """ cancelButtonText(self) -> str """
    return ""

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def comboBoxItems(self):
    """ comboBoxItems(self) -> List[str] """
    return ""

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def doubleDecimals(self):
    """ doubleDecimals(self) -> int """
    return 1

  def doubleMaximum(self):
    """ doubleMaximum(self) -> float """
    return 1.0

  def doubleMinimum(self):
    """ doubleMinimum(self) -> float """
    return 1.0

  def doubleStep(self):
    """ doubleStep(self) -> float """
    return 1.0

  def doubleValue(self):
    """ doubleValue(self) -> float """
    return 1.0

  def doubleValueChanged(self, float):
    """ doubleValueChanged(self, float) [signal] """
    pass

  def doubleValueSelected(self, float):
    """ doubleValueSelected(self, float) [signal] """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter():
    pass

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getDouble(QWidget, str, str, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None):
    """ getDouble(QWidget, str, str, value: float = 0, min: float = -2147483647, max: float = 2147483647, decimals: int = 1, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) -> Tuple[float, bool]
    getDouble(QWidget, str, str, float, float, float, int, Union[Qt.WindowFlags, Qt.WindowType], float) -> Tuple[float, bool] """
    return 1.0

  def getInt(QWidget, str, str, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None):
    """ getInt(QWidget, str, str, value: int = 0, min: int = -2147483647, max: int = 2147483647, step: int = 1, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) -> Tuple[int, bool] """
    return 1

  def getItem(QWidget, str, str, Iterablestr=None, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None):
    """ getItem(QWidget, str, str, Iterable[str], current: int = 0, editable: bool = True, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags(), inputMethodHints: Union[Qt.InputMethodHints, Qt.InputMethodHint] = Qt.ImhNone) -> Tuple[str, bool] """
    return ""

  def getMultiLineText(QWidget, str, str, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None):
    """ getMultiLineText(QWidget, str, str, text: str = '', flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags(), inputMethodHints: Union[Qt.InputMethodHints, Qt.InputMethodHint] = Qt.ImhNone) -> Tuple[str, bool] """
    return ""

  def getText(QWidget, str, str, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None):
    """ getText(QWidget, str, str, echo: QLineEdit.EchoMode = QLineEdit.Normal, text: str = '', flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags(), inputMethodHints: Union[Qt.InputMethodHints, Qt.InputMethodHint] = Qt.ImhNone) -> Tuple[str, bool] """
    return ""

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def inputMode(self):
    """ inputMode(self) -> QInputDialog.InputMode """
    return QInputDialog.InputMode()

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def intMaximum(self):
    """ intMaximum(self) -> int """
    return 1

  def intMinimum(self):
    """ intMinimum(self) -> int """
    return 1

  def intStep(self):
    """ intStep(self) -> int """
    return 1

  def intValue(self):
    """ intValue(self) -> int """
    return 1

  def intValueChanged(self, int):
    """ intValueChanged(self, int) [signal] """
    pass

  def intValueSelected(self, int):
    """ intValueSelected(self, int) [signal] """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isComboBoxEditable(self):
    """ isComboBoxEditable(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def labelText(self):
    """ labelText(self) -> str """
    return ""

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def okButtonText(self):
    """ okButtonText(self) -> str """
    return ""

  def open(self):
    """ open(self)
    open(self, PYQT_SLOT) """
    pass

  def options(self):
    """ options(self) -> QInputDialog.InputDialogOptions """
    return QInputDialog.InputDialogOptions()

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCancelButtonText(self, str):
    """ setCancelButtonText(self, str) """
    pass

  def setComboBoxEditable(self, bool):
    """ setComboBoxEditable(self, bool) """
    pass

  def setComboBoxItems(self, Iterablestr=None):
    """ setComboBoxItems(self, Iterable[str]) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDoubleDecimals(self, int):
    """ setDoubleDecimals(self, int) """
    pass

  def setDoubleMaximum(self, float):
    """ setDoubleMaximum(self, float) """
    pass

  def setDoubleMinimum(self, float):
    """ setDoubleMinimum(self, float) """
    pass

  def setDoubleRange(self, float, float):
    """ setDoubleRange(self, float, float) """
    pass

  def setDoubleStep(self, float):
    """ setDoubleStep(self, float) """
    pass

  def setDoubleValue(self, float):
    """ setDoubleValue(self, float) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInputMode(self, arg0):
    """ setInputMode(self, QInputDialog.InputMode) """
    pass

  def setIntMaximum(self, int):
    """ setIntMaximum(self, int) """
    pass

  def setIntMinimum(self, int):
    """ setIntMinimum(self, int) """
    pass

  def setIntRange(self, int, int):
    """ setIntRange(self, int, int) """
    pass

  def setIntStep(self, int):
    """ setIntStep(self, int) """
    pass

  def setIntValue(self, int):
    """ setIntValue(self, int) """
    pass

  def setLabelText(self, str):
    """ setLabelText(self, str) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOkButtonText(self, str):
    """ setOkButtonText(self, str) """
    pass

  def setOption(self, arg0, arg1=None):
    """ setOption(self, QInputDialog.InputDialogOption, on: bool = True) """
    pass

  def setOptions(self, UnionQInputDialog.InputDialogOptions=None, QInputDialog.InputDialogOption=None):
    """ setOptions(self, Union[QInputDialog.InputDialogOptions, QInputDialog.InputDialogOption]) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextEchoMode(self, arg0):
    """ setTextEchoMode(self, QLineEdit.EchoMode) """
    pass

  def setTextValue(self, str):
    """ setTextValue(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def testOption(self, arg0):
    """ testOption(self, QInputDialog.InputDialogOption) -> bool """
    return True

  def textEchoMode(self):
    """ textEchoMode(self) -> QLineEdit.EchoMode """
    return QLineEdit.EchoMode()

  def textValue(self):
    """ textValue(self) -> str """
    return ""

  def textValueChanged(self, str):
    """ textValueChanged(self, str) [signal] """
    pass

  def textValueSelected(self, str):
    """ textValueSelected(self, str) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QItemDelegate(QAbstractItemDelegate):
  """ QItemDelegate(parent: QObject = None) """

  EditNextItem = None
  EditPreviousItem = None
  NoHint = None
  RevertModelCache = None
  SubmitModelCache = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closeEditor(self, QWidget, arg0=None):
    """ closeEditor(self, QWidget, hint: QAbstractItemDelegate.EndEditHint = QAbstractItemDelegate.NoHint) [signal] """
    pass

  def commitData(self, QWidget):
    """ commitData(self, QWidget) [signal] """
    pass

  def connectNotify():
    pass

  def createEditor(self, QWidget, QStyleOptionViewItem, QtCore.QModelIndex):
    """ createEditor(self, QWidget, QStyleOptionViewItem, QModelIndex) -> QWidget """
    return QWidget()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyEditor(self, QWidget, QtCore.QModelIndex):
    """ destroyEditor(self, QWidget, QModelIndex) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def drawBackground(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QModelIndex):
    """ drawBackground(self, QPainter, QStyleOptionViewItem, QModelIndex) """
    pass

  def drawCheck(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QRect, arg0):
    """ drawCheck(self, QPainter, QStyleOptionViewItem, QRect, Qt.CheckState) """
    pass

  def drawDecoration(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QRect, QtGui.QPixmap):
    """ drawDecoration(self, QPainter, QStyleOptionViewItem, QRect, QPixmap) """
    pass

  def drawDisplay(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QRect, str):
    """ drawDisplay(self, QPainter, QStyleOptionViewItem, QRect, str) """
    pass

  def drawFocus(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QRect):
    """ drawFocus(self, QPainter, QStyleOptionViewItem, QRect) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editorEvent(self, QtCore.QEvent, QtCore.QAbstractItemModel, QStyleOptionViewItem, QtCore.QModelIndex):
    """ editorEvent(self, QEvent, QAbstractItemModel, QStyleOptionViewItem, QModelIndex) -> bool """
    return True

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hasClipping(self):
    """ hasClipping(self) -> bool """
    return True

  def helpEvent(self, QtGui.QHelpEvent, QAbstractItemView, QStyleOptionViewItem, QtCore.QModelIndex):
    """ helpEvent(self, QHelpEvent, QAbstractItemView, QStyleOptionViewItem, QModelIndex) -> bool """
    return True

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemEditorFactory(self):
    """ itemEditorFactory(self) -> QItemEditorFactory """
    return QItemEditorFactory()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def paint(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QModelIndex):
    """ paint(self, QPainter, QStyleOptionViewItem, QModelIndex) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setClipping(self, bool):
    """ setClipping(self, bool) """
    pass

  def setEditorData(self, QWidget, QtCore.QModelIndex):
    """ setEditorData(self, QWidget, QModelIndex) """
    pass

  def setItemEditorFactory(self, QItemEditorFactory):
    """ setItemEditorFactory(self, QItemEditorFactory) """
    pass

  def setModelData(self, QWidget, QtCore.QAbstractItemModel, QtCore.QModelIndex):
    """ setModelData(self, QWidget, QAbstractItemModel, QModelIndex) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeHint(self, QStyleOptionViewItem, QtCore.QModelIndex):
    """ sizeHint(self, QStyleOptionViewItem, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintChanged(self, QtCore.QModelIndex):
    """ sizeHintChanged(self, QModelIndex) [signal] """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateEditorGeometry(self, QWidget, QStyleOptionViewItem, QtCore.QModelIndex):
    """ updateEditorGeometry(self, QWidget, QStyleOptionViewItem, QModelIndex) """
    pass

class QItemEditorCreatorBase(wrapper):
  """ QItemEditorCreatorBase()
  QItemEditorCreatorBase(QItemEditorCreatorBase) """

  def __init__(self):
    pass

  def createWidget(self, QWidget):
    """ createWidget(self, QWidget) -> QWidget """
    return QWidget()

  def valuePropertyName(self):
    """ valuePropertyName(self) -> QByteArray """
    return QtCore.QByteArray()

class QItemEditorFactory(wrapper):
  """ QItemEditorFactory()
  QItemEditorFactory(QItemEditorFactory) """

  def __init__(self):
    pass

  def createEditor(self, int, QWidget):
    """ createEditor(self, int, QWidget) -> QWidget """
    return QWidget()

  def defaultFactory():
    """ defaultFactory() -> QItemEditorFactory """
    return QItemEditorFactory()

  def registerEditor(self, int, QItemEditorCreatorBase):
    """ registerEditor(self, int, QItemEditorCreatorBase) """
    pass

  def setDefaultFactory(QItemEditorFactory):
    """ setDefaultFactory(QItemEditorFactory) """
    pass

  def valuePropertyName(self, int):
    """ valuePropertyName(self, int) -> QByteArray """
    return QtCore.QByteArray()

class QKeyEventTransition(QEventTransition):
  """ QKeyEventTransition(sourceState: QState = None)
  QKeyEventTransition(QObject, QEvent.Type, int, sourceState: QState = None) """

  ExternalTransition = None
  InternalTransition = None

  class TransitionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None):
    pass

  def addAnimation(self, QtCore.QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def animations(self):
    """ animations(self) -> List[QAbstractAnimation] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event():
    pass

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def eventSource(self):
    """ eventSource(self) -> QObject """
    return QtCore.QObject()

  def eventTest(self, QtCore.QEvent):
    """ eventTest(self, QEvent) -> bool """
    return True

  def eventType(self):
    """ eventType(self) -> QEvent.Type """
    return QEvent.Type()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def key(self):
    """ key(self) -> int """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return QtCore.QStateMachine()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def modifierMask(self):
    """ modifierMask(self) -> Qt.KeyboardModifiers """
    return None

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onTransition(self, QtCore.QEvent):
    """ onTransition(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QtCore.QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEventSource(self, QtCore.QObject):
    """ setEventSource(self, QObject) """
    pass

  def setEventType(self, arg0):
    """ setEventType(self, QEvent.Type) """
    pass

  def setKey(self, int):
    """ setKey(self, int) """
    pass

  def setModifierMask(self, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ setModifierMask(self, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setTargetState(self, QtCore.QAbstractState):
    """ setTargetState(self, QAbstractState) """
    pass

  def setTargetStates(self, IterableQAbstractState=None):
    """ setTargetStates(self, Iterable[QAbstractState]) """
    pass

  def setTransitionType(self, arg0):
    """ setTransitionType(self, QAbstractTransition.TransitionType) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sourceState(self):
    """ sourceState(self) -> QState """
    return QtCore.QState()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def targetState(self):
    """ targetState(self) -> QAbstractState """
    return QtCore.QAbstractState()

  def targetStateChanged(self):
    """ targetStateChanged(self) [signal] """
    pass

  def targetStates(self):
    """ targetStates(self) -> List[QAbstractState] """
    return ""

  def targetStatesChanged(self):
    """ targetStatesChanged(self) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transitionType(self):
    """ transitionType(self) -> QAbstractTransition.TransitionType """
    return QAbstractTransition.TransitionType()

  def triggered(self):
    """ triggered(self) [signal] """
    pass

class QKeySequenceEdit(QWidget):
  """ QKeySequenceEdit(parent: QWidget = None)
  QKeySequenceEdit(Union[QKeySequence, QKeySequence.StandardKey, str, int], parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keySequence(self):
    """ keySequence(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def keySequenceChanged(self, arg0, arg1, str, arg2):
    """ keySequenceChanged(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) [signal] """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeySequence(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setKeySequence(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QLCDNumber(QFrame):
  """ QLCDNumber(parent: QWidget = None)
  QLCDNumber(int, parent: QWidget = None) """

  Bin = None
  Box = None
  Dec = None
  DrawChildren = None
  DrawWindowBackground = None
  Filled = None
  Flat = None
  HLine = None
  Hex = None
  IgnoreMask = None

  class Mode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoFrame = None
  Oct = None
  Outline = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  class SegmentStyle(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def checkOverflow(self, float):
    """ checkOverflow(self, float) -> bool
    checkOverflow(self, int) -> bool """
    return True

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def digitCount(self):
    """ digitCount(self) -> int """
    return 1

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def display(self, str):
    """ display(self, str)
    display(self, float)
    display(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def intValue(self):
    """ intValue(self) -> int """
    return 1

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mode(self):
    """ mode(self) -> QLCDNumber.Mode """
    return QLCDNumber.Mode()

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overflow(self):
    """ overflow(self) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def segmentStyle(self):
    """ segmentStyle(self) -> QLCDNumber.SegmentStyle """
    return QLCDNumber.SegmentStyle()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setBinMode(self):
    """ setBinMode(self) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDecMode(self):
    """ setDecMode(self) """
    pass

  def setDigitCount(self, int):
    """ setDigitCount(self, int) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHexMode(self):
    """ setHexMode(self) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMode(self, arg0):
    """ setMode(self, QLCDNumber.Mode) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setNumDigits(self, int):
    """ setNumDigits(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOctMode(self):
    """ setOctMode(self) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSegmentStyle(self, arg0):
    """ setSegmentStyle(self, QLCDNumber.SegmentStyle) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSmallDecimalPoint(self, bool):
    """ setSmallDecimalPoint(self, bool) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def smallDecimalPoint(self):
    """ smallDecimalPoint(self) -> bool """
    return True

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def value(self):
    """ value(self) -> float """
    return 1.0

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QLabel(QFrame):
  """ QLabel(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())
  QLabel(str, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buddy(self):
    """ buddy(self) -> QWidget """
    return QWidget()

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasScaledContents(self):
    """ hasScaledContents(self) -> bool """
    return True

  def hasSelectedText(self):
    """ hasSelectedText(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def indent(self):
    """ indent(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def linkActivated(self, str):
    """ linkActivated(self, str) [signal] """
    pass

  def linkHovered(self, str):
    """ linkHovered(self, str) [signal] """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def margin(self):
    """ margin(self) -> int """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def movie(self):
    """ movie(self) -> QMovie """
    return QtGui.QMovie()

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openExternalLinks(self):
    """ openExternalLinks(self) -> bool """
    return True

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def picture(self):
    """ picture(self) -> QPicture """
    return QtGui.QPicture()

  def pixmap(self):
    """ pixmap(self) -> QPixmap """
    return QtGui.QPixmap()

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectedText(self):
    """ selectedText(self) -> str """
    return ""

  def selectionStart(self):
    """ selectionStart(self) -> int """
    return 1

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setBuddy(self, QWidget):
    """ setBuddy(self, QWidget) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIndent(self, int):
    """ setIndent(self, int) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMargin(self, int):
    """ setMargin(self, int) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovie(self, QtGui.QMovie):
    """ setMovie(self, QMovie) """
    pass

  def setNum(self, float):
    """ setNum(self, float)
    setNum(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenExternalLinks(self, bool):
    """ setOpenExternalLinks(self, bool) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPicture(self, QtGui.QPicture):
    """ setPicture(self, QPicture) """
    pass

  def setPixmap(self, QtGui.QPixmap):
    """ setPixmap(self, QPixmap) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setScaledContents(self, bool):
    """ setScaledContents(self, bool) """
    pass

  def setSelection(self, int, int):
    """ setSelection(self, int, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextFormat(self, arg0):
    """ setTextFormat(self, Qt.TextFormat) """
    pass

  def setTextInteractionFlags(self, UnionQt.TextInteractionFlags=None, Qt.TextInteractionFlag=None):
    """ setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textFormat(self):
    """ textFormat(self) -> Qt.TextFormat """
    return None

  def textInteractionFlags(self):
    """ textInteractionFlags(self) -> Qt.TextInteractionFlags """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QLayout(QObject):
  """ QLayout(QWidget)
  QLayout() """

  SetDefaultConstraint = None
  SetFixedSize = None
  SetMaximumSize = None
  SetMinAndMaxSize = None
  SetMinimumSize = None
  SetNoConstraint = None
  def __init__(self, QWidget):
    pass

  def activate(self):
    """ activate(self) -> bool """
    return True

  def addChildLayout(self, QLayout):
    """ addChildLayout(self, QLayout) """
    pass

  def addChildWidget(self, QWidget):
    """ addChildWidget(self, QWidget) """
    pass

  def addItem(self, QLayoutItem):
    """ addItem(self, QLayoutItem) """
    pass

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def alignmentRect(self, QtCore.QRect):
    """ alignmentRect(self, QRect) -> QRect """
    return QtCore.QRect()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent(self, QtCore.QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closestAcceptableSize(QWidget, QtCore.QSize):
    """ closestAcceptableSize(QWidget, QSize) -> QSize """
    return QtCore.QSize()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int
    indexOf(self, QLayoutItem) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def menuBar(self):
    """ menuBar(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QLayoutItem):
    """ removeItem(self, QLayoutItem) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def replaceWidget(self, QWidget, QWidget, arg0=None, arg1=None):
    """ replaceWidget(self, QWidget, QWidget, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QLayoutItem """
    return QLayoutItem()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAlignment(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    return True

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def setMenuBar(self, QWidget):
    """ setMenuBar(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSizeConstraint(self, arg0):
    """ setSizeConstraint(self, QLayout.SizeConstraint) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeConstraint(self):
    """ sizeConstraint(self) -> QLayout.SizeConstraint """
    return QLayout.SizeConstraint()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def takeAt(self, int):
    """ takeAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalHeightForWidth(self, int):
    """ totalHeightForWidth(self, int) -> int """
    return 1

  def totalMaximumSize(self):
    """ totalMaximumSize(self) -> QSize """
    return QtCore.QSize()

  def totalMinimumSize(self):
    """ totalMinimumSize(self) -> QSize """
    return QtCore.QSize()

  def totalSizeHint(self):
    """ totalSizeHint(self) -> QSize """
    return QtCore.QSize()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def widgetEvent(self, QtCore.QEvent):
    """ widgetEvent(self, QEvent) """
    pass

class QLayoutItem(wrapper):
  """ QLayoutItem(alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())
  QLayoutItem(QLayoutItem) """

  def __init__(self, arg0=None, arg1=None):
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QLineEdit(QWidget):
  """ QLineEdit(parent: QWidget = None)
  QLineEdit(str, parent: QWidget = None) """

  class ActionPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DrawChildren = None
  DrawWindowBackground = None

  class EchoMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  IgnoreMask = None
  LeadingPosition = None
  NoEcho = None
  Normal = None
  Password = None
  PasswordEchoOnEdit = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  TrailingPosition = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction)
    addAction(self, QAction, QLineEdit.ActionPosition)
    addAction(self, QIcon, QLineEdit.ActionPosition) -> QAction """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def backspace(self):
    """ backspace(self) """
    pass

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def completer(self):
    """ completer(self) -> QCompleter """
    return QCompleter()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def copy(self):
    """ copy(self) """
    pass

  def create():
    pass

  def createStandardContextMenu(self):
    """ createStandardContextMenu(self) -> QMenu """
    return QMenu()

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def cursorBackward(self, bool, arg0=None):
    """ cursorBackward(self, bool, steps: int = 1) """
    pass

  def cursorForward(self, bool, arg0=None):
    """ cursorForward(self, bool, steps: int = 1) """
    pass

  def cursorMoveStyle(self):
    """ cursorMoveStyle(self) -> Qt.CursorMoveStyle """
    return None

  def cursorPosition(self):
    """ cursorPosition(self) -> int """
    return 1

  def cursorPositionAt(self, QtCore.QPoint):
    """ cursorPositionAt(self, QPoint) -> int """
    return 1

  def cursorPositionChanged(self, int, int):
    """ cursorPositionChanged(self, int, int) [signal] """
    pass

  def cursorRect(self):
    """ cursorRect(self) -> QRect """
    return QtCore.QRect()

  def cursorWordBackward(self, bool):
    """ cursorWordBackward(self, bool) """
    pass

  def cursorWordForward(self, bool):
    """ cursorWordForward(self, bool) """
    pass

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def cut(self):
    """ cut(self) """
    pass

  def del_(self):
    """ del_(self) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def deselect(self):
    """ deselect(self) """
    pass

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def displayText(self):
    """ displayText(self) -> str """
    return ""

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent(self, QtGui.QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def echoMode(self):
    """ echoMode(self) -> QLineEdit.EchoMode """
    return QLineEdit.EchoMode()

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def end(self, bool):
    """ end(self, bool) """
    pass

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getTextMargins(self):
    """ getTextMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAcceptableInput(self):
    """ hasAcceptableInput(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasSelectedText(self):
    """ hasSelectedText(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def home(self, bool):
    """ home(self, bool) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionFrame):
    """ initStyleOption(self, QStyleOptionFrame) """
    pass

  def inputMask(self):
    """ inputMask(self) -> str """
    return ""

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any
    inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any """
    return None

  def inputRejected(self):
    """ inputRejected(self) [signal] """
    pass

  def insert(self, str):
    """ insert(self, str) """
    pass

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isClearButtonEnabled(self):
    """ isClearButtonEnabled(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isModified(self):
    """ isModified(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRedoAvailable(self):
    """ isRedoAvailable(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUndoAvailable(self):
    """ isUndoAvailable(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maxLength(self):
    """ maxLength(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def paste(self):
    """ paste(self) """
    pass

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def placeholderText(self):
    """ placeholderText(self) -> str """
    return ""

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def redo(self):
    """ redo(self) """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def returnPressed(self):
    """ returnPressed(self) [signal] """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedText(self):
    """ selectedText(self) -> str """
    return ""

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def selectionEnd(self):
    """ selectionEnd(self) -> int """
    return 1

  def selectionLength(self):
    """ selectionLength(self) -> int """
    return 1

  def selectionStart(self):
    """ selectionStart(self) -> int """
    return 1

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setClearButtonEnabled(self, bool):
    """ setClearButtonEnabled(self, bool) """
    pass

  def setCompleter(self, QCompleter):
    """ setCompleter(self, QCompleter) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setCursorMoveStyle(self, arg0):
    """ setCursorMoveStyle(self, Qt.CursorMoveStyle) """
    pass

  def setCursorPosition(self, int):
    """ setCursorPosition(self, int) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setEchoMode(self, arg0):
    """ setEchoMode(self, QLineEdit.EchoMode) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMask(self, str):
    """ setInputMask(self, str) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaxLength(self, int):
    """ setMaxLength(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModified(self, bool):
    """ setModified(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPlaceholderText(self, str):
    """ setPlaceholderText(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setSelection(self, int, int):
    """ setSelection(self, int, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextMargins(self, int, int, int, int):
    """ setTextMargins(self, int, int, int, int)
    setTextMargins(self, QMargins) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValidator(self, QtGui.QValidator):
    """ setValidator(self, QValidator) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textChanged(self, str):
    """ textChanged(self, str) [signal] """
    pass

  def textEdited(self, str):
    """ textEdited(self, str) [signal] """
    pass

  def textMargins(self):
    """ textMargins(self) -> QMargins """
    return QtCore.QMargins()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def undo(self):
    """ undo(self) """
    pass

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validator(self):
    """ validator(self) -> QValidator """
    return QtGui.QValidator()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QListView(QAbstractItemView):
  """ QListView(parent: QWidget = None) """

  AboveItem = None
  Adjust = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  Batched = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  Fixed = None

  class Flow(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Free = None
  HLine = None
  IconMode = None
  IgnoreMask = None
  InternalMove = None

  class LayoutMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LeftToRight = None
  ListMode = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None

  class Movement(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  class ResizeMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SinglePass = None
  SingleSelection = None
  Snap = None
  Static = None
  StyledPanel = None
  Sunken = None
  TopToBottom = None
  VLine = None

  class ViewMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def batchSize(self):
    """ batchSize(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearPropertyFlags(self):
    """ clearPropertyFlags(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QtCore.QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, QtCore.QModelIndex, QtCore.QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged(self, QtCore.QModelIndex, QtCore.QModelIndex, arg0=None):
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) """
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flow(self):
    """ flow(self) -> QListView.Flow """
    return QListView.Flow()

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def gridSize(self):
    """ gridSize(self) -> QSize """
    return QtCore.QSize()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def indexesMoved(self, arg0):
    """ indexesMoved(self, Iterable[QModelIndex]) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden(self, QtCore.QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QtCore.QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isRowHidden(self, int):
    """ isRowHidden(self, int) -> bool """
    return True

  def isSelectionRectVisible(self):
    """ isSelectionRectVisible(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def isWrapping(self):
    """ isWrapping(self) -> bool """
    return True

  def itemAlignment(self):
    """ itemAlignment(self) -> Qt.Alignment """
    return None

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def layoutMode(self):
    """ layoutMode(self) -> QListView.LayoutMode """
    return QListView.LayoutMode()

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def modelColumn(self):
    """ modelColumn(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return QtCore.QModelIndex()

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def movement(self):
    """ movement(self) -> QListView.Movement """
    return QListView.Movement()

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QtCore.QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def rectForIndex(self, QtCore.QModelIndex):
    """ rectForIndex(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def resizeMode(self):
    """ resizeMode(self) -> QListView.ResizeMode """
    return QListView.ResizeMode()

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rowsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) """
    pass

  def rowsInserted(self, QtCore.QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes(self):
    """ selectedIndexes(self) -> List[QModelIndex] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged(self, QtCore.QItemSelection, QtCore.QItemSelection):
    """ selectionChanged(self, QItemSelection, QItemSelection) """
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setBatchSize(self, int):
    """ setBatchSize(self, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFlow(self, arg0):
    """ setFlow(self, QListView.Flow) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGridSize(self, QtCore.QSize):
    """ setGridSize(self, QSize) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setItemAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLayoutMode(self, arg0):
    """ setLayoutMode(self, QListView.LayoutMode) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setModelColumn(self, int):
    """ setModelColumn(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovement(self, arg0):
    """ setMovement(self, QListView.Movement) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPositionForIndex(self, QtCore.QPoint, QtCore.QModelIndex):
    """ setPositionForIndex(self, QPoint, QModelIndex) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResizeMode(self, arg0):
    """ setResizeMode(self, QListView.ResizeMode) """
    pass

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRowHidden(self, int, bool):
    """ setRowHidden(self, int, bool) """
    pass

  def setSelection(self, QtCore.QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setSelectionRectVisible(self, bool):
    """ setSelectionRectVisible(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUniformItemSizes(self, bool):
    """ setUniformItemSizes(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewMode(self, arg0):
    """ setViewMode(self, QListView.ViewMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag(self, UnionQt.DropActions=None, Qt.DropAction=None):
    """ startDrag(self, Union[Qt.DropActions, Qt.DropAction]) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def uniformItemSizes(self):
    """ uniformItemSizes(self) -> bool """
    return True

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries(self):
    """ updateGeometries(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewMode(self):
    """ viewMode(self) -> QListView.ViewMode """
    return QListView.ViewMode()

  def viewOptions(self):
    """ viewOptions(self) -> QStyleOptionViewItem """
    return QStyleOptionViewItem()

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return QtCore.QSize()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection(self, QtCore.QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QListWidget(QListView):
  """ QListWidget(parent: QWidget = None) """

  AboveItem = None
  Adjust = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  Batched = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  Fixed = None
  Free = None
  HLine = None
  IconMode = None
  IgnoreMask = None
  InternalMove = None
  LeftToRight = None
  ListMode = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SinglePass = None
  SingleSelection = None
  Snap = None
  Static = None
  StyledPanel = None
  Sunken = None
  TopToBottom = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addItem(self, QListWidgetItem):
    """ addItem(self, QListWidgetItem)
    addItem(self, str) """
    pass

  def addItems(self, Iterablestr=None):
    """ addItems(self, Iterable[str]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def batchSize(self):
    """ batchSize(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearPropertyFlags(self):
    """ clearPropertyFlags(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QListWidgetItem):
    """ closePersistentEditor(self, QListWidgetItem) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged():
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def currentItem(self):
    """ currentItem(self) -> QListWidgetItem """
    return QListWidgetItem()

  def currentItemChanged(self, QListWidgetItem, QListWidgetItem):
    """ currentItemChanged(self, QListWidgetItem, QListWidgetItem) [signal] """
    pass

  def currentRow(self):
    """ currentRow(self) -> int """
    return 1

  def currentRowChanged(self, int):
    """ currentRowChanged(self, int) [signal] """
    pass

  def currentTextChanged(self, str):
    """ currentTextChanged(self, str) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged():
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dropIndicatorPosition():
    pass

  def dropMimeData(self, int, QtCore.QMimeData, arg0):
    """ dropMimeData(self, int, QMimeData, Qt.DropAction) -> bool """
    return True

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editItem(self, QListWidgetItem):
    """ editItem(self, QListWidgetItem) """
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findItems(self, str, UnionQt.MatchFlags=None, Qt.MatchFlag=None):
    """ findItems(self, str, Union[Qt.MatchFlags, Qt.MatchFlag]) -> List[QListWidgetItem] """
    return None

  def flow(self):
    """ flow(self) -> QListView.Flow """
    return QListView.Flow()

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def gridSize(self):
    """ gridSize(self) -> QSize """
    return QtCore.QSize()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalOffset():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexFromItem(self, QListWidgetItem):
    """ indexFromItem(self, QListWidgetItem) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def indexesMoved(self, arg0):
    """ indexesMoved(self, Iterable[QModelIndex]) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertItem(self, int, QListWidgetItem):
    """ insertItem(self, int, QListWidgetItem)
    insertItem(self, int, str) """
    pass

  def insertItems(self, int, Iterablestr=None):
    """ insertItems(self, int, Iterable[str]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden():
    pass

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QListWidgetItem):
    """ isPersistentEditorOpen(self, QListWidgetItem) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isRowHidden(self, int):
    """ isRowHidden(self, int) -> bool """
    return True

  def isSelectionRectVisible(self):
    """ isSelectionRectVisible(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSortingEnabled(self):
    """ isSortingEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def isWrapping(self):
    """ isWrapping(self) -> bool """
    return True

  def item(self, int):
    """ item(self, int) -> QListWidgetItem """
    return QListWidgetItem()

  def itemActivated(self, QListWidgetItem):
    """ itemActivated(self, QListWidgetItem) [signal] """
    pass

  def itemAlignment(self):
    """ itemAlignment(self) -> Qt.Alignment """
    return None

  def itemAt(self, QtCore.QPoint):
    """ itemAt(self, QPoint) -> QListWidgetItem
    itemAt(self, int, int) -> QListWidgetItem """
    return QListWidgetItem()

  def itemChanged(self, QListWidgetItem):
    """ itemChanged(self, QListWidgetItem) [signal] """
    pass

  def itemClicked(self, QListWidgetItem):
    """ itemClicked(self, QListWidgetItem) [signal] """
    pass

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDoubleClicked(self, QListWidgetItem):
    """ itemDoubleClicked(self, QListWidgetItem) [signal] """
    pass

  def itemEntered(self, QListWidgetItem):
    """ itemEntered(self, QListWidgetItem) [signal] """
    pass

  def itemFromIndex(self, QtCore.QModelIndex):
    """ itemFromIndex(self, QModelIndex) -> QListWidgetItem """
    return QListWidgetItem()

  def itemPressed(self, QListWidgetItem):
    """ itemPressed(self, QListWidgetItem) [signal] """
    pass

  def itemSelectionChanged(self):
    """ itemSelectionChanged(self) [signal] """
    pass

  def itemWidget(self, QListWidgetItem):
    """ itemWidget(self, QListWidgetItem) -> QWidget """
    return QWidget()

  def items(self, QtCore.QMimeData):
    """ items(self, QMimeData) -> List[QListWidgetItem] """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def layoutMode(self):
    """ layoutMode(self) -> QListView.LayoutMode """
    return QListView.LayoutMode()

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def mimeData(self, IterableQListWidgetItem=None):
    """ mimeData(self, Iterable[QListWidgetItem]) -> QMimeData """
    return QtCore.QMimeData()

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def modelColumn(self):
    """ modelColumn(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor():
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def movement(self):
    """ movement(self) -> QListView.Movement """
    return QListView.Movement()

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QListWidgetItem):
    """ openPersistentEditor(self, QListWidgetItem) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def rectForIndex():
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItemWidget(self, QListWidgetItem):
    """ removeItemWidget(self, QListWidgetItem) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def resizeMode(self):
    """ resizeMode(self) -> QListView.ResizeMode """
    return QListView.ResizeMode()

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def row(self, QListWidgetItem):
    """ row(self, QListWidgetItem) -> int """
    return 1

  def rowsAboutToBeRemoved():
    pass

  def rowsInserted():
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy():
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToItem(self, QListWidgetItem, arg0=None):
    """ scrollToItem(self, QListWidgetItem, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes():
    pass

  def selectedItems(self):
    """ selectedItems(self) -> List[QListWidgetItem] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged():
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setBatchSize(self, int):
    """ setBatchSize(self, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCurrentItem(self, QListWidgetItem):
    """ setCurrentItem(self, QListWidgetItem)
    setCurrentItem(self, QListWidgetItem, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setCurrentRow(self, int):
    """ setCurrentRow(self, int)
    setCurrentRow(self, int, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFlow(self, arg0):
    """ setFlow(self, QListView.Flow) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGridSize(self, QtCore.QSize):
    """ setGridSize(self, QSize) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setItemAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setItemWidget(self, QListWidgetItem, QWidget):
    """ setItemWidget(self, QListWidgetItem, QWidget) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLayoutMode(self, arg0):
    """ setLayoutMode(self, QListView.LayoutMode) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel():
    pass

  def setModelColumn(self, int):
    """ setModelColumn(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovement(self, arg0):
    """ setMovement(self, QListView.Movement) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPositionForIndex():
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResizeMode(self, arg0):
    """ setResizeMode(self, QListView.ResizeMode) """
    pass

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRowHidden(self, int, bool):
    """ setRowHidden(self, int, bool) """
    pass

  def setSelection():
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setSelectionRectVisible(self, bool):
    """ setSelectionRectVisible(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSortingEnabled(self, bool):
    """ setSortingEnabled(self, bool) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUniformItemSizes(self, bool):
    """ setUniformItemSizes(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewMode(self, arg0):
    """ setViewMode(self, QListView.ViewMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sortItems(self, arg0=None):
    """ sortItems(self, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def takeItem(self, int):
    """ takeItem(self, int) -> QListWidgetItem """
    return QListWidgetItem()

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def uniformItemSizes(self):
    """ uniformItemSizes(self) -> bool """
    return True

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries():
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset():
    pass

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewMode(self):
    """ viewMode(self) -> QListView.ViewMode """
    return QListView.ViewMode()

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualItemRect(self, QListWidgetItem):
    """ visualItemRect(self, QListWidgetItem) -> QRect """
    return QtCore.QRect()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection():
    pass

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QListWidgetItem(wrapper):
  """ QListWidgetItem(parent: QListWidget = None, type: int = QListWidgetItem.Type)
  QListWidgetItem(str, parent: QListWidget = None, type: int = QListWidgetItem.Type)
  QListWidgetItem(QIcon, str, parent: QListWidget = None, type: int = QListWidgetItem.Type)
  QListWidgetItem(QListWidgetItem) """

  class ItemType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  UserType = None

  def __init__(self, arg0=None, arg1=None):
    pass

  def background(self):
    """ background(self) -> QBrush """
    return QtGui.QBrush()

  def checkState(self):
    """ checkState(self) -> Qt.CheckState """
    return None

  def clone(self):
    """ clone(self) -> QListWidgetItem """
    return QListWidgetItem()

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def flags(self):
    """ flags(self) -> Qt.ItemFlags """
    return None

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def foreground(self):
    """ foreground(self) -> QBrush """
    return QtGui.QBrush()

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def listWidget(self):
    """ listWidget(self) -> QListWidget """
    return QListWidget()

  def read(self, QtCore.QDataStream):
    """ read(self, QDataStream) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCheckState(self, arg0):
    """ setCheckState(self, Qt.CheckState) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setFlags(self, UnionQt.ItemFlags=None, Qt.ItemFlag=None):
    """ setFlags(self, Union[Qt.ItemFlags, Qt.ItemFlag]) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setSizeHint(self, QtCore.QSize):
    """ setSizeHint(self, QSize) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextAlignment(self, int):
    """ setTextAlignment(self, int) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def text(self):
    """ text(self) -> str """
    return ""

  def textAlignment(self):
    """ textAlignment(self) -> int """
    return 1

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def type(self):
    """ type(self) -> int """
    return 1

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def write(self, QtCore.QDataStream):
    """ write(self, QDataStream) """
    pass

class QMainWindow(QWidget):
  """ QMainWindow(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  AllowNestedDocks = None
  AllowTabbedDocks = None
  AnimatedDocks = None

  class DockOption(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class DockOptions(simplewrapper):
    """ QMainWindow.DockOptions()
    QMainWindow.DockOptions(Union[QMainWindow.DockOptions, QMainWindow.DockOption])
    QMainWindow.DockOptions(QMainWindow.DockOptions) """

    def __init__(self):
      pass

  DrawChildren = None
  DrawWindowBackground = None
  ForceTabbedDocks = None
  GroupedDragging = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  VerticalTabs = None

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addDockWidget(self, arg0, QDockWidget):
    """ addDockWidget(self, Qt.DockWidgetArea, QDockWidget)
    addDockWidget(self, Qt.DockWidgetArea, QDockWidget, Qt.Orientation) """
    pass

  def addToolBar(self, arg0, QToolBar):
    """ addToolBar(self, Qt.ToolBarArea, QToolBar)
    addToolBar(self, QToolBar)
    addToolBar(self, str) -> QToolBar """
    pass

  def addToolBarBreak(self, arg0=None):
    """ addToolBarBreak(self, area: Qt.ToolBarArea = Qt.TopToolBarArea) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def centralWidget(self):
    """ centralWidget(self) -> QWidget """
    return QWidget()

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def corner(self, arg0):
    """ corner(self, Qt.Corner) -> Qt.DockWidgetArea """
    return None

  def create():
    pass

  def createPopupMenu(self):
    """ createPopupMenu(self) -> QMenu """
    return QMenu()

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dockOptions(self):
    """ dockOptions(self) -> QMainWindow.DockOptions """
    return QMainWindow.DockOptions()

  def dockWidgetArea(self, QDockWidget):
    """ dockWidgetArea(self, QDockWidget) -> Qt.DockWidgetArea """
    return None

  def documentMode(self):
    """ documentMode(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertToolBar(self, QToolBar, QToolBar):
    """ insertToolBar(self, QToolBar, QToolBar) """
    pass

  def insertToolBarBreak(self, QToolBar):
    """ insertToolBarBreak(self, QToolBar) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isAnimated(self):
    """ isAnimated(self) -> bool """
    return True

  def isDockNestingEnabled(self):
    """ isDockNestingEnabled(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSeparator(self, QtCore.QPoint):
    """ isSeparator(self, QPoint) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def menuBar(self):
    """ menuBar(self) -> QMenuBar """
    return QMenuBar()

  def menuWidget(self):
    """ menuWidget(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeDockWidget(self, QDockWidget):
    """ removeDockWidget(self, QDockWidget) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeToolBar(self, QToolBar):
    """ removeToolBar(self, QToolBar) """
    pass

  def removeToolBarBreak(self, QToolBar):
    """ removeToolBarBreak(self, QToolBar) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeDocks(self, IterableQDockWidget=None, Iterableint=None, Qt.Orientation=None):
    """ resizeDocks(self, Iterable[QDockWidget], Iterable[int], Qt.Orientation) """
    pass

  def resizeEvent():
    pass

  def restoreDockWidget(self, QDockWidget):
    """ restoreDockWidget(self, QDockWidget) -> bool """
    return True

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def restoreState(self, UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ restoreState(self, Union[QByteArray, bytes, bytearray], version: int = 0) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def saveState(self, arg0=None):
    """ saveState(self, version: int = 0) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAnimated(self, bool):
    """ setAnimated(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCentralWidget(self, QWidget):
    """ setCentralWidget(self, QWidget) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCorner(self, arg0, arg1):
    """ setCorner(self, Qt.Corner, Qt.DockWidgetArea) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDockNestingEnabled(self, bool):
    """ setDockNestingEnabled(self, bool) """
    pass

  def setDockOptions(self, UnionQMainWindow.DockOptions=None, QMainWindow.DockOption=None):
    """ setDockOptions(self, Union[QMainWindow.DockOptions, QMainWindow.DockOption]) """
    pass

  def setDocumentMode(self, bool):
    """ setDocumentMode(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMenuBar(self, QMenuBar):
    """ setMenuBar(self, QMenuBar) """
    pass

  def setMenuWidget(self, QWidget):
    """ setMenuWidget(self, QWidget) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusBar(self, QStatusBar):
    """ setStatusBar(self, QStatusBar) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabPosition(self, UnionQt.DockWidgetAreas=None, Qt.DockWidgetArea=None, QTabWidget.TabPosition=None):
    """ setTabPosition(self, Union[Qt.DockWidgetAreas, Qt.DockWidgetArea], QTabWidget.TabPosition) """
    pass

  def setTabShape(self, arg0):
    """ setTabShape(self, QTabWidget.TabShape) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolButtonStyle(self, arg0):
    """ setToolButtonStyle(self, Qt.ToolButtonStyle) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUnifiedTitleAndToolBarOnMac(self, bool):
    """ setUnifiedTitleAndToolBarOnMac(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def splitDockWidget(self, QDockWidget, QDockWidget, arg0):
    """ splitDockWidget(self, QDockWidget, QDockWidget, Qt.Orientation) """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusBar(self):
    """ statusBar(self) -> QStatusBar """
    return QStatusBar()

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabPosition(self, arg0):
    """ tabPosition(self, Qt.DockWidgetArea) -> QTabWidget.TabPosition """
    return QTabWidget.TabPosition()

  def tabShape(self):
    """ tabShape(self) -> QTabWidget.TabShape """
    return QTabWidget.TabShape()

  def tabifiedDockWidgetActivated(self, QDockWidget):
    """ tabifiedDockWidgetActivated(self, QDockWidget) [signal] """
    pass

  def tabifiedDockWidgets(self, QDockWidget):
    """ tabifiedDockWidgets(self, QDockWidget) -> List[QDockWidget] """
    return None

  def tabifyDockWidget(self, QDockWidget, QDockWidget):
    """ tabifyDockWidget(self, QDockWidget, QDockWidget) """
    pass

  def tabletEvent():
    pass

  def takeCentralWidget(self):
    """ takeCentralWidget(self) -> QWidget """
    return QWidget()

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolBarArea(self, QToolBar):
    """ toolBarArea(self, QToolBar) -> Qt.ToolBarArea """
    return None

  def toolBarBreak(self, QToolBar):
    """ toolBarBreak(self, QToolBar) -> bool """
    return True

  def toolButtonStyle(self):
    """ toolButtonStyle(self) -> Qt.ToolButtonStyle """
    return None

  def toolButtonStyleChanged(self, arg0):
    """ toolButtonStyleChanged(self, Qt.ToolButtonStyle) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unifiedTitleAndToolBarOnMac(self):
    """ unifiedTitleAndToolBarOnMac(self) -> bool """
    return True

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QMdiArea(QAbstractScrollArea):
  """ QMdiArea(parent: QWidget = None) """

  ActivationHistoryOrder = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None

  class AreaOption(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class AreaOptions(simplewrapper):
    """ QMdiArea.AreaOptions()
    QMdiArea.AreaOptions(Union[QMdiArea.AreaOptions, QMdiArea.AreaOption])
    QMdiArea.AreaOptions(QMdiArea.AreaOptions) """

    def __init__(self):
      pass

  Box = None
  CreationOrder = None
  DontMaximizeSubWindowOnActivation = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StackingOrder = None
  StyledPanel = None
  SubWindowView = None
  Sunken = None
  TabbedView = None
  VLine = None

  class ViewMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WinPanel = None

  class WindowOrder(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateNextSubWindow(self):
    """ activateNextSubWindow(self) """
    pass

  def activatePreviousSubWindow(self):
    """ activatePreviousSubWindow(self) """
    pass

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activationOrder(self):
    """ activationOrder(self) -> QMdiArea.WindowOrder """
    return QMdiArea.WindowOrder()

  def activeSubWindow(self):
    """ activeSubWindow(self) -> QMdiSubWindow """
    return QMdiSubWindow()

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def addSubWindow(self, QWidget, arg0=None, arg1=None):
    """ addSubWindow(self, QWidget, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) -> QMdiSubWindow """
    return QMdiSubWindow()

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def background(self):
    """ background(self) -> QBrush """
    return QtGui.QBrush()

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def cascadeSubWindows(self):
    """ cascadeSubWindows(self) """
    pass

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent(self, QtCore.QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeActiveSubWindow(self):
    """ closeActiveSubWindow(self) """
    pass

  def closeAllSubWindows(self):
    """ closeAllSubWindows(self) """
    pass

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentSubWindow(self):
    """ currentSubWindow(self) -> QMdiSubWindow """
    return QMdiSubWindow()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def documentMode(self):
    """ documentMode(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeSubWindow(self, QWidget):
    """ removeSubWindow(self, QWidget) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setActivationOrder(self, arg0):
    """ setActivationOrder(self, QMdiArea.WindowOrder) """
    pass

  def setActiveSubWindow(self, QMdiSubWindow):
    """ setActiveSubWindow(self, QMdiSubWindow) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDocumentMode(self, bool):
    """ setDocumentMode(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOption(self, arg0, arg1=None):
    """ setOption(self, QMdiArea.AreaOption, on: bool = True) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabPosition(self, arg0):
    """ setTabPosition(self, QTabWidget.TabPosition) """
    pass

  def setTabShape(self, arg0):
    """ setTabShape(self, QTabWidget.TabShape) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTabsClosable(self, bool):
    """ setTabsClosable(self, bool) """
    pass

  def setTabsMovable(self, bool):
    """ setTabsMovable(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setViewMode(self, arg0):
    """ setViewMode(self, QMdiArea.ViewMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def subWindowActivated(self, QMdiSubWindow):
    """ subWindowActivated(self, QMdiSubWindow) [signal] """
    pass

  def subWindowList(self, arg0=None):
    """ subWindowList(self, order: QMdiArea.WindowOrder = QMdiArea.CreationOrder) -> List[QMdiSubWindow] """
    return None

  def tabPosition(self):
    """ tabPosition(self) -> QTabWidget.TabPosition """
    return QTabWidget.TabPosition()

  def tabShape(self):
    """ tabShape(self) -> QTabWidget.TabShape """
    return QTabWidget.TabShape()

  def tabletEvent():
    pass

  def tabsClosable(self):
    """ tabsClosable(self) -> bool """
    return True

  def tabsMovable(self):
    """ tabsMovable(self) -> bool """
    return True

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def testOption(self, arg0):
    """ testOption(self, QMdiArea.AreaOption) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def tileSubWindows(self):
    """ tileSubWindows(self) """
    pass

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def viewMode(self):
    """ viewMode(self) -> QMdiArea.ViewMode """
    return QMdiArea.ViewMode()

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEvent(self, QtCore.QEvent):
    """ viewportEvent(self, QEvent) -> bool """
    return True

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QMdiSubWindow(QWidget):
  """ QMdiSubWindow(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  RubberBandMove = None
  RubberBandResize = None

  class SubWindowOption(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SubWindowOptions(simplewrapper):
    """ QMdiSubWindow.SubWindowOptions()
    QMdiSubWindow.SubWindowOptions(Union[QMdiSubWindow.SubWindowOptions, QMdiSubWindow.SubWindowOption])
    QMdiSubWindow.SubWindowOptions(QMdiSubWindow.SubWindowOptions) """

    def __init__(self):
      pass

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def aboutToActivate(self):
    """ aboutToActivate(self) [signal] """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent(self, QtCore.QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isShaded(self):
    """ isShaded(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardPageStep(self):
    """ keyboardPageStep(self) -> int """
    return 1

  def keyboardSingleStep(self):
    """ keyboardSingleStep(self) -> int """
    return 1

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent(self, QtCore.QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def mdiArea(self):
    """ mdiArea(self) -> QMdiArea """
    return QMdiArea()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent(self, QtGui.QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeyboardPageStep(self, int):
    """ setKeyboardPageStep(self, int) """
    pass

  def setKeyboardSingleStep(self, int):
    """ setKeyboardSingleStep(self, int) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOption(self, arg0, arg1=None):
    """ setOption(self, QMdiSubWindow.SubWindowOption, on: bool = True) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setSystemMenu(self, QMenu):
    """ setSystemMenu(self, QMenu) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWidget(self, QWidget):
    """ setWidget(self, QWidget) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showShaded(self):
    """ showShaded(self) """
    pass

  def showSystemMenu(self):
    """ showSystemMenu(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def systemMenu(self):
    """ systemMenu(self) -> QMenu """
    return QMenu()

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def testOption(self, arg0):
    """ testOption(self, QMdiSubWindow.SubWindowOption) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowStateChanged(self, arg0, arg1, arg2, arg3):
    """ windowStateChanged(self, Union[Qt.WindowStates, Qt.WindowState], Union[Qt.WindowStates, Qt.WindowState]) [signal] """
    pass

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QMenu(QWidget):
  """ QMenu(parent: QWidget = None)
  QMenu(str, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def aboutToHide(self):
    """ aboutToHide(self) [signal] """
    pass

  def aboutToShow(self):
    """ aboutToShow(self) [signal] """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionAt(self, QtCore.QPoint):
    """ actionAt(self, QPoint) -> QAction """
    return QAction()

  def actionEvent(self, QtGui.QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actionGeometry(self, QAction):
    """ actionGeometry(self, QAction) -> QRect """
    return QtCore.QRect()

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activeAction(self):
    """ activeAction(self) -> QAction """
    return QAction()

  def addAction(self, QAction):
    """ addAction(self, QAction)
    addAction(self, str) -> QAction
    addAction(self, QIcon, str) -> QAction
    addAction(self, str, PYQT_SLOT, shortcut: Union[QKeySequence, QKeySequence.StandardKey, str, int] = 0) -> QAction
    addAction(self, QIcon, str, PYQT_SLOT, shortcut: Union[QKeySequence, QKeySequence.StandardKey, str, int] = 0) -> QAction """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addMenu(self, QMenu):
    """ addMenu(self, QMenu) -> QAction
    addMenu(self, str) -> QMenu
    addMenu(self, QIcon, str) -> QMenu """
    return QAction()

  def addSection(self, str):
    """ addSection(self, str) -> QAction
    addSection(self, QIcon, str) -> QAction """
    return QAction()

  def addSeparator(self):
    """ addSeparator(self) -> QAction """
    return QAction()

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def defaultAction(self):
    """ defaultAction(self) -> QAction """
    return QAction()

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent(self, QtCore.QEvent):
    """ enterEvent(self, QEvent) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def exec(self):
    """ exec(self) -> QAction
    exec(self, QPoint, action: QAction = None) -> QAction
    exec(Iterable[QAction], QPoint, at: QAction = None, parent: QWidget = None) -> QAction """
    return QAction()

  def exec_(self):
    """ exec_(self) -> QAction
    exec_(self, QPoint, action: QAction = None) -> QAction
    exec_(Iterable[QAction], QPoint, at: QAction = None, parent: QWidget = None) -> QAction """
    return QAction()

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def hideTearOffMenu(self):
    """ hideTearOffMenu(self) """
    pass

  def hovered(self, QAction):
    """ hovered(self, QAction) [signal] """
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionMenuItem, QAction):
    """ initStyleOption(self, QStyleOptionMenuItem, QAction) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertMenu(self, QAction, QMenu):
    """ insertMenu(self, QAction, QMenu) -> QAction """
    return QAction()

  def insertSection(self, QAction, str):
    """ insertSection(self, QAction, str) -> QAction
    insertSection(self, QAction, QIcon, str) -> QAction """
    return QAction()

  def insertSeparator(self, QAction):
    """ insertSeparator(self, QAction) -> QAction """
    return QAction()

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isTearOffEnabled(self):
    """ isTearOffEnabled(self) -> bool """
    return True

  def isTearOffMenuVisible(self):
    """ isTearOffMenuVisible(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent(self, QtCore.QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def menuAction(self):
    """ menuAction(self) -> QAction """
    return QAction()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def popup(self, QtCore.QPoint, arg0=None):
    """ popup(self, QPoint, action: QAction = None) """
    pass

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def separatorsCollapsible(self):
    """ separatorsCollapsible(self) -> bool """
    return True

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setActiveAction(self, QAction):
    """ setActiveAction(self, QAction) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultAction(self, QAction):
    """ setDefaultAction(self, QAction) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setNoReplayFor(self, QWidget):
    """ setNoReplayFor(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSeparatorsCollapsible(self, bool):
    """ setSeparatorsCollapsible(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTearOffEnabled(self, bool):
    """ setTearOffEnabled(self, bool) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setToolTipsVisible(self, bool):
    """ setToolTipsVisible(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showTearOffMenu(self):
    """ showTearOffMenu(self)
    showTearOffMenu(self, QPoint) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def toolTipsVisible(self):
    """ toolTipsVisible(self) -> bool """
    return True

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggered(self, QAction):
    """ triggered(self, QAction) [signal] """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QMenuBar(QWidget):
  """ QMenuBar(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionAt(self, QtCore.QPoint):
    """ actionAt(self, QPoint) -> QAction """
    return QAction()

  def actionEvent(self, QtGui.QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actionGeometry(self, QAction):
    """ actionGeometry(self, QAction) -> QRect """
    return QtCore.QRect()

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activeAction(self):
    """ activeAction(self) -> QAction """
    return QAction()

  def addAction(self, QAction):
    """ addAction(self, QAction)
    addAction(self, str) -> QAction
    addAction(self, str, PYQT_SLOT) -> QAction """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addMenu(self, QMenu):
    """ addMenu(self, QMenu) -> QAction
    addMenu(self, str) -> QMenu
    addMenu(self, QIcon, str) -> QMenu """
    return QAction()

  def addSeparator(self):
    """ addSeparator(self) -> QAction """
    return QAction()

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self, arg0=None):
    """ cornerWidget(self, corner: Qt.Corner = Qt.TopRightCorner) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hovered(self, QAction):
    """ hovered(self, QAction) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionMenuItem, QAction):
    """ initStyleOption(self, QStyleOptionMenuItem, QAction) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertMenu(self, QAction, QMenu):
    """ insertMenu(self, QAction, QMenu) -> QAction """
    return QAction()

  def insertSeparator(self, QAction):
    """ insertSeparator(self, QAction) -> QAction """
    return QAction()

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isDefaultUp(self):
    """ isDefaultUp(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isNativeMenuBar(self):
    """ isNativeMenuBar(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent(self, QtCore.QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setActiveAction(self, QAction):
    """ setActiveAction(self, QAction) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget, arg0=None):
    """ setCornerWidget(self, QWidget, corner: Qt.Corner = Qt.TopRightCorner) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultUp(self, bool):
    """ setDefaultUp(self, bool) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setNativeMenuBar(self, bool):
    """ setNativeMenuBar(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggered(self, QAction):
    """ triggered(self, QAction) [signal] """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QMessageBox(QDialog):
  """ QMessageBox(parent: QWidget = None)
  QMessageBox(QMessageBox.Icon, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.NoButton, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.Dialog|Qt.MSWindowsFixedSizeDialogHint) """

  Abort = None
  AcceptRole = None
  Accepted = None
  ActionRole = None
  Apply = None
  ApplyRole = None
  ButtonMask = None

  class ButtonRole(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Cancel = None
  Close = None
  Critical = None
  Default = None
  DestructiveRole = None
  Discard = None
  DrawChildren = None
  DrawWindowBackground = None
  Escape = None
  FirstButton = None
  FlagMask = None
  Help = None
  HelpRole = None

  class Icon(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Ignore = None
  IgnoreMask = None
  Information = None
  InvalidRole = None
  LastButton = None
  No = None
  NoAll = None
  NoButton = None
  NoIcon = None
  NoRole = None
  NoToAll = None
  Ok = None
  Open = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Question = None
  RejectRole = None
  Rejected = None
  Reset = None
  ResetRole = None
  RestoreDefaults = None
  Retry = None
  Save = None
  SaveAll = None

  class StandardButton(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StandardButtons(simplewrapper):
    """ QMessageBox.StandardButtons()
    QMessageBox.StandardButtons(Union[QMessageBox.StandardButtons, QMessageBox.StandardButton])
    QMessageBox.StandardButtons(QMessageBox.StandardButtons) """

    def __init__(self):
      pass

  Warning = None
  Yes = None
  YesAll = None
  YesRole = None
  YesToAll = None

  def __init__(self, arg0=None):
    pass

  def about(QWidget, str, str):
    """ about(QWidget, str, str) """
    pass

  def aboutQt(QWidget, arg0=None):
    """ aboutQt(QWidget, title: str = '') """
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addButton(self, QAbstractButton, arg0):
    """ addButton(self, QAbstractButton, QMessageBox.ButtonRole)
    addButton(self, str, QMessageBox.ButtonRole) -> QPushButton
    addButton(self, QMessageBox.StandardButton) -> QPushButton """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def button(self, arg0):
    """ button(self, QMessageBox.StandardButton) -> QAbstractButton """
    return QAbstractButton()

  def buttonClicked(self, QAbstractButton):
    """ buttonClicked(self, QAbstractButton) [signal] """
    pass

  def buttonRole(self, QAbstractButton):
    """ buttonRole(self, QAbstractButton) -> QMessageBox.ButtonRole """
    return QMessageBox.ButtonRole()

  def buttons(self):
    """ buttons(self) -> List[QAbstractButton] """
    return ""

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def checkBox(self):
    """ checkBox(self) -> QCheckBox """
    return QCheckBox()

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clickedButton(self):
    """ clickedButton(self) -> QAbstractButton """
    return QAbstractButton()

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def critical(QWidget, str, str, arg0=None, arg1=None, arg2=None):
    """ critical(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton """
    return QMessageBox.StandardButton()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def defaultButton(self):
    """ defaultButton(self) -> QPushButton """
    return QPushButton()

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def detailedText(self):
    """ detailedText(self) -> str """
    return ""

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def escapeButton(self):
    """ escapeButton(self) -> QAbstractButton """
    return QAbstractButton()

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def icon(self):
    """ icon(self) -> QMessageBox.Icon """
    return QMessageBox.Icon()

  def iconPixmap(self):
    """ iconPixmap(self) -> QPixmap """
    return QtGui.QPixmap()

  def information(QWidget, str, str, arg0=None, arg1=None, arg2=None):
    """ information(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton """
    return QMessageBox.StandardButton()

  def informativeText(self):
    """ informativeText(self) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self)
    open(self, PYQT_SLOT) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def question(QWidget, str, str, arg0=None, arg1=None, arg2=None):
    """ question(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.StandardButtons(QMessageBox.Yes|QMessageBox.No), defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton """
    return QMessageBox.StandardButton()

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeButton(self, QAbstractButton):
    """ removeButton(self, QAbstractButton) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckBox(self, QCheckBox):
    """ setCheckBox(self, QCheckBox) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultButton(self, QPushButton):
    """ setDefaultButton(self, QPushButton)
    setDefaultButton(self, QMessageBox.StandardButton) """
    pass

  def setDetailedText(self, str):
    """ setDetailedText(self, str) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setEscapeButton(self, QAbstractButton):
    """ setEscapeButton(self, QAbstractButton)
    setEscapeButton(self, QMessageBox.StandardButton) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, arg0):
    """ setIcon(self, QMessageBox.Icon) """
    pass

  def setIconPixmap(self, QtGui.QPixmap):
    """ setIconPixmap(self, QPixmap) """
    pass

  def setInformativeText(self, str):
    """ setInformativeText(self, str) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStandardButtons(self, UnionQMessageBox.StandardButtons=None, QMessageBox.StandardButton=None):
    """ setStandardButtons(self, Union[QMessageBox.StandardButtons, QMessageBox.StandardButton]) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextFormat(self, arg0):
    """ setTextFormat(self, Qt.TextFormat) """
    pass

  def setTextInteractionFlags(self, UnionQt.TextInteractionFlags=None, Qt.TextInteractionFlag=None):
    """ setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def standardButton(self, QAbstractButton):
    """ standardButton(self, QAbstractButton) -> QMessageBox.StandardButton """
    return QMessageBox.StandardButton()

  def standardButtons(self):
    """ standardButtons(self) -> QMessageBox.StandardButtons """
    return QMessageBox.StandardButtons()

  def standardIcon(arg0):
    """ standardIcon(QMessageBox.Icon) -> QPixmap """
    return QtGui.QPixmap()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textFormat(self):
    """ textFormat(self) -> Qt.TextFormat """
    return None

  def textInteractionFlags(self):
    """ textInteractionFlags(self) -> Qt.TextInteractionFlags """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def warning(QWidget, str, str, arg0=None, arg1=None, arg2=None):
    """ warning(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton """
    return QMessageBox.StandardButton()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QMouseEventTransition(QEventTransition):
  """ QMouseEventTransition(sourceState: QState = None)
  QMouseEventTransition(QObject, QEvent.Type, Qt.MouseButton, sourceState: QState = None) """

  ExternalTransition = None
  InternalTransition = None
  def __init__(self, arg0=None):
    pass

  def addAnimation(self, QtCore.QAbstractAnimation):
    """ addAnimation(self, QAbstractAnimation) """
    pass

  def animations(self):
    """ animations(self) -> List[QAbstractAnimation] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def button(self):
    """ button(self) -> Qt.MouseButton """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event():
    pass

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def eventSource(self):
    """ eventSource(self) -> QObject """
    return QtCore.QObject()

  def eventTest(self, QtCore.QEvent):
    """ eventTest(self, QEvent) -> bool """
    return True

  def eventType(self):
    """ eventType(self) -> QEvent.Type """
    return QEvent.Type()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hitTestPath(self):
    """ hitTestPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def machine(self):
    """ machine(self) -> QStateMachine """
    return QtCore.QStateMachine()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def modifierMask(self):
    """ modifierMask(self) -> Qt.KeyboardModifiers """
    return None

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onTransition(self, QtCore.QEvent):
    """ onTransition(self, QEvent) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeAnimation(self, QtCore.QAbstractAnimation):
    """ removeAnimation(self, QAbstractAnimation) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setButton(self, arg0):
    """ setButton(self, Qt.MouseButton) """
    pass

  def setEventSource(self, QtCore.QObject):
    """ setEventSource(self, QObject) """
    pass

  def setEventType(self, arg0):
    """ setEventType(self, QEvent.Type) """
    pass

  def setHitTestPath(self, QtGui.QPainterPath):
    """ setHitTestPath(self, QPainterPath) """
    pass

  def setModifierMask(self, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ setModifierMask(self, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setTargetState(self, QtCore.QAbstractState):
    """ setTargetState(self, QAbstractState) """
    pass

  def setTargetStates(self, IterableQAbstractState=None):
    """ setTargetStates(self, Iterable[QAbstractState]) """
    pass

  def setTransitionType(self, arg0):
    """ setTransitionType(self, QAbstractTransition.TransitionType) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sourceState(self):
    """ sourceState(self) -> QState """
    return QtCore.QState()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def targetState(self):
    """ targetState(self) -> QAbstractState """
    return QtCore.QAbstractState()

  def targetStateChanged(self):
    """ targetStateChanged(self) [signal] """
    pass

  def targetStates(self):
    """ targetStates(self) -> List[QAbstractState] """
    return ""

  def targetStatesChanged(self):
    """ targetStatesChanged(self) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transitionType(self):
    """ transitionType(self) -> QAbstractTransition.TransitionType """
    return QAbstractTransition.TransitionType()

  def triggered(self):
    """ triggered(self) [signal] """
    pass

class QOpenGLWidget(QWidget):
  """ QOpenGLWidget(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  NoPartialUpdate = None
  PartialUpdate = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  class UpdateBehavior(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def aboutToCompose(self):
    """ aboutToCompose(self) [signal] """
    pass

  def aboutToResize(self):
    """ aboutToResize(self) [signal] """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def context(self):
    """ context(self) -> QOpenGLContext """
    return QtGui.QOpenGLContext()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def defaultFramebufferObject(self):
    """ defaultFramebufferObject(self) -> int """
    return 1

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doneCurrent(self):
    """ doneCurrent(self) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return QtGui.QSurfaceFormat()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameSwapped(self):
    """ frameSwapped(self) [signal] """
    pass

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabFramebuffer(self):
    """ grabFramebuffer(self) -> QImage """
    return QtGui.QImage()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initializeGL(self):
    """ initializeGL(self) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isValid(self):
    """ isValid(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def makeCurrent(self):
    """ makeCurrent(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintGL(self):
    """ paintGL(self) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def resizeGL(self, int, int):
    """ resizeGL(self, int, int) """
    pass

  def resized(self):
    """ resized(self) [signal] """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFormat(self, QtGui.QSurfaceFormat):
    """ setFormat(self, QSurfaceFormat) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextureFormat(self, int):
    """ setTextureFormat(self, int) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdateBehavior(self, arg0):
    """ setUpdateBehavior(self, QOpenGLWidget.UpdateBehavior) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textureFormat(self):
    """ textureFormat(self) -> int """
    return 1

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateBehavior(self):
    """ updateBehavior(self) -> QOpenGLWidget.UpdateBehavior """
    return QOpenGLWidget.UpdateBehavior()

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QPanGesture(QGesture):
  """ QPanGesture(parent: QObject = None) """

  CancelAllInContext = None
  CancelNone = None
  def __init__(self, arg0=None):
    pass

  def acceleration(self):
    """ acceleration(self) -> float """
    return 1.0

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def delta(self):
    """ delta(self) -> QPointF """
    return QtCore.QPointF()

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def gestureCancelPolicy(self):
    """ gestureCancelPolicy(self) -> QGesture.GestureCancelPolicy """
    return QGesture.GestureCancelPolicy()

  def gestureType(self):
    """ gestureType(self) -> Qt.GestureType """
    return None

  def hasHotSpot(self):
    """ hasHotSpot(self) -> bool """
    return True

  def hotSpot(self):
    """ hotSpot(self) -> QPointF """
    return QtCore.QPointF()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastOffset(self):
    """ lastOffset(self) -> QPointF """
    return QtCore.QPointF()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def offset(self):
    """ offset(self) -> QPointF """
    return QtCore.QPointF()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceleration(self, float):
    """ setAcceleration(self, float) """
    pass

  def setGestureCancelPolicy(self, arg0):
    """ setGestureCancelPolicy(self, QGesture.GestureCancelPolicy) """
    pass

  def setHotSpot(self, UnionQPointF=None, QPoint=None):
    """ setHotSpot(self, Union[QPointF, QPoint]) """
    pass

  def setLastOffset(self, UnionQPointF=None, QPoint=None):
    """ setLastOffset(self, Union[QPointF, QPoint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOffset(self, UnionQPointF=None, QPoint=None):
    """ setOffset(self, Union[QPointF, QPoint]) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> Qt.GestureState """
    return None

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unsetHotSpot(self):
    """ unsetHotSpot(self) """
    pass

class QPinchGesture(QGesture):
  """ QPinchGesture(parent: QObject = None) """

  CancelAllInContext = None
  CancelNone = None
  CenterPointChanged = None

  class ChangeFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ChangeFlags(simplewrapper):
    """ QPinchGesture.ChangeFlags()
    QPinchGesture.ChangeFlags(Union[QPinchGesture.ChangeFlags, QPinchGesture.ChangeFlag])
    QPinchGesture.ChangeFlags(QPinchGesture.ChangeFlags) """

    def __init__(self):
      pass

  RotationAngleChanged = None
  ScaleFactorChanged = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def centerPoint(self):
    """ centerPoint(self) -> QPointF """
    return QtCore.QPointF()

  def changeFlags(self):
    """ changeFlags(self) -> QPinchGesture.ChangeFlags """
    return QPinchGesture.ChangeFlags()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def gestureCancelPolicy(self):
    """ gestureCancelPolicy(self) -> QGesture.GestureCancelPolicy """
    return QGesture.GestureCancelPolicy()

  def gestureType(self):
    """ gestureType(self) -> Qt.GestureType """
    return None

  def hasHotSpot(self):
    """ hasHotSpot(self) -> bool """
    return True

  def hotSpot(self):
    """ hotSpot(self) -> QPointF """
    return QtCore.QPointF()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastCenterPoint(self):
    """ lastCenterPoint(self) -> QPointF """
    return QtCore.QPointF()

  def lastRotationAngle(self):
    """ lastRotationAngle(self) -> float """
    return 1.0

  def lastScaleFactor(self):
    """ lastScaleFactor(self) -> float """
    return 1.0

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def rotationAngle(self):
    """ rotationAngle(self) -> float """
    return 1.0

  def scaleFactor(self):
    """ scaleFactor(self) -> float """
    return 1.0

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCenterPoint(self, UnionQPointF=None, QPoint=None):
    """ setCenterPoint(self, Union[QPointF, QPoint]) """
    pass

  def setChangeFlags(self, UnionQPinchGesture.ChangeFlags=None, QPinchGesture.ChangeFlag=None):
    """ setChangeFlags(self, Union[QPinchGesture.ChangeFlags, QPinchGesture.ChangeFlag]) """
    pass

  def setGestureCancelPolicy(self, arg0):
    """ setGestureCancelPolicy(self, QGesture.GestureCancelPolicy) """
    pass

  def setHotSpot(self, UnionQPointF=None, QPoint=None):
    """ setHotSpot(self, Union[QPointF, QPoint]) """
    pass

  def setLastCenterPoint(self, UnionQPointF=None, QPoint=None):
    """ setLastCenterPoint(self, Union[QPointF, QPoint]) """
    pass

  def setLastRotationAngle(self, float):
    """ setLastRotationAngle(self, float) """
    pass

  def setLastScaleFactor(self, float):
    """ setLastScaleFactor(self, float) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRotationAngle(self, float):
    """ setRotationAngle(self, float) """
    pass

  def setScaleFactor(self, float):
    """ setScaleFactor(self, float) """
    pass

  def setStartCenterPoint(self, UnionQPointF=None, QPoint=None):
    """ setStartCenterPoint(self, Union[QPointF, QPoint]) """
    pass

  def setTotalChangeFlags(self, UnionQPinchGesture.ChangeFlags=None, QPinchGesture.ChangeFlag=None):
    """ setTotalChangeFlags(self, Union[QPinchGesture.ChangeFlags, QPinchGesture.ChangeFlag]) """
    pass

  def setTotalRotationAngle(self, float):
    """ setTotalRotationAngle(self, float) """
    pass

  def setTotalScaleFactor(self, float):
    """ setTotalScaleFactor(self, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startCenterPoint(self):
    """ startCenterPoint(self) -> QPointF """
    return QtCore.QPointF()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> Qt.GestureState """
    return None

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalChangeFlags(self):
    """ totalChangeFlags(self) -> QPinchGesture.ChangeFlags """
    return QPinchGesture.ChangeFlags()

  def totalRotationAngle(self):
    """ totalRotationAngle(self) -> float """
    return 1.0

  def totalScaleFactor(self):
    """ totalScaleFactor(self) -> float """
    return 1.0

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unsetHotSpot(self):
    """ unsetHotSpot(self) """
    pass

class QPlainTextDocumentLayout(QAbstractTextDocumentLayout):
  """ QPlainTextDocumentLayout(QTextDocument) """

  class PaintContext(simplewrapper):
    """ QAbstractTextDocumentLayout.PaintContext()
    QAbstractTextDocumentLayout.PaintContext(QAbstractTextDocumentLayout.PaintContext) """

    def __init__(self):
      pass

    clip = None
    cursorPosition = None
    palette = None
    selections = None

  class Selection(simplewrapper):
    """ QAbstractTextDocumentLayout.Selection()
    QAbstractTextDocumentLayout.Selection(QAbstractTextDocumentLayout.Selection) """

    def __init__(self):
      pass

    cursor = None
    format = None

  def __init__(self, QtGui.QTextDocument):
    pass

  def anchorAt(self, UnionQPointF=None, QPoint=None):
    """ anchorAt(self, Union[QPointF, QPoint]) -> str """
    return ""

  def blockBoundingRect(self, QtGui.QTextBlock):
    """ blockBoundingRect(self, QTextBlock) -> QRectF """
    return QtCore.QRectF()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def cursorWidth(self):
    """ cursorWidth(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return QtGui.QTextDocument()

  def documentChanged(self, int, int, int):
    """ documentChanged(self, int, int, int) """
    pass

  def documentSize(self):
    """ documentSize(self) -> QSizeF """
    return QtCore.QSizeF()

  def documentSizeChanged(self, QtCore.QSizeF):
    """ documentSizeChanged(self, QSizeF) [signal] """
    pass

  def draw(self, QtGui.QPainter, arg0):
    """ draw(self, QPainter, QAbstractTextDocumentLayout.PaintContext) """
    pass

  def drawInlineObject():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def ensureBlockLayout(self, QtGui.QTextBlock):
    """ ensureBlockLayout(self, QTextBlock) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format():
    pass

  def formatAt(self, UnionQPointF=None, QPoint=None):
    """ formatAt(self, Union[QPointF, QPoint]) -> QTextFormat """
    return QtGui.QTextFormat()

  def frameBoundingRect(self, QtGui.QTextFrame):
    """ frameBoundingRect(self, QTextFrame) -> QRectF """
    return QtCore.QRectF()

  def handlerForObject(self, int):
    """ handlerForObject(self, int) -> QTextObjectInterface """
    return QtGui.QTextObjectInterface()

  def hitTest(self, UnionQPointF=None, QPoint=None, Qt.HitTestAccuracy=None):
    """ hitTest(self, Union[QPointF, QPoint], Qt.HitTestAccuracy) -> int """
    return 1

  def imageAt(self, UnionQPointF=None, QPoint=None):
    """ imageAt(self, Union[QPointF, QPoint]) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def pageCount(self):
    """ pageCount(self) -> int """
    return 1

  def pageCountChanged(self, int):
    """ pageCountChanged(self, int) [signal] """
    pass

  def paintDevice(self):
    """ paintDevice(self) -> QPaintDevice """
    return QtGui.QPaintDevice()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def positionInlineObject():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def registerHandler(self, int, QtCore.QObject):
    """ registerHandler(self, int, QObject) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def requestUpdate(self):
    """ requestUpdate(self) """
    pass

  def resizeInlineObject():
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCursorWidth(self, int):
    """ setCursorWidth(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPaintDevice(self, QtGui.QPaintDevice):
    """ setPaintDevice(self, QPaintDevice) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unregisterHandler(self, int, arg0=None):
    """ unregisterHandler(self, int, component: QObject = None) """
    pass

  def update(self, arg0=None, 0=None, 1e+09=None, 1e+09)=None):
    """ update(self, rect: QRectF = QRectF(0,0,1e+09,1e+09)) [signal] """
    pass

  def updateBlock(self, QtGui.QTextBlock):
    """ updateBlock(self, QTextBlock) [signal] """
    pass

class QPlainTextEdit(QAbstractScrollArea):
  """ QPlainTextEdit(parent: QWidget = None)
  QPlainTextEdit(str, parent: QWidget = None) """

  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None

  class LineWrapMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoFrame = None
  NoWrap = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WidgetWidth = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def anchorAt(self, QtCore.QPoint):
    """ anchorAt(self, QPoint) -> str """
    return ""

  def appendHtml(self, str):
    """ appendHtml(self, str) """
    pass

  def appendPlainText(self, str):
    """ appendPlainText(self, str) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def backgroundVisible(self):
    """ backgroundVisible(self) -> bool """
    return True

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockBoundingGeometry(self, QtGui.QTextBlock):
    """ blockBoundingGeometry(self, QTextBlock) -> QRectF """
    return QtCore.QRectF()

  def blockBoundingRect(self, QtGui.QTextBlock):
    """ blockBoundingRect(self, QTextBlock) -> QRectF """
    return QtCore.QRectF()

  def blockCount(self):
    """ blockCount(self) -> int """
    return 1

  def blockCountChanged(self, int):
    """ blockCountChanged(self, int) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def canInsertFromMimeData(self, QtCore.QMimeData):
    """ canInsertFromMimeData(self, QMimeData) -> bool """
    return True

  def canPaste(self):
    """ canPaste(self) -> bool """
    return True

  def centerCursor(self):
    """ centerCursor(self) """
    pass

  def centerOnScroll(self):
    """ centerOnScroll(self) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentOffset(self):
    """ contentOffset(self) -> QPointF """
    return QtCore.QPointF()

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def copy(self):
    """ copy(self) """
    pass

  def copyAvailable(self, bool):
    """ copyAvailable(self, bool) [signal] """
    pass

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createMimeDataFromSelection(self):
    """ createMimeDataFromSelection(self) -> QMimeData """
    return QtCore.QMimeData()

  def createStandardContextMenu(self):
    """ createStandardContextMenu(self) -> QMenu
    createStandardContextMenu(self, QPoint) -> QMenu """
    return QMenu()

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentCharFormat(self):
    """ currentCharFormat(self) -> QTextCharFormat """
    return QtGui.QTextCharFormat()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def cursorForPosition(self, QtCore.QPoint):
    """ cursorForPosition(self, QPoint) -> QTextCursor """
    return QtGui.QTextCursor()

  def cursorPositionChanged(self):
    """ cursorPositionChanged(self) [signal] """
    pass

  def cursorRect(self, QtGui.QTextCursor):
    """ cursorRect(self, QTextCursor) -> QRect
    cursorRect(self) -> QRect """
    return QtCore.QRect()

  def cursorWidth(self):
    """ cursorWidth(self) -> int """
    return 1

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def cut(self):
    """ cut(self) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return QtGui.QTextDocument()

  def documentTitle(self):
    """ documentTitle(self) -> str """
    return ""

  def dragEnterEvent(self, QtGui.QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensureCursorVisible(self):
    """ ensureCursorVisible(self) """
    pass

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def extraSelections(self):
    """ extraSelections(self) -> List[QTextEdit.ExtraSelection] """
    return None

  def find(self, str, arg0=None, arg1=None):
    """ find(self, str, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool
    find(self, QRegExp, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool
    find(self, QRegularExpression, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def firstVisibleBlock(self):
    """ firstVisibleBlock(self) -> QTextBlock """
    return QtGui.QTextBlock()

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getPaintContext(self):
    """ getPaintContext(self) -> QAbstractTextDocumentLayout.PaintContext """
    return QAbstractTextDocumentLayout.PaintContext()

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any
    inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertFromMimeData(self, QtCore.QMimeData):
    """ insertFromMimeData(self, QMimeData) """
    pass

  def insertPlainText(self, str):
    """ insertPlainText(self, str) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUndoRedoEnabled(self):
    """ isUndoRedoEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def lineWrapMode(self):
    """ lineWrapMode(self) -> QPlainTextEdit.LineWrapMode """
    return QPlainTextEdit.LineWrapMode()

  def loadResource(self, int, QtCore.QUrl):
    """ loadResource(self, int, QUrl) -> Any """
    return None

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumBlockCount(self):
    """ maximumBlockCount(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def mergeCurrentCharFormat(self, QtGui.QTextCharFormat):
    """ mergeCurrentCharFormat(self, QTextCharFormat) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def modificationChanged(self, bool):
    """ modificationChanged(self, bool) [signal] """
    pass

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, arg1=None):
    """ moveCursor(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def overwriteMode(self):
    """ overwriteMode(self) -> bool """
    return True

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def paste(self):
    """ paste(self) """
    pass

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def placeholderText(self):
    """ placeholderText(self) -> str """
    return ""

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def print(self, QtGui.QPagedPaintDevice):
    """ print(self, QPagedPaintDevice) """
    pass

  def print_(self, QtGui.QPagedPaintDevice):
    """ print_(self, QPagedPaintDevice) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def redo(self):
    """ redo(self) """
    pass

  def redoAvailable(self, bool):
    """ redoAvailable(self, bool) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBackgroundVisible(self, bool):
    """ setBackgroundVisible(self, bool) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCenterOnScroll(self, bool):
    """ setCenterOnScroll(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentCharFormat(self, QtGui.QTextCharFormat):
    """ setCurrentCharFormat(self, QTextCharFormat) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setCursorWidth(self, int):
    """ setCursorWidth(self, int) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDocument(self, QtGui.QTextDocument):
    """ setDocument(self, QTextDocument) """
    pass

  def setDocumentTitle(self, str):
    """ setDocumentTitle(self, str) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExtraSelections(self, IterableQTextEdit.ExtraSelection=None):
    """ setExtraSelections(self, Iterable[QTextEdit.ExtraSelection]) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLineWrapMode(self, arg0):
    """ setLineWrapMode(self, QPlainTextEdit.LineWrapMode) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumBlockCount(self, int):
    """ setMaximumBlockCount(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOverwriteMode(self, bool):
    """ setOverwriteMode(self, bool) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPlaceholderText(self, str):
    """ setPlaceholderText(self, str) """
    pass

  def setPlainText(self, str):
    """ setPlainText(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabChangesFocus(self, bool):
    """ setTabChangesFocus(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabStopDistance(self, float):
    """ setTabStopDistance(self, float) """
    pass

  def setTabStopWidth(self, int):
    """ setTabStopWidth(self, int) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextCursor(self, QtGui.QTextCursor):
    """ setTextCursor(self, QTextCursor) """
    pass

  def setTextInteractionFlags(self, UnionQt.TextInteractionFlags=None, Qt.TextInteractionFlag=None):
    """ setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUndoRedoEnabled(self, bool):
    """ setUndoRedoEnabled(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrapMode(self, arg0):
    """ setWordWrapMode(self, QTextOption.WrapMode) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabChangesFocus(self):
    """ tabChangesFocus(self) -> bool """
    return True

  def tabStopDistance(self):
    """ tabStopDistance(self) -> float """
    return 1.0

  def tabStopWidth(self):
    """ tabStopWidth(self) -> int """
    return 1

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textChanged(self):
    """ textChanged(self) [signal] """
    pass

  def textCursor(self):
    """ textCursor(self) -> QTextCursor """
    return QtGui.QTextCursor()

  def textInteractionFlags(self):
    """ textInteractionFlags(self) -> Qt.TextInteractionFlags """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toPlainText(self):
    """ toPlainText(self) -> str """
    return ""

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def undo(self):
    """ undo(self) """
    pass

  def undoAvailable(self, bool):
    """ undoAvailable(self, bool) [signal] """
    pass

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updateRequest(self, QtCore.QRect, int):
    """ updateRequest(self, QRect, int) [signal] """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrapMode(self):
    """ wordWrapMode(self) -> QTextOption.WrapMode """
    return QTextOption.WrapMode()

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

  def zoomIn(self, arg0=None):
    """ zoomIn(self, range: int = 1) """
    pass

  def zoomOut(self, arg0=None):
    """ zoomOut(self, range: int = 1) """
    pass

class QProgressBar(QWidget):
  """ QProgressBar(parent: QWidget = None) """

  BottomToTop = None

  class Direction(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  TopToBottom = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def format(self):
    """ format(self) -> str """
    return ""

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionProgressBar):
    """ initStyleOption(self, QStyleOptionProgressBar) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isTextVisible(self):
    """ isTextVisible(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetFormat(self):
    """ resetFormat(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFormat(self, str):
    """ setFormat(self, str) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInvertedAppearance(self, bool):
    """ setInvertedAppearance(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, int):
    """ setMaximum(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, int):
    """ setMinimum(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextDirection(self, arg0):
    """ setTextDirection(self, QProgressBar.Direction) """
    pass

  def setTextVisible(self, bool):
    """ setTextVisible(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, int):
    """ setValue(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def value(self):
    """ value(self) -> int """
    return 1

  def valueChanged(self, int):
    """ valueChanged(self, int) [signal] """
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QProgressDialog(QDialog):
  """ QProgressDialog(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())
  QProgressDialog(str, str, int, int, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  Accepted = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rejected = None
  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoClose(self):
    """ autoClose(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoReset(self):
    """ autoReset(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def cancel(self):
    """ cancel(self) """
    pass

  def canceled(self):
    """ canceled(self) [signal] """
    pass

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter():
    pass

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def forceShow(self):
    """ forceShow(self) """
    pass

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def labelText(self):
    """ labelText(self) -> str """
    return ""

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> int """
    return 1

  def minimumDuration(self):
    """ minimumDuration(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self)
    open(self, PYQT_SLOT) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoClose(self, bool):
    """ setAutoClose(self, bool) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoReset(self, bool):
    """ setAutoReset(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBar(self, QProgressBar):
    """ setBar(self, QProgressBar) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCancelButton(self, QPushButton):
    """ setCancelButton(self, QPushButton) """
    pass

  def setCancelButtonText(self, str):
    """ setCancelButtonText(self, str) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLabel(self, QLabel):
    """ setLabel(self, QLabel) """
    pass

  def setLabelText(self, str):
    """ setLabelText(self, str) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, int):
    """ setMaximum(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, int):
    """ setMinimum(self, int) """
    pass

  def setMinimumDuration(self, int):
    """ setMinimumDuration(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, int):
    """ setValue(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def value(self):
    """ value(self) -> int """
    return 1

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def wasCanceled(self):
    """ wasCanceled(self) -> bool """
    return True

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QProxyStyle(QCommonStyle):
  """ QProxyStyle(style: QStyle = None)
  QProxyStyle(str) """

  CC_ComboBox = None
  CC_CustomBase = None
  CC_Dial = None
  CC_GroupBox = None
  CC_MdiControls = None
  CC_ScrollBar = None
  CC_Slider = None
  CC_SpinBox = None
  CC_TitleBar = None
  CC_ToolButton = None
  CE_CheckBox = None
  CE_CheckBoxLabel = None
  CE_ColumnViewGrip = None
  CE_ComboBoxLabel = None
  CE_CustomBase = None
  CE_DockWidgetTitle = None
  CE_FocusFrame = None
  CE_Header = None
  CE_HeaderEmptyArea = None
  CE_HeaderLabel = None
  CE_HeaderSection = None
  CE_ItemViewItem = None
  CE_MenuBarEmptyArea = None
  CE_MenuBarItem = None
  CE_MenuEmptyArea = None
  CE_MenuHMargin = None
  CE_MenuItem = None
  CE_MenuScroller = None
  CE_MenuTearoff = None
  CE_MenuVMargin = None
  CE_ProgressBar = None
  CE_ProgressBarContents = None
  CE_ProgressBarGroove = None
  CE_ProgressBarLabel = None
  CE_PushButton = None
  CE_PushButtonBevel = None
  CE_PushButtonLabel = None
  CE_RadioButton = None
  CE_RadioButtonLabel = None
  CE_RubberBand = None
  CE_ScrollBarAddLine = None
  CE_ScrollBarAddPage = None
  CE_ScrollBarFirst = None
  CE_ScrollBarLast = None
  CE_ScrollBarSlider = None
  CE_ScrollBarSubLine = None
  CE_ScrollBarSubPage = None
  CE_ShapedFrame = None
  CE_SizeGrip = None
  CE_Splitter = None
  CE_TabBarTab = None
  CE_TabBarTabLabel = None
  CE_TabBarTabShape = None
  CE_ToolBar = None
  CE_ToolBoxTab = None
  CE_ToolBoxTabLabel = None
  CE_ToolBoxTabShape = None
  CE_ToolButtonLabel = None
  CT_CheckBox = None
  CT_ComboBox = None
  CT_CustomBase = None
  CT_DialogButtons = None
  CT_GroupBox = None
  CT_HeaderSection = None
  CT_ItemViewItem = None
  CT_LineEdit = None
  CT_MdiControls = None
  CT_Menu = None
  CT_MenuBar = None
  CT_MenuBarItem = None
  CT_MenuItem = None
  CT_ProgressBar = None
  CT_PushButton = None
  CT_RadioButton = None
  CT_ScrollBar = None
  CT_SizeGrip = None
  CT_Slider = None
  CT_SpinBox = None
  CT_Splitter = None
  CT_TabBarTab = None
  CT_TabWidget = None
  CT_ToolButton = None
  PE_CustomBase = None
  PE_Frame = None
  PE_FrameButtonBevel = None
  PE_FrameButtonTool = None
  PE_FrameDefaultButton = None
  PE_FrameDockWidget = None
  PE_FrameFocusRect = None
  PE_FrameGroupBox = None
  PE_FrameLineEdit = None
  PE_FrameMenu = None
  PE_FrameStatusBar = None
  PE_FrameStatusBarItem = None
  PE_FrameTabBarBase = None
  PE_FrameTabWidget = None
  PE_FrameWindow = None
  PE_IndicatorArrowDown = None
  PE_IndicatorArrowLeft = None
  PE_IndicatorArrowRight = None
  PE_IndicatorArrowUp = None
  PE_IndicatorBranch = None
  PE_IndicatorButtonDropDown = None
  PE_IndicatorCheckBox = None
  PE_IndicatorColumnViewArrow = None
  PE_IndicatorDockWidgetResizeHandle = None
  PE_IndicatorHeaderArrow = None
  PE_IndicatorItemViewItemCheck = None
  PE_IndicatorItemViewItemDrop = None
  PE_IndicatorMenuCheckMark = None
  PE_IndicatorProgressChunk = None
  PE_IndicatorRadioButton = None
  PE_IndicatorSpinDown = None
  PE_IndicatorSpinMinus = None
  PE_IndicatorSpinPlus = None
  PE_IndicatorSpinUp = None
  PE_IndicatorTabClose = None
  PE_IndicatorTabTear = None
  PE_IndicatorTabTearLeft = None
  PE_IndicatorTabTearRight = None
  PE_IndicatorToolBarHandle = None
  PE_IndicatorToolBarSeparator = None
  PE_IndicatorViewItemCheck = None
  PE_PanelButtonBevel = None
  PE_PanelButtonCommand = None
  PE_PanelButtonTool = None
  PE_PanelItemViewItem = None
  PE_PanelItemViewRow = None
  PE_PanelLineEdit = None
  PE_PanelMenu = None
  PE_PanelMenuBar = None
  PE_PanelScrollAreaCorner = None
  PE_PanelStatusBar = None
  PE_PanelTipLabel = None
  PE_PanelToolBar = None
  PE_Widget = None
  PM_ButtonDefaultIndicator = None
  PM_ButtonIconSize = None
  PM_ButtonMargin = None
  PM_ButtonShiftHorizontal = None
  PM_ButtonShiftVertical = None
  PM_CheckBoxLabelSpacing = None
  PM_ComboBoxFrameWidth = None
  PM_CustomBase = None
  PM_DefaultChildMargin = None
  PM_DefaultFrameWidth = None
  PM_DefaultLayoutSpacing = None
  PM_DefaultTopLevelMargin = None
  PM_DialogButtonsButtonHeight = None
  PM_DialogButtonsButtonWidth = None
  PM_DialogButtonsSeparator = None
  PM_DockWidgetFrameWidth = None
  PM_DockWidgetHandleExtent = None
  PM_DockWidgetSeparatorExtent = None
  PM_DockWidgetTitleBarButtonMargin = None
  PM_DockWidgetTitleMargin = None
  PM_ExclusiveIndicatorHeight = None
  PM_ExclusiveIndicatorWidth = None
  PM_FocusFrameHMargin = None
  PM_FocusFrameVMargin = None
  PM_HeaderDefaultSectionSizeHorizontal = None
  PM_HeaderDefaultSectionSizeVertical = None
  PM_HeaderGripMargin = None
  PM_HeaderMargin = None
  PM_HeaderMarkSize = None
  PM_IconViewIconSize = None
  PM_IndicatorHeight = None
  PM_IndicatorWidth = None
  PM_LargeIconSize = None
  PM_LayoutBottomMargin = None
  PM_LayoutHorizontalSpacing = None
  PM_LayoutLeftMargin = None
  PM_LayoutRightMargin = None
  PM_LayoutTopMargin = None
  PM_LayoutVerticalSpacing = None
  PM_ListViewIconSize = None
  PM_MDIFrameWidth = None
  PM_MDIMinimizedWidth = None
  PM_MaximumDragDistance = None
  PM_MdiSubWindowFrameWidth = None
  PM_MdiSubWindowMinimizedWidth = None
  PM_MenuBarHMargin = None
  PM_MenuBarItemSpacing = None
  PM_MenuBarPanelWidth = None
  PM_MenuBarVMargin = None
  PM_MenuButtonIndicator = None
  PM_MenuDesktopFrameWidth = None
  PM_MenuHMargin = None
  PM_MenuPanelWidth = None
  PM_MenuScrollerHeight = None
  PM_MenuTearoffHeight = None
  PM_MenuVMargin = None
  PM_MessageBoxIconSize = None
  PM_ProgressBarChunkWidth = None
  PM_RadioButtonLabelSpacing = None
  PM_ScrollBarExtent = None
  PM_ScrollBarSliderMin = None
  PM_ScrollView_ScrollBarOverlap = None
  PM_ScrollView_ScrollBarSpacing = None
  PM_SizeGripSize = None
  PM_SliderControlThickness = None
  PM_SliderLength = None
  PM_SliderSpaceAvailable = None
  PM_SliderThickness = None
  PM_SliderTickmarkOffset = None
  PM_SmallIconSize = None
  PM_SpinBoxFrameWidth = None
  PM_SpinBoxSliderHeight = None
  PM_SplitterWidth = None
  PM_SubMenuOverlap = None
  PM_TabBarBaseHeight = None
  PM_TabBarBaseOverlap = None
  PM_TabBarIconSize = None
  PM_TabBarScrollButtonWidth = None
  PM_TabBarTabHSpace = None
  PM_TabBarTabOverlap = None
  PM_TabBarTabShiftHorizontal = None
  PM_TabBarTabShiftVertical = None
  PM_TabBarTabVSpace = None
  PM_TabBar_ScrollButtonOverlap = None
  PM_TabCloseIndicatorHeight = None
  PM_TabCloseIndicatorWidth = None
  PM_TextCursorWidth = None
  PM_TitleBarButtonIconSize = None
  PM_TitleBarButtonSize = None
  PM_TitleBarHeight = None
  PM_ToolBarExtensionExtent = None
  PM_ToolBarFrameWidth = None
  PM_ToolBarHandleExtent = None
  PM_ToolBarIconSize = None
  PM_ToolBarItemMargin = None
  PM_ToolBarItemSpacing = None
  PM_ToolBarSeparatorExtent = None
  PM_ToolTipLabelFrameWidth = None
  PM_TreeViewIndentation = None
  RSIP_OnMouseClick = None
  RSIP_OnMouseClickAndAlreadyFocused = None
  SC_All = None
  SC_ComboBoxArrow = None
  SC_ComboBoxEditField = None
  SC_ComboBoxFrame = None
  SC_ComboBoxListBoxPopup = None
  SC_CustomBase = None
  SC_DialGroove = None
  SC_DialHandle = None
  SC_DialTickmarks = None
  SC_GroupBoxCheckBox = None
  SC_GroupBoxContents = None
  SC_GroupBoxFrame = None
  SC_GroupBoxLabel = None
  SC_MdiCloseButton = None
  SC_MdiMinButton = None
  SC_MdiNormalButton = None
  SC_None = None
  SC_ScrollBarAddLine = None
  SC_ScrollBarAddPage = None
  SC_ScrollBarFirst = None
  SC_ScrollBarGroove = None
  SC_ScrollBarLast = None
  SC_ScrollBarSlider = None
  SC_ScrollBarSubLine = None
  SC_ScrollBarSubPage = None
  SC_SliderGroove = None
  SC_SliderHandle = None
  SC_SliderTickmarks = None
  SC_SpinBoxDown = None
  SC_SpinBoxEditField = None
  SC_SpinBoxFrame = None
  SC_SpinBoxUp = None
  SC_TitleBarCloseButton = None
  SC_TitleBarContextHelpButton = None
  SC_TitleBarLabel = None
  SC_TitleBarMaxButton = None
  SC_TitleBarMinButton = None
  SC_TitleBarNormalButton = None
  SC_TitleBarShadeButton = None
  SC_TitleBarSysMenu = None
  SC_TitleBarUnshadeButton = None
  SC_ToolButton = None
  SC_ToolButtonMenu = None
  SE_CheckBoxClickRect = None
  SE_CheckBoxContents = None
  SE_CheckBoxFocusRect = None
  SE_CheckBoxIndicator = None
  SE_CheckBoxLayoutItem = None
  SE_ComboBoxFocusRect = None
  SE_ComboBoxLayoutItem = None
  SE_CustomBase = None
  SE_DateTimeEditLayoutItem = None
  SE_DialogButtonBoxLayoutItem = None
  SE_DockWidgetCloseButton = None
  SE_DockWidgetFloatButton = None
  SE_DockWidgetIcon = None
  SE_DockWidgetTitleBarText = None
  SE_FrameContents = None
  SE_FrameLayoutItem = None
  SE_GroupBoxLayoutItem = None
  SE_HeaderArrow = None
  SE_HeaderLabel = None
  SE_ItemViewItemCheckIndicator = None
  SE_ItemViewItemDecoration = None
  SE_ItemViewItemFocusRect = None
  SE_ItemViewItemText = None
  SE_LabelLayoutItem = None
  SE_LineEditContents = None
  SE_ProgressBarContents = None
  SE_ProgressBarGroove = None
  SE_ProgressBarLabel = None
  SE_ProgressBarLayoutItem = None
  SE_PushButtonContents = None
  SE_PushButtonFocusRect = None
  SE_PushButtonLayoutItem = None
  SE_RadioButtonClickRect = None
  SE_RadioButtonContents = None
  SE_RadioButtonFocusRect = None
  SE_RadioButtonIndicator = None
  SE_RadioButtonLayoutItem = None
  SE_ShapedFrameContents = None
  SE_SliderFocusRect = None
  SE_SliderLayoutItem = None
  SE_SpinBoxLayoutItem = None
  SE_TabBarScrollLeftButton = None
  SE_TabBarScrollRightButton = None
  SE_TabBarTabLeftButton = None
  SE_TabBarTabRightButton = None
  SE_TabBarTabText = None
  SE_TabBarTearIndicator = None
  SE_TabBarTearIndicatorLeft = None
  SE_TabBarTearIndicatorRight = None
  SE_TabWidgetLayoutItem = None
  SE_TabWidgetLeftCorner = None
  SE_TabWidgetRightCorner = None
  SE_TabWidgetTabBar = None
  SE_TabWidgetTabContents = None
  SE_TabWidgetTabPane = None
  SE_ToolBarHandle = None
  SE_ToolBoxTabContents = None
  SE_ToolButtonLayoutItem = None
  SE_TreeViewDisclosureItem = None
  SE_ViewItemCheckIndicator = None
  SH_BlinkCursorWhenTextSelected = None
  SH_Button_FocusPolicy = None
  SH_ComboBox_AllowWheelScrolling = None
  SH_ComboBox_LayoutDirection = None
  SH_ComboBox_ListMouseTracking = None
  SH_ComboBox_Popup = None
  SH_ComboBox_PopupFrameStyle = None
  SH_CustomBase = None
  SH_Dial_BackgroundRole = None
  SH_DialogButtonBox_ButtonsHaveIcons = None
  SH_DialogButtonLayout = None
  SH_DialogButtons_DefaultButton = None
  SH_DitherDisabledText = None
  SH_DockWidget_ButtonsHaveFrame = None
  SH_DrawMenuBarSeparator = None
  SH_EtchDisabledText = None
  SH_FocusFrame_AboveWidget = None
  SH_FocusFrame_Mask = None
  SH_FontDialog_SelectAssociatedText = None
  SH_FormLayoutFieldGrowthPolicy = None
  SH_FormLayoutFormAlignment = None
  SH_FormLayoutLabelAlignment = None
  SH_FormLayoutWrapPolicy = None
  SH_GroupBox_TextLabelColor = None
  SH_GroupBox_TextLabelVerticalAlignment = None
  SH_Header_ArrowAlignment = None
  SH_ItemView_ActivateItemOnSingleClick = None
  SH_ItemView_ArrowKeysNavigateIntoChildren = None
  SH_ItemView_ChangeHighlightOnFocus = None
  SH_ItemView_DrawDelegateFrame = None
  SH_ItemView_EllipsisLocation = None
  SH_ItemView_MovementWithoutUpdatingSelection = None
  SH_ItemView_PaintAlternatingRowColorsForEmptyArea = None
  SH_ItemView_ScrollMode = None
  SH_ItemView_ShowDecorationSelected = None
  SH_LineEdit_PasswordCharacter = None
  SH_LineEdit_PasswordMaskDelay = None
  SH_ListViewExpand_SelectMouseType = None
  SH_MainWindow_SpaceBelowMenuBar = None
  SH_MenuBar_AltKeyNavigation = None
  SH_MenuBar_MouseTracking = None
  SH_Menu_AllowActiveAndDisabled = None
  SH_Menu_FadeOutOnHide = None
  SH_Menu_FillScreenWithScroll = None
  SH_Menu_FlashTriggeredItem = None
  SH_Menu_KeyboardSearch = None
  SH_Menu_Mask = None
  SH_Menu_MouseTracking = None
  SH_Menu_Scrollable = None
  SH_Menu_SelectionWrap = None
  SH_Menu_SloppySubMenus = None
  SH_Menu_SpaceActivatesItem = None
  SH_Menu_SubMenuDontStartSloppyOnLeave = None
  SH_Menu_SubMenuPopupDelay = None
  SH_Menu_SubMenuResetWhenReenteringParent = None
  SH_Menu_SubMenuSloppyCloseTimeout = None
  SH_Menu_SubMenuSloppySelectOtherActions = None
  SH_Menu_SubMenuUniDirection = None
  SH_Menu_SubMenuUniDirectionFailCount = None
  SH_Menu_SupportsSections = None
  SH_MessageBox_CenterButtons = None
  SH_MessageBox_TextInteractionFlags = None
  SH_MessageBox_UseBorderForButtonSpacing = None
  SH_PrintDialog_RightAlignButtons = None
  SH_ProgressDialog_CenterCancelButton = None
  SH_ProgressDialog_TextLabelAlignment = None
  SH_RequestSoftwareInputPanel = None
  SH_RichText_FullWidthSelection = None
  SH_RubberBand_Mask = None
  SH_ScrollBar_ContextMenu = None
  SH_ScrollBar_LeftClickAbsolutePosition = None
  SH_ScrollBar_MiddleClickAbsolutePosition = None
  SH_ScrollBar_RollBetweenButtons = None
  SH_ScrollBar_ScrollWhenPointerLeavesControl = None
  SH_ScrollBar_StopMouseOverSlider = None
  SH_ScrollBar_Transient = None
  SH_ScrollView_FrameOnlyAroundContents = None
  SH_Slider_AbsoluteSetButtons = None
  SH_Slider_PageSetButtons = None
  SH_Slider_SloppyKeyEvents = None
  SH_Slider_SnapToValue = None
  SH_Slider_StopMouseOverSlider = None
  SH_SpellCheckUnderlineStyle = None
  SH_SpinBox_AnimateButton = None
  SH_SpinBox_ButtonsInsideFrame = None
  SH_SpinBox_ClickAutoRepeatRate = None
  SH_SpinBox_ClickAutoRepeatThreshold = None
  SH_SpinBox_KeyPressAutoRepeatRate = None
  SH_SpinBox_StepModifier = None
  SH_SpinControls_DisableOnBounds = None
  SH_Splitter_OpaqueResize = None
  SH_TabBar_Alignment = None
  SH_TabBar_ChangeCurrentDelay = None
  SH_TabBar_CloseButtonPosition = None
  SH_TabBar_ElideMode = None
  SH_TabBar_PreferNoArrows = None
  SH_TabBar_SelectMouseType = None
  SH_TabWidget_DefaultTabPosition = None
  SH_Table_GridLineColor = None
  SH_TextControl_FocusIndicatorTextCharFormat = None
  SH_TitleBar_AutoRaise = None
  SH_TitleBar_ModifyNotification = None
  SH_TitleBar_NoBorder = None
  SH_TitleBar_ShowToolTipsOnButtons = None
  SH_ToolBar_Movable = None
  SH_ToolBox_SelectedPageTitleBold = None
  SH_ToolButtonStyle = None
  SH_ToolButton_PopupDelay = None
  SH_ToolTipLabel_Opacity = None
  SH_ToolTip_FallAsleepDelay = None
  SH_ToolTip_Mask = None
  SH_ToolTip_WakeUpDelay = None
  SH_UnderlineShortcut = None
  SH_Widget_Animate = None
  SH_Widget_Animation_Duration = None
  SH_Widget_ShareActivation = None
  SH_WindowFrame_Mask = None
  SH_WizardStyle = None
  SH_Workspace_FillSpaceOnMaximize = None
  SP_ArrowBack = None
  SP_ArrowDown = None
  SP_ArrowForward = None
  SP_ArrowLeft = None
  SP_ArrowRight = None
  SP_ArrowUp = None
  SP_BrowserReload = None
  SP_BrowserStop = None
  SP_CommandLink = None
  SP_ComputerIcon = None
  SP_CustomBase = None
  SP_DesktopIcon = None
  SP_DialogApplyButton = None
  SP_DialogCancelButton = None
  SP_DialogCloseButton = None
  SP_DialogDiscardButton = None
  SP_DialogHelpButton = None
  SP_DialogNoButton = None
  SP_DialogOkButton = None
  SP_DialogOpenButton = None
  SP_DialogResetButton = None
  SP_DialogSaveButton = None
  SP_DialogYesButton = None
  SP_DirClosedIcon = None
  SP_DirHomeIcon = None
  SP_DirIcon = None
  SP_DirLinkIcon = None
  SP_DirLinkOpenIcon = None
  SP_DirOpenIcon = None
  SP_DockWidgetCloseButton = None
  SP_DriveCDIcon = None
  SP_DriveDVDIcon = None
  SP_DriveFDIcon = None
  SP_DriveHDIcon = None
  SP_DriveNetIcon = None
  SP_FileDialogBack = None
  SP_FileDialogContentsView = None
  SP_FileDialogDetailedView = None
  SP_FileDialogEnd = None
  SP_FileDialogInfoView = None
  SP_FileDialogListView = None
  SP_FileDialogNewFolder = None
  SP_FileDialogStart = None
  SP_FileDialogToParent = None
  SP_FileIcon = None
  SP_FileLinkIcon = None
  SP_LineEditClearButton = None
  SP_MediaPause = None
  SP_MediaPlay = None
  SP_MediaSeekBackward = None
  SP_MediaSeekForward = None
  SP_MediaSkipBackward = None
  SP_MediaSkipForward = None
  SP_MediaStop = None
  SP_MediaVolume = None
  SP_MediaVolumeMuted = None
  SP_MessageBoxCritical = None
  SP_MessageBoxInformation = None
  SP_MessageBoxQuestion = None
  SP_MessageBoxWarning = None
  SP_TitleBarCloseButton = None
  SP_TitleBarContextHelpButton = None
  SP_TitleBarMaxButton = None
  SP_TitleBarMenuButton = None
  SP_TitleBarMinButton = None
  SP_TitleBarNormalButton = None
  SP_TitleBarShadeButton = None
  SP_TitleBarUnshadeButton = None
  SP_ToolBarHorizontalExtensionButton = None
  SP_ToolBarVerticalExtensionButton = None
  SP_TrashIcon = None
  SP_VistaShield = None
  State_Active = None
  State_AutoRaise = None
  State_Bottom = None
  State_Children = None
  State_DownArrow = None
  State_Editing = None
  State_Enabled = None
  State_FocusAtBorder = None
  State_HasFocus = None
  State_Horizontal = None
  State_Item = None
  State_KeyboardFocusChange = None
  State_Mini = None
  State_MouseOver = None
  State_NoChange = None
  State_None = None
  State_Off = None
  State_On = None
  State_Open = None
  State_Raised = None
  State_ReadOnly = None
  State_Selected = None
  State_Sibling = None
  State_Small = None
  State_Sunken = None
  State_Top = None
  State_UpArrow = None
  State_Window = None
  def __init__(self, arg0=None):
    pass

  def alignedRect(arg0, UnionQt.Alignment=None, Qt.AlignmentFlag=None, QSize=None, QRect=None):
    """ alignedRect(Qt.LayoutDirection, Union[Qt.Alignment, Qt.AlignmentFlag], QSize, QRect) -> QRect """
    return QtCore.QRect()

  def baseStyle(self):
    """ baseStyle(self) -> QStyle """
    return QStyle()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def combinedLayoutSpacing(self, UnionQSizePolicy.ControlTypes=None, QSizePolicy.ControlType=None, UnionQSizePolicy.ControlTypes=None, QSizePolicy.ControlType=None, Qt.Orientation=None, arg0=None, arg1=None):
    """ combinedLayoutSpacing(self, Union[QSizePolicy.ControlTypes, QSizePolicy.ControlType], Union[QSizePolicy.ControlTypes, QSizePolicy.ControlType], Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def drawComplexControl(self, arg0, QStyleOptionComplex, QtGui.QPainter, arg1=None):
    """ drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPainter, widget: QWidget = None) """
    pass

  def drawControl(self, arg0, QStyleOption, QtGui.QPainter, arg1=None):
    """ drawControl(self, QStyle.ControlElement, QStyleOption, QPainter, widget: QWidget = None) """
    pass

  def drawItemPixmap(self, QtGui.QPainter, QtCore.QRect, int, QtGui.QPixmap):
    """ drawItemPixmap(self, QPainter, QRect, int, QPixmap) """
    pass

  def drawItemText(self, QtGui.QPainter, QtCore.QRect, int, QtGui.QPalette, bool, str, arg0=None):
    """ drawItemText(self, QPainter, QRect, int, QPalette, bool, str, textRole: QPalette.ColorRole = QPalette.NoRole) """
    pass

  def drawPrimitive(self, arg0, QStyleOption, QtGui.QPainter, arg1=None):
    """ drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption, QPainter, widget: QWidget = None) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def generatedIconPixmap(self, arg0, QtGui.QPixmap, QStyleOption):
    """ generatedIconPixmap(self, QIcon.Mode, QPixmap, QStyleOption) -> QPixmap """
    return QtGui.QPixmap()

  def hitTestComplexControl(self, arg0, QStyleOptionComplex, QtCore.QPoint, arg1=None):
    """ hitTestComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPoint, widget: QWidget = None) -> QStyle.SubControl """
    return QStyle.SubControl()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemPixmapRect(self, QtCore.QRect, int, QtGui.QPixmap):
    """ itemPixmapRect(self, QRect, int, QPixmap) -> QRect """
    return QtCore.QRect()

  def itemTextRect(self, QtGui.QFontMetrics, QtCore.QRect, int, bool, str):
    """ itemTextRect(self, QFontMetrics, QRect, int, bool, str) -> QRect """
    return QtCore.QRect()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutSpacing(self, arg0, arg1, arg2, arg3=None, arg4=None):
    """ layoutSpacing(self, QSizePolicy.ControlType, QSizePolicy.ControlType, Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def pixelMetric(self, arg0, arg1=None, arg2=None):
    """ pixelMetric(self, QStyle.PixelMetric, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def polish(self, QWidget):
    """ polish(self, QWidget)
    polish(self, QPalette) -> QPalette
    polish(self, QApplication) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def proxy(self):
    """ proxy(self) -> QStyle """
    return QStyle()

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBaseStyle(self, QStyle):
    """ setBaseStyle(self, QStyle) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeFromContents(self, arg0, QStyleOption, QtCore.QSize, QWidget):
    """ sizeFromContents(self, QStyle.ContentsType, QStyleOption, QSize, QWidget) -> QSize """
    return QtCore.QSize()

  def sliderPositionFromValue(int, int, int, int, arg0=None):
    """ sliderPositionFromValue(int, int, int, int, upsideDown: bool = False) -> int """
    return 1

  def sliderValueFromPosition(int, int, int, int, arg0=None):
    """ sliderValueFromPosition(int, int, int, int, upsideDown: bool = False) -> int """
    return 1

  def standardIcon(self, arg0, arg1=None, arg2=None):
    """ standardIcon(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QIcon """
    return QtGui.QIcon()

  def standardPalette(self):
    """ standardPalette(self) -> QPalette """
    return QtGui.QPalette()

  def standardPixmap(self, arg0, QStyleOption, arg1=None):
    """ standardPixmap(self, QStyle.StandardPixmap, QStyleOption, widget: QWidget = None) -> QPixmap """
    return QtGui.QPixmap()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def styleHint(self, arg0, arg1=None, arg2=None, arg3=None):
    """ styleHint(self, QStyle.StyleHint, option: QStyleOption = None, widget: QWidget = None, returnData: QStyleHintReturn = None) -> int """
    return 1

  def subControlRect(self, arg0, QStyleOptionComplex, arg1, QWidget):
    """ subControlRect(self, QStyle.ComplexControl, QStyleOptionComplex, QStyle.SubControl, QWidget) -> QRect """
    return QtCore.QRect()

  def subElementRect(self, arg0, QStyleOption, QWidget):
    """ subElementRect(self, QStyle.SubElement, QStyleOption, QWidget) -> QRect """
    return QtCore.QRect()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unpolish(self, QWidget):
    """ unpolish(self, QWidget)
    unpolish(self, QApplication) """
    pass

  def visualAlignment(arg0, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ visualAlignment(Qt.LayoutDirection, Union[Qt.Alignment, Qt.AlignmentFlag]) -> Qt.Alignment """
    return None

  def visualPos(arg0, QtCore.QRect, QtCore.QPoint):
    """ visualPos(Qt.LayoutDirection, QRect, QPoint) -> QPoint """
    return QtCore.QPoint()

  def visualRect(arg0, QtCore.QRect, QtCore.QRect):
    """ visualRect(Qt.LayoutDirection, QRect, QRect) -> QRect """
    return QtCore.QRect()

class QPushButton(QAbstractButton):
  """ QPushButton(parent: QWidget = None)
  QPushButton(str, parent: QWidget = None)
  QPushButton(QIcon, str, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def animateClick(self, arg0=None):
    """ animateClick(self, msecs: int = 100) """
    pass

  def autoDefault(self):
    """ autoDefault(self) -> bool """
    return True

  def autoExclusive(self):
    """ autoExclusive(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def autoRepeatDelay(self):
    """ autoRepeatDelay(self) -> int """
    return 1

  def autoRepeatInterval(self):
    """ autoRepeatInterval(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def checkStateSet():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def click(self):
    """ click(self) """
    pass

  def clicked(self, arg0=None):
    """ clicked(self, checked: bool = False) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def group(self):
    """ group(self) -> QButtonGroup """
    return QButtonGroup()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hitButton():
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionButton):
    """ initStyleOption(self, QStyleOptionButton) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isDefault(self):
    """ isDefault(self) -> bool """
    return True

  def isDown(self):
    """ isDown(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFlat(self):
    """ isFlat(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def menu(self):
    """ menu(self) -> QMenu """
    return QMenu()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextCheckState():
    pass

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self):
    """ pressed(self) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def released(self):
    """ released(self) [signal] """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoDefault(self, bool):
    """ setAutoDefault(self, bool) """
    pass

  def setAutoExclusive(self, bool):
    """ setAutoExclusive(self, bool) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setAutoRepeatDelay(self, int):
    """ setAutoRepeatDelay(self, int) """
    pass

  def setAutoRepeatInterval(self, int):
    """ setAutoRepeatInterval(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefault(self, bool):
    """ setDefault(self, bool) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDown(self, bool):
    """ setDown(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFlat(self, bool):
    """ setFlat(self, bool) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMenu(self, QMenu):
    """ setMenu(self, QMenu) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMenu(self):
    """ showMenu(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QRadioButton(QAbstractButton):
  """ QRadioButton(parent: QWidget = None)
  QRadioButton(str, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def animateClick(self, arg0=None):
    """ animateClick(self, msecs: int = 100) """
    pass

  def autoExclusive(self):
    """ autoExclusive(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def autoRepeatDelay(self):
    """ autoRepeatDelay(self) -> int """
    return 1

  def autoRepeatInterval(self):
    """ autoRepeatInterval(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def checkStateSet():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def click(self):
    """ click(self) """
    pass

  def clicked(self, arg0=None):
    """ clicked(self, checked: bool = False) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def group(self):
    """ group(self) -> QButtonGroup """
    return QButtonGroup()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hitButton(self, QtCore.QPoint):
    """ hitButton(self, QPoint) -> bool """
    return True

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionButton):
    """ initStyleOption(self, QStyleOptionButton) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isDown(self):
    """ isDown(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextCheckState():
    pass

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self):
    """ pressed(self) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def released(self):
    """ released(self) [signal] """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoExclusive(self, bool):
    """ setAutoExclusive(self, bool) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setAutoRepeatDelay(self, int):
    """ setAutoRepeatDelay(self, int) """
    pass

  def setAutoRepeatInterval(self, int):
    """ setAutoRepeatInterval(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDown(self, bool):
    """ setDown(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QRubberBand(QWidget):
  """ QRubberBand(QRubberBand.Shape, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  Line = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rectangle = None
  class Shape(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0, arg1=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionRubberBand):
    """ initStyleOption(self, QStyleOptionRubberBand) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent(self, QtGui.QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, int, int):
    """ resize(self, int, int)
    resize(self, QSize) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def shape(self):
    """ shape(self) -> QRubberBand.Shape """
    return QRubberBand.Shape()

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QScrollArea(QAbstractScrollArea):
  """ QScrollArea(parent: QWidget = None) """

  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def ensureVisible(self, int, int, arg0=None, arg1=None):
    """ ensureVisible(self, int, int, xMargin: int = 50, yMargin: int = 50) """
    pass

  def ensureWidgetVisible(self, QWidget, arg0=None, arg1=None):
    """ ensureWidgetVisible(self, QWidget, xMargin: int = 50, yMargin: int = 50) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWidget(self, QWidget):
    """ setWidget(self, QWidget) """
    pass

  def setWidgetResizable(self, bool):
    """ setWidgetResizable(self, bool) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def takeWidget(self):
    """ takeWidget(self) -> QWidget """
    return QWidget()

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return QtCore.QSize()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def widgetResizable(self):
    """ widgetResizable(self) -> bool """
    return True

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QScrollBar(QAbstractSlider):
  """ QScrollBar(parent: QWidget = None)
  QScrollBar(Qt.Orientation, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  SliderMove = None
  SliderNoAction = None
  SliderOrientationChange = None
  SliderPageStepAdd = None
  SliderPageStepSub = None
  SliderRangeChange = None
  SliderSingleStepAdd = None
  SliderSingleStepSub = None
  SliderStepsChange = None
  SliderToMaximum = None
  SliderToMinimum = None
  SliderValueChange = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actionTriggered(self, int):
    """ actionTriggered(self, int) [signal] """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def hasTracking(self):
    """ hasTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionSlider):
    """ initStyleOption(self, QStyleOptionSlider) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invertedAppearance(self):
    """ invertedAppearance(self) -> bool """
    return True

  def invertedControls(self):
    """ invertedControls(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSliderDown(self):
    """ isSliderDown(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def pageStep(self):
    """ pageStep(self) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def rangeChanged(self, int, int):
    """ rangeChanged(self, int, int) [signal] """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def repeatAction():
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInvertedAppearance(self, bool):
    """ setInvertedAppearance(self, bool) """
    pass

  def setInvertedControls(self, bool):
    """ setInvertedControls(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, int):
    """ setMaximum(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, int):
    """ setMinimum(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPageStep(self, int):
    """ setPageStep(self, int) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setRepeatAction():
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSingleStep(self, int):
    """ setSingleStep(self, int) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSliderDown(self, bool):
    """ setSliderDown(self, bool) """
    pass

  def setSliderPosition(self, int):
    """ setSliderPosition(self, int) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTracking(self, bool):
    """ setTracking(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, int):
    """ setValue(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def singleStep(self):
    """ singleStep(self) -> int """
    return 1

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sliderChange(self, arg0):
    """ sliderChange(self, QAbstractSlider.SliderChange) """
    pass

  def sliderMoved(self, int):
    """ sliderMoved(self, int) [signal] """
    pass

  def sliderPosition(self):
    """ sliderPosition(self) -> int """
    return 1

  def sliderPressed(self):
    """ sliderPressed(self) [signal] """
    pass

  def sliderReleased(self):
    """ sliderReleased(self) [signal] """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggerAction(self, arg0):
    """ triggerAction(self, QAbstractSlider.SliderAction) """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def value(self):
    """ value(self) -> int """
    return 1

  def valueChanged(self, int):
    """ valueChanged(self, int) [signal] """
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QScroller(QObject):

  Dragging = None
  Inactive = None

  class Input(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  InputMove = None
  InputPress = None
  InputRelease = None
  LeftMouseButtonGesture = None
  MiddleMouseButtonGesture = None
  Pressed = None
  RightMouseButtonGesture = None

  class ScrollerGestureType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Scrolling = None

  class State(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TouchGesture = None

  def __init__(self):
    pass

  def activeScrollers():
    """ activeScrollers() -> List[QScroller] """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent(self, QtCore.QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QtCore.QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent(self, QtCore.QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify(self, QtCore.QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def ensureVisible(self, QtCore.QRectF, float, float):
    """ ensureVisible(self, QRectF, float, float)
    ensureVisible(self, QRectF, float, float, int) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def finalPosition(self):
    """ finalPosition(self) -> QPointF """
    return QtCore.QPointF()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def grabGesture(QtCore.QObject, arg0=None):
    """ grabGesture(QObject, scrollGestureType: QScroller.ScrollerGestureType = QScroller.TouchGesture) -> Qt.GestureType """
    return None

  def grabbedGesture(QtCore.QObject):
    """ grabbedGesture(QObject) -> Qt.GestureType """
    return None

  def handleInput(self, arg0, UnionQPointF=None, QPoint=None, arg1=None):
    """ handleInput(self, QScroller.Input, Union[QPointF, QPoint], timestamp: int = 0) -> bool """
    return True

  def hasScroller(QtCore.QObject):
    """ hasScroller(QObject) -> bool """
    return True

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QtCore.QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def pixelPerMeter(self):
    """ pixelPerMeter(self) -> QPointF """
    return QtCore.QPointF()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resendPrepareEvent(self):
    """ resendPrepareEvent(self) """
    pass

  def scrollTo(self, UnionQPointF=None, QPoint=None):
    """ scrollTo(self, Union[QPointF, QPoint])
    scrollTo(self, Union[QPointF, QPoint], int) """
    pass

  def scroller(QtCore.QObject):
    """ scroller(QObject) -> QScroller """
    return QScroller()

  def scrollerProperties(self):
    """ scrollerProperties(self) -> QScrollerProperties """
    return QScrollerProperties()

  def scrollerPropertiesChanged(self, QScrollerProperties):
    """ scrollerPropertiesChanged(self, QScrollerProperties) [signal] """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return QtCore.QObject()

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setScrollerProperties(self, QScrollerProperties):
    """ setScrollerProperties(self, QScrollerProperties) """
    pass

  def setSnapPositionsX(self, Iterablefloat=None):
    """ setSnapPositionsX(self, Iterable[float])
    setSnapPositionsX(self, float, float) """
    pass

  def setSnapPositionsY(self, Iterablefloat=None):
    """ setSnapPositionsY(self, Iterable[float])
    setSnapPositionsY(self, float, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QScroller.State """
    return QScroller.State()

  def stateChanged(self, arg0):
    """ stateChanged(self, QScroller.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def target(self):
    """ target(self) -> QObject """
    return QtCore.QObject()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungrabGesture(QtCore.QObject):
    """ ungrabGesture(QObject) """
    pass

  def velocity(self):
    """ velocity(self) -> QPointF """
    return QtCore.QPointF()

class QScrollerProperties(simplewrapper):
  """ QScrollerProperties()
  QScrollerProperties(QScrollerProperties) """

  AcceleratingFlickMaximumTime = None
  AcceleratingFlickSpeedupFactor = None
  AxisLockThreshold = None
  DecelerationFactor = None
  DragStartDistance = None
  DragVelocitySmoothingFactor = None
  Fps20 = None
  Fps30 = None
  Fps60 = None
  FrameRate = None

  class FrameRates(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  HorizontalOvershootPolicy = None
  MaximumClickThroughVelocity = None
  MaximumVelocity = None
  MinimumVelocity = None
  MousePressEventDelay = None
  OvershootAlwaysOff = None
  OvershootAlwaysOn = None
  OvershootDragDistanceFactor = None
  OvershootDragResistanceFactor = None

  class OvershootPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  OvershootScrollDistanceFactor = None
  OvershootScrollTime = None
  OvershootWhenScrollable = None

  class ScrollMetric(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollMetricCount = None
  ScrollingCurve = None
  SnapPositionRatio = None
  SnapTime = None
  Standard = None
  VerticalOvershootPolicy = None

  def __init__(self):
    pass

  def scrollMetric(self, arg0):
    """ scrollMetric(self, QScrollerProperties.ScrollMetric) -> Any """
    return None

  def setDefaultScrollerProperties(QScrollerProperties):
    """ setDefaultScrollerProperties(QScrollerProperties) """
    pass

  def setScrollMetric(self, arg0, Any):
    """ setScrollMetric(self, QScrollerProperties.ScrollMetric, Any) """
    pass

  def unsetDefaultScrollerProperties():
    """ unsetDefaultScrollerProperties() """
    pass

class QShortcut(QObject):
  """ QShortcut(QWidget)
  QShortcut(Union[QKeySequence, QKeySequence.StandardKey, str, int], QWidget, member: PYQT_SLOT = 0, ambiguousMember: PYQT_SLOT = 0, context: Qt.ShortcutContext = Qt.WindowShortcut) """

  def __init__(self, QWidget):
    pass

  def activated(self):
    """ activated(self) [signal] """
    pass

  def activatedAmbiguously(self):
    """ activatedAmbiguously(self) [signal] """
    pass

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def context(self):
    """ context(self) -> Qt.ShortcutContext """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def id(self):
    """ id(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def key(self):
    """ key(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setContext(self, arg0):
    """ setContext(self, Qt.ShortcutContext) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setKey(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setKey(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

class QSizeGrip(QWidget):
  """ QSizeGrip(QWidget) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, QWidget):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent(self, QtGui.QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QSizePolicy(simplewrapper):
  """ QSizePolicy()
  QSizePolicy(QSizePolicy.Policy, QSizePolicy.Policy, type: QSizePolicy.ControlType = QSizePolicy.DefaultType)
  QSizePolicy(Any)
  QSizePolicy(QSizePolicy) """

  ButtonBox = None
  CheckBox = None
  ComboBox = None

  class ControlType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ControlTypes(simplewrapper):
    """ QSizePolicy.ControlTypes()
    QSizePolicy.ControlTypes(Union[QSizePolicy.ControlTypes, QSizePolicy.ControlType])
    QSizePolicy.ControlTypes(QSizePolicy.ControlTypes) """

    def __init__(self):
      pass

  DefaultType = None
  ExpandFlag = None
  Expanding = None
  Fixed = None
  Frame = None
  GroupBox = None
  GrowFlag = None
  IgnoreFlag = None
  Ignored = None
  Label = None
  Line = None
  LineEdit = None
  Maximum = None
  Minimum = None
  MinimumExpanding = None

  class Policy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PolicyFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Preferred = None
  PushButton = None
  RadioButton = None
  ShrinkFlag = None
  Slider = None
  SpinBox = None
  TabWidget = None
  ToolButton = None

  def __init__(self):
    pass

  def controlType(self):
    """ controlType(self) -> QSizePolicy.ControlType """
    return QSizePolicy.ControlType()

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasWidthForHeight(self):
    """ hasWidthForHeight(self) -> bool """
    return True

  def horizontalPolicy(self):
    """ horizontalPolicy(self) -> QSizePolicy.Policy """
    return QSizePolicy.Policy()

  def horizontalStretch(self):
    """ horizontalStretch(self) -> int """
    return 1

  def retainSizeWhenHidden(self):
    """ retainSizeWhenHidden(self) -> bool """
    return True

  def setControlType(self, arg0):
    """ setControlType(self, QSizePolicy.ControlType) """
    pass

  def setHeightForWidth(self, bool):
    """ setHeightForWidth(self, bool) """
    pass

  def setHorizontalPolicy(self, arg0):
    """ setHorizontalPolicy(self, QSizePolicy.Policy) """
    pass

  def setHorizontalStretch(self, int):
    """ setHorizontalStretch(self, int) """
    pass

  def setRetainSizeWhenHidden(self, bool):
    """ setRetainSizeWhenHidden(self, bool) """
    pass

  def setVerticalPolicy(self, arg0):
    """ setVerticalPolicy(self, QSizePolicy.Policy) """
    pass

  def setVerticalStretch(self, int):
    """ setVerticalStretch(self, int) """
    pass

  def setWidthForHeight(self, bool):
    """ setWidthForHeight(self, bool) """
    pass

  def transpose(self):
    """ transpose(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QSizePolicy """
    return QSizePolicy()

  def verticalPolicy(self):
    """ verticalPolicy(self) -> QSizePolicy.Policy """
    return QSizePolicy.Policy()

  def verticalStretch(self):
    """ verticalStretch(self) -> int """
    return 1

class QSlider(QAbstractSlider):
  """ QSlider(parent: QWidget = None)
  QSlider(Qt.Orientation, parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  NoTicks = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  SliderMove = None
  SliderNoAction = None
  SliderOrientationChange = None
  SliderPageStepAdd = None
  SliderPageStepSub = None
  SliderRangeChange = None
  SliderSingleStepAdd = None
  SliderSingleStepSub = None
  SliderStepsChange = None
  SliderToMaximum = None
  SliderToMinimum = None
  SliderValueChange = None

  class TickPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TicksAbove = None
  TicksBelow = None
  TicksBothSides = None
  TicksLeft = None
  TicksRight = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actionTriggered(self, int):
    """ actionTriggered(self, int) [signal] """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def hasTracking(self):
    """ hasTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionSlider):
    """ initStyleOption(self, QStyleOptionSlider) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invertedAppearance(self):
    """ invertedAppearance(self) -> bool """
    return True

  def invertedControls(self):
    """ invertedControls(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSliderDown(self):
    """ isSliderDown(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def pageStep(self):
    """ pageStep(self) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def rangeChanged(self, int, int):
    """ rangeChanged(self, int, int) [signal] """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def repeatAction():
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setInvertedAppearance(self, bool):
    """ setInvertedAppearance(self, bool) """
    pass

  def setInvertedControls(self, bool):
    """ setInvertedControls(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, int):
    """ setMaximum(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, int):
    """ setMinimum(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPageStep(self, int):
    """ setPageStep(self, int) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setRepeatAction():
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSingleStep(self, int):
    """ setSingleStep(self, int) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSliderDown(self, bool):
    """ setSliderDown(self, bool) """
    pass

  def setSliderPosition(self, int):
    """ setSliderPosition(self, int) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTickInterval(self, int):
    """ setTickInterval(self, int) """
    pass

  def setTickPosition(self, arg0):
    """ setTickPosition(self, QSlider.TickPosition) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTracking(self, bool):
    """ setTracking(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, int):
    """ setValue(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def singleStep(self):
    """ singleStep(self) -> int """
    return 1

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sliderChange():
    pass

  def sliderMoved(self, int):
    """ sliderMoved(self, int) [signal] """
    pass

  def sliderPosition(self):
    """ sliderPosition(self) -> int """
    return 1

  def sliderPressed(self):
    """ sliderPressed(self) [signal] """
    pass

  def sliderReleased(self):
    """ sliderReleased(self) [signal] """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def tickInterval(self):
    """ tickInterval(self) -> int """
    return 1

  def tickPosition(self):
    """ tickPosition(self) -> QSlider.TickPosition """
    return QSlider.TickPosition()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggerAction(self, arg0):
    """ triggerAction(self, QAbstractSlider.SliderAction) """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def value(self):
    """ value(self) -> int """
    return 1

  def valueChanged(self, int):
    """ valueChanged(self, int) [signal] """
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QSpacerItem(QLayoutItem):
  """ QSpacerItem(int, int, hPolicy: QSizePolicy.Policy = QSizePolicy.Minimum, vPolicy: QSizePolicy.Policy = QSizePolicy.Minimum)
  QSpacerItem(QSpacerItem) """

  def __init__(self, int, int, arg0=None, arg1=None):
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def changeSize(self, int, int, arg0=None, arg1=None):
    """ changeSize(self, int, int, hPolicy: QSizePolicy.Policy = QSizePolicy.Minimum, vPolicy: QSizePolicy.Policy = QSizePolicy.Minimum) """
    pass

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QSpinBox(QAbstractSpinBox):
  """ QSpinBox(parent: QWidget = None) """

  AdaptiveDecimalStepType = None
  CorrectToNearestValue = None
  CorrectToPreviousValue = None
  DefaultStepType = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  NoButtons = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  PlusMinus = None
  StepDownEnabled = None
  StepNone = None
  StepUpEnabled = None
  UpDownArrows = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buttonSymbols(self):
    """ buttonSymbols(self) -> QAbstractSpinBox.ButtonSymbols """
    return QAbstractSpinBox.ButtonSymbols()

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def cleanText(self):
    """ cleanText(self) -> str """
    return ""

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def correctionMode(self):
    """ correctionMode(self) -> QAbstractSpinBox.CorrectionMode """
    return QAbstractSpinBox.CorrectionMode()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def displayIntegerBase(self):
    """ displayIntegerBase(self) -> int """
    return 1

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAcceptableInput(self):
    """ hasAcceptableInput(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpretText(self):
    """ interpretText(self) """
    pass

  def isAccelerated(self):
    """ isAccelerated(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isGroupSeparatorShown(self):
    """ isGroupSeparatorShown(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardTracking(self):
    """ keyboardTracking(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximum(self):
    """ maximum(self) -> int """
    return 1

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimum(self):
    """ minimum(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def prefix(self):
    """ prefix(self) -> str """
    return ""

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAccelerated(self, bool):
    """ setAccelerated(self, bool) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButtonSymbols(self, arg0):
    """ setButtonSymbols(self, QAbstractSpinBox.ButtonSymbols) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCorrectionMode(self, arg0):
    """ setCorrectionMode(self, QAbstractSpinBox.CorrectionMode) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDisplayIntegerBase(self, int):
    """ setDisplayIntegerBase(self, int) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroupSeparatorShown(self, bool):
    """ setGroupSeparatorShown(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeyboardTracking(self, bool):
    """ setKeyboardTracking(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit():
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximum(self, int):
    """ setMaximum(self, int) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimum(self, int):
    """ setMinimum(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPrefix(self, str):
    """ setPrefix(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSingleStep(self, int):
    """ setSingleStep(self, int) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpecialValueText(self, str):
    """ setSpecialValueText(self, str) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStepType(self, arg0):
    """ setStepType(self, QAbstractSpinBox.StepType) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setSuffix(self, str):
    """ setSuffix(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setValue(self, int):
    """ setValue(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def singleStep(self):
    """ singleStep(self) -> int """
    return 1

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def specialValueText(self):
    """ specialValueText(self) -> str """
    return ""

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def stepBy(self, int):
    """ stepBy(self, int) """
    pass

  def stepDown(self):
    """ stepDown(self) """
    pass

  def stepEnabled():
    pass

  def stepType(self):
    """ stepType(self) -> QAbstractSpinBox.StepType """
    return QAbstractSpinBox.StepType()

  def stepUp(self):
    """ stepUp(self) """
    pass

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def suffix(self):
    """ suffix(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textFromValue(self, int):
    """ textFromValue(self, int) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

  def value(self):
    """ value(self) -> int """
    return 1

  def valueChanged(self, int):
    """ valueChanged(self, int) [signal]
    valueChanged(self, str) [signal] """
    pass

  def valueFromText(self, str):
    """ valueFromText(self, str) -> int """
    return 1

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wrapping(self):
    """ wrapping(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QSplashScreen(QWidget):
  """ QSplashScreen(pixmap: QPixmap = QPixmap(), flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())
  QSplashScreen(QWidget, pixmap: QPixmap = QPixmap(), flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearMessage(self):
    """ clearMessage(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawContents(self, QtGui.QPainter):
    """ drawContents(self, QPainter) """
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finish(self, QWidget):
    """ finish(self, QWidget) """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def message(self):
    """ message(self) -> str """
    return ""

  def messageChanged(self, str):
    """ messageChanged(self, str) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pixmap(self):
    """ pixmap(self) -> QPixmap """
    return QtGui.QPixmap()

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPixmap(self, QtGui.QPixmap):
    """ setPixmap(self, QPixmap) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMessage(self, str, arg0=None, arg1=None, Qt.GlobalColor=None, arg2=None):
    """ showMessage(self, str, alignment: int = Qt.AlignLeft, color: Union[QColor, Qt.GlobalColor, QGradient] = Qt.black) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QSplitter(QFrame):
  """ QSplitter(parent: QWidget = None)
  QSplitter(Qt.Orientation, parent: QWidget = None) """

  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent(self, QtCore.QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenCollapsible(self):
    """ childrenCollapsible(self) -> bool """
    return True

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def closestLegalPosition(self, int, int):
    """ closestLegalPosition(self, int, int) -> int """
    return 1

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createHandle(self):
    """ createHandle(self) -> QSplitterHandle """
    return QSplitterHandle()

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def getRange(self, int):
    """ getRange(self, int) -> Tuple[int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def handle(self, int):
    """ handle(self, int) -> QSplitterHandle """
    return QSplitterHandle()

  def handleWidth(self):
    """ handleWidth(self) -> int """
    return 1

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertWidget(self, int, QWidget):
    """ insertWidget(self, int, QWidget) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCollapsible(self, int):
    """ isCollapsible(self, int) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveSplitter(self, int, int):
    """ moveSplitter(self, int, int) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opaqueResize(self):
    """ opaqueResize(self) -> bool """
    return True

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def refresh(self):
    """ refresh(self) """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def replaceWidget(self, int, QWidget):
    """ replaceWidget(self, int, QWidget) -> QWidget """
    return QWidget()

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def restoreState(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def saveState(self):
    """ saveState(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setChildrenCollapsible(self, bool):
    """ setChildrenCollapsible(self, bool) """
    pass

  def setCollapsible(self, int, bool):
    """ setCollapsible(self, int, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHandleWidth(self, int):
    """ setHandleWidth(self, int) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpaqueResize(self, arg0=None):
    """ setOpaqueResize(self, opaque: bool = True) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRubberBand(self, int):
    """ setRubberBand(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSizes(self, Iterableint=None):
    """ setSizes(self, Iterable[int]) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStretchFactor(self, int, int):
    """ setStretchFactor(self, int, int) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sizes(self):
    """ sizes(self) -> List[int] """
    return 1

  def splitterMoved(self, int, int):
    """ splitterMoved(self, int, int) [signal] """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self, int):
    """ widget(self, int) -> QWidget """
    return QWidget()

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QSplitterHandle(QWidget):
  """ QSplitterHandle(Qt.Orientation, QSplitter) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0, QSplitter):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def closestLegalPosition(self, int):
    """ closestLegalPosition(self, int) -> int """
    return 1

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveSplitter(self, int):
    """ moveSplitter(self, int) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opaqueResize(self):
    """ opaqueResize(self) -> bool """
    return True

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def splitter(self):
    """ splitter(self) -> QSplitter """
    return QSplitter()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QStackedLayout(QLayout):
  """ QStackedLayout()
  QStackedLayout(QWidget)
  QStackedLayout(QLayout) """

  SetDefaultConstraint = None
  SetFixedSize = None
  SetMaximumSize = None
  SetMinAndMaxSize = None
  SetMinimumSize = None
  SetNoConstraint = None
  StackAll = None
  StackOne = None

  class StackingMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self):
    pass

  def activate(self):
    """ activate(self) -> bool """
    return True

  def addChildLayout():
    pass

  def addChildWidget():
    pass

  def addItem(self, QLayoutItem):
    """ addItem(self, QLayoutItem) """
    pass

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) -> int """
    return 1

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def alignmentRect():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closestAcceptableSize(QWidget, QtCore.QSize):
    """ closestAcceptableSize(QWidget, QSize) -> QSize """
    return QtCore.QSize()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def count(self):
    """ count(self) -> int """
    return 1

  def currentChanged(self, int):
    """ currentChanged(self, int) [signal] """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def currentWidget(self):
    """ currentWidget(self) -> QWidget """
    return QWidget()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int
    indexOf(self, QLayoutItem) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def insertWidget(self, int, QWidget):
    """ insertWidget(self, int, QWidget) -> int """
    return 1

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def menuBar(self):
    """ menuBar(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QLayoutItem):
    """ removeItem(self, QLayoutItem) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def replaceWidget(self, QWidget, QWidget, arg0=None, arg1=None):
    """ replaceWidget(self, QWidget, QWidget, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QLayoutItem """
    return QLayoutItem()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAlignment(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    return True

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCurrentWidget(self, QWidget):
    """ setCurrentWidget(self, QWidget) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def setMenuBar(self, QWidget):
    """ setMenuBar(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSizeConstraint(self, arg0):
    """ setSizeConstraint(self, QLayout.SizeConstraint) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setStackingMode(self, arg0):
    """ setStackingMode(self, QStackedLayout.StackingMode) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeConstraint(self):
    """ sizeConstraint(self) -> QLayout.SizeConstraint """
    return QLayout.SizeConstraint()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def stackingMode(self):
    """ stackingMode(self) -> QStackedLayout.StackingMode """
    return QStackedLayout.StackingMode()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def takeAt(self, int):
    """ takeAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalHeightForWidth(self, int):
    """ totalHeightForWidth(self, int) -> int """
    return 1

  def totalMaximumSize(self):
    """ totalMaximumSize(self) -> QSize """
    return QtCore.QSize()

  def totalMinimumSize(self):
    """ totalMinimumSize(self) -> QSize """
    return QtCore.QSize()

  def totalSizeHint(self):
    """ totalSizeHint(self) -> QSize """
    return QtCore.QSize()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def widget(self, int):
    """ widget(self, int) -> QWidget
    widget(self) -> QWidget """
    return QWidget()

  def widgetEvent():
    pass

  def widgetRemoved(self, int):
    """ widgetRemoved(self, int) [signal] """
    pass

class QStackedWidget(QFrame):
  """ QStackedWidget(parent: QWidget = None) """

  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) -> int """
    return 1

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, int):
    """ currentChanged(self, int) [signal] """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def currentWidget(self):
    """ currentWidget(self) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertWidget(self, int, QWidget):
    """ insertWidget(self, int, QWidget) -> int """
    return 1

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCurrentWidget(self, QWidget):
    """ setCurrentWidget(self, QWidget) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self, int):
    """ widget(self, int) -> QWidget """
    return QWidget()

  def widgetRemoved(self, int):
    """ widgetRemoved(self, int) [signal] """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QStatusBar(QWidget):
  """ QStatusBar(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addPermanentWidget(self, QWidget, arg0=None):
    """ addPermanentWidget(self, QWidget, stretch: int = 0) """
    pass

  def addWidget(self, QWidget, arg0=None):
    """ addWidget(self, QWidget, stretch: int = 0) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearMessage(self):
    """ clearMessage(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentMessage(self):
    """ currentMessage(self) -> str """
    return ""

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hideOrShow(self):
    """ hideOrShow(self) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertPermanentWidget(self, int, QWidget, arg0=None):
    """ insertPermanentWidget(self, int, QWidget, stretch: int = 0) -> int """
    return 1

  def insertWidget(self, int, QWidget, arg0=None):
    """ insertWidget(self, int, QWidget, stretch: int = 0) -> int """
    return 1

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def messageChanged(self, str):
    """ messageChanged(self, str) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reformat(self):
    """ reformat(self) """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMessage(self, str, arg0=None):
    """ showMessage(self, str, msecs: int = 0) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QStyle(QObject):
  """ QStyle() """

  CC_ComboBox = None
  CC_CustomBase = None
  CC_Dial = None
  CC_GroupBox = None
  CC_MdiControls = None
  CC_ScrollBar = None
  CC_Slider = None
  CC_SpinBox = None
  CC_TitleBar = None
  CC_ToolButton = None
  CE_CheckBox = None
  CE_CheckBoxLabel = None
  CE_ColumnViewGrip = None
  CE_ComboBoxLabel = None
  CE_CustomBase = None
  CE_DockWidgetTitle = None
  CE_FocusFrame = None
  CE_Header = None
  CE_HeaderEmptyArea = None
  CE_HeaderLabel = None
  CE_HeaderSection = None
  CE_ItemViewItem = None
  CE_MenuBarEmptyArea = None
  CE_MenuBarItem = None
  CE_MenuEmptyArea = None
  CE_MenuHMargin = None
  CE_MenuItem = None
  CE_MenuScroller = None
  CE_MenuTearoff = None
  CE_MenuVMargin = None
  CE_ProgressBar = None
  CE_ProgressBarContents = None
  CE_ProgressBarGroove = None
  CE_ProgressBarLabel = None
  CE_PushButton = None
  CE_PushButtonBevel = None
  CE_PushButtonLabel = None
  CE_RadioButton = None
  CE_RadioButtonLabel = None
  CE_RubberBand = None
  CE_ScrollBarAddLine = None
  CE_ScrollBarAddPage = None
  CE_ScrollBarFirst = None
  CE_ScrollBarLast = None
  CE_ScrollBarSlider = None
  CE_ScrollBarSubLine = None
  CE_ScrollBarSubPage = None
  CE_ShapedFrame = None
  CE_SizeGrip = None
  CE_Splitter = None
  CE_TabBarTab = None
  CE_TabBarTabLabel = None
  CE_TabBarTabShape = None
  CE_ToolBar = None
  CE_ToolBoxTab = None
  CE_ToolBoxTabLabel = None
  CE_ToolBoxTabShape = None
  CE_ToolButtonLabel = None
  CT_CheckBox = None
  CT_ComboBox = None
  CT_CustomBase = None
  CT_DialogButtons = None
  CT_GroupBox = None
  CT_HeaderSection = None
  CT_ItemViewItem = None
  CT_LineEdit = None
  CT_MdiControls = None
  CT_Menu = None
  CT_MenuBar = None
  CT_MenuBarItem = None
  CT_MenuItem = None
  CT_ProgressBar = None
  CT_PushButton = None
  CT_RadioButton = None
  CT_ScrollBar = None
  CT_SizeGrip = None
  CT_Slider = None
  CT_SpinBox = None
  CT_Splitter = None
  CT_TabBarTab = None
  CT_TabWidget = None
  CT_ToolButton = None
  PE_CustomBase = None
  PE_Frame = None
  PE_FrameButtonBevel = None
  PE_FrameButtonTool = None
  PE_FrameDefaultButton = None
  PE_FrameDockWidget = None
  PE_FrameFocusRect = None
  PE_FrameGroupBox = None
  PE_FrameLineEdit = None
  PE_FrameMenu = None
  PE_FrameStatusBar = None
  PE_FrameStatusBarItem = None
  PE_FrameTabBarBase = None
  PE_FrameTabWidget = None
  PE_FrameWindow = None
  PE_IndicatorArrowDown = None
  PE_IndicatorArrowLeft = None
  PE_IndicatorArrowRight = None
  PE_IndicatorArrowUp = None
  PE_IndicatorBranch = None
  PE_IndicatorButtonDropDown = None
  PE_IndicatorCheckBox = None
  PE_IndicatorColumnViewArrow = None
  PE_IndicatorDockWidgetResizeHandle = None
  PE_IndicatorHeaderArrow = None
  PE_IndicatorItemViewItemCheck = None
  PE_IndicatorItemViewItemDrop = None
  PE_IndicatorMenuCheckMark = None
  PE_IndicatorProgressChunk = None
  PE_IndicatorRadioButton = None
  PE_IndicatorSpinDown = None
  PE_IndicatorSpinMinus = None
  PE_IndicatorSpinPlus = None
  PE_IndicatorSpinUp = None
  PE_IndicatorTabClose = None
  PE_IndicatorTabTear = None
  PE_IndicatorTabTearLeft = None
  PE_IndicatorTabTearRight = None
  PE_IndicatorToolBarHandle = None
  PE_IndicatorToolBarSeparator = None
  PE_IndicatorViewItemCheck = None
  PE_PanelButtonBevel = None
  PE_PanelButtonCommand = None
  PE_PanelButtonTool = None
  PE_PanelItemViewItem = None
  PE_PanelItemViewRow = None
  PE_PanelLineEdit = None
  PE_PanelMenu = None
  PE_PanelMenuBar = None
  PE_PanelScrollAreaCorner = None
  PE_PanelStatusBar = None
  PE_PanelTipLabel = None
  PE_PanelToolBar = None
  PE_Widget = None
  PM_ButtonDefaultIndicator = None
  PM_ButtonIconSize = None
  PM_ButtonMargin = None
  PM_ButtonShiftHorizontal = None
  PM_ButtonShiftVertical = None
  PM_CheckBoxLabelSpacing = None
  PM_ComboBoxFrameWidth = None
  PM_CustomBase = None
  PM_DefaultChildMargin = None
  PM_DefaultFrameWidth = None
  PM_DefaultLayoutSpacing = None
  PM_DefaultTopLevelMargin = None
  PM_DialogButtonsButtonHeight = None
  PM_DialogButtonsButtonWidth = None
  PM_DialogButtonsSeparator = None
  PM_DockWidgetFrameWidth = None
  PM_DockWidgetHandleExtent = None
  PM_DockWidgetSeparatorExtent = None
  PM_DockWidgetTitleBarButtonMargin = None
  PM_DockWidgetTitleMargin = None
  PM_ExclusiveIndicatorHeight = None
  PM_ExclusiveIndicatorWidth = None
  PM_FocusFrameHMargin = None
  PM_FocusFrameVMargin = None
  PM_HeaderDefaultSectionSizeHorizontal = None
  PM_HeaderDefaultSectionSizeVertical = None
  PM_HeaderGripMargin = None
  PM_HeaderMargin = None
  PM_HeaderMarkSize = None
  PM_IconViewIconSize = None
  PM_IndicatorHeight = None
  PM_IndicatorWidth = None
  PM_LargeIconSize = None
  PM_LayoutBottomMargin = None
  PM_LayoutHorizontalSpacing = None
  PM_LayoutLeftMargin = None
  PM_LayoutRightMargin = None
  PM_LayoutTopMargin = None
  PM_LayoutVerticalSpacing = None
  PM_ListViewIconSize = None
  PM_MDIFrameWidth = None
  PM_MDIMinimizedWidth = None
  PM_MaximumDragDistance = None
  PM_MdiSubWindowFrameWidth = None
  PM_MdiSubWindowMinimizedWidth = None
  PM_MenuBarHMargin = None
  PM_MenuBarItemSpacing = None
  PM_MenuBarPanelWidth = None
  PM_MenuBarVMargin = None
  PM_MenuButtonIndicator = None
  PM_MenuDesktopFrameWidth = None
  PM_MenuHMargin = None
  PM_MenuPanelWidth = None
  PM_MenuScrollerHeight = None
  PM_MenuTearoffHeight = None
  PM_MenuVMargin = None
  PM_MessageBoxIconSize = None
  PM_ProgressBarChunkWidth = None
  PM_RadioButtonLabelSpacing = None
  PM_ScrollBarExtent = None
  PM_ScrollBarSliderMin = None
  PM_ScrollView_ScrollBarOverlap = None
  PM_ScrollView_ScrollBarSpacing = None
  PM_SizeGripSize = None
  PM_SliderControlThickness = None
  PM_SliderLength = None
  PM_SliderSpaceAvailable = None
  PM_SliderThickness = None
  PM_SliderTickmarkOffset = None
  PM_SmallIconSize = None
  PM_SpinBoxFrameWidth = None
  PM_SpinBoxSliderHeight = None
  PM_SplitterWidth = None
  PM_SubMenuOverlap = None
  PM_TabBarBaseHeight = None
  PM_TabBarBaseOverlap = None
  PM_TabBarIconSize = None
  PM_TabBarScrollButtonWidth = None
  PM_TabBarTabHSpace = None
  PM_TabBarTabOverlap = None
  PM_TabBarTabShiftHorizontal = None
  PM_TabBarTabShiftVertical = None
  PM_TabBarTabVSpace = None
  PM_TabBar_ScrollButtonOverlap = None
  PM_TabCloseIndicatorHeight = None
  PM_TabCloseIndicatorWidth = None
  PM_TextCursorWidth = None
  PM_TitleBarButtonIconSize = None
  PM_TitleBarButtonSize = None
  PM_TitleBarHeight = None
  PM_ToolBarExtensionExtent = None
  PM_ToolBarFrameWidth = None
  PM_ToolBarHandleExtent = None
  PM_ToolBarIconSize = None
  PM_ToolBarItemMargin = None
  PM_ToolBarItemSpacing = None
  PM_ToolBarSeparatorExtent = None
  PM_ToolTipLabelFrameWidth = None
  PM_TreeViewIndentation = None
  RSIP_OnMouseClick = None
  RSIP_OnMouseClickAndAlreadyFocused = None
  SC_All = None
  SC_ComboBoxArrow = None
  SC_ComboBoxEditField = None
  SC_ComboBoxFrame = None
  SC_ComboBoxListBoxPopup = None
  SC_CustomBase = None
  SC_DialGroove = None
  SC_DialHandle = None
  SC_DialTickmarks = None
  SC_GroupBoxCheckBox = None
  SC_GroupBoxContents = None
  SC_GroupBoxFrame = None
  SC_GroupBoxLabel = None
  SC_MdiCloseButton = None
  SC_MdiMinButton = None
  SC_MdiNormalButton = None
  SC_None = None
  SC_ScrollBarAddLine = None
  SC_ScrollBarAddPage = None
  SC_ScrollBarFirst = None
  SC_ScrollBarGroove = None
  SC_ScrollBarLast = None
  SC_ScrollBarSlider = None
  SC_ScrollBarSubLine = None
  SC_ScrollBarSubPage = None
  SC_SliderGroove = None
  SC_SliderHandle = None
  SC_SliderTickmarks = None
  SC_SpinBoxDown = None
  SC_SpinBoxEditField = None
  SC_SpinBoxFrame = None
  SC_SpinBoxUp = None
  SC_TitleBarCloseButton = None
  SC_TitleBarContextHelpButton = None
  SC_TitleBarLabel = None
  SC_TitleBarMaxButton = None
  SC_TitleBarMinButton = None
  SC_TitleBarNormalButton = None
  SC_TitleBarShadeButton = None
  SC_TitleBarSysMenu = None
  SC_TitleBarUnshadeButton = None
  SC_ToolButton = None
  SC_ToolButtonMenu = None
  SE_CheckBoxClickRect = None
  SE_CheckBoxContents = None
  SE_CheckBoxFocusRect = None
  SE_CheckBoxIndicator = None
  SE_CheckBoxLayoutItem = None
  SE_ComboBoxFocusRect = None
  SE_ComboBoxLayoutItem = None
  SE_CustomBase = None
  SE_DateTimeEditLayoutItem = None
  SE_DialogButtonBoxLayoutItem = None
  SE_DockWidgetCloseButton = None
  SE_DockWidgetFloatButton = None
  SE_DockWidgetIcon = None
  SE_DockWidgetTitleBarText = None
  SE_FrameContents = None
  SE_FrameLayoutItem = None
  SE_GroupBoxLayoutItem = None
  SE_HeaderArrow = None
  SE_HeaderLabel = None
  SE_ItemViewItemCheckIndicator = None
  SE_ItemViewItemDecoration = None
  SE_ItemViewItemFocusRect = None
  SE_ItemViewItemText = None
  SE_LabelLayoutItem = None
  SE_LineEditContents = None
  SE_ProgressBarContents = None
  SE_ProgressBarGroove = None
  SE_ProgressBarLabel = None
  SE_ProgressBarLayoutItem = None
  SE_PushButtonContents = None
  SE_PushButtonFocusRect = None
  SE_PushButtonLayoutItem = None
  SE_RadioButtonClickRect = None
  SE_RadioButtonContents = None
  SE_RadioButtonFocusRect = None
  SE_RadioButtonIndicator = None
  SE_RadioButtonLayoutItem = None
  SE_ShapedFrameContents = None
  SE_SliderFocusRect = None
  SE_SliderLayoutItem = None
  SE_SpinBoxLayoutItem = None
  SE_TabBarScrollLeftButton = None
  SE_TabBarScrollRightButton = None
  SE_TabBarTabLeftButton = None
  SE_TabBarTabRightButton = None
  SE_TabBarTabText = None
  SE_TabBarTearIndicator = None
  SE_TabBarTearIndicatorLeft = None
  SE_TabBarTearIndicatorRight = None
  SE_TabWidgetLayoutItem = None
  SE_TabWidgetLeftCorner = None
  SE_TabWidgetRightCorner = None
  SE_TabWidgetTabBar = None
  SE_TabWidgetTabContents = None
  SE_TabWidgetTabPane = None
  SE_ToolBarHandle = None
  SE_ToolBoxTabContents = None
  SE_ToolButtonLayoutItem = None
  SE_TreeViewDisclosureItem = None
  SE_ViewItemCheckIndicator = None
  SH_BlinkCursorWhenTextSelected = None
  SH_Button_FocusPolicy = None
  SH_ComboBox_AllowWheelScrolling = None
  SH_ComboBox_LayoutDirection = None
  SH_ComboBox_ListMouseTracking = None
  SH_ComboBox_Popup = None
  SH_ComboBox_PopupFrameStyle = None
  SH_CustomBase = None
  SH_Dial_BackgroundRole = None
  SH_DialogButtonBox_ButtonsHaveIcons = None
  SH_DialogButtonLayout = None
  SH_DialogButtons_DefaultButton = None
  SH_DitherDisabledText = None
  SH_DockWidget_ButtonsHaveFrame = None
  SH_DrawMenuBarSeparator = None
  SH_EtchDisabledText = None
  SH_FocusFrame_AboveWidget = None
  SH_FocusFrame_Mask = None
  SH_FontDialog_SelectAssociatedText = None
  SH_FormLayoutFieldGrowthPolicy = None
  SH_FormLayoutFormAlignment = None
  SH_FormLayoutLabelAlignment = None
  SH_FormLayoutWrapPolicy = None
  SH_GroupBox_TextLabelColor = None
  SH_GroupBox_TextLabelVerticalAlignment = None
  SH_Header_ArrowAlignment = None
  SH_ItemView_ActivateItemOnSingleClick = None
  SH_ItemView_ArrowKeysNavigateIntoChildren = None
  SH_ItemView_ChangeHighlightOnFocus = None
  SH_ItemView_DrawDelegateFrame = None
  SH_ItemView_EllipsisLocation = None
  SH_ItemView_MovementWithoutUpdatingSelection = None
  SH_ItemView_PaintAlternatingRowColorsForEmptyArea = None
  SH_ItemView_ScrollMode = None
  SH_ItemView_ShowDecorationSelected = None
  SH_LineEdit_PasswordCharacter = None
  SH_LineEdit_PasswordMaskDelay = None
  SH_ListViewExpand_SelectMouseType = None
  SH_MainWindow_SpaceBelowMenuBar = None
  SH_MenuBar_AltKeyNavigation = None
  SH_MenuBar_MouseTracking = None
  SH_Menu_AllowActiveAndDisabled = None
  SH_Menu_FadeOutOnHide = None
  SH_Menu_FillScreenWithScroll = None
  SH_Menu_FlashTriggeredItem = None
  SH_Menu_KeyboardSearch = None
  SH_Menu_Mask = None
  SH_Menu_MouseTracking = None
  SH_Menu_Scrollable = None
  SH_Menu_SelectionWrap = None
  SH_Menu_SloppySubMenus = None
  SH_Menu_SpaceActivatesItem = None
  SH_Menu_SubMenuDontStartSloppyOnLeave = None
  SH_Menu_SubMenuPopupDelay = None
  SH_Menu_SubMenuResetWhenReenteringParent = None
  SH_Menu_SubMenuSloppyCloseTimeout = None
  SH_Menu_SubMenuSloppySelectOtherActions = None
  SH_Menu_SubMenuUniDirection = None
  SH_Menu_SubMenuUniDirectionFailCount = None
  SH_Menu_SupportsSections = None
  SH_MessageBox_CenterButtons = None
  SH_MessageBox_TextInteractionFlags = None
  SH_MessageBox_UseBorderForButtonSpacing = None
  SH_PrintDialog_RightAlignButtons = None
  SH_ProgressDialog_CenterCancelButton = None
  SH_ProgressDialog_TextLabelAlignment = None
  SH_RequestSoftwareInputPanel = None
  SH_RichText_FullWidthSelection = None
  SH_RubberBand_Mask = None
  SH_ScrollBar_ContextMenu = None
  SH_ScrollBar_LeftClickAbsolutePosition = None
  SH_ScrollBar_MiddleClickAbsolutePosition = None
  SH_ScrollBar_RollBetweenButtons = None
  SH_ScrollBar_ScrollWhenPointerLeavesControl = None
  SH_ScrollBar_StopMouseOverSlider = None
  SH_ScrollBar_Transient = None
  SH_ScrollView_FrameOnlyAroundContents = None
  SH_Slider_AbsoluteSetButtons = None
  SH_Slider_PageSetButtons = None
  SH_Slider_SloppyKeyEvents = None
  SH_Slider_SnapToValue = None
  SH_Slider_StopMouseOverSlider = None
  SH_SpellCheckUnderlineStyle = None
  SH_SpinBox_AnimateButton = None
  SH_SpinBox_ButtonsInsideFrame = None
  SH_SpinBox_ClickAutoRepeatRate = None
  SH_SpinBox_ClickAutoRepeatThreshold = None
  SH_SpinBox_KeyPressAutoRepeatRate = None
  SH_SpinBox_StepModifier = None
  SH_SpinControls_DisableOnBounds = None
  SH_Splitter_OpaqueResize = None
  SH_TabBar_Alignment = None
  SH_TabBar_ChangeCurrentDelay = None
  SH_TabBar_CloseButtonPosition = None
  SH_TabBar_ElideMode = None
  SH_TabBar_PreferNoArrows = None
  SH_TabBar_SelectMouseType = None
  SH_TabWidget_DefaultTabPosition = None
  SH_Table_GridLineColor = None
  SH_TextControl_FocusIndicatorTextCharFormat = None
  SH_TitleBar_AutoRaise = None
  SH_TitleBar_ModifyNotification = None
  SH_TitleBar_NoBorder = None
  SH_TitleBar_ShowToolTipsOnButtons = None
  SH_ToolBar_Movable = None
  SH_ToolBox_SelectedPageTitleBold = None
  SH_ToolButtonStyle = None
  SH_ToolButton_PopupDelay = None
  SH_ToolTipLabel_Opacity = None
  SH_ToolTip_FallAsleepDelay = None
  SH_ToolTip_Mask = None
  SH_ToolTip_WakeUpDelay = None
  SH_UnderlineShortcut = None
  SH_Widget_Animate = None
  SH_Widget_Animation_Duration = None
  SH_Widget_ShareActivation = None
  SH_WindowFrame_Mask = None
  SH_WizardStyle = None
  SH_Workspace_FillSpaceOnMaximize = None
  SP_ArrowBack = None
  SP_ArrowDown = None
  SP_ArrowForward = None
  SP_ArrowLeft = None
  SP_ArrowRight = None
  SP_ArrowUp = None
  SP_BrowserReload = None
  SP_BrowserStop = None
  SP_CommandLink = None
  SP_ComputerIcon = None
  SP_CustomBase = None
  SP_DesktopIcon = None
  SP_DialogApplyButton = None
  SP_DialogCancelButton = None
  SP_DialogCloseButton = None
  SP_DialogDiscardButton = None
  SP_DialogHelpButton = None
  SP_DialogNoButton = None
  SP_DialogOkButton = None
  SP_DialogOpenButton = None
  SP_DialogResetButton = None
  SP_DialogSaveButton = None
  SP_DialogYesButton = None
  SP_DirClosedIcon = None
  SP_DirHomeIcon = None
  SP_DirIcon = None
  SP_DirLinkIcon = None
  SP_DirLinkOpenIcon = None
  SP_DirOpenIcon = None
  SP_DockWidgetCloseButton = None
  SP_DriveCDIcon = None
  SP_DriveDVDIcon = None
  SP_DriveFDIcon = None
  SP_DriveHDIcon = None
  SP_DriveNetIcon = None
  SP_FileDialogBack = None
  SP_FileDialogContentsView = None
  SP_FileDialogDetailedView = None
  SP_FileDialogEnd = None
  SP_FileDialogInfoView = None
  SP_FileDialogListView = None
  SP_FileDialogNewFolder = None
  SP_FileDialogStart = None
  SP_FileDialogToParent = None
  SP_FileIcon = None
  SP_FileLinkIcon = None
  SP_LineEditClearButton = None
  SP_MediaPause = None
  SP_MediaPlay = None
  SP_MediaSeekBackward = None
  SP_MediaSeekForward = None
  SP_MediaSkipBackward = None
  SP_MediaSkipForward = None
  SP_MediaStop = None
  SP_MediaVolume = None
  SP_MediaVolumeMuted = None
  SP_MessageBoxCritical = None
  SP_MessageBoxInformation = None
  SP_MessageBoxQuestion = None
  SP_MessageBoxWarning = None
  SP_TitleBarCloseButton = None
  SP_TitleBarContextHelpButton = None
  SP_TitleBarMaxButton = None
  SP_TitleBarMenuButton = None
  SP_TitleBarMinButton = None
  SP_TitleBarNormalButton = None
  SP_TitleBarShadeButton = None
  SP_TitleBarUnshadeButton = None
  SP_ToolBarHorizontalExtensionButton = None
  SP_ToolBarVerticalExtensionButton = None
  SP_TrashIcon = None
  SP_VistaShield = None
  State_Active = None
  State_AutoRaise = None
  State_Bottom = None
  State_Children = None
  State_DownArrow = None
  State_Editing = None
  State_Enabled = None
  State_FocusAtBorder = None
  State_HasFocus = None
  State_Horizontal = None
  State_Item = None
  State_KeyboardFocusChange = None
  State_Mini = None
  State_MouseOver = None
  State_NoChange = None
  State_None = None
  State_Off = None
  State_On = None
  State_Open = None
  State_Raised = None
  State_ReadOnly = None
  State_Selected = None
  State_Sibling = None
  State_Small = None
  State_Sunken = None
  State_Top = None
  State_UpArrow = None
  State_Window = None
  def __init__(self):
    pass

  def alignedRect(arg0, UnionQt.Alignment=None, Qt.AlignmentFlag=None, QSize=None, QRect=None):
    """ alignedRect(Qt.LayoutDirection, Union[Qt.Alignment, Qt.AlignmentFlag], QSize, QRect) -> QRect """
    return QtCore.QRect()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def combinedLayoutSpacing(self, UnionQSizePolicy.ControlTypes=None, QSizePolicy.ControlType=None, UnionQSizePolicy.ControlTypes=None, QSizePolicy.ControlType=None, Qt.Orientation=None, arg0=None, arg1=None):
    """ combinedLayoutSpacing(self, Union[QSizePolicy.ControlTypes, QSizePolicy.ControlType], Union[QSizePolicy.ControlTypes, QSizePolicy.ControlType], Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def drawComplexControl(self, arg0, QStyleOptionComplex, QtGui.QPainter, arg1=None):
    """ drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPainter, widget: QWidget = None) """
    pass

  def drawControl(self, arg0, QStyleOption, QtGui.QPainter, arg1=None):
    """ drawControl(self, QStyle.ControlElement, QStyleOption, QPainter, widget: QWidget = None) """
    pass

  def drawItemPixmap(self, QtGui.QPainter, QtCore.QRect, int, QtGui.QPixmap):
    """ drawItemPixmap(self, QPainter, QRect, int, QPixmap) """
    pass

  def drawItemText(self, QtGui.QPainter, QtCore.QRect, int, QtGui.QPalette, bool, str, arg0=None):
    """ drawItemText(self, QPainter, QRect, int, QPalette, bool, str, textRole: QPalette.ColorRole = QPalette.NoRole) """
    pass

  def drawPrimitive(self, arg0, QStyleOption, QtGui.QPainter, arg1=None):
    """ drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption, QPainter, widget: QWidget = None) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def generatedIconPixmap(self, arg0, QtGui.QPixmap, QStyleOption):
    """ generatedIconPixmap(self, QIcon.Mode, QPixmap, QStyleOption) -> QPixmap """
    return QtGui.QPixmap()

  def hitTestComplexControl(self, arg0, QStyleOptionComplex, QtCore.QPoint, arg1=None):
    """ hitTestComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPoint, widget: QWidget = None) -> QStyle.SubControl """
    return QStyle.SubControl()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemPixmapRect(self, QtCore.QRect, int, QtGui.QPixmap):
    """ itemPixmapRect(self, QRect, int, QPixmap) -> QRect """
    return QtCore.QRect()

  def itemTextRect(self, QtGui.QFontMetrics, QtCore.QRect, int, bool, str):
    """ itemTextRect(self, QFontMetrics, QRect, int, bool, str) -> QRect """
    return QtCore.QRect()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutSpacing(self, arg0, arg1, arg2, arg3=None, arg4=None):
    """ layoutSpacing(self, QSizePolicy.ControlType, QSizePolicy.ControlType, Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def pixelMetric(self, arg0, arg1=None, arg2=None):
    """ pixelMetric(self, QStyle.PixelMetric, option: QStyleOption = None, widget: QWidget = None) -> int """
    return 1

  def polish(self, QWidget):
    """ polish(self, QWidget)
    polish(self, QApplication)
    polish(self, QPalette) -> QPalette """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def proxy(self):
    """ proxy(self) -> QStyle """
    return QStyle()

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeFromContents(self, arg0, QStyleOption, QtCore.QSize, arg1=None):
    """ sizeFromContents(self, QStyle.ContentsType, QStyleOption, QSize, widget: QWidget = None) -> QSize """
    return QtCore.QSize()

  def sliderPositionFromValue(int, int, int, int, arg0=None):
    """ sliderPositionFromValue(int, int, int, int, upsideDown: bool = False) -> int """
    return 1

  def sliderValueFromPosition(int, int, int, int, arg0=None):
    """ sliderValueFromPosition(int, int, int, int, upsideDown: bool = False) -> int """
    return 1

  def standardIcon(self, arg0, arg1=None, arg2=None):
    """ standardIcon(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QIcon """
    return QtGui.QIcon()

  def standardPalette(self):
    """ standardPalette(self) -> QPalette """
    return QtGui.QPalette()

  def standardPixmap(self, arg0, arg1=None, arg2=None):
    """ standardPixmap(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QPixmap """
    return QtGui.QPixmap()

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def styleHint(self, arg0, arg1=None, arg2=None, arg3=None):
    """ styleHint(self, QStyle.StyleHint, option: QStyleOption = None, widget: QWidget = None, returnData: QStyleHintReturn = None) -> int """
    return 1

  def subControlRect(self, arg0, QStyleOptionComplex, arg1, arg2=None):
    """ subControlRect(self, QStyle.ComplexControl, QStyleOptionComplex, QStyle.SubControl, widget: QWidget = None) -> QRect """
    return QtCore.QRect()

  def subElementRect(self, arg0, QStyleOption, arg1=None):
    """ subElementRect(self, QStyle.SubElement, QStyleOption, widget: QWidget = None) -> QRect """
    return QtCore.QRect()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unpolish(self, QWidget):
    """ unpolish(self, QWidget)
    unpolish(self, QApplication) """
    pass

  def visualAlignment(arg0, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ visualAlignment(Qt.LayoutDirection, Union[Qt.Alignment, Qt.AlignmentFlag]) -> Qt.Alignment """
    return None

  def visualPos(arg0, QtCore.QRect, QtCore.QPoint):
    """ visualPos(Qt.LayoutDirection, QRect, QPoint) -> QPoint """
    return QtCore.QPoint()

  def visualRect(arg0, QtCore.QRect, QtCore.QRect):
    """ visualRect(Qt.LayoutDirection, QRect, QRect) -> QRect """
    return QtCore.QRect()

class QStyleFactory(simplewrapper):
  """ QStyleFactory()
  QStyleFactory(QStyleFactory) """

  def __init__(self):
    pass

  def create(str):
    """ create(str) -> QStyle """
    return QStyle()

  def keys():
    """ keys() -> List[str] """
    return ""

class QStyleHintReturn(simplewrapper):
  """ QStyleHintReturn(version: int = QStyleOption.StyleOptionVersion.Version, type: int = QStyleHintReturn.HintReturnType.SH_Default)
  QStyleHintReturn(QStyleHintReturn) """

  class HintReturnType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SH_Default = None
  SH_Mask = None
  SH_Variant = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self, arg0=None, arg1=None):
    pass

  type = None
  version = None

class QStyleHintReturnMask(QStyleHintReturn):
  """ QStyleHintReturnMask()
  QStyleHintReturnMask(QStyleHintReturnMask) """

  SH_Default = None
  SH_Mask = None
  SH_Variant = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  region = None
  type = None
  version = None

class QStyleHintReturnVariant(QStyleHintReturn):
  """ QStyleHintReturnVariant()
  QStyleHintReturnVariant(QStyleHintReturnVariant) """

  SH_Default = None
  SH_Mask = None
  SH_Variant = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  type = None
  variant = None
  version = None

class QStyleOption(simplewrapper):
  """ QStyleOption(version: int = QStyleOption.StyleOptionVersion.Version, type: int = QStyleOption.OptionType.SO_Default)
  QStyleOption(QStyleOption) """

  class OptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self, arg0=None, arg1=None):
    pass

  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  state = None
  styleObject = None
  type = None
  version = None

class QStyleOptionButton(QStyleOption):
  """ QStyleOptionButton()
  QStyleOptionButton(QStyleOptionButton) """

  AutoDefaultButton = None

  class ButtonFeature(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ButtonFeatures(simplewrapper):
    """ QStyleOptionButton.ButtonFeatures()
    QStyleOptionButton.ButtonFeatures(Union[QStyleOptionButton.ButtonFeatures, QStyleOptionButton.ButtonFeature])
    QStyleOptionButton.ButtonFeatures(QStyleOptionButton.ButtonFeatures) """

    def __init__(self):
      pass

  CommandLinkButton = None
  DefaultButton = None
  Flat = None
  HasMenu = None
  None_ = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  features = None
  fontMetrics = None
  icon = None
  iconSize = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  state = None
  styleObject = None
  text = None
  type = None
  version = None

class QStyleOptionComboBox(QStyleOptionComplex):
  """ QStyleOptionComboBox()
  QStyleOptionComboBox(QStyleOptionComboBox) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  activeSubControls = None
  currentIcon = None
  currentText = None
  direction = None
  editable = None
  fontMetrics = None
  frame = None
  iconSize = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  popupRect = None
  rect = None
  state = None
  styleObject = None
  subControls = None
  type = None
  version = None

class QStyleOptionComplex(QStyleOption):
  """ QStyleOptionComplex(version: int = QStyleOptionComplex.StyleOptionVersion.Version, type: int = QStyleOption.OptionType.SO_Complex)
  QStyleOptionComplex(QStyleOptionComplex) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self, arg0=None, arg1=None):
    pass

  activeSubControls = None
  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  state = None
  styleObject = None
  subControls = None
  type = None
  version = None

class QStyleOptionDockWidget(QStyleOption):
  """ QStyleOptionDockWidget()
  QStyleOptionDockWidget(QStyleOptionDockWidget) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  closable = None
  direction = None
  floatable = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  movable = None
  palette = None
  rect = None
  state = None
  styleObject = None
  title = None
  type = None
  version = None
  verticalTitleBar = None

class QStyleOptionFocusRect(QStyleOption):
  """ QStyleOptionFocusRect()
  QStyleOptionFocusRect(QStyleOptionFocusRect) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  backgroundColor = None
  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  state = None
  styleObject = None
  type = None
  version = None

class QStyleOptionFrame(QStyleOption):
  """ QStyleOptionFrame()
  QStyleOptionFrame(QStyleOptionFrame) """

  Flat = None

  class FrameFeature(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FrameFeatures(simplewrapper):
    """ QStyleOptionFrame.FrameFeatures()
    QStyleOptionFrame.FrameFeatures(Union[QStyleOptionFrame.FrameFeatures, QStyleOptionFrame.FrameFeature])
    QStyleOptionFrame.FrameFeatures(QStyleOptionFrame.FrameFeatures) """

    def __init__(self):
      pass

  None_ = None
  Rounded = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  features = None
  fontMetrics = None
  frameShape = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  lineWidth = None
  midLineWidth = None
  palette = None
  rect = None
  state = None
  styleObject = None
  type = None
  version = None

class QStyleOptionGraphicsItem(QStyleOption):
  """ QStyleOptionGraphicsItem()
  QStyleOptionGraphicsItem(QStyleOptionGraphicsItem) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  exposedRect = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  def levelOfDetailFromTransform(QtGui.QTransform):
    """ levelOfDetailFromTransform(QTransform) -> float """
    return 1.0

  palette = None
  rect = None
  state = None
  styleObject = None
  type = None
  version = None

class QStyleOptionGroupBox(QStyleOptionComplex):
  """ QStyleOptionGroupBox()
  QStyleOptionGroupBox(QStyleOptionGroupBox) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  activeSubControls = None
  direction = None
  features = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  lineWidth = None
  midLineWidth = None
  palette = None
  rect = None
  state = None
  styleObject = None
  subControls = None
  text = None
  textAlignment = None
  textColor = None
  type = None
  version = None

class QStyleOptionHeader(QStyleOption):
  """ QStyleOptionHeader()
  QStyleOptionHeader(QStyleOptionHeader) """

  Beginning = None
  End = None
  Middle = None
  NextAndPreviousAreSelected = None
  NextIsSelected = None
  None_ = None
  NotAdjacent = None
  OnlyOneSection = None
  PreviousIsSelected = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class SectionPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SelectedPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SortDown = None

  class SortIndicator(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SortUp = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  fontMetrics = None
  icon = None
  iconAlignment = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  orientation = None
  palette = None
  position = None
  rect = None
  section = None
  selectedPosition = None
  sortIndicator = None
  state = None
  styleObject = None
  text = None
  textAlignment = None
  type = None
  version = None

class QStyleOptionMenuItem(QStyleOption):
  """ QStyleOptionMenuItem()
  QStyleOptionMenuItem(QStyleOptionMenuItem) """

  class CheckType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DefaultItem = None
  EmptyArea = None
  Exclusive = None
  Margin = None

  class MenuItemType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NonExclusive = None
  Normal = None
  NotCheckable = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None
  Scroller = None
  Separator = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SubMenu = None
  TearOff = None
  Type = None
  Version = None

  def __init__(self):
    pass

  checkType = None
  checked = None
  direction = None
  font = None
  fontMetrics = None
  icon = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  maxIconWidth = None
  menuHasCheckableItems = None
  menuItemType = None
  menuRect = None
  palette = None
  rect = None
  state = None
  styleObject = None
  tabWidth = None
  text = None
  type = None
  version = None

class QStyleOptionProgressBar(QStyleOption):
  """ QStyleOptionProgressBar()
  QStyleOptionProgressBar(QStyleOptionProgressBar) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  bottomToTop = None
  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  invertedAppearance = None
  maximum = None
  minimum = None
  orientation = None
  palette = None
  progress = None
  rect = None
  state = None
  styleObject = None
  text = None
  textAlignment = None
  textVisible = None
  type = None
  version = None

class QStyleOptionRubberBand(QStyleOption):
  """ QStyleOptionRubberBand()
  QStyleOptionRubberBand(QStyleOptionRubberBand) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  opaque = None
  palette = None
  rect = None
  shape = None
  state = None
  styleObject = None
  type = None
  version = None

class QStyleOptionSizeGrip(QStyleOptionComplex):
  """ QStyleOptionSizeGrip()
  QStyleOptionSizeGrip(QStyleOptionSizeGrip) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  activeSubControls = None
  corner = None
  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  state = None
  styleObject = None
  subControls = None
  type = None
  version = None

class QStyleOptionSlider(QStyleOptionComplex):
  """ QStyleOptionSlider()
  QStyleOptionSlider(QStyleOptionSlider) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  activeSubControls = None
  dialWrapping = None
  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  maximum = None
  minimum = None
  notchTarget = None
  orientation = None
  pageStep = None
  palette = None
  rect = None
  singleStep = None
  sliderPosition = None
  sliderValue = None
  state = None
  styleObject = None
  subControls = None
  tickInterval = None
  tickPosition = None
  type = None
  upsideDown = None
  version = None

class QStyleOptionSpinBox(QStyleOptionComplex):
  """ QStyleOptionSpinBox()
  QStyleOptionSpinBox(QStyleOptionSpinBox) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  activeSubControls = None
  buttonSymbols = None
  direction = None
  fontMetrics = None
  frame = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  state = None
  stepEnabled = None
  styleObject = None
  subControls = None
  type = None
  version = None

class QStyleOptionTab(QStyleOption):
  """ QStyleOptionTab()
  QStyleOptionTab(QStyleOptionTab) """

  Beginning = None

  class CornerWidget(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class CornerWidgets(simplewrapper):
    """ QStyleOptionTab.CornerWidgets()
    QStyleOptionTab.CornerWidgets(Union[QStyleOptionTab.CornerWidgets, QStyleOptionTab.CornerWidget])
    QStyleOptionTab.CornerWidgets(QStyleOptionTab.CornerWidgets) """

    def __init__(self):
      pass

  End = None
  HasFrame = None
  LeftCornerWidget = None
  Middle = None
  NextIsSelected = None
  NoCornerWidgets = None
  None_ = None
  NotAdjacent = None
  OnlyOneTab = None
  PreviousIsSelected = None
  RightCornerWidget = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class SelectedPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TabFeature(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TabFeatures(simplewrapper):
    """ QStyleOptionTab.TabFeatures()
    QStyleOptionTab.TabFeatures(Union[QStyleOptionTab.TabFeatures, QStyleOptionTab.TabFeature])
    QStyleOptionTab.TabFeatures(QStyleOptionTab.TabFeatures) """

    def __init__(self):
      pass

  class TabPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  cornerWidgets = None
  direction = None
  documentMode = None
  features = None
  fontMetrics = None
  icon = None
  iconSize = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  leftButtonSize = None
  palette = None
  position = None
  rect = None
  rightButtonSize = None
  row = None
  selectedPosition = None
  shape = None
  state = None
  styleObject = None
  text = None
  type = None
  version = None

class QStyleOptionTabBarBase(QStyleOption):
  """ QStyleOptionTabBarBase()
  QStyleOptionTabBarBase(QStyleOptionTabBarBase) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  documentMode = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  selectedTabRect = None
  shape = None
  state = None
  styleObject = None
  tabBarRect = None
  type = None
  version = None

class QStyleOptionTabWidgetFrame(QStyleOption):
  """ QStyleOptionTabWidgetFrame()
  QStyleOptionTabWidgetFrame(QStyleOptionTabWidgetFrame) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  leftCornerWidgetSize = None
  lineWidth = None
  midLineWidth = None
  palette = None
  rect = None
  rightCornerWidgetSize = None
  selectedTabRect = None
  shape = None
  state = None
  styleObject = None
  tabBarRect = None
  tabBarSize = None
  type = None
  version = None

class QStyleOptionTitleBar(QStyleOptionComplex):
  """ QStyleOptionTitleBar()
  QStyleOptionTitleBar(QStyleOptionTitleBar) """

  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  activeSubControls = None
  direction = None
  fontMetrics = None
  icon = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  rect = None
  state = None
  styleObject = None
  subControls = None
  text = None
  titleBarFlags = None
  titleBarState = None
  type = None
  version = None

class QStyleOptionToolBar(QStyleOption):
  """ QStyleOptionToolBar()
  QStyleOptionToolBar(QStyleOptionToolBar) """

  Beginning = None
  End = None
  Middle = None
  Movable = None
  None_ = None
  OnlyOne = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ToolBarFeature(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ToolBarFeatures(simplewrapper):
    """ QStyleOptionToolBar.ToolBarFeatures()
    QStyleOptionToolBar.ToolBarFeatures(Union[QStyleOptionToolBar.ToolBarFeatures, QStyleOptionToolBar.ToolBarFeature])
    QStyleOptionToolBar.ToolBarFeatures(QStyleOptionToolBar.ToolBarFeatures) """

    def __init__(self):
      pass

  class ToolBarPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  features = None
  fontMetrics = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  lineWidth = None
  midLineWidth = None
  palette = None
  positionOfLine = None
  positionWithinLine = None
  rect = None
  state = None
  styleObject = None
  toolBarArea = None
  type = None
  version = None

class QStyleOptionToolBox(QStyleOption):
  """ QStyleOptionToolBox()
  QStyleOptionToolBox(QStyleOptionToolBox) """

  Beginning = None
  End = None
  Middle = None
  NextIsSelected = None
  NotAdjacent = None
  OnlyOneTab = None
  PreviousIsSelected = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class SelectedPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TabPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  Version = None

  def __init__(self):
    pass

  direction = None
  fontMetrics = None
  icon = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  position = None
  rect = None
  selectedPosition = None
  state = None
  styleObject = None
  text = None
  type = None
  version = None

class QStyleOptionToolButton(QStyleOptionComplex):
  """ QStyleOptionToolButton()
  QStyleOptionToolButton(QStyleOptionToolButton) """

  Arrow = None
  HasMenu = None
  Menu = None
  MenuButtonPopup = None
  None_ = None
  PopupDelay = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ToolButtonFeature(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ToolButtonFeatures(simplewrapper):
    """ QStyleOptionToolButton.ToolButtonFeatures()
    QStyleOptionToolButton.ToolButtonFeatures(Union[QStyleOptionToolButton.ToolButtonFeatures, QStyleOptionToolButton.ToolButtonFeature])
    QStyleOptionToolButton.ToolButtonFeatures(QStyleOptionToolButton.ToolButtonFeatures) """

    def __init__(self):
      pass

  Type = None
  Version = None

  def __init__(self):
    pass

  activeSubControls = None
  arrowType = None
  direction = None
  features = None
  font = None
  fontMetrics = None
  icon = None
  iconSize = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  palette = None
  pos = None
  rect = None
  state = None
  styleObject = None
  subControls = None
  text = None
  toolButtonStyle = None
  type = None
  version = None

class QStyleOptionViewItem(QStyleOption):
  """ QStyleOptionViewItem()
  QStyleOptionViewItem(QStyleOptionViewItem) """

  Alternate = None
  Beginning = None
  Bottom = None
  End = None
  HasCheckIndicator = None
  HasDecoration = None
  HasDisplay = None
  Invalid = None
  Left = None
  Middle = None
  None_ = None
  OnlyOne = None
  class Position(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Right = None
  SO_Button = None
  SO_ComboBox = None
  SO_Complex = None
  SO_ComplexCustomBase = None
  SO_CustomBase = None
  SO_Default = None
  SO_DockWidget = None
  SO_FocusRect = None
  SO_Frame = None
  SO_GraphicsItem = None
  SO_GroupBox = None
  SO_Header = None
  SO_MenuItem = None
  SO_ProgressBar = None
  SO_RubberBand = None
  SO_SizeGrip = None
  SO_Slider = None
  SO_SpinBox = None
  SO_Tab = None
  SO_TabBarBase = None
  SO_TabWidgetFrame = None
  SO_TitleBar = None
  SO_ToolBar = None
  SO_ToolBox = None
  SO_ToolButton = None
  SO_ViewItem = None

  class StyleOptionType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleOptionVersion(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Top = None
  Type = None
  Version = None

  class ViewItemFeature(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ViewItemFeatures(simplewrapper):
    """ QStyleOptionViewItem.ViewItemFeatures()
    QStyleOptionViewItem.ViewItemFeatures(Union[QStyleOptionViewItem.ViewItemFeatures, QStyleOptionViewItem.ViewItemFeature])
    QStyleOptionViewItem.ViewItemFeatures(QStyleOptionViewItem.ViewItemFeatures) """

    def __init__(self):
      pass

  class ViewItemPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WrapText = None

  def __init__(self):
    pass

  backgroundBrush = None
  checkState = None
  decorationAlignment = None
  decorationPosition = None
  decorationSize = None
  direction = None
  displayAlignment = None
  features = None
  font = None
  fontMetrics = None
  icon = None
  index = None

  def initFrom(self, QWidget):
    """ initFrom(self, QWidget) """
    pass

  locale = None
  palette = None
  rect = None
  showDecorationSelected = None
  state = None
  styleObject = None
  text = None
  textElideMode = None
  type = None
  version = None
  viewItemPosition = None
  widget = None

class QStylePainter(QPainter):
  """ QStylePainter()
  QStylePainter(QWidget)
  QStylePainter(QPaintDevice, QWidget) """

  Antialiasing = None

  class CompositionMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CompositionMode_Clear = None
  CompositionMode_ColorBurn = None
  CompositionMode_ColorDodge = None
  CompositionMode_Darken = None
  CompositionMode_Destination = None
  CompositionMode_DestinationAtop = None
  CompositionMode_DestinationIn = None
  CompositionMode_DestinationOut = None
  CompositionMode_DestinationOver = None
  CompositionMode_Difference = None
  CompositionMode_Exclusion = None
  CompositionMode_HardLight = None
  CompositionMode_Lighten = None
  CompositionMode_Multiply = None
  CompositionMode_Overlay = None
  CompositionMode_Plus = None
  CompositionMode_Screen = None
  CompositionMode_SoftLight = None
  CompositionMode_Source = None
  CompositionMode_SourceAtop = None
  CompositionMode_SourceIn = None
  CompositionMode_SourceOut = None
  CompositionMode_SourceOver = None
  CompositionMode_Xor = None
  HighQualityAntialiasing = None
  LosslessImageRendering = None
  NonCosmeticDefaultPen = None
  OpaqueHint = None

  class PixmapFragment(simplewrapper):
    """ QPainter.PixmapFragment()
    QPainter.PixmapFragment(QPainter.PixmapFragment) """

    def __init__(self):
      pass

    def create(UnionQPointF=None, QPoint=None, QRectF=None, arg0=None, arg1=None, arg2=None, arg3=None):
      """ create(Union[QPointF, QPoint], QRectF, scaleX: float = 1, scaleY: float = 1, rotation: float = 0, opacity: float = 1) -> QPainter.PixmapFragment """
      return QPainter.PixmapFragment()

    height = None
    opacity = None
    rotation = None
    scaleX = None
    scaleY = None
    sourceLeft = None
    sourceTop = None
    width = None
    x = None
    y = None

  class PixmapFragmentHint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PixmapFragmentHints(simplewrapper):
    """ QPainter.PixmapFragmentHints()
    QPainter.PixmapFragmentHints(Union[QPainter.PixmapFragmentHints, QPainter.PixmapFragmentHint])
    QPainter.PixmapFragmentHints(QPainter.PixmapFragmentHints) """

    def __init__(self):
      pass

  Qt4CompatiblePainting = None
  RasterOp_ClearDestination = None
  RasterOp_NotDestination = None
  RasterOp_NotSource = None
  RasterOp_NotSourceAndDestination = None
  RasterOp_NotSourceAndNotDestination = None
  RasterOp_NotSourceOrDestination = None
  RasterOp_NotSourceOrNotDestination = None
  RasterOp_NotSourceXorDestination = None
  RasterOp_SetDestination = None
  RasterOp_SourceAndDestination = None
  RasterOp_SourceAndNotDestination = None
  RasterOp_SourceOrDestination = None
  RasterOp_SourceOrNotDestination = None
  RasterOp_SourceXorDestination = None

  class RenderHint(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RenderHints(simplewrapper):
    """ QPainter.RenderHints()
    QPainter.RenderHints(Union[QPainter.RenderHints, QPainter.RenderHint])
    QPainter.RenderHints(QPainter.RenderHints) """

    def __init__(self):
      pass

  SmoothPixmapTransform = None
  TextAntialiasing = None

  def __init__(self):
    pass

  def background(self):
    """ background(self) -> QBrush """
    return QtGui.QBrush()

  def backgroundMode(self):
    """ backgroundMode(self) -> Qt.BGMode """
    return None

  def begin(self, QWidget):
    """ begin(self, QWidget) -> bool
    begin(self, QPaintDevice, QWidget) -> bool """
    return True

  def beginNativePainting(self):
    """ beginNativePainting(self) """
    pass

  def boundingRect(self, QtCore.QRectF, int, str):
    """ boundingRect(self, QRectF, int, str) -> QRectF
    boundingRect(self, QRect, int, str) -> QRect
    boundingRect(self, QRectF, str, option: QTextOption = QTextOption()) -> QRectF
    boundingRect(self, int, int, int, int, int, str) -> QRect """
    return QtCore.QRectF()

  def brush(self):
    """ brush(self) -> QBrush """
    return QtGui.QBrush()

  def brushOrigin(self):
    """ brushOrigin(self) -> QPoint """
    return QtCore.QPoint()

  def clipBoundingRect(self):
    """ clipBoundingRect(self) -> QRectF """
    return QtCore.QRectF()

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return QtGui.QPainterPath()

  def clipRegion(self):
    """ clipRegion(self) -> QRegion """
    return QtGui.QRegion()

  def combinedTransform(self):
    """ combinedTransform(self) -> QTransform """
    return QtGui.QTransform()

  def compositionMode(self):
    """ compositionMode(self) -> QPainter.CompositionMode """
    return QPainter.CompositionMode()

  def device(self):
    """ device(self) -> QPaintDevice """
    return QtGui.QPaintDevice()

  def deviceTransform(self):
    """ deviceTransform(self) -> QTransform """
    return QtGui.QTransform()

  def drawArc(self, QtCore.QRectF, int, int):
    """ drawArc(self, QRectF, int, int)
    drawArc(self, QRect, int, int)
    drawArc(self, int, int, int, int, int, int) """
    pass

  def drawChord(self, QtCore.QRectF, int, int):
    """ drawChord(self, QRectF, int, int)
    drawChord(self, QRect, int, int)
    drawChord(self, int, int, int, int, int, int) """
    pass

  def drawComplexControl(self, arg0, QStyleOptionComplex):
    """ drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex) """
    pass

  def drawControl(self, arg0, QStyleOption):
    """ drawControl(self, QStyle.ControlElement, QStyleOption) """
    pass

  def drawConvexPolygon(self, UnionQPointF=None, QPoint=None, *):
    """ drawConvexPolygon(self, Union[QPointF, QPoint], *)
    drawConvexPolygon(self, QPolygonF)
    drawConvexPolygon(self, QPoint, *)
    drawConvexPolygon(self, QPolygon) """
    pass

  def drawEllipse(self, QtCore.QRectF):
    """ drawEllipse(self, QRectF)
    drawEllipse(self, QRect)
    drawEllipse(self, int, int, int, int)
    drawEllipse(self, Union[QPointF, QPoint], float, float)
    drawEllipse(self, QPoint, int, int) """
    pass

  def drawGlyphRun(self, UnionQPointF=None, QPoint=None, QGlyphRun=None):
    """ drawGlyphRun(self, Union[QPointF, QPoint], QGlyphRun) """
    pass

  def drawImage(self, QtCore.QRectF, QtGui.QImage):
    """ drawImage(self, QRectF, QImage)
    drawImage(self, QRect, QImage)
    drawImage(self, Union[QPointF, QPoint], QImage)
    drawImage(self, QPoint, QImage)
    drawImage(self, int, int, QImage, sx: int = 0, sy: int = 0, sw: int = -1, sh: int = -1, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, QRectF, QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, QRect, QImage, QRect, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, Union[QPointF, QPoint], QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, QPoint, QImage, QRect, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor) """
    pass

  def drawItemPixmap(self, QtCore.QRect, int, QtGui.QPixmap):
    """ drawItemPixmap(self, QRect, int, QPixmap) """
    pass

  def drawItemText(self, QtCore.QRect, int, QtGui.QPalette, bool, str, arg0=None):
    """ drawItemText(self, QRect, int, QPalette, bool, str, textRole: QPalette.ColorRole = QPalette.NoRole) """
    pass

  def drawLine(self, QtCore.QLineF):
    """ drawLine(self, QLineF)
    drawLine(self, QLine)
    drawLine(self, int, int, int, int)
    drawLine(self, QPoint, QPoint)
    drawLine(self, Union[QPointF, QPoint], Union[QPointF, QPoint]) """
    pass

  def drawLines(self, QtCore.QLineF, arg0):
    """ drawLines(self, QLineF, *)
    drawLines(self, Iterable[QLineF])
    drawLines(self, Union[QPointF, QPoint], *)
    drawLines(self, Iterable[Union[QPointF, QPoint]])
    drawLines(self, QLine, *)
    drawLines(self, Iterable[QLine])
    drawLines(self, QPoint, *)
    drawLines(self, Iterable[QPoint]) """
    pass

  def drawPath(self, QtGui.QPainterPath):
    """ drawPath(self, QPainterPath) """
    pass

  def drawPicture(self, UnionQPointF=None, QPoint=None, QPicture=None):
    """ drawPicture(self, Union[QPointF, QPoint], QPicture)
    drawPicture(self, int, int, QPicture)
    drawPicture(self, QPoint, QPicture) """
    pass

  def drawPie(self, QtCore.QRectF, int, int):
    """ drawPie(self, QRectF, int, int)
    drawPie(self, QRect, int, int)
    drawPie(self, int, int, int, int, int, int) """
    pass

  def drawPixmap(self, QtCore.QRectF, QtGui.QPixmap, QtCore.QRectF):
    """ drawPixmap(self, QRectF, QPixmap, QRectF)
    drawPixmap(self, QRect, QPixmap, QRect)
    drawPixmap(self, Union[QPointF, QPoint], QPixmap)
    drawPixmap(self, QPoint, QPixmap)
    drawPixmap(self, QRect, QPixmap)
    drawPixmap(self, int, int, QPixmap)
    drawPixmap(self, int, int, int, int, QPixmap)
    drawPixmap(self, int, int, int, int, QPixmap, int, int, int, int)
    drawPixmap(self, int, int, QPixmap, int, int, int, int)
    drawPixmap(self, Union[QPointF, QPoint], QPixmap, QRectF)
    drawPixmap(self, QPoint, QPixmap, QRect) """
    pass

  def drawPixmapFragments(self, ListQPainter.PixmapFragment=None, QPixmap=None, arg0=None):
    """ drawPixmapFragments(self, List[QPainter.PixmapFragment], QPixmap, hints: QPainter.PixmapFragmentHints = 0) """
    pass

  def drawPoint(self, UnionQPointF=None, QPoint=None):
    """ drawPoint(self, Union[QPointF, QPoint])
    drawPoint(self, int, int)
    drawPoint(self, QPoint) """
    pass

  def drawPoints(self, UnionQPointF=None, QPoint=None, *):
    """ drawPoints(self, Union[QPointF, QPoint], *)
    drawPoints(self, QPolygonF)
    drawPoints(self, QPoint, *)
    drawPoints(self, QPolygon) """
    pass

  def drawPolygon(self, UnionQPointF=None, QPoint=None, *):
    """ drawPolygon(self, Union[QPointF, QPoint], *)
    drawPolygon(self, QPolygonF, fillRule: Qt.FillRule = Qt.OddEvenFill)
    drawPolygon(self, QPoint, *)
    drawPolygon(self, QPolygon, fillRule: Qt.FillRule = Qt.OddEvenFill) """
    pass

  def drawPolyline(self, UnionQPointF=None, QPoint=None, *):
    """ drawPolyline(self, Union[QPointF, QPoint], *)
    drawPolyline(self, QPolygonF)
    drawPolyline(self, QPoint, *)
    drawPolyline(self, QPolygon) """
    pass

  def drawPrimitive(self, arg0, QStyleOption):
    """ drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption) """
    pass

  def drawRect(self, QtCore.QRectF):
    """ drawRect(self, QRectF)
    drawRect(self, int, int, int, int)
    drawRect(self, QRect) """
    pass

  def drawRects(self, QtCore.QRectF, arg0):
    """ drawRects(self, QRectF, *)
    drawRects(self, Iterable[QRectF])
    drawRects(self, QRect, *)
    drawRects(self, Iterable[QRect]) """
    pass

  def drawRoundedRect(self, QtCore.QRectF, float, float, arg0=None):
    """ drawRoundedRect(self, QRectF, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)
    drawRoundedRect(self, int, int, int, int, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)
    drawRoundedRect(self, QRect, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize) """
    pass

  def drawStaticText(self, UnionQPointF=None, QPoint=None, QStaticText=None):
    """ drawStaticText(self, Union[QPointF, QPoint], QStaticText)
    drawStaticText(self, QPoint, QStaticText)
    drawStaticText(self, int, int, QStaticText) """
    pass

  def drawText(self, UnionQPointF=None, QPoint=None, str=None):
    """ drawText(self, Union[QPointF, QPoint], str)
    drawText(self, QRectF, int, str) -> QRectF
    drawText(self, QRect, int, str) -> QRect
    drawText(self, QRectF, str, option: QTextOption = QTextOption())
    drawText(self, QPoint, str)
    drawText(self, int, int, int, int, int, str) -> QRect
    drawText(self, int, int, str) """
    pass

  def drawTiledPixmap(self, QtCore.QRectF, QtGui.QPixmap, arg0=None, arg1=None):
    """ drawTiledPixmap(self, QRectF, QPixmap, pos: Union[QPointF, QPoint] = QPointF())
    drawTiledPixmap(self, QRect, QPixmap, pos: QPoint = QPoint())
    drawTiledPixmap(self, int, int, int, int, QPixmap, sx: int = 0, sy: int = 0) """
    pass

  def end(self):
    """ end(self) -> bool """
    return True

  def endNativePainting(self):
    """ endNativePainting(self) """
    pass

  def eraseRect(self, QtCore.QRectF):
    """ eraseRect(self, QRectF)
    eraseRect(self, QRect)
    eraseRect(self, int, int, int, int) """
    pass

  def fillPath(self, QtGui.QPainterPath, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ fillPath(self, QPainterPath, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def fillRect(self, QtCore.QRectF, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ fillRect(self, QRectF, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    fillRect(self, QRect, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    fillRect(self, int, int, int, int, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    fillRect(self, QRectF, Union[QColor, Qt.GlobalColor, QGradient])
    fillRect(self, QRect, Union[QColor, Qt.GlobalColor, QGradient])
    fillRect(self, int, int, int, int, Union[QColor, Qt.GlobalColor, QGradient])
    fillRect(self, int, int, int, int, Qt.GlobalColor)
    fillRect(self, QRect, Qt.GlobalColor)
    fillRect(self, QRectF, Qt.GlobalColor)
    fillRect(self, int, int, int, int, Qt.BrushStyle)
    fillRect(self, QRect, Qt.BrushStyle)
    fillRect(self, QRectF, Qt.BrushStyle)
    fillRect(self, int, int, int, int, QGradient.Preset)
    fillRect(self, QRect, QGradient.Preset)
    fillRect(self, QRectF, QGradient.Preset) """
    pass

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def hasClipping(self):
    """ hasClipping(self) -> bool """
    return True

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def pen(self):
    """ pen(self) -> QPen """
    return QtGui.QPen()

  def renderHints(self):
    """ renderHints(self) -> QPainter.RenderHints """
    return QPainter.RenderHints()

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def restore(self):
    """ restore(self) """
    pass

  def rotate(self, float):
    """ rotate(self, float) """
    pass

  def save(self):
    """ save(self) """
    pass

  def scale(self, float, float):
    """ scale(self, float, float) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBackgroundMode(self, arg0):
    """ setBackgroundMode(self, Qt.BGMode) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    setBrush(self, Qt.BrushStyle) """
    pass

  def setBrushOrigin(self, UnionQPointF=None, QPoint=None):
    """ setBrushOrigin(self, Union[QPointF, QPoint])
    setBrushOrigin(self, int, int)
    setBrushOrigin(self, QPoint) """
    pass

  def setClipPath(self, QtGui.QPainterPath, arg0=None):
    """ setClipPath(self, QPainterPath, operation: Qt.ClipOperation = Qt.ReplaceClip) """
    pass

  def setClipRect(self, QtCore.QRectF, arg0=None):
    """ setClipRect(self, QRectF, operation: Qt.ClipOperation = Qt.ReplaceClip)
    setClipRect(self, int, int, int, int, operation: Qt.ClipOperation = Qt.ReplaceClip)
    setClipRect(self, QRect, operation: Qt.ClipOperation = Qt.ReplaceClip) """
    pass

  def setClipRegion(self, QtGui.QRegion, arg0=None):
    """ setClipRegion(self, QRegion, operation: Qt.ClipOperation = Qt.ReplaceClip) """
    pass

  def setClipping(self, bool):
    """ setClipping(self, bool) """
    pass

  def setCompositionMode(self, arg0):
    """ setCompositionMode(self, QPainter.CompositionMode) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPen(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QColor, Qt.GlobalColor, QGradient])
    setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient])
    setPen(self, Qt.PenStyle) """
    pass

  def setRenderHint(self, arg0, arg1=None):
    """ setRenderHint(self, QPainter.RenderHint, on: bool = True) """
    pass

  def setRenderHints(self, UnionQPainter.RenderHints=None, QPainter.RenderHint=None, arg0=None):
    """ setRenderHints(self, Union[QPainter.RenderHints, QPainter.RenderHint], on: bool = True) """
    pass

  def setTransform(self, QtGui.QTransform, arg0=None):
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setViewTransformEnabled(self, bool):
    """ setViewTransformEnabled(self, bool) """
    pass

  def setViewport(self, QtCore.QRect):
    """ setViewport(self, QRect)
    setViewport(self, int, int, int, int) """
    pass

  def setWindow(self, QtCore.QRect):
    """ setWindow(self, QRect)
    setWindow(self, int, int, int, int) """
    pass

  def setWorldMatrixEnabled(self, bool):
    """ setWorldMatrixEnabled(self, bool) """
    pass

  def setWorldTransform(self, QtGui.QTransform, arg0=None):
    """ setWorldTransform(self, QTransform, combine: bool = False) """
    pass

  def shear(self, float, float):
    """ shear(self, float, float) """
    pass

  def strokePath(self, QtGui.QPainterPath, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ strokePath(self, QPainterPath, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def testRenderHint(self, arg0):
    """ testRenderHint(self, QPainter.RenderHint) -> bool """
    return True

  def transform(self):
    """ transform(self) -> QTransform """
    return QtGui.QTransform()

  def translate(self, UnionQPointF=None, QPoint=None):
    """ translate(self, Union[QPointF, QPoint])
    translate(self, float, float)
    translate(self, QPoint) """
    pass

  def viewTransformEnabled(self):
    """ viewTransformEnabled(self) -> bool """
    return True

  def viewport(self):
    """ viewport(self) -> QRect """
    return QtCore.QRect()

  def window(self):
    """ window(self) -> QRect """
    return QtCore.QRect()

  def worldMatrixEnabled(self):
    """ worldMatrixEnabled(self) -> bool """
    return True

  def worldTransform(self):
    """ worldTransform(self) -> QTransform """
    return QtGui.QTransform()

class QStyledItemDelegate(QAbstractItemDelegate):
  """ QStyledItemDelegate(parent: QObject = None) """

  EditNextItem = None
  EditPreviousItem = None
  NoHint = None
  RevertModelCache = None
  SubmitModelCache = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closeEditor(self, QWidget, arg0=None):
    """ closeEditor(self, QWidget, hint: QAbstractItemDelegate.EndEditHint = QAbstractItemDelegate.NoHint) [signal] """
    pass

  def commitData(self, QWidget):
    """ commitData(self, QWidget) [signal] """
    pass

  def connectNotify():
    pass

  def createEditor(self, QWidget, QStyleOptionViewItem, QtCore.QModelIndex):
    """ createEditor(self, QWidget, QStyleOptionViewItem, QModelIndex) -> QWidget """
    return QWidget()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyEditor(self, QWidget, QtCore.QModelIndex):
    """ destroyEditor(self, QWidget, QModelIndex) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def displayText(self, Any, QtCore.QLocale):
    """ displayText(self, Any, QLocale) -> str """
    return ""

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editorEvent(self, QtCore.QEvent, QtCore.QAbstractItemModel, QStyleOptionViewItem, QtCore.QModelIndex):
    """ editorEvent(self, QEvent, QAbstractItemModel, QStyleOptionViewItem, QModelIndex) -> bool """
    return True

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def helpEvent(self, QtGui.QHelpEvent, QAbstractItemView, QStyleOptionViewItem, QtCore.QModelIndex):
    """ helpEvent(self, QHelpEvent, QAbstractItemView, QStyleOptionViewItem, QModelIndex) -> bool """
    return True

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initStyleOption(self, QStyleOptionViewItem, QtCore.QModelIndex):
    """ initStyleOption(self, QStyleOptionViewItem, QModelIndex) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemEditorFactory(self):
    """ itemEditorFactory(self) -> QItemEditorFactory """
    return QItemEditorFactory()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def paint(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QModelIndex):
    """ paint(self, QPainter, QStyleOptionViewItem, QModelIndex) """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setEditorData(self, QWidget, QtCore.QModelIndex):
    """ setEditorData(self, QWidget, QModelIndex) """
    pass

  def setItemEditorFactory(self, QItemEditorFactory):
    """ setItemEditorFactory(self, QItemEditorFactory) """
    pass

  def setModelData(self, QWidget, QtCore.QAbstractItemModel, QtCore.QModelIndex):
    """ setModelData(self, QWidget, QAbstractItemModel, QModelIndex) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeHint(self, QStyleOptionViewItem, QtCore.QModelIndex):
    """ sizeHint(self, QStyleOptionViewItem, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintChanged(self, QtCore.QModelIndex):
    """ sizeHintChanged(self, QModelIndex) [signal] """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateEditorGeometry(self, QWidget, QStyleOptionViewItem, QtCore.QModelIndex):
    """ updateEditorGeometry(self, QWidget, QStyleOptionViewItem, QModelIndex) """
    pass

class QSwipeGesture(QGesture):
  """ QSwipeGesture(parent: QObject = None) """

  CancelAllInContext = None
  CancelNone = None
  Down = None
  Left = None
  NoDirection = None
  Right = None

  class SwipeDirection(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Up = None

  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def gestureCancelPolicy(self):
    """ gestureCancelPolicy(self) -> QGesture.GestureCancelPolicy """
    return QGesture.GestureCancelPolicy()

  def gestureType(self):
    """ gestureType(self) -> Qt.GestureType """
    return None

  def hasHotSpot(self):
    """ hasHotSpot(self) -> bool """
    return True

  def horizontalDirection(self):
    """ horizontalDirection(self) -> QSwipeGesture.SwipeDirection """
    return QSwipeGesture.SwipeDirection()

  def hotSpot(self):
    """ hotSpot(self) -> QPointF """
    return QtCore.QPointF()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setGestureCancelPolicy(self, arg0):
    """ setGestureCancelPolicy(self, QGesture.GestureCancelPolicy) """
    pass

  def setHotSpot(self, UnionQPointF=None, QPoint=None):
    """ setHotSpot(self, Union[QPointF, QPoint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSwipeAngle(self, float):
    """ setSwipeAngle(self, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> Qt.GestureState """
    return None

  staticMetaObject = None

  def swipeAngle(self):
    """ swipeAngle(self) -> float """
    return 1.0

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unsetHotSpot(self):
    """ unsetHotSpot(self) """
    pass

  def verticalDirection(self):
    """ verticalDirection(self) -> QSwipeGesture.SwipeDirection """
    return QSwipeGesture.SwipeDirection()

class QSystemTrayIcon(QObject):
  """ QSystemTrayIcon(parent: QObject = None)
  QSystemTrayIcon(QIcon, parent: QObject = None) """

  class ActivationReason(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Context = None
  Critical = None
  DoubleClick = None
  Information = None

  class MessageIcon(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MiddleClick = None
  NoIcon = None
  Trigger = None
  Unknown = None
  Warning = None

  def __init__(self, arg0=None):
    pass

  def activated(self, arg0):
    """ activated(self, QSystemTrayIcon.ActivationReason) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def contextMenu(self):
    """ contextMenu(self) -> QMenu """
    return QMenu()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def hide(self):
    """ hide(self) """
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isSystemTrayAvailable():
    """ isSystemTrayAvailable() -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def messageClicked(self):
    """ messageClicked(self) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setContextMenu(self, QMenu):
    """ setContextMenu(self, QMenu) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def show(self):
    """ show(self) """
    pass

  def showMessage(self, str, str, arg0=None, arg1=None):
    """ showMessage(self, str, str, icon: QSystemTrayIcon.MessageIcon = QSystemTrayIcon.Information, msecs: int = 10000)
    showMessage(self, str, str, QIcon, msecs: int = 10000) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsMessages():
    """ supportsMessages() -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTabBar(QWidget):
  """ QTabBar(parent: QWidget = None) """

  class ButtonPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  LeftSide = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  RightSide = None
  RoundedEast = None
  RoundedNorth = None
  RoundedSouth = None
  RoundedWest = None
  SelectLeftTab = None
  SelectPreviousTab = None
  SelectRightTab = None

  class SelectionBehavior(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Shape(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TriangularEast = None
  TriangularNorth = None
  TriangularSouth = None
  TriangularWest = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def accessibleTabName(self, int):
    """ accessibleTabName(self, int) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addTab(self, str):
    """ addTab(self, str) -> int
    addTab(self, QIcon, str) -> int """
    return 1

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoHide(self):
    """ autoHide(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeCurrentOnDrag(self):
    """ changeCurrentOnDrag(self) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, int):
    """ currentChanged(self, int) [signal] """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def documentMode(self):
    """ documentMode(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawBase(self):
    """ drawBase(self) -> bool """
    return True

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def elideMode(self):
    """ elideMode(self) -> Qt.TextElideMode """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expanding(self):
    """ expanding(self) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionTab, int):
    """ initStyleOption(self, QStyleOptionTab, int) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertTab(self, int, str):
    """ insertTab(self, int, str) -> int
    insertTab(self, int, QIcon, str) -> int """
    return 1

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isMovable(self):
    """ isMovable(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isTabEnabled(self, int):
    """ isTabEnabled(self, int) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumTabSizeHint(self, int):
    """ minimumTabSizeHint(self, int) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveTab(self, int, int):
    """ moveTab(self, int, int) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeTab(self, int):
    """ removeTab(self, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def selectionBehaviorOnRemove(self):
    """ selectionBehaviorOnRemove(self) -> QTabBar.SelectionBehavior """
    return QTabBar.SelectionBehavior()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAccessibleTabName(self, int, str):
    """ setAccessibleTabName(self, int, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoHide(self, bool):
    """ setAutoHide(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setChangeCurrentOnDrag(self, bool):
    """ setChangeCurrentOnDrag(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDocumentMode(self, bool):
    """ setDocumentMode(self, bool) """
    pass

  def setDrawBase(self, bool):
    """ setDrawBase(self, bool) """
    pass

  def setElideMode(self, arg0):
    """ setElideMode(self, Qt.TextElideMode) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExpanding(self, bool):
    """ setExpanding(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovable(self, bool):
    """ setMovable(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSelectionBehaviorOnRemove(self, arg0):
    """ setSelectionBehaviorOnRemove(self, QTabBar.SelectionBehavior) """
    pass

  def setShape(self, arg0):
    """ setShape(self, QTabBar.Shape) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabButton(self, int, arg0, QWidget):
    """ setTabButton(self, int, QTabBar.ButtonPosition, QWidget) """
    pass

  def setTabData(self, int, Any):
    """ setTabData(self, int, Any) """
    pass

  def setTabEnabled(self, int, bool):
    """ setTabEnabled(self, int, bool) """
    pass

  def setTabIcon(self, int, QtGui.QIcon):
    """ setTabIcon(self, int, QIcon) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabText(self, int, str):
    """ setTabText(self, int, str) """
    pass

  def setTabTextColor(self, int, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTabTextColor(self, int, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setTabToolTip(self, int, str):
    """ setTabToolTip(self, int, str) """
    pass

  def setTabWhatsThis(self, int, str):
    """ setTabWhatsThis(self, int, str) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTabsClosable(self, bool):
    """ setTabsClosable(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setUsesScrollButtons(self, bool):
    """ setUsesScrollButtons(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def shape(self):
    """ shape(self) -> QTabBar.Shape """
    return QTabBar.Shape()

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabAt(self, QtCore.QPoint):
    """ tabAt(self, QPoint) -> int """
    return 1

  def tabBarClicked(self, int):
    """ tabBarClicked(self, int) [signal] """
    pass

  def tabBarDoubleClicked(self, int):
    """ tabBarDoubleClicked(self, int) [signal] """
    pass

  def tabButton(self, int, arg0):
    """ tabButton(self, int, QTabBar.ButtonPosition) -> QWidget """
    return QWidget()

  def tabCloseRequested(self, int):
    """ tabCloseRequested(self, int) [signal] """
    pass

  def tabData(self, int):
    """ tabData(self, int) -> Any """
    return None

  def tabIcon(self, int):
    """ tabIcon(self, int) -> QIcon """
    return QtGui.QIcon()

  def tabInserted(self, int):
    """ tabInserted(self, int) """
    pass

  def tabLayoutChange(self):
    """ tabLayoutChange(self) """
    pass

  def tabMoved(self, int, int):
    """ tabMoved(self, int, int) [signal] """
    pass

  def tabRect(self, int):
    """ tabRect(self, int) -> QRect """
    return QtCore.QRect()

  def tabRemoved(self, int):
    """ tabRemoved(self, int) """
    pass

  def tabSizeHint(self, int):
    """ tabSizeHint(self, int) -> QSize """
    return QtCore.QSize()

  def tabText(self, int):
    """ tabText(self, int) -> str """
    return ""

  def tabTextColor(self, int):
    """ tabTextColor(self, int) -> QColor """
    return QtGui.QColor()

  def tabToolTip(self, int):
    """ tabToolTip(self, int) -> str """
    return ""

  def tabWhatsThis(self, int):
    """ tabWhatsThis(self, int) -> str """
    return ""

  def tabletEvent():
    pass

  def tabsClosable(self):
    """ tabsClosable(self) -> bool """
    return True

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def usesScrollButtons(self):
    """ usesScrollButtons(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QTabWidget(QWidget):
  """ QTabWidget(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  East = None
  IgnoreMask = None
  North = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rounded = None
  South = None

  class TabPosition(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class TabShape(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Triangular = None
  West = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addTab(self, QWidget, str):
    """ addTab(self, QWidget, str) -> int
    addTab(self, QWidget, QIcon, str) -> int """
    return 1

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self, arg0=None):
    """ cornerWidget(self, corner: Qt.Corner = Qt.TopRightCorner) -> QWidget """
    return QWidget()

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, int):
    """ currentChanged(self, int) [signal] """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def currentWidget(self):
    """ currentWidget(self) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def documentMode(self):
    """ documentMode(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def elideMode(self):
    """ elideMode(self) -> Qt.TextElideMode """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionTabWidgetFrame):
    """ initStyleOption(self, QStyleOptionTabWidgetFrame) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertTab(self, int, QWidget, str):
    """ insertTab(self, int, QWidget, str) -> int
    insertTab(self, int, QWidget, QIcon, str) -> int """
    return 1

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isMovable(self):
    """ isMovable(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isTabEnabled(self, int):
    """ isTabEnabled(self, int) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeTab(self, int):
    """ removeTab(self, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget, arg0=None):
    """ setCornerWidget(self, QWidget, corner: Qt.Corner = Qt.TopRightCorner) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCurrentWidget(self, QWidget):
    """ setCurrentWidget(self, QWidget) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDocumentMode(self, bool):
    """ setDocumentMode(self, bool) """
    pass

  def setElideMode(self, arg0):
    """ setElideMode(self, Qt.TextElideMode) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovable(self, bool):
    """ setMovable(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabBar(self, QTabBar):
    """ setTabBar(self, QTabBar) """
    pass

  def setTabBarAutoHide(self, bool):
    """ setTabBarAutoHide(self, bool) """
    pass

  def setTabEnabled(self, int, bool):
    """ setTabEnabled(self, int, bool) """
    pass

  def setTabIcon(self, int, QtGui.QIcon):
    """ setTabIcon(self, int, QIcon) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabPosition(self, arg0):
    """ setTabPosition(self, QTabWidget.TabPosition) """
    pass

  def setTabShape(self, arg0):
    """ setTabShape(self, QTabWidget.TabShape) """
    pass

  def setTabText(self, int, str):
    """ setTabText(self, int, str) """
    pass

  def setTabToolTip(self, int, str):
    """ setTabToolTip(self, int, str) """
    pass

  def setTabWhatsThis(self, int, str):
    """ setTabWhatsThis(self, int, str) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTabsClosable(self, bool):
    """ setTabsClosable(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setUsesScrollButtons(self, bool):
    """ setUsesScrollButtons(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabBar(self):
    """ tabBar(self) -> QTabBar """
    return QTabBar()

  def tabBarAutoHide(self):
    """ tabBarAutoHide(self) -> bool """
    return True

  def tabBarClicked(self, int):
    """ tabBarClicked(self, int) [signal] """
    pass

  def tabBarDoubleClicked(self, int):
    """ tabBarDoubleClicked(self, int) [signal] """
    pass

  def tabCloseRequested(self, int):
    """ tabCloseRequested(self, int) [signal] """
    pass

  def tabIcon(self, int):
    """ tabIcon(self, int) -> QIcon """
    return QtGui.QIcon()

  def tabInserted(self, int):
    """ tabInserted(self, int) """
    pass

  def tabPosition(self):
    """ tabPosition(self) -> QTabWidget.TabPosition """
    return QTabWidget.TabPosition()

  def tabRemoved(self, int):
    """ tabRemoved(self, int) """
    pass

  def tabShape(self):
    """ tabShape(self) -> QTabWidget.TabShape """
    return QTabWidget.TabShape()

  def tabText(self, int):
    """ tabText(self, int) -> str """
    return ""

  def tabToolTip(self, int):
    """ tabToolTip(self, int) -> str """
    return ""

  def tabWhatsThis(self, int):
    """ tabWhatsThis(self, int) -> str """
    return ""

  def tabletEvent():
    pass

  def tabsClosable(self):
    """ tabsClosable(self) -> bool """
    return True

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def usesScrollButtons(self):
    """ usesScrollButtons(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self, int):
    """ widget(self, int) -> QWidget """
    return QWidget()

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QTableView(QAbstractItemView):
  """ QTableView(parent: QWidget = None) """

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  HLine = None
  IgnoreMask = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SingleSelection = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clearSpans(self):
    """ clearSpans(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QtCore.QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def columnAt(self, int):
    """ columnAt(self, int) -> int """
    return 1

  def columnCountChanged(self, int, int):
    """ columnCountChanged(self, int, int) """
    pass

  def columnMoved(self, int, int, int):
    """ columnMoved(self, int, int, int) """
    pass

  def columnResized(self, int, int, int):
    """ columnResized(self, int, int, int) """
    pass

  def columnSpan(self, int, int):
    """ columnSpan(self, int, int) -> int """
    return 1

  def columnViewportPosition(self, int):
    """ columnViewportPosition(self, int) -> int """
    return 1

  def columnWidth(self, int):
    """ columnWidth(self, int) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, QtCore.QModelIndex, QtCore.QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged():
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event():
    pass

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def gridStyle(self):
    """ gridStyle(self) -> Qt.PenStyle """
    return None

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideColumn(self, int):
    """ hideColumn(self, int) """
    pass

  def hideEvent():
    pass

  def hideRow(self, int):
    """ hideRow(self, int) """
    pass

  def horizontalHeader(self):
    """ horizontalHeader(self) -> QHeaderView """
    return QHeaderView()

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction(self, int):
    """ horizontalScrollbarAction(self, int) """
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isColumnHidden(self, int):
    """ isColumnHidden(self, int) -> bool """
    return True

  def isCornerButtonEnabled(self):
    """ isCornerButtonEnabled(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden(self, QtCore.QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QtCore.QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isRowHidden(self, int):
    """ isRowHidden(self, int) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSortingEnabled(self):
    """ isSortingEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return QtCore.QModelIndex()

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QtCore.QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeColumnToContents(self, int):
    """ resizeColumnToContents(self, int) """
    pass

  def resizeColumnsToContents(self):
    """ resizeColumnsToContents(self) """
    pass

  def resizeEvent():
    pass

  def resizeRowToContents(self, int):
    """ resizeRowToContents(self, int) """
    pass

  def resizeRowsToContents(self):
    """ resizeRowsToContents(self) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rowAt(self, int):
    """ rowAt(self, int) -> int """
    return 1

  def rowCountChanged(self, int, int):
    """ rowCountChanged(self, int, int) """
    pass

  def rowHeight(self, int):
    """ rowHeight(self, int) -> int """
    return 1

  def rowMoved(self, int, int, int):
    """ rowMoved(self, int, int, int) """
    pass

  def rowResized(self, int, int, int):
    """ rowResized(self, int, int, int) """
    pass

  def rowSpan(self, int, int):
    """ rowSpan(self, int, int) -> int """
    return 1

  def rowViewportPosition(self, int):
    """ rowViewportPosition(self, int) -> int """
    return 1

  def rowsAboutToBeRemoved():
    pass

  def rowsInserted():
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectColumn(self, int):
    """ selectColumn(self, int) """
    pass

  def selectRow(self, int):
    """ selectRow(self, int) """
    pass

  def selectedIndexes(self):
    """ selectedIndexes(self) -> List[QModelIndex] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged(self, QtCore.QItemSelection, QtCore.QItemSelection):
    """ selectionChanged(self, QItemSelection, QItemSelection) """
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setColumnHidden(self, int, bool):
    """ setColumnHidden(self, int, bool) """
    pass

  def setColumnWidth(self, int, int):
    """ setColumnWidth(self, int, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerButtonEnabled(self, bool):
    """ setCornerButtonEnabled(self, bool) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGridStyle(self, arg0):
    """ setGridStyle(self, Qt.PenStyle) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalHeader(self, QHeaderView):
    """ setHorizontalHeader(self, QHeaderView) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRowHeight(self, int, int):
    """ setRowHeight(self, int, int) """
    pass

  def setRowHidden(self, int, bool):
    """ setRowHidden(self, int, bool) """
    pass

  def setSelection(self, QtCore.QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setShowGrid(self, bool):
    """ setShowGrid(self, bool) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSortingEnabled(self, bool):
    """ setSortingEnabled(self, bool) """
    pass

  def setSpan(self, int, int, int, int):
    """ setSpan(self, int, int, int, int) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalHeader(self, QHeaderView):
    """ setVerticalHeader(self, QHeaderView) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showColumn(self, int):
    """ showColumn(self, int) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showGrid(self):
    """ showGrid(self) -> bool """
    return True

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showRow(self, int):
    """ showRow(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sortByColumn(self, int, arg0):
    """ sortByColumn(self, int, Qt.SortOrder) """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries(self):
    """ updateGeometries(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalHeader(self):
    """ verticalHeader(self) -> QHeaderView """
    return QHeaderView()

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction(self, int):
    """ verticalScrollbarAction(self, int) """
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewOptions(self):
    """ viewOptions(self) -> QStyleOptionViewItem """
    return QStyleOptionViewItem()

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return QtCore.QSize()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection(self, QtCore.QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QTableWidget(QTableView):
  """ QTableWidget(parent: QWidget = None)
  QTableWidget(int, int, parent: QWidget = None) """

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  HLine = None
  IgnoreMask = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SingleSelection = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def cellActivated(self, int, int):
    """ cellActivated(self, int, int) [signal] """
    pass

  def cellChanged(self, int, int):
    """ cellChanged(self, int, int) [signal] """
    pass

  def cellClicked(self, int, int):
    """ cellClicked(self, int, int) [signal] """
    pass

  def cellDoubleClicked(self, int, int):
    """ cellDoubleClicked(self, int, int) [signal] """
    pass

  def cellEntered(self, int, int):
    """ cellEntered(self, int, int) [signal] """
    pass

  def cellPressed(self, int, int):
    """ cellPressed(self, int, int) [signal] """
    pass

  def cellWidget(self, int, int):
    """ cellWidget(self, int, int) -> QWidget """
    return QWidget()

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearContents(self):
    """ clearContents(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clearSpans(self):
    """ clearSpans(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QTableWidgetItem):
    """ closePersistentEditor(self, QTableWidgetItem) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def column(self, QTableWidgetItem):
    """ column(self, QTableWidgetItem) -> int """
    return 1

  def columnAt(self, int):
    """ columnAt(self, int) -> int """
    return 1

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def columnCountChanged():
    pass

  def columnMoved():
    pass

  def columnResized():
    pass

  def columnSpan(self, int, int):
    """ columnSpan(self, int, int) -> int """
    return 1

  def columnViewportPosition(self, int):
    """ columnViewportPosition(self, int) -> int """
    return 1

  def columnWidth(self, int):
    """ columnWidth(self, int) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentCellChanged(self, int, int, int, int):
    """ currentCellChanged(self, int, int, int, int) [signal] """
    pass

  def currentChanged():
    pass

  def currentColumn(self):
    """ currentColumn(self) -> int """
    return 1

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def currentItem(self):
    """ currentItem(self) -> QTableWidgetItem """
    return QTableWidgetItem()

  def currentItemChanged(self, QTableWidgetItem, QTableWidgetItem):
    """ currentItemChanged(self, QTableWidgetItem, QTableWidgetItem) [signal] """
    pass

  def currentRow(self):
    """ currentRow(self) -> int """
    return 1

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged():
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dropIndicatorPosition():
    pass

  def dropMimeData(self, int, int, QtCore.QMimeData, arg0):
    """ dropMimeData(self, int, int, QMimeData, Qt.DropAction) -> bool """
    return True

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editItem(self, QTableWidgetItem):
    """ editItem(self, QTableWidgetItem) """
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findItems(self, str, UnionQt.MatchFlags=None, Qt.MatchFlag=None):
    """ findItems(self, str, Union[Qt.MatchFlags, Qt.MatchFlag]) -> List[QTableWidgetItem] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def gridStyle(self):
    """ gridStyle(self) -> Qt.PenStyle """
    return None

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideColumn(self, int):
    """ hideColumn(self, int) """
    pass

  def hideEvent():
    pass

  def hideRow(self, int):
    """ hideRow(self, int) """
    pass

  def horizontalHeader(self):
    """ horizontalHeader(self) -> QHeaderView """
    return QHeaderView()

  def horizontalHeaderItem(self, int):
    """ horizontalHeaderItem(self, int) -> QTableWidgetItem """
    return QTableWidgetItem()

  def horizontalOffset():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexFromItem(self, QTableWidgetItem):
    """ indexFromItem(self, QTableWidgetItem) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertColumn(self, int):
    """ insertColumn(self, int) """
    pass

  def insertRow(self, int):
    """ insertRow(self, int) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isColumnHidden(self, int):
    """ isColumnHidden(self, int) -> bool """
    return True

  def isCornerButtonEnabled(self):
    """ isCornerButtonEnabled(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden():
    pass

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QTableWidgetItem):
    """ isPersistentEditorOpen(self, QTableWidgetItem) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isRowHidden(self, int):
    """ isRowHidden(self, int) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSortingEnabled(self):
    """ isSortingEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def item(self, int, int):
    """ item(self, int, int) -> QTableWidgetItem """
    return QTableWidgetItem()

  def itemActivated(self, QTableWidgetItem):
    """ itemActivated(self, QTableWidgetItem) [signal] """
    pass

  def itemAt(self, QtCore.QPoint):
    """ itemAt(self, QPoint) -> QTableWidgetItem
    itemAt(self, int, int) -> QTableWidgetItem """
    return QTableWidgetItem()

  def itemChanged(self, QTableWidgetItem):
    """ itemChanged(self, QTableWidgetItem) [signal] """
    pass

  def itemClicked(self, QTableWidgetItem):
    """ itemClicked(self, QTableWidgetItem) [signal] """
    pass

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDoubleClicked(self, QTableWidgetItem):
    """ itemDoubleClicked(self, QTableWidgetItem) [signal] """
    pass

  def itemEntered(self, QTableWidgetItem):
    """ itemEntered(self, QTableWidgetItem) [signal] """
    pass

  def itemFromIndex(self, QtCore.QModelIndex):
    """ itemFromIndex(self, QModelIndex) -> QTableWidgetItem """
    return QTableWidgetItem()

  def itemPressed(self, QTableWidgetItem):
    """ itemPressed(self, QTableWidgetItem) [signal] """
    pass

  def itemPrototype(self):
    """ itemPrototype(self) -> QTableWidgetItem """
    return QTableWidgetItem()

  def itemSelectionChanged(self):
    """ itemSelectionChanged(self) [signal] """
    pass

  def items(self, QtCore.QMimeData):
    """ items(self, QMimeData) -> List[QTableWidgetItem] """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def mimeData(self, IterableQTableWidgetItem=None):
    """ mimeData(self, Iterable[QTableWidgetItem]) -> QMimeData """
    return QtCore.QMimeData()

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor():
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QTableWidgetItem):
    """ openPersistentEditor(self, QTableWidgetItem) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeCellWidget(self, int, int):
    """ removeCellWidget(self, int, int) """
    pass

  def removeColumn(self, int):
    """ removeColumn(self, int) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int):
    """ removeRow(self, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeColumnToContents(self, int):
    """ resizeColumnToContents(self, int) """
    pass

  def resizeColumnsToContents(self):
    """ resizeColumnsToContents(self) """
    pass

  def resizeEvent():
    pass

  def resizeRowToContents(self, int):
    """ resizeRowToContents(self, int) """
    pass

  def resizeRowsToContents(self):
    """ resizeRowsToContents(self) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def row(self, QTableWidgetItem):
    """ row(self, QTableWidgetItem) -> int """
    return 1

  def rowAt(self, int):
    """ rowAt(self, int) -> int """
    return 1

  def rowCount(self):
    """ rowCount(self) -> int """
    return 1

  def rowCountChanged():
    pass

  def rowHeight(self, int):
    """ rowHeight(self, int) -> int """
    return 1

  def rowMoved():
    pass

  def rowResized():
    pass

  def rowSpan(self, int, int):
    """ rowSpan(self, int, int) -> int """
    return 1

  def rowViewportPosition(self, int):
    """ rowViewportPosition(self, int) -> int """
    return 1

  def rowsAboutToBeRemoved():
    pass

  def rowsInserted():
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy():
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToItem(self, QTableWidgetItem, arg0=None):
    """ scrollToItem(self, QTableWidgetItem, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectColumn(self, int):
    """ selectColumn(self, int) """
    pass

  def selectRow(self, int):
    """ selectRow(self, int) """
    pass

  def selectedIndexes():
    pass

  def selectedItems(self):
    """ selectedItems(self) -> List[QTableWidgetItem] """
    return None

  def selectedRanges(self):
    """ selectedRanges(self) -> List[QTableWidgetSelectionRange] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged():
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCellWidget(self, int, int, QWidget):
    """ setCellWidget(self, int, int, QWidget) """
    pass

  def setColumnCount(self, int):
    """ setColumnCount(self, int) """
    pass

  def setColumnHidden(self, int, bool):
    """ setColumnHidden(self, int, bool) """
    pass

  def setColumnWidth(self, int, int):
    """ setColumnWidth(self, int, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerButtonEnabled(self, bool):
    """ setCornerButtonEnabled(self, bool) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentCell(self, int, int):
    """ setCurrentCell(self, int, int)
    setCurrentCell(self, int, int, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCurrentItem(self, QTableWidgetItem):
    """ setCurrentItem(self, QTableWidgetItem)
    setCurrentItem(self, QTableWidgetItem, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGridStyle(self, arg0):
    """ setGridStyle(self, Qt.PenStyle) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalHeader(self, QHeaderView):
    """ setHorizontalHeader(self, QHeaderView) """
    pass

  def setHorizontalHeaderItem(self, int, QTableWidgetItem):
    """ setHorizontalHeaderItem(self, int, QTableWidgetItem) """
    pass

  def setHorizontalHeaderLabels(self, Iterablestr=None):
    """ setHorizontalHeaderLabels(self, Iterable[str]) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItem(self, int, int, QTableWidgetItem):
    """ setItem(self, int, int, QTableWidgetItem) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setItemPrototype(self, QTableWidgetItem):
    """ setItemPrototype(self, QTableWidgetItem) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel():
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRangeSelected(self, QTableWidgetSelectionRange, bool):
    """ setRangeSelected(self, QTableWidgetSelectionRange, bool) """
    pass

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRowCount(self, int):
    """ setRowCount(self, int) """
    pass

  def setRowHeight(self, int, int):
    """ setRowHeight(self, int, int) """
    pass

  def setRowHidden(self, int, bool):
    """ setRowHidden(self, int, bool) """
    pass

  def setSelection():
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setShowGrid(self, bool):
    """ setShowGrid(self, bool) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSortingEnabled(self, bool):
    """ setSortingEnabled(self, bool) """
    pass

  def setSpan(self, int, int, int, int):
    """ setSpan(self, int, int, int, int) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalHeader(self, QHeaderView):
    """ setVerticalHeader(self, QHeaderView) """
    pass

  def setVerticalHeaderItem(self, int, QTableWidgetItem):
    """ setVerticalHeaderItem(self, int, QTableWidgetItem) """
    pass

  def setVerticalHeaderLabels(self, Iterablestr=None):
    """ setVerticalHeaderLabels(self, Iterable[str]) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showColumn(self, int):
    """ showColumn(self, int) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showGrid(self):
    """ showGrid(self) -> bool """
    return True

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def showRow(self, int):
    """ showRow(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn():
    pass

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow():
    pass

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sortByColumn(self, int, arg0):
    """ sortByColumn(self, int, Qt.SortOrder) """
    pass

  def sortItems(self, int, arg0=None):
    """ sortItems(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def takeHorizontalHeaderItem(self, int):
    """ takeHorizontalHeaderItem(self, int) -> QTableWidgetItem """
    return QTableWidgetItem()

  def takeItem(self, int, int):
    """ takeItem(self, int, int) -> QTableWidgetItem """
    return QTableWidgetItem()

  def takeVerticalHeaderItem(self, int):
    """ takeVerticalHeaderItem(self, int) -> QTableWidgetItem """
    return QTableWidgetItem()

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries():
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalHeader(self):
    """ verticalHeader(self) -> QHeaderView """
    return QHeaderView()

  def verticalHeaderItem(self, int):
    """ verticalHeaderItem(self, int) -> QTableWidgetItem """
    return QTableWidgetItem()

  def verticalOffset():
    pass

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualColumn(self, int):
    """ visualColumn(self, int) -> int """
    return 1

  def visualItemRect(self, QTableWidgetItem):
    """ visualItemRect(self, QTableWidgetItem) -> QRect """
    return QtCore.QRect()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection():
    pass

  def visualRow(self, int):
    """ visualRow(self, int) -> int """
    return 1

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QTableWidgetItem(wrapper):
  """ QTableWidgetItem(type: int = QTableWidgetItem.Type)
  QTableWidgetItem(str, type: int = QTableWidgetItem.Type)
  QTableWidgetItem(QIcon, str, type: int = QTableWidgetItem.Type)
  QTableWidgetItem(QTableWidgetItem) """

  class ItemType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  UserType = None

  def __init__(self, arg0=None):
    pass

  def background(self):
    """ background(self) -> QBrush """
    return QtGui.QBrush()

  def checkState(self):
    """ checkState(self) -> Qt.CheckState """
    return None

  def clone(self):
    """ clone(self) -> QTableWidgetItem """
    return QTableWidgetItem()

  def column(self):
    """ column(self) -> int """
    return 1

  def data(self, int):
    """ data(self, int) -> Any """
    return None

  def flags(self):
    """ flags(self) -> Qt.ItemFlags """
    return None

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def foreground(self):
    """ foreground(self) -> QBrush """
    return QtGui.QBrush()

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def read(self, QtCore.QDataStream):
    """ read(self, QDataStream) """
    pass

  def row(self):
    """ row(self) -> int """
    return 1

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCheckState(self, arg0):
    """ setCheckState(self, Qt.CheckState) """
    pass

  def setData(self, int, Any):
    """ setData(self, int, Any) """
    pass

  def setFlags(self, UnionQt.ItemFlags=None, Qt.ItemFlag=None):
    """ setFlags(self, Union[Qt.ItemFlags, Qt.ItemFlag]) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setSizeHint(self, QtCore.QSize):
    """ setSizeHint(self, QSize) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextAlignment(self, int):
    """ setTextAlignment(self, int) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def tableWidget(self):
    """ tableWidget(self) -> QTableWidget """
    return QTableWidget()

  def text(self):
    """ text(self) -> str """
    return ""

  def textAlignment(self):
    """ textAlignment(self) -> int """
    return 1

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def type(self):
    """ type(self) -> int """
    return 1

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def write(self, QtCore.QDataStream):
    """ write(self, QDataStream) """
    pass

class QTableWidgetSelectionRange(simplewrapper):
  """ QTableWidgetSelectionRange()
  QTableWidgetSelectionRange(int, int, int, int)
  QTableWidgetSelectionRange(QTableWidgetSelectionRange) """

  def __init__(self):
    pass

  def bottomRow(self):
    """ bottomRow(self) -> int """
    return 1

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def leftColumn(self):
    """ leftColumn(self) -> int """
    return 1

  def rightColumn(self):
    """ rightColumn(self) -> int """
    return 1

  def rowCount(self):
    """ rowCount(self) -> int """
    return 1

  def topRow(self):
    """ topRow(self) -> int """
    return 1

class QTapAndHoldGesture(QGesture):
  """ QTapAndHoldGesture(parent: QObject = None) """

  CancelAllInContext = None
  CancelNone = None
  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def gestureCancelPolicy(self):
    """ gestureCancelPolicy(self) -> QGesture.GestureCancelPolicy """
    return QGesture.GestureCancelPolicy()

  def gestureType(self):
    """ gestureType(self) -> Qt.GestureType """
    return None

  def hasHotSpot(self):
    """ hasHotSpot(self) -> bool """
    return True

  def hotSpot(self):
    """ hotSpot(self) -> QPointF """
    return QtCore.QPointF()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def position(self):
    """ position(self) -> QPointF """
    return QtCore.QPointF()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setGestureCancelPolicy(self, arg0):
    """ setGestureCancelPolicy(self, QGesture.GestureCancelPolicy) """
    pass

  def setHotSpot(self, UnionQPointF=None, QPoint=None):
    """ setHotSpot(self, Union[QPointF, QPoint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setPosition(self, UnionQPointF=None, QPoint=None):
    """ setPosition(self, Union[QPointF, QPoint]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setTimeout(int):
    """ setTimeout(int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> Qt.GestureState """
    return None

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timeout():
    """ timeout() -> int """
    return 1

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unsetHotSpot(self):
    """ unsetHotSpot(self) """
    pass

class QTapGesture(QGesture):
  """ QTapGesture(parent: QObject = None) """

  CancelAllInContext = None
  CancelNone = None
  def __init__(self, arg0=None):
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def gestureCancelPolicy(self):
    """ gestureCancelPolicy(self) -> QGesture.GestureCancelPolicy """
    return QGesture.GestureCancelPolicy()

  def gestureType(self):
    """ gestureType(self) -> Qt.GestureType """
    return None

  def hasHotSpot(self):
    """ hasHotSpot(self) -> bool """
    return True

  def hotSpot(self):
    """ hotSpot(self) -> QPointF """
    return QtCore.QPointF()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def position(self):
    """ position(self) -> QPointF """
    return QtCore.QPointF()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setGestureCancelPolicy(self, arg0):
    """ setGestureCancelPolicy(self, QGesture.GestureCancelPolicy) """
    pass

  def setHotSpot(self, UnionQPointF=None, QPoint=None):
    """ setHotSpot(self, Union[QPointF, QPoint]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setPosition(self, UnionQPointF=None, QPoint=None):
    """ setPosition(self, Union[QPointF, QPoint]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> Qt.GestureState """
    return None

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unsetHotSpot(self):
    """ unsetHotSpot(self) """
    pass

class QTextBrowser(QTextEdit):
  """ QTextBrowser(parent: QWidget = None) """

  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AutoAll = None
  AutoBulletList = None

  class AutoFormatting(simplewrapper):
    """ QTextEdit.AutoFormatting()
    QTextEdit.AutoFormatting(Union[QTextEdit.AutoFormatting, QTextEdit.AutoFormattingFlag])
    QTextEdit.AutoFormatting(QTextEdit.AutoFormatting) """

    def __init__(self):
      pass

  class AutoFormattingFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AutoNone = None
  Box = None
  DrawChildren = None
  DrawWindowBackground = None

  class ExtraSelection(simplewrapper):
    """ QTextEdit.ExtraSelection()
    QTextEdit.ExtraSelection(QTextEdit.ExtraSelection) """

    def __init__(self):
      pass

    cursor = None
    format = None

  FixedColumnWidth = None
  FixedPixelWidth = None
  HLine = None
  IgnoreMask = None

  class LineWrapMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoFrame = None
  NoWrap = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WidgetWidth = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptRichText(self):
    """ acceptRichText(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def anchorAt(self, QtCore.QPoint):
    """ anchorAt(self, QPoint) -> str """
    return ""

  def anchorClicked(self, QtCore.QUrl):
    """ anchorClicked(self, QUrl) [signal] """
    pass

  def append(self, str):
    """ append(self, str) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoFormatting(self):
    """ autoFormatting(self) -> QTextEdit.AutoFormatting """
    return QTextEdit.AutoFormatting()

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def backward(self):
    """ backward(self) """
    pass

  def backwardAvailable(self, bool):
    """ backwardAvailable(self, bool) [signal] """
    pass

  def backwardHistoryCount(self):
    """ backwardHistoryCount(self) -> int """
    return 1

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def canInsertFromMimeData():
    pass

  def canPaste(self):
    """ canPaste(self) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearHistory(self):
    """ clearHistory(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def copy(self):
    """ copy(self) """
    pass

  def copyAvailable(self, bool):
    """ copyAvailable(self, bool) [signal] """
    pass

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createMimeDataFromSelection():
    pass

  def createStandardContextMenu(self):
    """ createStandardContextMenu(self) -> QMenu
    createStandardContextMenu(self, QPoint) -> QMenu """
    return QMenu()

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentCharFormat(self):
    """ currentCharFormat(self) -> QTextCharFormat """
    return QtGui.QTextCharFormat()

  def currentCharFormatChanged(self, QtGui.QTextCharFormat):
    """ currentCharFormatChanged(self, QTextCharFormat) [signal] """
    pass

  def currentFont(self):
    """ currentFont(self) -> QFont """
    return QtGui.QFont()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def cursorForPosition(self, QtCore.QPoint):
    """ cursorForPosition(self, QPoint) -> QTextCursor """
    return QtGui.QTextCursor()

  def cursorPositionChanged(self):
    """ cursorPositionChanged(self) [signal] """
    pass

  def cursorRect(self, QtGui.QTextCursor):
    """ cursorRect(self, QTextCursor) -> QRect
    cursorRect(self) -> QRect """
    return QtCore.QRect()

  def cursorWidth(self):
    """ cursorWidth(self) -> int """
    return 1

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def cut(self):
    """ cut(self) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return QtGui.QTextDocument()

  def documentTitle(self):
    """ documentTitle(self) -> str """
    return ""

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensureCursorVisible(self):
    """ ensureCursorVisible(self) """
    pass

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def extraSelections(self):
    """ extraSelections(self) -> List[QTextEdit.ExtraSelection] """
    return None

  def find(self, str, arg0=None, arg1=None):
    """ find(self, str, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool
    find(self, QRegExp, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool
    find(self, QRegularExpression, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontFamily(self):
    """ fontFamily(self) -> str """
    return ""

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontItalic(self):
    """ fontItalic(self) -> bool """
    return True

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def fontPointSize(self):
    """ fontPointSize(self) -> float """
    return 1.0

  def fontUnderline(self):
    """ fontUnderline(self) -> bool """
    return True

  def fontWeight(self):
    """ fontWeight(self) -> int """
    return 1

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def forward(self):
    """ forward(self) """
    pass

  def forwardAvailable(self, bool):
    """ forwardAvailable(self, bool) [signal] """
    pass

  def forwardHistoryCount(self):
    """ forwardHistoryCount(self) -> int """
    return 1

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def highlighted(self, QtCore.QUrl):
    """ highlighted(self, QUrl) [signal]
    highlighted(self, str) [signal] """
    pass

  def historyChanged(self):
    """ historyChanged(self) [signal] """
    pass

  def historyTitle(self, int):
    """ historyTitle(self, int) -> str """
    return ""

  def historyUrl(self, int):
    """ historyUrl(self, int) -> QUrl """
    return QtCore.QUrl()

  def home(self):
    """ home(self) """
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any
    inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertFromMimeData():
    pass

  def insertHtml(self, str):
    """ insertHtml(self, str) """
    pass

  def insertPlainText(self, str):
    """ insertPlainText(self, str) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isBackwardAvailable(self):
    """ isBackwardAvailable(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isForwardAvailable(self):
    """ isForwardAvailable(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUndoRedoEnabled(self):
    """ isUndoRedoEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def lineWrapColumnOrWidth(self):
    """ lineWrapColumnOrWidth(self) -> int """
    return 1

  def lineWrapMode(self):
    """ lineWrapMode(self) -> QTextEdit.LineWrapMode """
    return QTextEdit.LineWrapMode()

  def loadResource(self, int, QtCore.QUrl):
    """ loadResource(self, int, QUrl) -> Any """
    return None

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def mergeCurrentCharFormat(self, QtGui.QTextCharFormat):
    """ mergeCurrentCharFormat(self, QTextCharFormat) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, arg1=None):
    """ moveCursor(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openExternalLinks(self):
    """ openExternalLinks(self) -> bool """
    return True

  def openLinks(self):
    """ openLinks(self) -> bool """
    return True

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def overwriteMode(self):
    """ overwriteMode(self) -> bool """
    return True

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def paste(self):
    """ paste(self) """
    pass

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def placeholderText(self):
    """ placeholderText(self) -> str """
    return ""

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def print(self, QtGui.QPagedPaintDevice):
    """ print(self, QPagedPaintDevice) """
    pass

  def print_(self, QtGui.QPagedPaintDevice):
    """ print_(self, QPagedPaintDevice) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def redo(self):
    """ redo(self) """
    pass

  def redoAvailable(self, bool):
    """ redoAvailable(self, bool) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def reload(self):
    """ reload(self) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy():
    pass

  def scrollToAnchor(self, str):
    """ scrollToAnchor(self, str) """
    pass

  def searchPaths(self):
    """ searchPaths(self) -> List[str] """
    return ""

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptRichText(self, bool):
    """ setAcceptRichText(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoFormatting(self, UnionQTextEdit.AutoFormatting=None, QTextEdit.AutoFormattingFlag=None):
    """ setAutoFormatting(self, Union[QTextEdit.AutoFormatting, QTextEdit.AutoFormattingFlag]) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentCharFormat(self, QtGui.QTextCharFormat):
    """ setCurrentCharFormat(self, QTextCharFormat) """
    pass

  def setCurrentFont(self, QtGui.QFont):
    """ setCurrentFont(self, QFont) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setCursorWidth(self, int):
    """ setCursorWidth(self, int) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDocument(self, QtGui.QTextDocument):
    """ setDocument(self, QTextDocument) """
    pass

  def setDocumentTitle(self, str):
    """ setDocumentTitle(self, str) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExtraSelections(self, IterableQTextEdit.ExtraSelection=None):
    """ setExtraSelections(self, Iterable[QTextEdit.ExtraSelection]) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setFontFamily(self, str):
    """ setFontFamily(self, str) """
    pass

  def setFontItalic(self, bool):
    """ setFontItalic(self, bool) """
    pass

  def setFontPointSize(self, float):
    """ setFontPointSize(self, float) """
    pass

  def setFontUnderline(self, bool):
    """ setFontUnderline(self, bool) """
    pass

  def setFontWeight(self, int):
    """ setFontWeight(self, int) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHtml(self, str):
    """ setHtml(self, str) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLineWrapColumnOrWidth(self, int):
    """ setLineWrapColumnOrWidth(self, int) """
    pass

  def setLineWrapMode(self, arg0):
    """ setLineWrapMode(self, QTextEdit.LineWrapMode) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenExternalLinks(self, bool):
    """ setOpenExternalLinks(self, bool) """
    pass

  def setOpenLinks(self, bool):
    """ setOpenLinks(self, bool) """
    pass

  def setOverwriteMode(self, bool):
    """ setOverwriteMode(self, bool) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPlaceholderText(self, str):
    """ setPlaceholderText(self, str) """
    pass

  def setPlainText(self, str):
    """ setPlainText(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setSearchPaths(self, Iterablestr=None):
    """ setSearchPaths(self, Iterable[str]) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSource(self, QtCore.QUrl):
    """ setSource(self, QUrl) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabChangesFocus(self, bool):
    """ setTabChangesFocus(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabStopDistance(self, float):
    """ setTabStopDistance(self, float) """
    pass

  def setTabStopWidth(self, int):
    """ setTabStopWidth(self, int) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextBackgroundColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTextBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setTextColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTextColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setTextCursor(self, QtGui.QTextCursor):
    """ setTextCursor(self, QTextCursor) """
    pass

  def setTextInteractionFlags(self, UnionQt.TextInteractionFlags=None, Qt.TextInteractionFlag=None):
    """ setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUndoRedoEnabled(self, bool):
    """ setUndoRedoEnabled(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrapMode(self, arg0):
    """ setWordWrapMode(self, QTextOption.WrapMode) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def source(self):
    """ source(self) -> QUrl """
    return QtCore.QUrl()

  def sourceChanged(self, QtCore.QUrl):
    """ sourceChanged(self, QUrl) [signal] """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabChangesFocus(self):
    """ tabChangesFocus(self) -> bool """
    return True

  def tabStopDistance(self):
    """ tabStopDistance(self) -> float """
    return 1.0

  def tabStopWidth(self):
    """ tabStopWidth(self) -> int """
    return 1

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textBackgroundColor(self):
    """ textBackgroundColor(self) -> QColor """
    return QtGui.QColor()

  def textChanged(self):
    """ textChanged(self) [signal] """
    pass

  def textColor(self):
    """ textColor(self) -> QColor """
    return QtGui.QColor()

  def textCursor(self):
    """ textCursor(self) -> QTextCursor """
    return QtGui.QTextCursor()

  def textInteractionFlags(self):
    """ textInteractionFlags(self) -> Qt.TextInteractionFlags """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toHtml(self):
    """ toHtml(self) -> str """
    return ""

  def toPlainText(self):
    """ toPlainText(self) -> str """
    return ""

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def undo(self):
    """ undo(self) """
    pass

  def undoAvailable(self, bool):
    """ undoAvailable(self, bool) [signal] """
    pass

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrapMode(self):
    """ wordWrapMode(self) -> QTextOption.WrapMode """
    return QTextOption.WrapMode()

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

  def zoomIn(self, arg0=None):
    """ zoomIn(self, range: int = 1) """
    pass

  def zoomOut(self, arg0=None):
    """ zoomOut(self, range: int = 1) """
    pass

class QTextEdit(QAbstractScrollArea):
  """ QTextEdit(parent: QWidget = None)
  QTextEdit(str, parent: QWidget = None) """

  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AutoAll = None
  AutoBulletList = None
  AutoNone = None
  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  FixedColumnWidth = None
  FixedPixelWidth = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  NoWrap = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WidgetWidth = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def acceptRichText(self):
    """ acceptRichText(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def anchorAt(self, QtCore.QPoint):
    """ anchorAt(self, QPoint) -> str """
    return ""

  def append(self, str):
    """ append(self, str) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoFormatting(self):
    """ autoFormatting(self) -> QTextEdit.AutoFormatting """
    return QTextEdit.AutoFormatting()

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def canInsertFromMimeData(self, QtCore.QMimeData):
    """ canInsertFromMimeData(self, QMimeData) -> bool """
    return True

  def canPaste(self):
    """ canPaste(self) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def copy(self):
    """ copy(self) """
    pass

  def copyAvailable(self, bool):
    """ copyAvailable(self, bool) [signal] """
    pass

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createMimeDataFromSelection(self):
    """ createMimeDataFromSelection(self) -> QMimeData """
    return QtCore.QMimeData()

  def createStandardContextMenu(self):
    """ createStandardContextMenu(self) -> QMenu
    createStandardContextMenu(self, QPoint) -> QMenu """
    return QMenu()

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentCharFormat(self):
    """ currentCharFormat(self) -> QTextCharFormat """
    return QtGui.QTextCharFormat()

  def currentCharFormatChanged(self, QtGui.QTextCharFormat):
    """ currentCharFormatChanged(self, QTextCharFormat) [signal] """
    pass

  def currentFont(self):
    """ currentFont(self) -> QFont """
    return QtGui.QFont()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def cursorForPosition(self, QtCore.QPoint):
    """ cursorForPosition(self, QPoint) -> QTextCursor """
    return QtGui.QTextCursor()

  def cursorPositionChanged(self):
    """ cursorPositionChanged(self) [signal] """
    pass

  def cursorRect(self, QtGui.QTextCursor):
    """ cursorRect(self, QTextCursor) -> QRect
    cursorRect(self) -> QRect """
    return QtCore.QRect()

  def cursorWidth(self):
    """ cursorWidth(self) -> int """
    return 1

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def cut(self):
    """ cut(self) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return QtGui.QTextDocument()

  def documentTitle(self):
    """ documentTitle(self) -> str """
    return ""

  def dragEnterEvent(self, QtGui.QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawFrame():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensureCursorVisible(self):
    """ ensureCursorVisible(self) """
    pass

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def extraSelections(self):
    """ extraSelections(self) -> List[QTextEdit.ExtraSelection] """
    return None

  def find(self, str, arg0=None, arg1=None):
    """ find(self, str, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool
    find(self, QRegExp, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool
    find(self, QRegularExpression, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontFamily(self):
    """ fontFamily(self) -> str """
    return ""

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontItalic(self):
    """ fontItalic(self) -> bool """
    return True

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def fontPointSize(self):
    """ fontPointSize(self) -> float """
    return 1.0

  def fontUnderline(self):
    """ fontUnderline(self) -> bool """
    return True

  def fontWeight(self):
    """ fontWeight(self) -> int """
    return 1

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any
    inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertFromMimeData(self, QtCore.QMimeData):
    """ insertFromMimeData(self, QMimeData) """
    pass

  def insertHtml(self, str):
    """ insertHtml(self, str) """
    pass

  def insertPlainText(self, str):
    """ insertPlainText(self, str) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isUndoRedoEnabled(self):
    """ isUndoRedoEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def lineWrapColumnOrWidth(self):
    """ lineWrapColumnOrWidth(self) -> int """
    return 1

  def lineWrapMode(self):
    """ lineWrapMode(self) -> QTextEdit.LineWrapMode """
    return QTextEdit.LineWrapMode()

  def loadResource(self, int, QtCore.QUrl):
    """ loadResource(self, int, QUrl) -> Any """
    return None

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def mergeCurrentCharFormat(self, QtGui.QTextCharFormat):
    """ mergeCurrentCharFormat(self, QTextCharFormat) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, arg1=None):
    """ moveCursor(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def overwriteMode(self):
    """ overwriteMode(self) -> bool """
    return True

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def paste(self):
    """ paste(self) """
    pass

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def placeholderText(self):
    """ placeholderText(self) -> str """
    return ""

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def print(self, QtGui.QPagedPaintDevice):
    """ print(self, QPagedPaintDevice) """
    pass

  def print_(self, QtGui.QPagedPaintDevice):
    """ print_(self, QPagedPaintDevice) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def redo(self):
    """ redo(self) """
    pass

  def redoAvailable(self, bool):
    """ redoAvailable(self, bool) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollToAnchor(self, str):
    """ scrollToAnchor(self, str) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAcceptRichText(self, bool):
    """ setAcceptRichText(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoFormatting(self, UnionQTextEdit.AutoFormatting=None, QTextEdit.AutoFormattingFlag=None):
    """ setAutoFormatting(self, Union[QTextEdit.AutoFormatting, QTextEdit.AutoFormattingFlag]) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentCharFormat(self, QtGui.QTextCharFormat):
    """ setCurrentCharFormat(self, QTextCharFormat) """
    pass

  def setCurrentFont(self, QtGui.QFont):
    """ setCurrentFont(self, QFont) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setCursorWidth(self, int):
    """ setCursorWidth(self, int) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDocument(self, QtGui.QTextDocument):
    """ setDocument(self, QTextDocument) """
    pass

  def setDocumentTitle(self, str):
    """ setDocumentTitle(self, str) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExtraSelections(self, IterableQTextEdit.ExtraSelection=None):
    """ setExtraSelections(self, Iterable[QTextEdit.ExtraSelection]) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setFontFamily(self, str):
    """ setFontFamily(self, str) """
    pass

  def setFontItalic(self, bool):
    """ setFontItalic(self, bool) """
    pass

  def setFontPointSize(self, float):
    """ setFontPointSize(self, float) """
    pass

  def setFontUnderline(self, bool):
    """ setFontUnderline(self, bool) """
    pass

  def setFontWeight(self, int):
    """ setFontWeight(self, int) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHtml(self, str):
    """ setHtml(self, str) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLineWrapColumnOrWidth(self, int):
    """ setLineWrapColumnOrWidth(self, int) """
    pass

  def setLineWrapMode(self, arg0):
    """ setLineWrapMode(self, QTextEdit.LineWrapMode) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOverwriteMode(self, bool):
    """ setOverwriteMode(self, bool) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPlaceholderText(self, str):
    """ setPlaceholderText(self, str) """
    pass

  def setPlainText(self, str):
    """ setPlainText(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabChangesFocus(self, bool):
    """ setTabChangesFocus(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabStopDistance(self, float):
    """ setTabStopDistance(self, float) """
    pass

  def setTabStopWidth(self, int):
    """ setTabStopWidth(self, int) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextBackgroundColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTextBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setTextColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTextColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setTextCursor(self, QtGui.QTextCursor):
    """ setTextCursor(self, QTextCursor) """
    pass

  def setTextInteractionFlags(self, UnionQt.TextInteractionFlags=None, Qt.TextInteractionFlag=None):
    """ setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUndoRedoEnabled(self, bool):
    """ setUndoRedoEnabled(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrapMode(self, arg0):
    """ setWordWrapMode(self, QTextOption.WrapMode) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabChangesFocus(self):
    """ tabChangesFocus(self) -> bool """
    return True

  def tabStopDistance(self):
    """ tabStopDistance(self) -> float """
    return 1.0

  def tabStopWidth(self):
    """ tabStopWidth(self) -> int """
    return 1

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textBackgroundColor(self):
    """ textBackgroundColor(self) -> QColor """
    return QtGui.QColor()

  def textChanged(self):
    """ textChanged(self) [signal] """
    pass

  def textColor(self):
    """ textColor(self) -> QColor """
    return QtGui.QColor()

  def textCursor(self):
    """ textCursor(self) -> QTextCursor """
    return QtGui.QTextCursor()

  def textInteractionFlags(self):
    """ textInteractionFlags(self) -> Qt.TextInteractionFlags """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toHtml(self):
    """ toHtml(self) -> str """
    return ""

  def toPlainText(self):
    """ toPlainText(self) -> str """
    return ""

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def undo(self):
    """ undo(self) """
    pass

  def undoAvailable(self, bool):
    """ undoAvailable(self, bool) [signal] """
    pass

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrapMode(self):
    """ wordWrapMode(self) -> QTextOption.WrapMode """
    return QTextOption.WrapMode()

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

  def zoomIn(self, arg0=None):
    """ zoomIn(self, range: int = 1) """
    pass

  def zoomOut(self, arg0=None):
    """ zoomOut(self, range: int = 1) """
    pass

class QTimeEdit(QDateTimeEdit):
  """ QTimeEdit(parent: QWidget = None)
  QTimeEdit(Union[QTime, datetime.time], parent: QWidget = None) """

  AdaptiveDecimalStepType = None
  AmPmSection = None
  CorrectToNearestValue = None
  CorrectToPreviousValue = None
  DateSections_Mask = None
  DaySection = None
  DefaultStepType = None
  DrawChildren = None
  DrawWindowBackground = None
  HourSection = None
  IgnoreMask = None
  MSecSection = None
  MinuteSection = None
  MonthSection = None
  NoButtons = None
  NoSection = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  PlusMinus = None
  SecondSection = None
  StepDownEnabled = None
  StepNone = None
  StepUpEnabled = None
  TimeSections_Mask = None
  UpDownArrows = None
  YearSection = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buttonSymbols(self):
    """ buttonSymbols(self) -> QAbstractSpinBox.ButtonSymbols """
    return QAbstractSpinBox.ButtonSymbols()

  def calendarPopup(self):
    """ calendarPopup(self) -> bool """
    return True

  def calendarWidget(self):
    """ calendarWidget(self) -> QCalendarWidget """
    return QCalendarWidget()

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearMaximumDate(self):
    """ clearMaximumDate(self) """
    pass

  def clearMaximumDateTime(self):
    """ clearMaximumDateTime(self) """
    pass

  def clearMaximumTime(self):
    """ clearMaximumTime(self) """
    pass

  def clearMinimumDate(self):
    """ clearMinimumDate(self) """
    pass

  def clearMinimumDateTime(self):
    """ clearMinimumDateTime(self) """
    pass

  def clearMinimumTime(self):
    """ clearMinimumTime(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def correctionMode(self):
    """ correctionMode(self) -> QAbstractSpinBox.CorrectionMode """
    return QAbstractSpinBox.CorrectionMode()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentSection(self):
    """ currentSection(self) -> QDateTimeEdit.Section """
    return QDateTimeEdit.Section()

  def currentSectionIndex(self):
    """ currentSectionIndex(self) -> int """
    return 1

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def date(self):
    """ date(self) -> QDate """
    return QtCore.QDate()

  def dateChanged(self, arg0, arg1):
    """ dateChanged(self, Union[QDate, datetime.date]) [signal] """
    pass

  def dateTime(self):
    """ dateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def dateTimeChanged(self, arg0, arg1):
    """ dateTimeChanged(self, Union[QDateTime, datetime.datetime]) [signal] """
    pass

  def dateTimeFromText():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def displayFormat(self):
    """ displayFormat(self) -> str """
    return ""

  def displayedSections(self):
    """ displayedSections(self) -> QDateTimeEdit.Sections """
    return QDateTimeEdit.Sections()

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def editingFinished(self):
    """ editingFinished(self) [signal] """
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup():
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAcceptableInput(self):
    """ hasAcceptableInput(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasFrame(self):
    """ hasFrame(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interpretText(self):
    """ interpretText(self) """
    pass

  def isAccelerated(self):
    """ isAccelerated(self) -> bool """
    return True

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isGroupSeparatorShown(self):
    """ isGroupSeparatorShown(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isReadOnly(self):
    """ isReadOnly(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardTracking(self):
    """ keyboardTracking(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineEdit():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumDate(self):
    """ maximumDate(self) -> QDate """
    return QtCore.QDate()

  def maximumDateTime(self):
    """ maximumDateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumTime(self):
    """ maximumTime(self) -> QTime """
    return QtCore.QTime()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumDate(self):
    """ minimumDate(self) -> QDate """
    return QtCore.QDate()

  def minimumDateTime(self):
    """ minimumDateTime(self) -> QDateTime """
    return QtCore.QDateTime()

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumTime(self):
    """ minimumTime(self) -> QTime """
    return QtCore.QTime()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sectionAt(self, int):
    """ sectionAt(self, int) -> QDateTimeEdit.Section """
    return QDateTimeEdit.Section()

  def sectionCount(self):
    """ sectionCount(self) -> int """
    return 1

  def sectionText(self, arg0):
    """ sectionText(self, QDateTimeEdit.Section) -> str """
    return ""

  def selectAll(self):
    """ selectAll(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAccelerated(self, bool):
    """ setAccelerated(self, bool) """
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButtonSymbols(self, arg0):
    """ setButtonSymbols(self, QAbstractSpinBox.ButtonSymbols) """
    pass

  def setCalendarPopup(self, bool):
    """ setCalendarPopup(self, bool) """
    pass

  def setCalendarWidget(self, QCalendarWidget):
    """ setCalendarWidget(self, QCalendarWidget) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCorrectionMode(self, arg0):
    """ setCorrectionMode(self, QAbstractSpinBox.CorrectionMode) """
    pass

  def setCurrentSection(self, arg0):
    """ setCurrentSection(self, QDateTimeEdit.Section) """
    pass

  def setCurrentSectionIndex(self, int):
    """ setCurrentSectionIndex(self, int) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDate(self, UnionQDate=None, datetime.date=None):
    """ setDate(self, Union[QDate, datetime.date]) """
    pass

  def setDateRange(self, UnionQDate=None, datetime.date=None, UnionQDate=None, datetime.date=None):
    """ setDateRange(self, Union[QDate, datetime.date], Union[QDate, datetime.date]) """
    pass

  def setDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setDateTimeRange(self, UnionQDateTime=None, datetime.datetime=None, UnionQDateTime=None, datetime.datetime=None):
    """ setDateTimeRange(self, Union[QDateTime, datetime.datetime], Union[QDateTime, datetime.datetime]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDisplayFormat(self, str):
    """ setDisplayFormat(self, str) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrame(self, bool):
    """ setFrame(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGroupSeparatorShown(self, bool):
    """ setGroupSeparatorShown(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setKeyboardTracking(self, bool):
    """ setKeyboardTracking(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineEdit():
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumDate(self, UnionQDate=None, datetime.date=None):
    """ setMaximumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMaximumDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setMaximumDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumTime(self, UnionQTime=None, datetime.time=None):
    """ setMaximumTime(self, Union[QTime, datetime.time]) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumDate(self, UnionQDate=None, datetime.date=None):
    """ setMinimumDate(self, Union[QDate, datetime.date]) """
    pass

  def setMinimumDateTime(self, UnionQDateTime=None, datetime.datetime=None):
    """ setMinimumDateTime(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumTime(self, UnionQTime=None, datetime.time=None):
    """ setMinimumTime(self, Union[QTime, datetime.time]) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setReadOnly(self, bool):
    """ setReadOnly(self, bool) """
    pass

  def setSelectedSection(self, arg0):
    """ setSelectedSection(self, QDateTimeEdit.Section) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpecialValueText(self, str):
    """ setSpecialValueText(self, str) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTime(self, UnionQTime=None, datetime.time=None):
    """ setTime(self, Union[QTime, datetime.time]) """
    pass

  def setTimeRange(self, UnionQTime=None, datetime.time=None, UnionQTime=None, datetime.time=None):
    """ setTimeRange(self, Union[QTime, datetime.time], Union[QTime, datetime.time]) """
    pass

  def setTimeSpec(self, arg0):
    """ setTimeSpec(self, Qt.TimeSpec) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def specialValueText(self):
    """ specialValueText(self) -> str """
    return ""

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def stepBy(self, int):
    """ stepBy(self, int) """
    pass

  def stepDown(self):
    """ stepDown(self) """
    pass

  def stepEnabled():
    pass

  def stepUp(self):
    """ stepUp(self) """
    pass

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def textFromDateTime():
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def time(self):
    """ time(self) -> QTime """
    return QtCore.QTime()

  def timeChanged(self, arg0, arg1):
    """ timeChanged(self, Union[QTime, datetime.time]) [signal] """
    pass

  def timeSpec(self):
    """ timeSpec(self) -> Qt.TimeSpec """
    return None

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validate():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wrapping(self):
    """ wrapping(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QToolBar(QWidget):
  """ QToolBar(str, parent: QWidget = None)
  QToolBar(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, str, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionAt(self, QtCore.QPoint):
    """ actionAt(self, QPoint) -> QAction
    actionAt(self, int, int) -> QAction """
    return QAction()

  def actionEvent(self, QtGui.QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actionGeometry(self, QAction):
    """ actionGeometry(self, QAction) -> QRect """
    return QtCore.QRect()

  def actionTriggered(self, QAction):
    """ actionTriggered(self, QAction) [signal] """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction)
    addAction(self, str) -> QAction
    addAction(self, QIcon, str) -> QAction
    addAction(self, str, PYQT_SLOT) -> QAction
    addAction(self, QIcon, str, PYQT_SLOT) -> QAction """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addSeparator(self):
    """ addSeparator(self) -> QAction """
    return QAction()

  def addWidget(self, QWidget):
    """ addWidget(self, QWidget) -> QAction """
    return QAction()

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def allowedAreas(self):
    """ allowedAreas(self) -> Qt.ToolBarAreas """
    return None

  def allowedAreasChanged(self, arg0, arg1):
    """ allowedAreasChanged(self, Union[Qt.ToolBarAreas, Qt.ToolBarArea]) [signal] """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionToolBar):
    """ initStyleOption(self, QStyleOptionToolBar) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertSeparator(self, QAction):
    """ insertSeparator(self, QAction) -> QAction """
    return QAction()

  def insertWidget(self, QAction, QWidget):
    """ insertWidget(self, QAction, QWidget) -> QAction """
    return QAction()

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isAreaAllowed(self, arg0):
    """ isAreaAllowed(self, Qt.ToolBarArea) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFloatable(self):
    """ isFloatable(self) -> bool """
    return True

  def isFloating(self):
    """ isFloating(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isMovable(self):
    """ isMovable(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def movableChanged(self, bool):
    """ movableChanged(self, bool) [signal] """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.Orientation """
    return None

  def orientationChanged(self, arg0):
    """ orientationChanged(self, Qt.Orientation) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAllowedAreas(self, UnionQt.ToolBarAreas=None, Qt.ToolBarArea=None):
    """ setAllowedAreas(self, Union[Qt.ToolBarAreas, Qt.ToolBarArea]) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFloatable(self, bool):
    """ setFloatable(self, bool) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovable(self, bool):
    """ setMovable(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, Qt.Orientation) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolButtonStyle(self, arg0):
    """ setToolButtonStyle(self, Qt.ToolButtonStyle) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toggleViewAction(self):
    """ toggleViewAction(self) -> QAction """
    return QAction()

  def toolButtonStyle(self):
    """ toolButtonStyle(self) -> Qt.ToolButtonStyle """
    return None

  def toolButtonStyleChanged(self, arg0):
    """ toolButtonStyleChanged(self, Qt.ToolButtonStyle) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def topLevelChanged(self, bool):
    """ topLevelChanged(self, bool) [signal] """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibilityChanged(self, bool):
    """ visibilityChanged(self, bool) [signal] """
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widgetForAction(self, QAction):
    """ widgetForAction(self, QAction) -> QWidget """
    return QWidget()

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QToolBox(QFrame):
  """ QToolBox(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  Box = None
  DrawChildren = None
  DrawWindowBackground = None
  HLine = None
  IgnoreMask = None
  NoFrame = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  Raised = None
  Shadow_Mask = None
  Shape_Mask = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addItem(self, QWidget, str):
    """ addItem(self, QWidget, str) -> int
    addItem(self, QWidget, QIcon, str) -> int """
    return 1

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def count(self):
    """ count(self) -> int """
    return 1

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, int):
    """ currentChanged(self, int) [signal] """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> int """
    return 1

  def currentWidget(self):
    """ currentWidget(self) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertItem(self, int, QWidget, str):
    """ insertItem(self, int, QWidget, str) -> int
    insertItem(self, int, QWidget, QIcon, str) -> int """
    return 1

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isItemEnabled(self, int):
    """ isItemEnabled(self, int) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemIcon(self, int):
    """ itemIcon(self, int) -> QIcon """
    return QtGui.QIcon()

  def itemInserted(self, int):
    """ itemInserted(self, int) """
    pass

  def itemRemoved(self, int):
    """ itemRemoved(self, int) """
    pass

  def itemText(self, int):
    """ itemText(self, int) -> str """
    return ""

  def itemToolTip(self, int):
    """ itemToolTip(self, int) -> str """
    return ""

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, int):
    """ removeItem(self, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCurrentIndex(self, int):
    """ setCurrentIndex(self, int) """
    pass

  def setCurrentWidget(self, QWidget):
    """ setCurrentWidget(self, QWidget) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemEnabled(self, int, bool):
    """ setItemEnabled(self, int, bool) """
    pass

  def setItemIcon(self, int, QtGui.QIcon):
    """ setItemIcon(self, int, QIcon) """
    pass

  def setItemText(self, int, str):
    """ setItemText(self, int, str) """
    pass

  def setItemToolTip(self, int, str):
    """ setItemToolTip(self, int, str) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def widget(self, int):
    """ widget(self, int) -> QWidget """
    return QWidget()

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QToolButton(QAbstractButton):
  """ QToolButton(parent: QWidget = None) """

  DelayedPopup = None
  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  InstantPopup = None
  MenuButtonPopup = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  class ToolButtonPopupMode(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent(self, QtGui.QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def animateClick(self, arg0=None):
    """ animateClick(self, msecs: int = 100) """
    pass

  def arrowType(self):
    """ arrowType(self) -> Qt.ArrowType """
    return None

  def autoExclusive(self):
    """ autoExclusive(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoRaise(self):
    """ autoRaise(self) -> bool """
    return True

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def autoRepeatDelay(self):
    """ autoRepeatDelay(self) -> int """
    return 1

  def autoRepeatInterval(self):
    """ autoRepeatInterval(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def checkStateSet():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def click(self):
    """ click(self) """
    pass

  def clicked(self, arg0=None):
    """ clicked(self, checked: bool = False) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def defaultAction(self):
    """ defaultAction(self) -> QAction """
    return QAction()

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent(self, QtCore.QEvent):
    """ enterEvent(self, QEvent) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def group(self):
    """ group(self) -> QButtonGroup """
    return QButtonGroup()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def hitButton(self, QtCore.QPoint):
    """ hitButton(self, QPoint) -> bool """
    return True

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption(self, QStyleOptionToolButton):
    """ initStyleOption(self, QStyleOptionToolButton) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isDown(self):
    """ isDown(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent(self, QtCore.QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def menu(self):
    """ menu(self) -> QMenu """
    return QMenu()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextCheckState(self):
    """ nextCheckState(self) """
    pass

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def popupMode(self):
    """ popupMode(self) -> QToolButton.ToolButtonPopupMode """
    return QToolButton.ToolButtonPopupMode()

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self):
    """ pressed(self) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def released(self):
    """ released(self) [signal] """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setArrowType(self, arg0):
    """ setArrowType(self, Qt.ArrowType) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoExclusive(self, bool):
    """ setAutoExclusive(self, bool) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoRaise(self, bool):
    """ setAutoRaise(self, bool) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setAutoRepeatDelay(self, int):
    """ setAutoRepeatDelay(self, int) """
    pass

  def setAutoRepeatInterval(self, int):
    """ setAutoRepeatInterval(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultAction(self, QAction):
    """ setDefaultAction(self, QAction) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDown(self, bool):
    """ setDown(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMenu(self, QMenu):
    """ setMenu(self, QMenu) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPopupMode(self, arg0):
    """ setPopupMode(self, QToolButton.ToolButtonPopupMode) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolButtonStyle(self, arg0):
    """ setToolButtonStyle(self, Qt.ToolButtonStyle) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMenu(self):
    """ showMenu(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolButtonStyle(self):
    """ toolButtonStyle(self) -> Qt.ToolButtonStyle """
    return None

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def triggered(self, QAction):
    """ triggered(self, QAction) [signal] """
    pass

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QToolTip(simplewrapper):
  """ QToolTip(QToolTip) """

  def __init__(self, QToolTip):
    pass

  def font():
    """ font() -> QFont """
    return QtGui.QFont()

  def hideText():
    """ hideText() """
    pass

  def isVisible():
    """ isVisible() -> bool """
    return True

  def palette():
    """ palette() -> QPalette """
    return QtGui.QPalette()

  def setFont(QtGui.QFont):
    """ setFont(QFont) """
    pass

  def setPalette(QtGui.QPalette):
    """ setPalette(QPalette) """
    pass

  def showText(QtCore.QPoint, str, arg0=None):
    """ showText(QPoint, str, widget: QWidget = None)
    showText(QPoint, str, QWidget, QRect)
    showText(QPoint, str, QWidget, QRect, int) """
    pass

  def text():
    """ text() -> str """
    return ""

class QTreeView(QAbstractItemView):
  """ QTreeView(parent: QWidget = None) """

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  HLine = None
  IgnoreMask = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SingleSelection = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def allColumnsShowFocus(self):
    """ allColumnsShowFocus(self) -> bool """
    return True

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoExpandDelay(self):
    """ autoExpandDelay(self) -> int """
    return 1

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QtCore.QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def collapse(self, QtCore.QModelIndex):
    """ collapse(self, QModelIndex) """
    pass

  def collapseAll(self):
    """ collapseAll(self) """
    pass

  def collapsed(self, QtCore.QModelIndex):
    """ collapsed(self, QModelIndex) [signal] """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def columnAt(self, int):
    """ columnAt(self, int) -> int """
    return 1

  def columnCountChanged(self, int, int):
    """ columnCountChanged(self, int, int) """
    pass

  def columnMoved(self):
    """ columnMoved(self) """
    pass

  def columnResized(self, int, int, int):
    """ columnResized(self, int, int, int) """
    pass

  def columnViewportPosition(self, int):
    """ columnViewportPosition(self, int) -> int """
    return 1

  def columnWidth(self, int):
    """ columnWidth(self, int) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged(self, QtCore.QModelIndex, QtCore.QModelIndex):
    """ currentChanged(self, QModelIndex, QModelIndex) """
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged(self, QtCore.QModelIndex, QtCore.QModelIndex, arg0=None):
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) """
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def drawBranches(self, QtGui.QPainter, QtCore.QRect, QtCore.QModelIndex):
    """ drawBranches(self, QPainter, QRect, QModelIndex) """
    pass

  def drawFrame():
    pass

  def drawRow(self, QtGui.QPainter, QStyleOptionViewItem, QtCore.QModelIndex):
    """ drawRow(self, QPainter, QStyleOptionViewItem, QModelIndex) """
    pass

  def drawTree(self, QtGui.QPainter, QtGui.QRegion):
    """ drawTree(self, QPainter, QRegion) """
    pass

  def dropEvent():
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event():
    pass

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def expand(self, QtCore.QModelIndex):
    """ expand(self, QModelIndex) """
    pass

  def expandAll(self):
    """ expandAll(self) """
    pass

  def expandRecursively(self, QtCore.QModelIndex, arg0=None):
    """ expandRecursively(self, QModelIndex, depth: int = -1) """
    pass

  def expandToDepth(self, int):
    """ expandToDepth(self, int) """
    pass

  def expanded(self, QtCore.QModelIndex):
    """ expanded(self, QModelIndex) [signal] """
    pass

  def expandsOnDoubleClick(self):
    """ expandsOnDoubleClick(self) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def header(self):
    """ header(self) -> QHeaderView """
    return QHeaderView()

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideColumn(self, int):
    """ hideColumn(self, int) """
    pass

  def hideEvent():
    pass

  def horizontalOffset(self):
    """ horizontalOffset(self) -> int """
    return 1

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction(self, int):
    """ horizontalScrollbarAction(self, int) """
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indentation(self):
    """ indentation(self) -> int """
    return 1

  def indexAbove(self, QtCore.QModelIndex):
    """ indexAbove(self, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexBelow(self, QtCore.QModelIndex):
    """ indexBelow(self, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexRowSizeHint(self, QtCore.QModelIndex):
    """ indexRowSizeHint(self, QModelIndex) -> int """
    return 1

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isAnimated(self):
    """ isAnimated(self) -> bool """
    return True

  def isColumnHidden(self, int):
    """ isColumnHidden(self, int) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isExpanded(self, QtCore.QModelIndex):
    """ isExpanded(self, QModelIndex) -> bool """
    return True

  def isFirstColumnSpanned(self, int, QtCore.QModelIndex):
    """ isFirstColumnSpanned(self, int, QModelIndex) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHeaderHidden(self):
    """ isHeaderHidden(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden(self, QtCore.QModelIndex):
    """ isIndexHidden(self, QModelIndex) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QtCore.QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isRowHidden(self, int, QtCore.QModelIndex):
    """ isRowHidden(self, int, QModelIndex) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSortingEnabled(self):
    """ isSortingEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemsExpandable(self):
    """ itemsExpandable(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor(self, arg0, UnionQt.KeyboardModifiers=None, Qt.KeyboardModifier=None):
    """ moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex """
    return QtCore.QModelIndex()

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QtCore.QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reexpand(self):
    """ reexpand(self) """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetIndentation(self):
    """ resetIndentation(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeColumnToContents(self, int):
    """ resizeColumnToContents(self, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rootIsDecorated(self):
    """ rootIsDecorated(self) -> bool """
    return True

  def rowHeight(self, QtCore.QModelIndex):
    """ rowHeight(self, QModelIndex) -> int """
    return 1

  def rowsAboutToBeRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) """
    pass

  def rowsInserted(self, QtCore.QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) """
    pass

  def rowsRemoved(self, QtCore.QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) """
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy(self, int, int):
    """ scrollContentsBy(self, int, int) """
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes(self):
    """ selectedIndexes(self) -> List[QModelIndex] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged(self, QtCore.QItemSelection, QtCore.QItemSelection):
    """ selectionChanged(self, QItemSelection, QItemSelection) """
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAllColumnsShowFocus(self, bool):
    """ setAllColumnsShowFocus(self, bool) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAnimated(self, bool):
    """ setAnimated(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoExpandDelay(self, int):
    """ setAutoExpandDelay(self, int) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setColumnHidden(self, int, bool):
    """ setColumnHidden(self, int, bool) """
    pass

  def setColumnWidth(self, int, int):
    """ setColumnWidth(self, int, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExpanded(self, QtCore.QModelIndex, bool):
    """ setExpanded(self, QModelIndex, bool) """
    pass

  def setExpandsOnDoubleClick(self, bool):
    """ setExpandsOnDoubleClick(self, bool) """
    pass

  def setFirstColumnSpanned(self, int, QtCore.QModelIndex, bool):
    """ setFirstColumnSpanned(self, int, QModelIndex, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHeader(self, QHeaderView):
    """ setHeader(self, QHeaderView) """
    pass

  def setHeaderHidden(self, bool):
    """ setHeaderHidden(self, bool) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndentation(self, int):
    """ setIndentation(self, int) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setItemsExpandable(self, bool):
    """ setItemsExpandable(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRootIsDecorated(self, bool):
    """ setRootIsDecorated(self, bool) """
    pass

  def setRowHidden(self, int, QtCore.QModelIndex, bool):
    """ setRowHidden(self, int, QModelIndex, bool) """
    pass

  def setSelection(self, QtCore.QRect, UnionQItemSelectionModel.SelectionFlags=None, QItemSelectionModel.SelectionFlag=None):
    """ setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSortingEnabled(self, bool):
    """ setSortingEnabled(self, bool) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTreePosition(self, int):
    """ setTreePosition(self, int) """
    pass

  def setUniformRowHeights(self, bool):
    """ setUniformRowHeights(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showColumn(self, int):
    """ showColumn(self, int) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sortByColumn(self, int, arg0):
    """ sortByColumn(self, int, Qt.SortOrder) """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent(self, QtCore.QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def treePosition(self):
    """ treePosition(self) -> int """
    return 1

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def uniformRowHeights(self):
    """ uniformRowHeights(self) -> bool """
    return True

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries(self):
    """ updateGeometries(self) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset(self):
    """ verticalOffset(self) -> int """
    return 1

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent(self, QtCore.QEvent):
    """ viewportEvent(self, QEvent) -> bool """
    return True

  def viewportMargins():
    pass

  def viewportSizeHint(self):
    """ viewportSizeHint(self) -> QSize """
    return QtCore.QSize()

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection(self, QtCore.QItemSelection):
    """ visualRegionForSelection(self, QItemSelection) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QTreeWidget(QTreeView):
  """ QTreeWidget(parent: QWidget = None) """

  AboveItem = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  HLine = None
  IgnoreMask = None
  InternalMove = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SingleSelection = None
  StyledPanel = None
  Sunken = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def addTopLevelItem(self, QTreeWidgetItem):
    """ addTopLevelItem(self, QTreeWidgetItem) """
    pass

  def addTopLevelItems(self, IterableQTreeWidgetItem=None):
    """ addTopLevelItems(self, Iterable[QTreeWidgetItem]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def allColumnsShowFocus(self):
    """ allColumnsShowFocus(self) -> bool """
    return True

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoExpandDelay(self):
    """ autoExpandDelay(self) -> int """
    return 1

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clear(self):
    """ clear(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QTreeWidgetItem, arg0=None):
    """ closePersistentEditor(self, QTreeWidgetItem, column: int = 0) """
    pass

  def collapse(self, QtCore.QModelIndex):
    """ collapse(self, QModelIndex) """
    pass

  def collapseAll(self):
    """ collapseAll(self) """
    pass

  def collapseItem(self, QTreeWidgetItem):
    """ collapseItem(self, QTreeWidgetItem) """
    pass

  def collapsed(self, QtCore.QModelIndex):
    """ collapsed(self, QModelIndex) [signal] """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def columnAt(self, int):
    """ columnAt(self, int) -> int """
    return 1

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def columnCountChanged():
    pass

  def columnMoved():
    pass

  def columnResized():
    pass

  def columnViewportPosition(self, int):
    """ columnViewportPosition(self, int) -> int """
    return 1

  def columnWidth(self, int):
    """ columnWidth(self, int) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged():
    pass

  def currentColumn(self):
    """ currentColumn(self) -> int """
    return 1

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def currentItem(self):
    """ currentItem(self) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def currentItemChanged(self, QTreeWidgetItem, QTreeWidgetItem):
    """ currentItemChanged(self, QTreeWidgetItem, QTreeWidgetItem) [signal] """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged(self, QtCore.QModelIndex, QtCore.QModelIndex, arg0=None):
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) """
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawBranches():
    pass

  def drawFrame():
    pass

  def drawRow():
    pass

  def drawTree():
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dropIndicatorPosition():
    pass

  def dropMimeData(self, QTreeWidgetItem, int, QtCore.QMimeData, arg0):
    """ dropMimeData(self, QTreeWidgetItem, int, QMimeData, Qt.DropAction) -> bool """
    return True

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editItem(self, QTreeWidgetItem, arg0=None):
    """ editItem(self, QTreeWidgetItem, column: int = 0) """
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def expand(self, QtCore.QModelIndex):
    """ expand(self, QModelIndex) """
    pass

  def expandAll(self):
    """ expandAll(self) """
    pass

  def expandItem(self, QTreeWidgetItem):
    """ expandItem(self, QTreeWidgetItem) """
    pass

  def expandRecursively(self, QtCore.QModelIndex, arg0=None):
    """ expandRecursively(self, QModelIndex, depth: int = -1) """
    pass

  def expandToDepth(self, int):
    """ expandToDepth(self, int) """
    pass

  def expanded(self, QtCore.QModelIndex):
    """ expanded(self, QModelIndex) [signal] """
    pass

  def expandsOnDoubleClick(self):
    """ expandsOnDoubleClick(self) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findItems(self, str, UnionQt.MatchFlags=None, Qt.MatchFlag=None, arg0=None):
    """ findItems(self, str, Union[Qt.MatchFlags, Qt.MatchFlag], column: int = 0) -> List[QTreeWidgetItem] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def header(self):
    """ header(self) -> QHeaderView """
    return QHeaderView()

  def headerItem(self):
    """ headerItem(self) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideColumn(self, int):
    """ hideColumn(self, int) """
    pass

  def hideEvent():
    pass

  def horizontalOffset():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indentation(self):
    """ indentation(self) -> int """
    return 1

  def indexAbove(self, QtCore.QModelIndex):
    """ indexAbove(self, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexBelow(self, QtCore.QModelIndex):
    """ indexBelow(self, QModelIndex) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexFromItem(self, QTreeWidgetItem, arg0=None):
    """ indexFromItem(self, QTreeWidgetItem, column: int = 0) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexOfTopLevelItem(self, QTreeWidgetItem):
    """ indexOfTopLevelItem(self, QTreeWidgetItem) -> int """
    return 1

  def indexRowSizeHint():
    pass

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def insertTopLevelItem(self, int, QTreeWidgetItem):
    """ insertTopLevelItem(self, int, QTreeWidgetItem) """
    pass

  def insertTopLevelItems(self, int, IterableQTreeWidgetItem=None):
    """ insertTopLevelItems(self, int, Iterable[QTreeWidgetItem]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invisibleRootItem(self):
    """ invisibleRootItem(self) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isAnimated(self):
    """ isAnimated(self) -> bool """
    return True

  def isColumnHidden(self, int):
    """ isColumnHidden(self, int) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isExpanded(self, QtCore.QModelIndex):
    """ isExpanded(self, QModelIndex) -> bool """
    return True

  def isFirstColumnSpanned(self, int, QtCore.QModelIndex):
    """ isFirstColumnSpanned(self, int, QModelIndex) -> bool """
    return True

  def isFirstItemColumnSpanned(self, QTreeWidgetItem):
    """ isFirstItemColumnSpanned(self, QTreeWidgetItem) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHeaderHidden(self):
    """ isHeaderHidden(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden():
    pass

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QTreeWidgetItem, arg0=None):
    """ isPersistentEditorOpen(self, QTreeWidgetItem, column: int = 0) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isRowHidden(self, int, QtCore.QModelIndex):
    """ isRowHidden(self, int, QModelIndex) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSortingEnabled(self):
    """ isSortingEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAbove(self, QTreeWidgetItem):
    """ itemAbove(self, QTreeWidgetItem) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def itemActivated(self, QTreeWidgetItem, int):
    """ itemActivated(self, QTreeWidgetItem, int) [signal] """
    pass

  def itemAt(self, QtCore.QPoint):
    """ itemAt(self, QPoint) -> QTreeWidgetItem
    itemAt(self, int, int) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def itemBelow(self, QTreeWidgetItem):
    """ itemBelow(self, QTreeWidgetItem) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def itemChanged(self, QTreeWidgetItem, int):
    """ itemChanged(self, QTreeWidgetItem, int) [signal] """
    pass

  def itemClicked(self, QTreeWidgetItem, int):
    """ itemClicked(self, QTreeWidgetItem, int) [signal] """
    pass

  def itemCollapsed(self, QTreeWidgetItem):
    """ itemCollapsed(self, QTreeWidgetItem) [signal] """
    pass

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDoubleClicked(self, QTreeWidgetItem, int):
    """ itemDoubleClicked(self, QTreeWidgetItem, int) [signal] """
    pass

  def itemEntered(self, QTreeWidgetItem, int):
    """ itemEntered(self, QTreeWidgetItem, int) [signal] """
    pass

  def itemExpanded(self, QTreeWidgetItem):
    """ itemExpanded(self, QTreeWidgetItem) [signal] """
    pass

  def itemFromIndex(self, QtCore.QModelIndex):
    """ itemFromIndex(self, QModelIndex) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def itemPressed(self, QTreeWidgetItem, int):
    """ itemPressed(self, QTreeWidgetItem, int) [signal] """
    pass

  def itemSelectionChanged(self):
    """ itemSelectionChanged(self) [signal] """
    pass

  def itemWidget(self, QTreeWidgetItem, int):
    """ itemWidget(self, QTreeWidgetItem, int) -> QWidget """
    return QWidget()

  def itemsExpandable(self):
    """ itemsExpandable(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def mimeData(self, IterableQTreeWidgetItem=None):
    """ mimeData(self, Iterable[QTreeWidgetItem]) -> QMimeData """
    return QtCore.QMimeData()

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor():
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QTreeWidgetItem, arg0=None):
    """ openPersistentEditor(self, QTreeWidgetItem, column: int = 0) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reexpand():
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItemWidget(self, QTreeWidgetItem, int):
    """ removeItemWidget(self, QTreeWidgetItem, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetIndentation(self):
    """ resetIndentation(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeColumnToContents(self, int):
    """ resizeColumnToContents(self, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rootIsDecorated(self):
    """ rootIsDecorated(self) -> bool """
    return True

  def rowHeight():
    pass

  def rowsAboutToBeRemoved():
    pass

  def rowsInserted():
    pass

  def rowsRemoved():
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy():
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToItem(self, QTreeWidgetItem, arg0=None):
    """ scrollToItem(self, QTreeWidgetItem, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes():
    pass

  def selectedItems(self):
    """ selectedItems(self) -> List[QTreeWidgetItem] """
    return None

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged():
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAllColumnsShowFocus(self, bool):
    """ setAllColumnsShowFocus(self, bool) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAnimated(self, bool):
    """ setAnimated(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoExpandDelay(self, int):
    """ setAutoExpandDelay(self, int) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setColumnCount(self, int):
    """ setColumnCount(self, int) """
    pass

  def setColumnHidden(self, int, bool):
    """ setColumnHidden(self, int, bool) """
    pass

  def setColumnWidth(self, int, int):
    """ setColumnWidth(self, int, int) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCurrentItem(self, QTreeWidgetItem):
    """ setCurrentItem(self, QTreeWidgetItem)
    setCurrentItem(self, QTreeWidgetItem, int)
    setCurrentItem(self, QTreeWidgetItem, int, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag]) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setExpanded(self, QtCore.QModelIndex, bool):
    """ setExpanded(self, QModelIndex, bool) """
    pass

  def setExpandsOnDoubleClick(self, bool):
    """ setExpandsOnDoubleClick(self, bool) """
    pass

  def setFirstColumnSpanned(self, int, QtCore.QModelIndex, bool):
    """ setFirstColumnSpanned(self, int, QModelIndex, bool) """
    pass

  def setFirstItemColumnSpanned(self, QTreeWidgetItem, bool):
    """ setFirstItemColumnSpanned(self, QTreeWidgetItem, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHeader(self, QHeaderView):
    """ setHeader(self, QHeaderView) """
    pass

  def setHeaderHidden(self, bool):
    """ setHeaderHidden(self, bool) """
    pass

  def setHeaderItem(self, QTreeWidgetItem):
    """ setHeaderItem(self, QTreeWidgetItem) """
    pass

  def setHeaderLabel(self, str):
    """ setHeaderLabel(self, str) """
    pass

  def setHeaderLabels(self, Iterablestr=None):
    """ setHeaderLabels(self, Iterable[str]) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndentation(self, int):
    """ setIndentation(self, int) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setItemWidget(self, QTreeWidgetItem, int, QWidget):
    """ setItemWidget(self, QTreeWidgetItem, int, QWidget) """
    pass

  def setItemsExpandable(self, bool):
    """ setItemsExpandable(self, bool) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel():
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRootIsDecorated(self, bool):
    """ setRootIsDecorated(self, bool) """
    pass

  def setRowHidden(self, int, QtCore.QModelIndex, bool):
    """ setRowHidden(self, int, QModelIndex, bool) """
    pass

  def setSelection():
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSortingEnabled(self, bool):
    """ setSortingEnabled(self, bool) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setTreePosition(self, int):
    """ setTreePosition(self, int) """
    pass

  def setUniformRowHeights(self, bool):
    """ setUniformRowHeights(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showColumn(self, int):
    """ showColumn(self, int) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn():
    pass

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def sortByColumn(self, int, arg0):
    """ sortByColumn(self, int, Qt.SortOrder) """
    pass

  def sortColumn(self):
    """ sortColumn(self) -> int """
    return 1

  def sortItems(self, int, arg0):
    """ sortItems(self, int, Qt.SortOrder) """
    pass

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def takeTopLevelItem(self, int):
    """ takeTopLevelItem(self, int) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def topLevelItem(self, int):
    """ topLevelItem(self, int) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def topLevelItemCount(self):
    """ topLevelItemCount(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def treePosition(self):
    """ treePosition(self) -> int """
    return 1

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def uniformRowHeights(self):
    """ uniformRowHeights(self) -> bool """
    return True

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries():
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset():
    pass

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualItemRect(self, QTreeWidgetItem):
    """ visualItemRect(self, QTreeWidgetItem) -> QRect """
    return QtCore.QRect()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection():
    pass

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QTreeWidgetItem(wrapper):
  """ QTreeWidgetItem(type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(Iterable[str], type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(QTreeWidget, type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(QTreeWidget, Iterable[str], type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(QTreeWidget, QTreeWidgetItem, type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(QTreeWidgetItem, type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(QTreeWidgetItem, Iterable[str], type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(QTreeWidgetItem, QTreeWidgetItem, type: int = QTreeWidgetItem.Type)
  QTreeWidgetItem(QTreeWidgetItem) """

  class ChildIndicatorPolicy(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DontShowIndicator = None
  DontShowIndicatorWhenChildless = None

  class ItemType(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ShowIndicator = None
  Type = None
  UserType = None

  def __init__(self, arg0=None):
    pass

  def addChild(self, QTreeWidgetItem):
    """ addChild(self, QTreeWidgetItem) """
    pass

  def addChildren(self, IterableQTreeWidgetItem=None):
    """ addChildren(self, Iterable[QTreeWidgetItem]) """
    pass

  def background(self, int):
    """ background(self, int) -> QBrush """
    return QtGui.QBrush()

  def checkState(self, int):
    """ checkState(self, int) -> Qt.CheckState """
    return None

  def child(self, int):
    """ child(self, int) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def childCount(self):
    """ childCount(self) -> int """
    return 1

  def childIndicatorPolicy(self):
    """ childIndicatorPolicy(self) -> QTreeWidgetItem.ChildIndicatorPolicy """
    return QTreeWidgetItem.ChildIndicatorPolicy()

  def clone(self):
    """ clone(self) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def data(self, int, int):
    """ data(self, int, int) -> Any """
    return None

  def emitDataChanged(self):
    """ emitDataChanged(self) """
    pass

  def flags(self):
    """ flags(self) -> Qt.ItemFlags """
    return None

  def font(self, int):
    """ font(self, int) -> QFont """
    return QtGui.QFont()

  def foreground(self, int):
    """ foreground(self, int) -> QBrush """
    return QtGui.QBrush()

  def icon(self, int):
    """ icon(self, int) -> QIcon """
    return QtGui.QIcon()

  def indexOfChild(self, QTreeWidgetItem):
    """ indexOfChild(self, QTreeWidgetItem) -> int """
    return 1

  def insertChild(self, int, QTreeWidgetItem):
    """ insertChild(self, int, QTreeWidgetItem) """
    pass

  def insertChildren(self, int, IterableQTreeWidgetItem=None):
    """ insertChildren(self, int, Iterable[QTreeWidgetItem]) """
    pass

  def isDisabled(self):
    """ isDisabled(self) -> bool """
    return True

  def isExpanded(self):
    """ isExpanded(self) -> bool """
    return True

  def isFirstColumnSpanned(self):
    """ isFirstColumnSpanned(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isSelected(self):
    """ isSelected(self) -> bool """
    return True

  def parent(self):
    """ parent(self) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def read(self, QtCore.QDataStream):
    """ read(self, QDataStream) """
    pass

  def removeChild(self, QTreeWidgetItem):
    """ removeChild(self, QTreeWidgetItem) """
    pass

  def setBackground(self, int, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, int, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCheckState(self, int, arg0):
    """ setCheckState(self, int, Qt.CheckState) """
    pass

  def setChildIndicatorPolicy(self, arg0):
    """ setChildIndicatorPolicy(self, QTreeWidgetItem.ChildIndicatorPolicy) """
    pass

  def setData(self, int, int, Any):
    """ setData(self, int, int, Any) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setExpanded(self, bool):
    """ setExpanded(self, bool) """
    pass

  def setFirstColumnSpanned(self, bool):
    """ setFirstColumnSpanned(self, bool) """
    pass

  def setFlags(self, UnionQt.ItemFlags=None, Qt.ItemFlag=None):
    """ setFlags(self, Union[Qt.ItemFlags, Qt.ItemFlag]) """
    pass

  def setFont(self, int, QtGui.QFont):
    """ setFont(self, int, QFont) """
    pass

  def setForeground(self, int, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, int, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setIcon(self, int, QtGui.QIcon):
    """ setIcon(self, int, QIcon) """
    pass

  def setSelected(self, bool):
    """ setSelected(self, bool) """
    pass

  def setSizeHint(self, int, QtCore.QSize):
    """ setSizeHint(self, int, QSize) """
    pass

  def setStatusTip(self, int, str):
    """ setStatusTip(self, int, str) """
    pass

  def setText(self, int, str):
    """ setText(self, int, str) """
    pass

  def setTextAlignment(self, int, int):
    """ setTextAlignment(self, int, int) """
    pass

  def setToolTip(self, int, str):
    """ setToolTip(self, int, str) """
    pass

  def setWhatsThis(self, int, str):
    """ setWhatsThis(self, int, str) """
    pass

  def sizeHint(self, int):
    """ sizeHint(self, int) -> QSize """
    return QtCore.QSize()

  def sortChildren(self, int, arg0):
    """ sortChildren(self, int, Qt.SortOrder) """
    pass

  def statusTip(self, int):
    """ statusTip(self, int) -> str """
    return ""

  def takeChild(self, int):
    """ takeChild(self, int) -> QTreeWidgetItem """
    return QTreeWidgetItem()

  def takeChildren(self):
    """ takeChildren(self) -> List[QTreeWidgetItem] """
    return None

  def text(self, int):
    """ text(self, int) -> str """
    return ""

  def textAlignment(self, int):
    """ textAlignment(self, int) -> int """
    return 1

  def toolTip(self, int):
    """ toolTip(self, int) -> str """
    return ""

  def treeWidget(self):
    """ treeWidget(self) -> QTreeWidget """
    return QTreeWidget()

  def type(self):
    """ type(self) -> int """
    return 1

  def whatsThis(self, int):
    """ whatsThis(self, int) -> str """
    return ""

  def write(self, QtCore.QDataStream):
    """ write(self, QDataStream) """
    pass

class QTreeWidgetItemIterator(simplewrapper):
  """ QTreeWidgetItemIterator(QTreeWidgetItemIterator)
  QTreeWidgetItemIterator(QTreeWidget, flags: QTreeWidgetItemIterator.IteratorFlags = QTreeWidgetItemIterator.All)
  QTreeWidgetItemIterator(QTreeWidgetItem, flags: QTreeWidgetItemIterator.IteratorFlags = QTreeWidgetItemIterator.All) """

  All = None
  Checked = None
  Disabled = None
  DragDisabled = None
  DragEnabled = None
  DropDisabled = None
  DropEnabled = None
  Editable = None
  Enabled = None
  HasChildren = None
  Hidden = None

  class IteratorFlag(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class IteratorFlags(simplewrapper):
    """ QTreeWidgetItemIterator.IteratorFlags()
    QTreeWidgetItemIterator.IteratorFlags(Union[QTreeWidgetItemIterator.IteratorFlags, QTreeWidgetItemIterator.IteratorFlag])
    QTreeWidgetItemIterator.IteratorFlags(QTreeWidgetItemIterator.IteratorFlags) """

    def __init__(self):
      pass

  NoChildren = None
  NotChecked = None
  NotEditable = None
  NotHidden = None
  NotSelectable = None
  Selectable = None
  Selected = None
  Unselected = None
  UserFlag = None

  def __init__(self, QTreeWidgetItemIterator):
    pass

  def value(self):
    """ value(self) -> QTreeWidgetItem """
    return QTreeWidgetItem()

class QUndoCommand(wrapper):
  """ QUndoCommand(parent: QUndoCommand = None)
  QUndoCommand(str, parent: QUndoCommand = None) """

  def __init__(self, arg0=None):
    pass

  def actionText(self):
    """ actionText(self) -> str """
    return ""

  def child(self, int):
    """ child(self, int) -> QUndoCommand """
    return QUndoCommand()

  def childCount(self):
    """ childCount(self) -> int """
    return 1

  def id(self):
    """ id(self) -> int """
    return 1

  def isObsolete(self):
    """ isObsolete(self) -> bool """
    return True

  def mergeWith(self, QUndoCommand):
    """ mergeWith(self, QUndoCommand) -> bool """
    return True

  def redo(self):
    """ redo(self) """
    pass

  def setObsolete(self, bool):
    """ setObsolete(self, bool) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def text(self):
    """ text(self) -> str """
    return ""

  def undo(self):
    """ undo(self) """
    pass

class QUndoGroup(QObject):
  """ QUndoGroup(parent: QObject = None) """

  def __init__(self, arg0=None):
    pass

  def activeStack(self):
    """ activeStack(self) -> QUndoStack """
    return QUndoStack()

  def activeStackChanged(self, QUndoStack):
    """ activeStackChanged(self, QUndoStack) [signal] """
    pass

  def addStack(self, QUndoStack):
    """ addStack(self, QUndoStack) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def canRedo(self):
    """ canRedo(self) -> bool """
    return True

  def canRedoChanged(self, bool):
    """ canRedoChanged(self, bool) [signal] """
    pass

  def canUndo(self):
    """ canUndo(self) -> bool """
    return True

  def canUndoChanged(self, bool):
    """ canUndoChanged(self, bool) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def cleanChanged(self, bool):
    """ cleanChanged(self, bool) [signal] """
    pass

  def connectNotify():
    pass

  def createRedoAction(self, QtCore.QObject, arg0=None):
    """ createRedoAction(self, QObject, prefix: str = '') -> QAction """
    return QAction()

  def createUndoAction(self, QtCore.QObject, arg0=None):
    """ createUndoAction(self, QObject, prefix: str = '') -> QAction """
    return QAction()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def indexChanged(self, int):
    """ indexChanged(self, int) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isClean(self):
    """ isClean(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def redo(self):
    """ redo(self) """
    pass

  def redoText(self):
    """ redoText(self) -> str """
    return ""

  def redoTextChanged(self, str):
    """ redoTextChanged(self, str) [signal] """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeStack(self, QUndoStack):
    """ removeStack(self, QUndoStack) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setActiveStack(self, QUndoStack):
    """ setActiveStack(self, QUndoStack) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def stacks(self):
    """ stacks(self) -> List[QUndoStack] """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def undo(self):
    """ undo(self) """
    pass

  def undoText(self):
    """ undoText(self) -> str """
    return ""

  def undoTextChanged(self, str):
    """ undoTextChanged(self, str) [signal] """
    pass

class QUndoStack(QObject):
  """ QUndoStack(parent: QObject = None) """

  def __init__(self, arg0=None):
    pass

  def beginMacro(self, str):
    """ beginMacro(self, str) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def canRedo(self):
    """ canRedo(self) -> bool """
    return True

  def canRedoChanged(self, bool):
    """ canRedoChanged(self, bool) [signal] """
    pass

  def canUndo(self):
    """ canUndo(self) -> bool """
    return True

  def canUndoChanged(self, bool):
    """ canUndoChanged(self, bool) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def cleanChanged(self, bool):
    """ cleanChanged(self, bool) [signal] """
    pass

  def cleanIndex(self):
    """ cleanIndex(self) -> int """
    return 1

  def clear(self):
    """ clear(self) """
    pass

  def command(self, int):
    """ command(self, int) -> QUndoCommand """
    return QUndoCommand()

  def connectNotify():
    pass

  def count(self):
    """ count(self) -> int """
    return 1

  def createRedoAction(self, QtCore.QObject, arg0=None):
    """ createRedoAction(self, QObject, prefix: str = '') -> QAction """
    return QAction()

  def createUndoAction(self, QtCore.QObject, arg0=None):
    """ createUndoAction(self, QObject, prefix: str = '') -> QAction """
    return QAction()

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def endMacro(self):
    """ endMacro(self) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def index(self):
    """ index(self) -> int """
    return 1

  def indexChanged(self, int):
    """ indexChanged(self, int) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return True

  def isClean(self):
    """ isClean(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def push(self, QUndoCommand):
    """ push(self, QUndoCommand) """
    pass

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def redo(self):
    """ redo(self) """
    pass

  def redoText(self):
    """ redoText(self) -> str """
    return ""

  def redoTextChanged(self, str):
    """ redoTextChanged(self, str) [signal] """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resetClean(self):
    """ resetClean(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setActive(self, arg0=None):
    """ setActive(self, active: bool = True) """
    pass

  def setClean(self):
    """ setClean(self) """
    pass

  def setIndex(self, int):
    """ setIndex(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setUndoLimit(self, int):
    """ setUndoLimit(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def text(self, int):
    """ text(self, int) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def undo(self):
    """ undo(self) """
    pass

  def undoLimit(self):
    """ undoLimit(self) -> int """
    return 1

  def undoText(self):
    """ undoText(self) -> str """
    return ""

  def undoTextChanged(self, str):
    """ undoTextChanged(self, str) [signal] """
    pass

class QUndoView(QListView):
  """ QUndoView(parent: QWidget = None)
  QUndoView(QUndoStack, parent: QWidget = None)
  QUndoView(QUndoGroup, parent: QWidget = None) """

  AboveItem = None
  Adjust = None
  AdjustIgnored = None
  AdjustToContents = None
  AdjustToContentsOnFirstShow = None
  AllEditTriggers = None
  AnimatingState = None
  AnyKeyPressed = None
  Batched = None
  BelowItem = None
  Box = None
  CollapsingState = None
  ContiguousSelection = None
  CurrentChanged = None
  DoubleClicked = None
  DragDrop = None
  DragOnly = None
  DragSelectingState = None
  DraggingState = None
  DrawChildren = None
  DrawWindowBackground = None
  DropOnly = None
  EditKeyPressed = None
  EditingState = None
  EnsureVisible = None
  ExpandingState = None
  ExtendedSelection = None
  Fixed = None
  Free = None
  HLine = None
  IconMode = None
  IgnoreMask = None
  InternalMove = None
  LeftToRight = None
  ListMode = None
  MoveDown = None
  MoveEnd = None
  MoveHome = None
  MoveLeft = None
  MoveNext = None
  MovePageDown = None
  MovePageUp = None
  MovePrevious = None
  MoveRight = None
  MoveUp = None
  MultiSelection = None
  NoDragDrop = None
  NoEditTriggers = None
  NoFrame = None
  NoSelection = None
  NoState = None
  OnItem = None
  OnViewport = None
  Panel = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Plain = None
  PositionAtBottom = None
  PositionAtCenter = None
  PositionAtTop = None
  Raised = None
  ScrollPerItem = None
  ScrollPerPixel = None
  SelectColumns = None
  SelectItems = None
  SelectRows = None
  SelectedClicked = None
  Shadow_Mask = None
  Shape_Mask = None
  SinglePass = None
  SingleSelection = None
  Snap = None
  Static = None
  StyledPanel = None
  Sunken = None
  TopToBottom = None
  VLine = None
  WinPanel = None

  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def activated(self, QtCore.QModelIndex):
    """ activated(self, QModelIndex) [signal] """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addScrollBarWidget(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def alternatingRowColors(self):
    """ alternatingRowColors(self) -> bool """
    return True

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def autoScrollMargin(self):
    """ autoScrollMargin(self) -> int """
    return 1

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def batchSize(self):
    """ batchSize(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def cleanIcon(self):
    """ cleanIcon(self) -> QIcon """
    return QtGui.QIcon()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def clearPropertyFlags(self):
    """ clearPropertyFlags(self) """
    pass

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def clicked(self, QtCore.QModelIndex):
    """ clicked(self, QModelIndex) [signal] """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEditor():
    pass

  def closeEvent():
    pass

  def closePersistentEditor(self, QtCore.QModelIndex):
    """ closePersistentEditor(self, QModelIndex) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def commitData():
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def cornerWidget(self):
    """ cornerWidget(self) -> QWidget """
    return QWidget()

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentChanged():
    pass

  def currentIndex(self):
    """ currentIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def dataChanged():
    pass

  def defaultDropAction(self):
    """ defaultDropAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dirtyRegionOffset():
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def doubleClicked(self, QtCore.QModelIndex):
    """ doubleClicked(self, QModelIndex) [signal] """
    pass

  def dragDropMode(self):
    """ dragDropMode(self) -> QAbstractItemView.DragDropMode """
    return QAbstractItemView.DragDropMode()

  def dragDropOverwriteMode(self):
    """ dragDropOverwriteMode(self) -> bool """
    return True

  def dragEnabled(self):
    """ dragEnabled(self) -> bool """
    return True

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def drawFrame():
    pass

  def dropEvent():
    pass

  def dropIndicatorPosition():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def edit():
    pass

  def editTriggers(self):
    """ editTriggers(self) -> QAbstractItemView.EditTriggers """
    return QAbstractItemView.EditTriggers()

  def editorDestroyed():
    pass

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def emptyLabel(self):
    """ emptyLabel(self) -> str """
    return ""

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def entered(self, QtCore.QModelIndex):
    """ entered(self, QModelIndex) [signal] """
    pass

  def event():
    pass

  def eventFilter():
    pass

  def executeDelayedItemsLayout():
    pass

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flow(self):
    """ flow(self) -> QListView.Flow """
    return QListView.Flow()

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return QtCore.QRect()

  def frameShadow(self):
    """ frameShadow(self) -> QFrame.Shadow """
    return QFrame.Shadow()

  def frameShape(self):
    """ frameShape(self) -> QFrame.Shape """
    return QFrame.Shape()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def frameStyle(self):
    """ frameStyle(self) -> int """
    return 1

  def frameWidth(self):
    """ frameWidth(self) -> int """
    return 1

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def gridSize(self):
    """ gridSize(self) -> QSize """
    return QtCore.QSize()

  def group(self):
    """ group(self) -> QUndoGroup """
    return QUndoGroup()

  def hasAutoScroll(self):
    """ hasAutoScroll(self) -> bool """
    return True

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def horizontalOffset():
    pass

  def horizontalScrollBar(self):
    """ horizontalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def horizontalScrollBarPolicy(self):
    """ horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def horizontalScrollMode(self):
    """ horizontalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def horizontalScrollbarAction():
    pass

  def horizontalScrollbarValueChanged():
    pass

  def iconSize(self):
    """ iconSize(self) -> QSize """
    return QtCore.QSize()

  def iconSizeChanged(self, QtCore.QSize):
    """ iconSizeChanged(self, QSize) [signal] """
    pass

  def indexAt(self, QtCore.QPoint):
    """ indexAt(self, QPoint) -> QModelIndex """
    return QtCore.QModelIndex()

  def indexWidget(self, QtCore.QModelIndex):
    """ indexWidget(self, QModelIndex) -> QWidget """
    return QWidget()

  def indexesMoved(self, arg0):
    """ indexesMoved(self, Iterable[QModelIndex]) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initStyleOption():
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isIndexHidden():
    pass

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isPersistentEditorOpen(self, QtCore.QModelIndex):
    """ isPersistentEditorOpen(self, QModelIndex) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isRowHidden(self, int):
    """ isRowHidden(self, int) -> bool """
    return True

  def isSelectionRectVisible(self):
    """ isSelectionRectVisible(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def isWrapping(self):
    """ isWrapping(self) -> bool """
    return True

  def itemAlignment(self):
    """ itemAlignment(self) -> Qt.Alignment """
    return None

  def itemDelegate(self):
    """ itemDelegate(self) -> QAbstractItemDelegate
    itemDelegate(self, QModelIndex) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForColumn(self, int):
    """ itemDelegateForColumn(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def itemDelegateForRow(self, int):
    """ itemDelegateForRow(self, int) -> QAbstractItemDelegate """
    return QAbstractItemDelegate()

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def keyboardSearch(self, str):
    """ keyboardSearch(self, str) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def layoutMode(self):
    """ layoutMode(self) -> QListView.LayoutMode """
    return QListView.LayoutMode()

  def leaveEvent():
    pass

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumViewportSize(self):
    """ maximumViewportSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def midLineWidth(self):
    """ midLineWidth(self) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def model(self):
    """ model(self) -> QAbstractItemModel """
    return QtCore.QAbstractItemModel()

  def modelColumn(self):
    """ modelColumn(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveCursor():
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def movement(self):
    """ movement(self) -> QListView.Movement """
    return QListView.Movement()

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openPersistentEditor(self, QtCore.QModelIndex):
    """ openPersistentEditor(self, QModelIndex) """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def pressed(self, QtCore.QModelIndex):
    """ pressed(self, QModelIndex) [signal] """
    pass

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def rectForIndex():
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def resetHorizontalScrollMode(self):
    """ resetHorizontalScrollMode(self) """
    pass

  def resetVerticalScrollMode(self):
    """ resetVerticalScrollMode(self) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def resizeMode(self):
    """ resizeMode(self) -> QListView.ResizeMode """
    return QListView.ResizeMode()

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def rootIndex(self):
    """ rootIndex(self) -> QModelIndex """
    return QtCore.QModelIndex()

  def rowsAboutToBeRemoved():
    pass

  def rowsInserted():
    pass

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scheduleDelayedItemsLayout():
    pass

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def scrollBarWidgets(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> List[QWidget] """
    return None

  def scrollContentsBy():
    pass

  def scrollDirtyRegion():
    pass

  def scrollTo(self, QtCore.QModelIndex, arg0=None):
    """ scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible) """
    pass

  def scrollToBottom(self):
    """ scrollToBottom(self) """
    pass

  def scrollToTop(self):
    """ scrollToTop(self) """
    pass

  def selectAll(self):
    """ selectAll(self) """
    pass

  def selectedIndexes():
    pass

  def selectionBehavior(self):
    """ selectionBehavior(self) -> QAbstractItemView.SelectionBehavior """
    return QAbstractItemView.SelectionBehavior()

  def selectionChanged():
    pass

  def selectionCommand():
    pass

  def selectionMode(self):
    """ selectionMode(self) -> QAbstractItemView.SelectionMode """
    return QAbstractItemView.SelectionMode()

  def selectionModel(self):
    """ selectionModel(self) -> QItemSelectionModel """
    return QtCore.QItemSelectionModel()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAlternatingRowColors(self, bool):
    """ setAlternatingRowColors(self, bool) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setAutoScroll(self, bool):
    """ setAutoScroll(self, bool) """
    pass

  def setAutoScrollMargin(self, int):
    """ setAutoScrollMargin(self, int) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setBatchSize(self, int):
    """ setBatchSize(self, int) """
    pass

  def setCleanIcon(self, QtGui.QIcon):
    """ setCleanIcon(self, QIcon) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCornerWidget(self, QWidget):
    """ setCornerWidget(self, QWidget) """
    pass

  def setCurrentIndex(self, QtCore.QModelIndex):
    """ setCurrentIndex(self, QModelIndex) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultDropAction(self, arg0):
    """ setDefaultDropAction(self, Qt.DropAction) """
    pass

  def setDirtyRegion():
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setDragDropMode(self, arg0):
    """ setDragDropMode(self, QAbstractItemView.DragDropMode) """
    pass

  def setDragDropOverwriteMode(self, bool):
    """ setDragDropOverwriteMode(self, bool) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropIndicatorShown(self, bool):
    """ setDropIndicatorShown(self, bool) """
    pass

  def setEditTriggers(self, UnionQAbstractItemView.EditTriggers=None, QAbstractItemView.EditTrigger=None):
    """ setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger]) """
    pass

  def setEmptyLabel(self, str):
    """ setEmptyLabel(self, str) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFlow(self, arg0):
    """ setFlow(self, QListView.Flow) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setFrameRect(self, QtCore.QRect):
    """ setFrameRect(self, QRect) """
    pass

  def setFrameShadow(self, arg0):
    """ setFrameShadow(self, QFrame.Shadow) """
    pass

  def setFrameShape(self, arg0):
    """ setFrameShape(self, QFrame.Shape) """
    pass

  def setFrameStyle(self, int):
    """ setFrameStyle(self, int) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setGridSize(self, QtCore.QSize):
    """ setGridSize(self, QSize) """
    pass

  def setGroup(self, QUndoGroup):
    """ setGroup(self, QUndoGroup) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setHorizontalScrollBar(self, QScrollBar):
    """ setHorizontalScrollBar(self, QScrollBar) """
    pass

  def setHorizontalScrollBarPolicy(self, arg0):
    """ setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setHorizontalScrollMode(self, arg0):
    """ setHorizontalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setIconSize(self, QtCore.QSize):
    """ setIconSize(self, QSize) """
    pass

  def setIndexWidget(self, QtCore.QModelIndex, QWidget):
    """ setIndexWidget(self, QModelIndex, QWidget) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setItemAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setItemAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setItemDelegate(self, QAbstractItemDelegate):
    """ setItemDelegate(self, QAbstractItemDelegate) """
    pass

  def setItemDelegateForColumn(self, int, QAbstractItemDelegate):
    """ setItemDelegateForColumn(self, int, QAbstractItemDelegate) """
    pass

  def setItemDelegateForRow(self, int, QAbstractItemDelegate):
    """ setItemDelegateForRow(self, int, QAbstractItemDelegate) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLayoutMode(self, arg0):
    """ setLayoutMode(self, QListView.LayoutMode) """
    pass

  def setLineWidth(self, int):
    """ setLineWidth(self, int) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMidLineWidth(self, int):
    """ setMidLineWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModel(self, QtCore.QAbstractItemModel):
    """ setModel(self, QAbstractItemModel) """
    pass

  def setModelColumn(self, int):
    """ setModelColumn(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setMovement(self, arg0):
    """ setMovement(self, QListView.Movement) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPositionForIndex():
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResizeMode(self, arg0):
    """ setResizeMode(self, QListView.ResizeMode) """
    pass

  def setRootIndex(self, QtCore.QModelIndex):
    """ setRootIndex(self, QModelIndex) """
    pass

  def setRowHidden(self, int, bool):
    """ setRowHidden(self, int, bool) """
    pass

  def setSelection():
    pass

  def setSelectionBehavior(self, arg0):
    """ setSelectionBehavior(self, QAbstractItemView.SelectionBehavior) """
    pass

  def setSelectionMode(self, arg0):
    """ setSelectionMode(self, QAbstractItemView.SelectionMode) """
    pass

  def setSelectionModel(self, QtCore.QItemSelectionModel):
    """ setSelectionModel(self, QItemSelectionModel) """
    pass

  def setSelectionRectVisible(self, bool):
    """ setSelectionRectVisible(self, bool) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeAdjustPolicy(self, arg0):
    """ setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setStack(self, QUndoStack):
    """ setStack(self, QUndoStack) """
    pass

  def setState():
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabKeyNavigation(self, bool):
    """ setTabKeyNavigation(self, bool) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTextElideMode(self, arg0):
    """ setTextElideMode(self, Qt.TextElideMode) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUniformItemSizes(self, bool):
    """ setUniformItemSizes(self, bool) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVerticalScrollBar(self, QScrollBar):
    """ setVerticalScrollBar(self, QScrollBar) """
    pass

  def setVerticalScrollBarPolicy(self, arg0):
    """ setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy) """
    pass

  def setVerticalScrollMode(self, arg0):
    """ setVerticalScrollMode(self, QAbstractItemView.ScrollMode) """
    pass

  def setViewMode(self, arg0):
    """ setViewMode(self, QListView.ViewMode) """
    pass

  def setViewport(self, QWidget):
    """ setViewport(self, QWidget) """
    pass

  def setViewportMargins():
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWordWrap(self, bool):
    """ setWordWrap(self, bool) """
    pass

  def setWrapping(self, bool):
    """ setWrapping(self, bool) """
    pass

  def setupViewport(self, QWidget):
    """ setupViewport(self, QWidget) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showDropIndicator(self):
    """ showDropIndicator(self) -> bool """
    return True

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeAdjustPolicy(self):
    """ sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy """
    return QAbstractScrollArea.SizeAdjustPolicy()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeHintForColumn(self, int):
    """ sizeHintForColumn(self, int) -> int """
    return 1

  def sizeHintForIndex(self, QtCore.QModelIndex):
    """ sizeHintForIndex(self, QModelIndex) -> QSize """
    return QtCore.QSize()

  def sizeHintForRow(self, int):
    """ sizeHintForRow(self, int) -> int """
    return 1

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def stack(self):
    """ stack(self) -> QUndoStack """
    return QUndoStack()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startDrag():
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state():
    pass

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabKeyNavigation(self):
    """ tabKeyNavigation(self) -> bool """
    return True

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def textElideMode(self):
    """ textElideMode(self) -> Qt.TextElideMode """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def uniformItemSizes(self):
    """ uniformItemSizes(self) -> bool """
    return True

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QModelIndex) """
    pass

  def updateEditorData():
    pass

  def updateEditorGeometries():
    pass

  def updateGeometries():
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def verticalOffset():
    pass

  def verticalScrollBar(self):
    """ verticalScrollBar(self) -> QScrollBar """
    return QScrollBar()

  def verticalScrollBarPolicy(self):
    """ verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy """
    return None

  def verticalScrollMode(self):
    """ verticalScrollMode(self) -> QAbstractItemView.ScrollMode """
    return QAbstractItemView.ScrollMode()

  def verticalScrollbarAction():
    pass

  def verticalScrollbarValueChanged():
    pass

  def viewMode(self):
    """ viewMode(self) -> QListView.ViewMode """
    return QListView.ViewMode()

  def viewOptions():
    pass

  def viewport(self):
    """ viewport(self) -> QWidget """
    return QWidget()

  def viewportEntered(self):
    """ viewportEntered(self) [signal] """
    pass

  def viewportEvent():
    pass

  def viewportMargins():
    pass

  def viewportSizeHint():
    pass

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visualRect(self, QtCore.QModelIndex):
    """ visualRect(self, QModelIndex) -> QRect """
    return QtCore.QRect()

  def visualRegionForSelection():
    pass

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wordWrap(self):
    """ wordWrap(self) -> bool """
    return True

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QVBoxLayout(QBoxLayout):
  """ QVBoxLayout()
  QVBoxLayout(QWidget) """

  BottomToTop = None
  Down = None
  LeftToRight = None
  RightToLeft = None
  SetDefaultConstraint = None
  SetFixedSize = None
  SetMaximumSize = None
  SetMinAndMaxSize = None
  SetMinimumSize = None
  SetNoConstraint = None
  TopToBottom = None
  Up = None

  def __init__(self):
    pass

  def activate(self):
    """ activate(self) -> bool """
    return True

  def addChildLayout():
    pass

  def addChildWidget():
    pass

  def addItem(self, QLayoutItem):
    """ addItem(self, QLayoutItem) """
    pass

  def addLayout(self, QLayout, arg0=None):
    """ addLayout(self, QLayout, stretch: int = 0) """
    pass

  def addSpacerItem(self, QSpacerItem):
    """ addSpacerItem(self, QSpacerItem) """
    pass

  def addSpacing(self, int):
    """ addSpacing(self, int) """
    pass

  def addStretch(self, arg0=None):
    """ addStretch(self, stretch: int = 0) """
    pass

  def addStrut(self, int):
    """ addStrut(self, int) """
    pass

  def addWidget(self, QWidget, arg0=None, arg1=None, arg2=None):
    """ addWidget(self, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def alignmentRect():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def closestAcceptableSize(QWidget, QtCore.QSize):
    """ closestAcceptableSize(QWidget, QSize) -> QSize """
    return QtCore.QSize()

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def direction(self):
    """ direction(self) -> QBoxLayout.Direction """
    return QBoxLayout.Direction()

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def indexOf(self, QWidget):
    """ indexOf(self, QWidget) -> int
    indexOf(self, QLayoutItem) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def insertItem(self, int, QLayoutItem):
    """ insertItem(self, int, QLayoutItem) """
    pass

  def insertLayout(self, int, QLayout, arg0=None):
    """ insertLayout(self, int, QLayout, stretch: int = 0) """
    pass

  def insertSpacerItem(self, int, QSpacerItem):
    """ insertSpacerItem(self, int, QSpacerItem) """
    pass

  def insertSpacing(self, int, int):
    """ insertSpacing(self, int, int) """
    pass

  def insertStretch(self, int, arg0=None):
    """ insertStretch(self, int, stretch: int = 0) """
    pass

  def insertWidget(self, int, QWidget, arg0=None, arg1=None, arg2=None):
    """ insertWidget(self, int, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment()) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def itemAt(self, int):
    """ itemAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def menuBar(self):
    """ menuBar(self) -> QWidget """
    return QWidget()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, QLayoutItem):
    """ removeItem(self, QLayoutItem) """
    pass

  def removeWidget(self, QWidget):
    """ removeWidget(self, QWidget) """
    pass

  def replaceWidget(self, QWidget, QWidget, arg0=None, arg1=None):
    """ replaceWidget(self, QWidget, QWidget, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QLayoutItem """
    return QLayoutItem()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAlignment(self, QWidget, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool
    setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    return True

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setDirection(self, arg0):
    """ setDirection(self, QBoxLayout.Direction) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def setMenuBar(self, QWidget):
    """ setMenuBar(self, QWidget) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSizeConstraint(self, arg0):
    """ setSizeConstraint(self, QLayout.SizeConstraint) """
    pass

  def setSpacing(self, int):
    """ setSpacing(self, int) """
    pass

  def setStretch(self, int, int):
    """ setStretch(self, int, int) """
    pass

  def setStretchFactor(self, QWidget, int):
    """ setStretchFactor(self, QWidget, int) -> bool
    setStretchFactor(self, QLayout, int) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def sizeConstraint(self):
    """ sizeConstraint(self) -> QLayout.SizeConstraint """
    return QLayout.SizeConstraint()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def spacing(self):
    """ spacing(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stretch(self, int):
    """ stretch(self, int) -> int """
    return 1

  def takeAt(self, int):
    """ takeAt(self, int) -> QLayoutItem """
    return QLayoutItem()

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def totalHeightForWidth(self, int):
    """ totalHeightForWidth(self, int) -> int """
    return 1

  def totalMaximumSize(self):
    """ totalMaximumSize(self) -> QSize """
    return QtCore.QSize()

  def totalMinimumSize(self):
    """ totalMinimumSize(self) -> QSize """
    return QtCore.QSize()

  def totalSizeHint(self):
    """ totalSizeHint(self) -> QSize """
    return QtCore.QSize()

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self):
    """ update(self) """
    pass

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

  def widgetEvent():
    pass

QWIDGETSIZE_MAX = 16777215

class QWhatsThis(simplewrapper):
  """ QWhatsThis(QWhatsThis) """

  def __init__(self, QWhatsThis):
    pass

  def createAction(arg0=None):
    """ createAction(parent: QObject = None) -> QAction """
    return QAction()

  def enterWhatsThisMode():
    """ enterWhatsThisMode() """
    pass

  def hideText():
    """ hideText() """
    pass

  def inWhatsThisMode():
    """ inWhatsThisMode() -> bool """
    return True

  def leaveWhatsThisMode():
    """ leaveWhatsThisMode() """
    pass

  def showText(QtCore.QPoint, str, arg0=None):
    """ showText(QPoint, str, widget: QWidget = None) """
    pass

class QWidget(QObject):
  """ QWidget(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent(self, QtGui.QActionEvent):
    """ actionEvent(self, QActionEvent) """
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changeEvent(self, QtCore.QEvent):
    """ changeEvent(self, QEvent) """
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent(self, QtGui.QCloseEvent):
    """ closeEvent(self, QCloseEvent) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent(self, QtGui.QContextMenuEvent):
    """ contextMenuEvent(self, QContextMenuEvent) """
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create(self, arg0=None, arg1=None, arg2=None):
    """ create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) """
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy(self, arg0=None, arg1=None):
    """ destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent(self, QtGui.QDragEnterEvent):
    """ dragEnterEvent(self, QDragEnterEvent) """
    pass

  def dragLeaveEvent(self, QtGui.QDragLeaveEvent):
    """ dragLeaveEvent(self, QDragLeaveEvent) """
    pass

  def dragMoveEvent(self, QtGui.QDragMoveEvent):
    """ dragMoveEvent(self, QDragMoveEvent) """
    pass

  def dropEvent(self, QtGui.QDropEvent):
    """ dropEvent(self, QDropEvent) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent(self, QtCore.QEvent):
    """ enterEvent(self, QEvent) """
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent(self, QtGui.QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusNextChild(self):
    """ focusNextChild(self) -> bool """
    return True

  def focusNextPrevChild(self, bool):
    """ focusNextPrevChild(self, bool) -> bool """
    return True

  def focusOutEvent(self, QtGui.QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild(self):
    """ focusPreviousChild(self) -> bool """
    return True

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QtGui.QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter(self, QtGui.QPainter):
    """ initPainter(self, QPainter) """
    pass

  def inputMethodEvent(self, QtGui.QInputMethodEvent):
    """ inputMethodEvent(self, QInputMethodEvent) """
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent(self, QtGui.QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QtGui.QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent(self, QtCore.QEvent):
    """ leaveEvent(self, QEvent) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent(self, QtGui.QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent(self, QtGui.QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QtGui.QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QtGui.QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent(self, QtGui.QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent(self, UnionQByteArray=None, bytes=None, bytearray=None, sip.voidptr=None):
    """ nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int] """
    return 1

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter(self):
    """ sharedPainter(self) -> QPainter """
    return QtGui.QPainter()

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QtGui.QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def tabletEvent(self, QtGui.QTabletEvent):
    """ tabletEvent(self, QTabletEvent) """
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus(self):
    """ updateMicroFocus(self) """
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent(self, QtGui.QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QWidgetAction(QAction):
  """ QWidgetAction(QObject) """

  AboutQtRole = None
  AboutRole = None
  ApplicationSpecificRole = None
  HighPriority = None
  Hover = None
  LowPriority = None
  NoRole = None
  NormalPriority = None
  PreferencesRole = None
  QuitRole = None
  TextHeuristicRole = None
  Trigger = None

  def __init__(self, QtCore.QObject):
    pass

  def actionGroup(self):
    """ actionGroup(self) -> QActionGroup """
    return QActionGroup()

  def activate(self, arg0):
    """ activate(self, QAction.ActionEvent) """
    pass

  def associatedGraphicsWidgets(self):
    """ associatedGraphicsWidgets(self) -> List[QGraphicsWidget] """
    return None

  def associatedWidgets(self):
    """ associatedWidgets(self) -> List[QWidget] """
    return None

  def autoRepeat(self):
    """ autoRepeat(self) -> bool """
    return True

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def changed(self):
    """ changed(self) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def createWidget(self, QWidget):
    """ createWidget(self, QWidget) -> QWidget """
    return QWidget()

  def createdWidgets(self):
    """ createdWidgets(self) -> List[QWidget] """
    return None

  def customEvent():
    pass

  def data(self):
    """ data(self) -> Any """
    return None

  def defaultWidget(self):
    """ defaultWidget(self) -> QWidget """
    return QWidget()

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def deleteWidget(self, QWidget):
    """ deleteWidget(self, QWidget) """
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def hover(self):
    """ hover(self) """
    pass

  def hovered(self):
    """ hovered(self) [signal] """
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return QtGui.QIcon()

  def iconText(self):
    """ iconText(self) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return True

  def isChecked(self):
    """ isChecked(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isIconVisibleInMenu(self):
    """ isIconVisibleInMenu(self) -> bool """
    return True

  def isSeparator(self):
    """ isSeparator(self) -> bool """
    return True

  def isShortcutVisibleInContextMenu(self):
    """ isShortcutVisibleInContextMenu(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def menu(self):
    """ menu(self) -> QMenu """
    return QMenu()

  def menuRole(self):
    """ menuRole(self) -> QAction.MenuRole """
    return QAction.MenuRole()

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def priority(self):
    """ priority(self) -> QAction.Priority """
    return QAction.Priority()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def releaseWidget(self, QWidget):
    """ releaseWidget(self, QWidget) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def requestWidget(self, QWidget):
    """ requestWidget(self, QWidget) -> QWidget """
    return QWidget()

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setActionGroup(self, QActionGroup):
    """ setActionGroup(self, QActionGroup) """
    pass

  def setAutoRepeat(self, bool):
    """ setAutoRepeat(self, bool) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChecked(self, bool):
    """ setChecked(self, bool) """
    pass

  def setData(self, Any):
    """ setData(self, Any) """
    pass

  def setDefaultWidget(self, QWidget):
    """ setDefaultWidget(self, QWidget) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setIcon(self, QtGui.QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setIconText(self, str):
    """ setIconText(self, str) """
    pass

  def setIconVisibleInMenu(self, bool):
    """ setIconVisibleInMenu(self, bool) """
    pass

  def setMenu(self, QMenu):
    """ setMenu(self, QMenu) """
    pass

  def setMenuRole(self, arg0):
    """ setMenuRole(self, QAction.MenuRole) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QtCore.QObject):
    """ setParent(self, QObject) """
    pass

  def setPriority(self, arg0):
    """ setPriority(self, QAction.Priority) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setSeparator(self, bool):
    """ setSeparator(self, bool) """
    pass

  def setShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) """
    pass

  def setShortcutContext(self, arg0):
    """ setShortcutContext(self, Qt.ShortcutContext) """
    pass

  def setShortcutVisibleInContextMenu(self, bool):
    """ setShortcutVisibleInContextMenu(self, bool) """
    pass

  def setShortcuts(self, IterableUnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ setShortcuts(self, Iterable[Union[QKeySequence, QKeySequence.StandardKey, str, int]])
    setShortcuts(self, QKeySequence.StandardKey) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def shortcut(self):
    """ shortcut(self) -> QKeySequence """
    return QtGui.QKeySequence()

  def shortcutContext(self):
    """ shortcutContext(self) -> Qt.ShortcutContext """
    return None

  def shortcuts(self):
    """ shortcuts(self) -> List[QKeySequence] """
    return None

  def showStatusText(self, arg0=None):
    """ showStatusText(self, widget: QWidget = None) -> bool """
    return True

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def text(self):
    """ text(self) -> str """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def toggle(self):
    """ toggle(self) """
    pass

  def toggled(self, bool):
    """ toggled(self, bool) [signal] """
    pass

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def trigger(self):
    """ trigger(self) """
    pass

  def triggered(self, arg0=None):
    """ triggered(self, checked: bool = False) [signal] """
    pass

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

class QWidgetItem(QLayoutItem):
  """ QWidgetItem(QWidget) """

  def __init__(self, QWidget):
    pass

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def controlTypes(self):
    """ controlTypes(self) -> QSizePolicy.ControlTypes """
    return QSizePolicy.ControlTypes()

  def expandingDirections(self):
    """ expandingDirections(self) -> Qt.Orientations """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def invalidate(self):
    """ invalidate(self) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return True

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumHeightForWidth(self, int):
    """ minimumHeightForWidth(self, int) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect) """
    pass

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def spacerItem(self):
    """ spacerItem(self) -> QSpacerItem """
    return QSpacerItem()

  def widget(self):
    """ widget(self) -> QWidget """
    return QWidget()

class QWizard(QDialog):
  """ QWizard(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) """

  Accepted = None
  AeroStyle = None
  BackButton = None
  BackgroundPixmap = None
  BannerPixmap = None
  CancelButton = None
  CancelButtonOnLeft = None
  ClassicStyle = None
  CommitButton = None
  CustomButton1 = None
  CustomButton2 = None
  CustomButton3 = None
  DisabledBackButtonOnLastPage = None
  DrawChildren = None
  DrawWindowBackground = None
  ExtendedWatermarkPixmap = None
  FinishButton = None
  HaveCustomButton1 = None
  HaveCustomButton2 = None
  HaveCustomButton3 = None
  HaveFinishButtonOnEarlyPages = None
  HaveHelpButton = None
  HaveNextButtonOnLastPage = None
  HelpButton = None
  HelpButtonOnRight = None
  IgnoreMask = None
  IgnoreSubTitles = None
  IndependentPages = None
  LogoPixmap = None
  MacStyle = None
  ModernStyle = None
  NextButton = None
  NoBackButtonOnLastPage = None
  NoBackButtonOnStartPage = None
  NoCancelButton = None
  NoCancelButtonOnLastPage = None
  NoDefaultButton = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Rejected = None
  Stretch = None
  WatermarkPixmap = None

  class WizardButton(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class WizardOption(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class WizardOptions(simplewrapper):
    """ QWizard.WizardOptions()
    QWizard.WizardOptions(Union[QWizard.WizardOptions, QWizard.WizardOption])
    QWizard.WizardOptions(QWizard.WizardOptions) """

    def __init__(self):
      pass

  class WizardPixmap(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class WizardStyle(int):

    def __init__(self):
      pass

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def __init__(self, arg0=None, arg1=None, arg2=None):
    pass

  def accept(self):
    """ accept(self) """
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accepted(self):
    """ accepted(self) [signal] """
    pass

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def addPage(self, QWizardPage):
    """ addPage(self, QWizardPage) -> int """
    return 1

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def back(self):
    """ back(self) """
    pass

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def button(self, arg0):
    """ button(self, QWizard.WizardButton) -> QAbstractButton """
    return QAbstractButton()

  def buttonText(self, arg0):
    """ buttonText(self, QWizard.WizardButton) -> str """
    return ""

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def cleanupPage(self, int):
    """ cleanupPage(self, int) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def currentId(self):
    """ currentId(self) -> int """
    return 1

  def currentIdChanged(self, int):
    """ currentIdChanged(self, int) [signal] """
    pass

  def currentPage(self):
    """ currentPage(self) -> QWizardPage """
    return QWizardPage()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customButtonClicked(self, int):
    """ customButtonClicked(self, int) [signal] """
    pass

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def done(self, int):
    """ done(self, int) """
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event(self, QtCore.QEvent):
    """ event(self, QEvent) -> bool """
    return True

  def eventFilter():
    pass

  def exec(self):
    """ exec(self) -> int """
    return 1

  def exec_(self):
    """ exec_(self) -> int """
    return 1

  def field(self, str):
    """ field(self, str) -> Any """
    return None

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, int):
    """ finished(self, int) [signal] """
    pass

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def hasVisitedPage(self, int):
    """ hasVisitedPage(self, int) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def helpRequested(self):
    """ helpRequested(self) [signal] """
    pass

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initializePage(self, int):
    """ initializePage(self, int) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isSizeGripEnabled(self):
    """ isSizeGripEnabled(self) -> bool """
    return True

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def next(self):
    """ next(self) """
    pass

  def nextId(self):
    """ nextId(self) -> int """
    return 1

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self) """
    pass

  def options(self):
    """ options(self) -> QWizard.WizardOptions """
    return QWizard.WizardOptions()

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def page(self, int):
    """ page(self, int) -> QWizardPage """
    return QWizardPage()

  def pageAdded(self, int):
    """ pageAdded(self, int) [signal] """
    pass

  def pageIds(self):
    """ pageIds(self) -> List[int] """
    return 1

  def pageRemoved(self, int):
    """ pageRemoved(self, int) [signal] """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent(self, QtGui.QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pixmap(self, arg0):
    """ pixmap(self, QWizard.WizardPixmap) -> QPixmap """
    return QtGui.QPixmap()

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def reject(self):
    """ reject(self) """
    pass

  def rejected(self):
    """ rejected(self) [signal] """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removePage(self, int):
    """ removePage(self, int) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QtGui.QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def restart(self):
    """ restart(self) """
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def result(self):
    """ result(self) -> int """
    return 1

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButton(self, arg0, QAbstractButton):
    """ setButton(self, QWizard.WizardButton, QAbstractButton) """
    pass

  def setButtonLayout(self, IterableQWizard.WizardButton=None):
    """ setButtonLayout(self, Iterable[QWizard.WizardButton]) """
    pass

  def setButtonText(self, arg0, str):
    """ setButtonText(self, QWizard.WizardButton, str) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDefaultProperty(self, str, str, PYQT_SIGNAL):
    """ setDefaultProperty(self, str, str, PYQT_SIGNAL) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setField(self, str, Any):
    """ setField(self, str, Any) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModal(self, bool):
    """ setModal(self, bool) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOption(self, arg0, arg1=None):
    """ setOption(self, QWizard.WizardOption, on: bool = True) """
    pass

  def setOptions(self, UnionQWizard.WizardOptions=None, QWizard.WizardOption=None):
    """ setOptions(self, Union[QWizard.WizardOptions, QWizard.WizardOption]) """
    pass

  def setPage(self, int, QWizardPage):
    """ setPage(self, int, QWizardPage) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPixmap(self, arg0, QtGui.QPixmap):
    """ setPixmap(self, QWizard.WizardPixmap, QPixmap) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setResult(self, int):
    """ setResult(self, int) """
    pass

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSideWidget(self, QWidget):
    """ setSideWidget(self, QWidget) """
    pass

  def setSizeGripEnabled(self, bool):
    """ setSizeGripEnabled(self, bool) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStartId(self, int):
    """ setStartId(self, int) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setSubTitleFormat(self, arg0):
    """ setSubTitleFormat(self, Qt.TextFormat) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTitleFormat(self, arg0):
    """ setTitleFormat(self, Qt.TextFormat) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def setWizardStyle(self, arg0):
    """ setWizardStyle(self, QWizard.WizardStyle) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def sideWidget(self):
    """ sideWidget(self) -> QWidget """
    return QWidget()

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startId(self):
    """ startId(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def subTitleFormat(self):
    """ subTitleFormat(self) -> Qt.TextFormat """
    return None

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def testOption(self, arg0):
    """ testOption(self, QWizard.WizardOption) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def titleFormat(self):
    """ titleFormat(self) -> Qt.TextFormat """
    return None

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validateCurrentPage(self):
    """ validateCurrentPage(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def visitedPages(self):
    """ visitedPages(self) -> List[int] """
    return 1

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wizardStyle(self):
    """ wizardStyle(self) -> QWizard.WizardStyle """
    return QWizard.WizardStyle()

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QWizardPage(QWidget):
  """ QWizardPage(parent: QWidget = None) """

  DrawChildren = None
  DrawWindowBackground = None
  IgnoreMask = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  def __init__(self, arg0=None):
    pass

  def acceptDrops(self):
    """ acceptDrops(self) -> bool """
    return True

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleName(self):
    """ accessibleName(self) -> str """
    return ""

  def actionEvent():
    pass

  def actions(self):
    """ actions(self) -> List[QAction] """
    return None

  def activateWindow(self):
    """ activateWindow(self) """
    pass

  def addAction(self, QAction):
    """ addAction(self, QAction) """
    pass

  def addActions(self, IterableQAction=None):
    """ addActions(self, Iterable[QAction]) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def autoFillBackground(self):
    """ autoFillBackground(self) -> bool """
    return True

  def backgroundRole(self):
    """ backgroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return QtCore.QSize()

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return True

  def buttonText(self, arg0):
    """ buttonText(self, QWizard.WizardButton) -> str """
    return ""

  def changeEvent():
    pass

  def childAt(self, QtCore.QPoint):
    """ childAt(self, QPoint) -> QWidget
    childAt(self, int, int) -> QWidget """
    return QWidget()

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def childrenRect(self):
    """ childrenRect(self) -> QRect """
    return QtCore.QRect()

  def childrenRegion(self):
    """ childrenRegion(self) -> QRegion """
    return QtGui.QRegion()

  def cleanupPage(self):
    """ cleanupPage(self) """
    pass

  def clearFocus(self):
    """ clearFocus(self) """
    pass

  def clearMask(self):
    """ clearMask(self) """
    pass

  def close(self):
    """ close(self) -> bool """
    return True

  def closeEvent():
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def completeChanged(self):
    """ completeChanged(self) [signal] """
    pass

  def connectNotify():
    pass

  def contentsMargins(self):
    """ contentsMargins(self) -> QMargins """
    return QtCore.QMargins()

  def contentsRect(self):
    """ contentsRect(self) -> QRect """
    return QtCore.QRect()

  def contextMenuEvent():
    pass

  def contextMenuPolicy(self):
    """ contextMenuPolicy(self) -> Qt.ContextMenuPolicy """
    return None

  def create():
    pass

  def createWindowContainer(QtGui.QWindow, arg0=None, arg1=None, arg2=None):
    """ createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget """
    return QWidget()

  def cursor(self):
    """ cursor(self) -> QCursor """
    return QtGui.QCursor()

  def customContextMenuRequested(self, QtCore.QPoint):
    """ customContextMenuRequested(self, QPoint) [signal] """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy():
    pass

  def destroyed(self, arg0=None):
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return True

  def disconnectNotify():
    pass

  def dragEnterEvent():
    pass

  def dragLeaveEvent():
    pass

  def dragMoveEvent():
    pass

  def dropEvent():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def effectiveWinId(self):
    """ effectiveWinId(self) -> sip.voidptr """
    return None

  def ensurePolished(self):
    """ ensurePolished(self) """
    pass

  def enterEvent():
    pass

  def event():
    pass

  def eventFilter(self, QtCore.QObject, QtCore.QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return True

  def field(self, str):
    """ field(self, str) -> Any """
    return None

  def find(arg0):
    """ find(sip.voidptr) -> QWidget """
    return QWidget()

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return QtCore.QObject()

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def focusInEvent():
    pass

  def focusNextChild():
    pass

  def focusNextPrevChild():
    pass

  def focusOutEvent():
    pass

  def focusPolicy(self):
    """ focusPolicy(self) -> Qt.FocusPolicy """
    return None

  def focusPreviousChild():
    pass

  def focusProxy(self):
    """ focusProxy(self) -> QWidget """
    return QWidget()

  def focusWidget(self):
    """ focusWidget(self) -> QWidget """
    return QWidget()

  def font(self):
    """ font(self) -> QFont """
    return QtGui.QFont()

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return QtGui.QFontInfo()

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return QtGui.QFontMetrics()

  def foregroundRole(self):
    """ foregroundRole(self) -> QPalette.ColorRole """
    return QPalette.ColorRole()

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return QtCore.QRect()

  def frameSize(self):
    """ frameSize(self) -> QSize """
    return QtCore.QSize()

  def geometry(self):
    """ geometry(self) -> QRect """
    return QtCore.QRect()

  def getContentsMargins(self):
    """ getContentsMargins(self) -> Tuple[int, int, int, int] """
    return 1

  def grab(self, arg0=None, 0)=None, QSize(-1=None, -1))=None):
    """ grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap """
    return QtGui.QPixmap()

  def grabGesture(self, arg0, arg1=None, arg2=None):
    """ grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags()) """
    pass

  def grabKeyboard(self):
    """ grabKeyboard(self) """
    pass

  def grabMouse(self):
    """ grabMouse(self)
    grabMouse(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def grabShortcut(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int """
    return 1

  def graphicsEffect(self):
    """ graphicsEffect(self) -> QGraphicsEffect """
    return QGraphicsEffect()

  def graphicsProxyWidget(self):
    """ graphicsProxyWidget(self) -> QGraphicsProxyWidget """
    return QGraphicsProxyWidget()

  def hasFocus(self):
    """ hasFocus(self) -> bool """
    return True

  def hasHeightForWidth(self):
    """ hasHeightForWidth(self) -> bool """
    return True

  def hasMouseTracking(self):
    """ hasMouseTracking(self) -> bool """
    return True

  def hasTabletTracking(self):
    """ hasTabletTracking(self) -> bool """
    return True

  def height(self):
    """ height(self) -> int """
    return 1

  def heightForWidth(self, int):
    """ heightForWidth(self, int) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return True

  def initPainter():
    pass

  def initializePage(self):
    """ initializePage(self) """
    pass

  def inputMethodEvent():
    pass

  def inputMethodHints(self):
    """ inputMethodHints(self) -> Qt.InputMethodHints """
    return 1

  def inputMethodQuery(self, arg0):
    """ inputMethodQuery(self, Qt.InputMethodQuery) -> Any """
    return None

  def insertAction(self, QAction, QAction):
    """ insertAction(self, QAction, QAction) """
    pass

  def insertActions(self, QAction, IterableQAction=None):
    """ insertActions(self, QAction, Iterable[QAction]) """
    pass

  def installEventFilter(self, QtCore.QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActiveWindow(self):
    """ isActiveWindow(self) -> bool """
    return True

  def isAncestorOf(self, QWidget):
    """ isAncestorOf(self, QWidget) -> bool """
    return True

  def isCommitPage(self):
    """ isCommitPage(self) -> bool """
    return True

  def isComplete(self):
    """ isComplete(self) -> bool """
    return True

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return True

  def isEnabledTo(self, QWidget):
    """ isEnabledTo(self, QWidget) -> bool """
    return True

  def isFinalPage(self):
    """ isFinalPage(self) -> bool """
    return True

  def isFullScreen(self):
    """ isFullScreen(self) -> bool """
    return True

  def isHidden(self):
    """ isHidden(self) -> bool """
    return True

  def isLeftToRight(self):
    """ isLeftToRight(self) -> bool """
    return True

  def isMaximized(self):
    """ isMaximized(self) -> bool """
    return True

  def isMinimized(self):
    """ isMinimized(self) -> bool """
    return True

  def isModal(self):
    """ isModal(self) -> bool """
    return True

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return True

  def isSignalConnected():
    pass

  def isVisible(self):
    """ isVisible(self) -> bool """
    return True

  def isVisibleTo(self, QWidget):
    """ isVisibleTo(self, QWidget) -> bool """
    return True

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return True

  def isWindow(self):
    """ isWindow(self) -> bool """
    return True

  def isWindowModified(self):
    """ isWindowModified(self) -> bool """
    return True

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return True

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def keyboardGrabber():
    """ keyboardGrabber() -> QWidget """
    return QWidget()

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layout(self):
    """ layout(self) -> QLayout """
    return QLayout()

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leaveEvent():
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return QtCore.QLocale()

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFrom(self, QWidget, QtCore.QPoint):
    """ mapFrom(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromGlobal(self, QtCore.QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapFromParent(self, QtCore.QPoint):
    """ mapFromParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapTo(self, QWidget, QtCore.QPoint):
    """ mapTo(self, QWidget, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToGlobal(self, QtCore.QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mapToParent(self, QtCore.QPoint):
    """ mapToParent(self, QPoint) -> QPoint """
    return QtCore.QPoint()

  def mask(self):
    """ mask(self) -> QRegion """
    return QtGui.QRegion()

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return QtCore.QSize()

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return QtCore.QMetaObject()

  def metric():
    pass

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return QtCore.QSize()

  def minimumSizeHint(self):
    """ minimumSizeHint(self) -> QSize """
    return QtCore.QSize()

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def mouseDoubleClickEvent():
    pass

  def mouseGrabber():
    """ mouseGrabber() -> QWidget """
    return QWidget()

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def move(self, QtCore.QPoint):
    """ move(self, QPoint)
    move(self, int, int) """
    pass

  def moveEvent():
    pass

  def moveToThread(self, QtCore.QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeEvent():
    pass

  def nativeParentWidget(self):
    """ nativeParentWidget(self) -> QWidget """
    return QWidget()

  def nextId(self):
    """ nextId(self) -> int """
    return 1

  def nextInFocusChain(self):
    """ nextInFocusChain(self) -> QWidget """
    return QWidget()

  def normalGeometry(self):
    """ normalGeometry(self) -> QRect """
    return QtCore.QRect()

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def overrideWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def overrideWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return QtGui.QPaintEngine()

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return True

  def palette(self):
    """ palette(self) -> QPalette """
    return QtGui.QPalette()

  def parent(self):
    """ parent(self) -> QObject """
    return QtCore.QObject()

  def parentWidget(self):
    """ parentWidget(self) -> QWidget """
    return QWidget()

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pixmap(self, arg0):
    """ pixmap(self, QWizard.WizardPixmap) -> QPixmap """
    return QtGui.QPixmap()

  def pos(self):
    """ pos(self) -> QPoint """
    return QtCore.QPoint()

  def previousInFocusChain(self):
    """ previousInFocusChain(self) -> QWidget """
    return QWidget()

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def rect(self):
    """ rect(self) -> QRect """
    return QtCore.QRect()

  def registerField(self, str, QWidget, arg0=None, arg1=None):
    """ registerField(self, str, QWidget, property: str = None, changedSignal: PYQT_SIGNAL = 0) """
    pass

  def releaseKeyboard(self):
    """ releaseKeyboard(self) """
    pass

  def releaseMouse(self):
    """ releaseMouse(self) """
    pass

  def releaseShortcut(self, int):
    """ releaseShortcut(self, int) """
    pass

  def removeAction(self, QAction):
    """ removeAction(self, QAction) """
    pass

  def removeEventFilter(self, QtCore.QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def render(self, QtGui.QPaintDevice, arg0=None, arg1=None, arg2=None, arg3=None):
    """ render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))
    render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren)) """
    pass

  def repaint(self):
    """ repaint(self)
    repaint(self, int, int, int, int)
    repaint(self, QRect)
    repaint(self, QRegion) """
    pass

  def resize(self, QtCore.QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def restoreGeometry(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return True

  def saveGeometry(self):
    """ saveGeometry(self) -> QByteArray """
    return QtCore.QByteArray()

  def scroll(self, int, int):
    """ scroll(self, int, int)
    scroll(self, int, int, QRect) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAcceptDrops(self, bool):
    """ setAcceptDrops(self, bool) """
    pass

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleName(self, str):
    """ setAccessibleName(self, str) """
    pass

  def setAttribute(self, arg0, arg1=None):
    """ setAttribute(self, Qt.WidgetAttribute, on: bool = True) """
    pass

  def setAutoFillBackground(self, bool):
    """ setAutoFillBackground(self, bool) """
    pass

  def setBackgroundRole(self, arg0):
    """ setBackgroundRole(self, QPalette.ColorRole) """
    pass

  def setBaseSize(self, int, int):
    """ setBaseSize(self, int, int)
    setBaseSize(self, QSize) """
    pass

  def setButtonText(self, arg0, str):
    """ setButtonText(self, QWizard.WizardButton, str) """
    pass

  def setCommitPage(self, bool):
    """ setCommitPage(self, bool) """
    pass

  def setContentsMargins(self, int, int, int, int):
    """ setContentsMargins(self, int, int, int, int)
    setContentsMargins(self, QMargins) """
    pass

  def setContextMenuPolicy(self, arg0):
    """ setContextMenuPolicy(self, Qt.ContextMenuPolicy) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setDisabled(self, bool):
    """ setDisabled(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setField(self, str, Any):
    """ setField(self, str, Any) """
    pass

  def setFinalPage(self, bool):
    """ setFinalPage(self, bool) """
    pass

  def setFixedHeight(self, int):
    """ setFixedHeight(self, int) """
    pass

  def setFixedSize(self, QtCore.QSize):
    """ setFixedSize(self, QSize)
    setFixedSize(self, int, int) """
    pass

  def setFixedWidth(self, int):
    """ setFixedWidth(self, int) """
    pass

  def setFocus(self):
    """ setFocus(self)
    setFocus(self, Qt.FocusReason) """
    pass

  def setFocusPolicy(self, arg0):
    """ setFocusPolicy(self, Qt.FocusPolicy) """
    pass

  def setFocusProxy(self, QWidget):
    """ setFocusProxy(self, QWidget) """
    pass

  def setFont(self, QtGui.QFont):
    """ setFont(self, QFont) """
    pass

  def setForegroundRole(self, arg0):
    """ setForegroundRole(self, QPalette.ColorRole) """
    pass

  def setGeometry(self, QtCore.QRect):
    """ setGeometry(self, QRect)
    setGeometry(self, int, int, int, int) """
    pass

  def setGraphicsEffect(self, QGraphicsEffect):
    """ setGraphicsEffect(self, QGraphicsEffect) """
    pass

  def setHidden(self, bool):
    """ setHidden(self, bool) """
    pass

  def setInputMethodHints(self, UnionQt.InputMethodHints=None, Qt.InputMethodHint=None):
    """ setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint]) """
    pass

  def setLayout(self, QLayout):
    """ setLayout(self, QLayout) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLocale(self, QtCore.QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setMask(self, QtGui.QBitmap):
    """ setMask(self, QBitmap)
    setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, int, int):
    """ setMaximumSize(self, int, int)
    setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, int, int):
    """ setMinimumSize(self, int, int)
    setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setMouseTracking(self, bool):
    """ setMouseTracking(self, bool) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPalette(self, QtGui.QPalette):
    """ setPalette(self, QPalette) """
    pass

  def setParent(self, QWidget):
    """ setParent(self, QWidget)
    setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setPixmap(self, arg0, QtGui.QPixmap):
    """ setPixmap(self, QWizard.WizardPixmap, QPixmap) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return True

  def setShortcutAutoRepeat(self, int, arg0=None):
    """ setShortcutAutoRepeat(self, int, enabled: bool = True) """
    pass

  def setShortcutEnabled(self, int, arg0=None):
    """ setShortcutEnabled(self, int, enabled: bool = True) """
    pass

  def setSizeIncrement(self, int, int):
    """ setSizeIncrement(self, int, int)
    setSizeIncrement(self, QSize) """
    pass

  def setSizePolicy(self, QSizePolicy):
    """ setSizePolicy(self, QSizePolicy)
    setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setStyle(self, QStyle):
    """ setStyle(self, QStyle) """
    pass

  def setStyleSheet(self, str):
    """ setStyleSheet(self, str) """
    pass

  def setSubTitle(self, str):
    """ setSubTitle(self, str) """
    pass

  def setTabOrder(QWidget, QWidget):
    """ setTabOrder(QWidget, QWidget) """
    pass

  def setTabletTracking(self, bool):
    """ setTabletTracking(self, bool) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setToolTipDuration(self, int):
    """ setToolTipDuration(self, int) """
    pass

  def setUpdatesEnabled(self, bool):
    """ setUpdatesEnabled(self, bool) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def setWindowFilePath(self, str):
    """ setWindowFilePath(self, str) """
    pass

  def setWindowFlag(self, arg0, arg1=None):
    """ setWindowFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setWindowFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setWindowIcon(self, QtGui.QIcon):
    """ setWindowIcon(self, QIcon) """
    pass

  def setWindowIconText(self, str):
    """ setWindowIconText(self, str) """
    pass

  def setWindowModality(self, arg0):
    """ setWindowModality(self, Qt.WindowModality) """
    pass

  def setWindowModified(self, bool):
    """ setWindowModified(self, bool) """
    pass

  def setWindowOpacity(self, float):
    """ setWindowOpacity(self, float) """
    pass

  def setWindowRole(self, str):
    """ setWindowRole(self, str) """
    pass

  def setWindowState(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowState(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setWindowTitle(self, str):
    """ setWindowTitle(self, str) """
    pass

  def sharedPainter():
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return True

  def size(self):
    """ size(self) -> QSize """
    return QtCore.QSize()

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return QtCore.QSize()

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return QtCore.QSize()

  def sizePolicy(self):
    """ sizePolicy(self) -> QSizePolicy """
    return QSizePolicy()

  def stackUnder(self, QWidget):
    """ stackUnder(self, QWidget) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def style(self):
    """ style(self) -> QStyle """
    return QStyle()

  def styleSheet(self):
    """ styleSheet(self) -> str """
    return ""

  def subTitle(self):
    """ subTitle(self) -> str """
    return ""

  def tabletEvent():
    pass

  def testAttribute(self, arg0):
    """ testAttribute(self, Qt.WidgetAttribute) -> bool """
    return True

  def thread(self):
    """ thread(self) -> QThread """
    return QtCore.QThread()

  def timerEvent():
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def toolTipDuration(self):
    """ toolTipDuration(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def underMouse(self):
    """ underMouse(self) -> bool """
    return True

  def ungrabGesture(self, arg0):
    """ ungrabGesture(self, Qt.GestureType) """
    pass

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def unsetLayoutDirection(self):
    """ unsetLayoutDirection(self) """
    pass

  def unsetLocale(self):
    """ unsetLocale(self) """
    pass

  def update(self):
    """ update(self)
    update(self, QRect)
    update(self, QRegion)
    update(self, int, int, int, int) """
    pass

  def updateGeometry(self):
    """ updateGeometry(self) """
    pass

  def updateMicroFocus():
    pass

  def updatesEnabled(self):
    """ updatesEnabled(self) -> bool """
    return True

  def validatePage(self):
    """ validatePage(self) -> bool """
    return True

  def visibleRegion(self):
    """ visibleRegion(self) -> QRegion """
    return QtGui.QRegion()

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def window(self):
    """ window(self) -> QWidget """
    return QWidget()

  def windowFilePath(self):
    """ windowFilePath(self) -> str """
    return ""

  def windowFlags(self):
    """ windowFlags(self) -> Qt.WindowFlags """
    return None

  def windowHandle(self):
    """ windowHandle(self) -> QWindow """
    return QtGui.QWindow()

  def windowIcon(self):
    """ windowIcon(self) -> QIcon """
    return QtGui.QIcon()

  def windowIconChanged(self, QtGui.QIcon):
    """ windowIconChanged(self, QIcon) [signal] """
    pass

  def windowIconText(self):
    """ windowIconText(self) -> str """
    return ""

  def windowIconTextChanged(self, str):
    """ windowIconTextChanged(self, str) [signal] """
    pass

  def windowModality(self):
    """ windowModality(self) -> Qt.WindowModality """
    return None

  def windowOpacity(self):
    """ windowOpacity(self) -> float """
    return 1.0

  def windowRole(self):
    """ windowRole(self) -> str """
    return ""

  def windowState(self):
    """ windowState(self) -> Qt.WindowStates """
    return None

  def windowTitle(self):
    """ windowTitle(self) -> str """
    return ""

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def windowType(self):
    """ windowType(self) -> Qt.WindowType """
    return None

  def wizard(self):
    """ wizard(self) -> QWizard """
    return QWizard()

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

__doc__ = None
__file__ = 'C:\\Users\\Rupka\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\PyQt5\\QtWidgets.pyd'
__loader__ = None
__name__ = 'PyQt5.QtWidgets'
__package__ = 'PyQt5'
__spec__ = None
qApp = None

def qDrawBorderPixmap(QtGui.QPainter, QtCore.QRect, QtCore.QMargins, QtGui.QPixmap):
  """ qDrawBorderPixmap(QPainter, QRect, QMargins, QPixmap) """
  pass

def qDrawPlainRect(QtGui.QPainter, int, int, int, int, UnionQColor=None, Qt.GlobalColor=None, arg0=None, arg1=None, QColor=None, Qt.GlobalColor=None, arg2=None):
  """ qDrawPlainRect(QPainter, int, int, int, int, Union[QColor, Qt.GlobalColor], lineWidth: int = 1, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None)
  qDrawPlainRect(QPainter, QRect, Union[QColor, Qt.GlobalColor, QGradient], lineWidth: int = 1, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None) """
  pass

def qDrawShadeLine(QtGui.QPainter, int, int, int, int, QtGui.QPalette, arg0=None, arg1=None, arg2=None):
  """ qDrawShadeLine(QPainter, int, int, int, int, QPalette, sunken: bool = True, lineWidth: int = 1, midLineWidth: int = 0)
  qDrawShadeLine(QPainter, QPoint, QPoint, QPalette, sunken: bool = True, lineWidth: int = 1, midLineWidth: int = 0) """
  pass

def qDrawShadePanel(QtGui.QPainter, int, int, int, int, QtGui.QPalette, arg0=None, arg1=None, arg2=None, QColor=None, Qt.GlobalColor=None, arg3=None):
  """ qDrawShadePanel(QPainter, int, int, int, int, QPalette, sunken: bool = False, lineWidth: int = 1, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None)
  qDrawShadePanel(QPainter, QRect, QPalette, sunken: bool = False, lineWidth: int = 1, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None) """
  pass

def qDrawShadeRect(QtGui.QPainter, int, int, int, int, QtGui.QPalette, arg0=None, arg1=None, arg2=None, arg3=None, QColor=None, Qt.GlobalColor=None, arg4=None):
  """ qDrawShadeRect(QPainter, int, int, int, int, QPalette, sunken: bool = False, lineWidth: int = 1, midLineWidth: int = 0, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None)
  qDrawShadeRect(QPainter, QRect, QPalette, sunken: bool = False, lineWidth: int = 1, midLineWidth: int = 0, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None) """
  pass

def qDrawWinButton(QtGui.QPainter, int, int, int, int, QtGui.QPalette, arg0=None, arg1=None, QColor=None, Qt.GlobalColor=None, arg2=None):
  """ qDrawWinButton(QPainter, int, int, int, int, QPalette, sunken: bool = False, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None)
  qDrawWinButton(QPainter, QRect, QPalette, sunken: bool = False, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None) """
  pass

def qDrawWinPanel(QtGui.QPainter, int, int, int, int, QtGui.QPalette, arg0=None, arg1=None, QColor=None, Qt.GlobalColor=None, arg2=None):
  """ qDrawWinPanel(QPainter, int, int, int, int, QPalette, sunken: bool = False, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None)
  qDrawWinPanel(QPainter, QRect, QPalette, sunken: bool = False, fill: Union[QBrush, QColor, Qt.GlobalColor, QGradient] = None) """
  pass

