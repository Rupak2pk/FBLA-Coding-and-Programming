# coding: utf-8
# AUTO-GENERATED FILE -- DO NOT EDIT


class QAbstractOpenGLFunctions(wrapper):

  pass

class QAbstractTextDocumentLayout(QObject):
  """ QAbstractTextDocumentLayout(QTextDocument) """

  class PaintContext(simplewrapper):
    """ QAbstractTextDocumentLayout.PaintContext()
    QAbstractTextDocumentLayout.PaintContext(QAbstractTextDocumentLayout.PaintContext) """

    clip = None
    cursorPosition = None
    palette = None
    selections = None

  class Selection(simplewrapper):
    """ QAbstractTextDocumentLayout.Selection()
    QAbstractTextDocumentLayout.Selection(QAbstractTextDocumentLayout.Selection) """

    cursor = None
    format = None

  def anchorAt(self, UnionQPointF=None, QPoint=None):
    """ anchorAt(self, Union[QPointF, QPoint]) -> str """
    return ""

  def blockBoundingRect(self, QTextBlock):
    """ blockBoundingRect(self, QTextBlock) -> QRectF """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def documentChanged(self, int, int, int):
    """ documentChanged(self, int, int, int) """
    pass

  def documentSize(self):
    """ documentSize(self) -> QSizeF """
    return None

  def documentSizeChanged(self, QSizeF):
    """ documentSizeChanged(self, QSizeF) [signal] """
    pass

  def draw(self, QPainter, arg0):
    """ draw(self, QPainter, QAbstractTextDocumentLayout.PaintContext) """
    pass

  def drawInlineObject(self, QPainter, QRectF, QTextInlineObject, int, QTextFormat):
    """ drawInlineObject(self, QPainter, QRectF, QTextInlineObject, int, QTextFormat) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self, int):
    """ format(self, int) -> QTextCharFormat """
    return None

  def formatAt(self, UnionQPointF=None, QPoint=None):
    """ formatAt(self, Union[QPointF, QPoint]) -> QTextFormat """
    return None

  def frameBoundingRect(self, QTextFrame):
    """ frameBoundingRect(self, QTextFrame) -> QRectF """
    return None

  def handlerForObject(self, int):
    """ handlerForObject(self, int) -> QTextObjectInterface """
    return None

  def hitTest(self, UnionQPointF=None, QPoint=None, Qt.HitTestAccuracy=None):
    """ hitTest(self, Union[QPointF, QPoint], Qt.HitTestAccuracy) -> int """
    return 1

  def imageAt(self, UnionQPointF=None, QPoint=None):
    """ imageAt(self, Union[QPointF, QPoint]) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def pageCount(self):
    """ pageCount(self) -> int """
    return 1

  def pageCountChanged(self, int):
    """ pageCountChanged(self, int) [signal] """
    pass

  def paintDevice(self):
    """ paintDevice(self) -> QPaintDevice """
    return 1

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def positionInlineObject(self, QTextInlineObject, int, QTextFormat):
    """ positionInlineObject(self, QTextInlineObject, int, QTextFormat) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def registerHandler(self, int, QObject):
    """ registerHandler(self, int, QObject) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resizeInlineObject(self, QTextInlineObject, int, QTextFormat):
    """ resizeInlineObject(self, QTextInlineObject, int, QTextFormat) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPaintDevice(self, QPaintDevice):
    """ setPaintDevice(self, QPaintDevice) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def unregisterHandler():
    """ unregisterHandler(self, int, component: QObject = None) """
    pass

  def update():
    """ update(self, rect: QRectF = QRectF(0,0,1e+09,1e+09)) [signal] """
    pass

  def updateBlock(self, QTextBlock):
    """ updateBlock(self, QTextBlock) [signal] """
    pass

class QActionEvent(QEvent):
  """ QActionEvent(int, QAction, before: QAction = None)
  QActionEvent(QActionEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def action(self):
    """ action(self) -> QAction """
    return None

  def before(self):
    """ before(self) -> QAction """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QBackingStore(simplewrapper):
  """ QBackingStore(QWindow) """

  def beginPaint(self, QRegion):
    """ beginPaint(self, QRegion) """
    pass

  def endPaint(self):
    """ endPaint(self) """
    pass

  def flush():
    """ flush(self, QRegion, window: QWindow = None, offset: QPoint = QPoint()) """
    pass

  def hasStaticContents(self):
    """ hasStaticContents(self) -> bool """
    return None

  def paintDevice(self):
    """ paintDevice(self) -> QPaintDevice """
    return 1

  def resize(self, QSize):
    """ resize(self, QSize) """
    pass

  def scroll(self, QRegion, int, int):
    """ scroll(self, QRegion, int, int) -> bool """
    return None

  def setStaticContents(self, QRegion):
    """ setStaticContents(self, QRegion) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def staticContents(self):
    """ staticContents(self) -> QRegion """
    return None

  def window(self):
    """ window(self) -> QWindow """
    return None

class QBitmap(QPixmap):
  """ QBitmap()
  QBitmap(QBitmap)
  QBitmap(QPixmap)
  QBitmap(int, int)
  QBitmap(QSize)
  QBitmap(str, format: str = None)
  QBitmap(Any) """

  class PaintDeviceMetric(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  def cacheKey(self):
    """ cacheKey(self) -> int """
    return 1

  def clear(self):
    """ clear(self) """
    pass

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def convertFromImage(self, QImage, arg0=None, arg1=None):
    """ convertFromImage(self, QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool """
    return None

  def copy(self, arg0=None):
    """ copy(self, rect: QRect = QRect()) -> QPixmap
    copy(self, int, int, int, int) -> QPixmap """
    return None

  def createHeuristicMask(self, arg0=None):
    """ createHeuristicMask(self, clipTight: bool = True) -> QBitmap """
    return None

  def createMaskFromColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None, arg0=None):
    """ createMaskFromColor(self, Union[QColor, Qt.GlobalColor, QGradient], mode: Qt.MaskMode = Qt.MaskInColor) -> QBitmap """
    return None

  def defaultDepth():
    """ defaultDepth() -> int """
    return 1

  def depth(self):
    """ depth(self) -> int """
    return 1

  def detach(self):
    """ detach(self) """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def fill():
    """ fill(self, color: Union[QColor, Qt.GlobalColor, QGradient] = Qt.GlobalColor.white) """
    pass

  def fromData(QSize, bytes, arg0=None):
    """ fromData(QSize, bytes, format: QImage.Format = QImage.Format_MonoLSB) -> QBitmap """
    return None

  def fromImage(QImage, arg0=None, arg1=None):
    """ fromImage(QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor) -> QBitmap """
    return None

  def fromImageReader(QImageReader, arg0=None, arg1=None):
    """ fromImageReader(QImageReader, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QPixmap """
    return None

  def hasAlpha(self):
    """ hasAlpha(self) -> bool """
    return None

  def hasAlphaChannel(self):
    """ hasAlphaChannel(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isQBitmap(self):
    """ isQBitmap(self) -> bool """
    return None

  def load(self, str, arg0=None, arg1=None, arg2=None):
    """ load(self, str, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool """
    return None

  def loadFromData(self, bytes, arg0=None, arg1=None, arg2=None):
    """ loadFromData(self, bytes, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool
    loadFromData(self, Union[QByteArray, bytes, bytearray], format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def mask(self):
    """ mask(self) -> QBitmap """
    return None

  def metric():
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def save(self, str, arg0=None, arg1=None):
    """ save(self, str, format: str = None, quality: int = -1) -> bool
    save(self, QIODevice, format: str = None, quality: int = -1) -> bool """
    return None

  def scaled(self, int, int, arg0=None, arg1=None):
    """ scaled(self, int, int, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap
    scaled(self, QSize, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap """
    return None

  def scaledToHeight(self, int, arg0=None):
    """ scaledToHeight(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap """
    return None

  def scaledToWidth(self, int, arg0=None):
    """ scaledToWidth(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap """
    return None

  def scroll(self, int, int, QRect):
    """ scroll(self, int, int, QRect) -> QRegion
    scroll(self, int, int, int, int, int, int) -> QRegion """
    return None

  def setDevicePixelRatio(self, float):
    """ setDevicePixelRatio(self, float) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def swap(self, QBitmap):
    """ swap(self, QBitmap) """
    pass

  def toImage(self):
    """ toImage(self) -> QImage """
    return None

  def transformed(self, QTransform):
    """ transformed(self, QTransform) -> QBitmap """
    return None

  def trueMatrix(QTransform, int, int):
    """ trueMatrix(QTransform, int, int) -> QTransform """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QBrush(simplewrapper):
  """ QBrush()
  QBrush(Qt.BrushStyle)
  QBrush(Union[QColor, Qt.GlobalColor, QGradient], style: Qt.BrushStyle = Qt.SolidPattern)
  QBrush(Union[QColor, Qt.GlobalColor, QGradient], QPixmap)
  QBrush(QPixmap)
  QBrush(QImage)
  QBrush(Union[QBrush, QColor, Qt.GlobalColor, QGradient])
  QBrush(Any) """

  def color(self):
    """ color(self) -> QColor """
    return None

  def gradient(self):
    """ gradient(self) -> QGradient """
    return None

  def isOpaque(self):
    """ isOpaque(self) -> bool """
    return None

  def setColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColor(self, Union[QColor, Qt.GlobalColor, QGradient])
    setColor(self, Qt.GlobalColor) """
    pass

  def setStyle(self, arg0):
    """ setStyle(self, Qt.BrushStyle) """
    pass

  def setTexture(self, QPixmap):
    """ setTexture(self, QPixmap) """
    pass

  def setTextureImage(self, QImage):
    """ setTextureImage(self, QImage) """
    pass

  def setTransform(self, QTransform):
    """ setTransform(self, QTransform) """
    pass

  def style(self):
    """ style(self) -> Qt.BrushStyle """
    return None

  def swap(self, QBrush):
    """ swap(self, QBrush) """
    pass

  def texture(self):
    """ texture(self) -> QPixmap """
    return None

  def textureImage(self):
    """ textureImage(self) -> QImage """
    return None

  def transform(self):
    """ transform(self) -> QTransform """
    return None

class QClipboard(QObject):

  Clipboard = None
  FindBuffer = None

  class Mode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Selection = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changed(self, arg0):
    """ changed(self, QClipboard.Mode) [signal] """
    pass

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear():
    """ clear(self, mode: QClipboard.Mode = QClipboard.Clipboard) """
    pass

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def dataChanged(self):
    """ dataChanged(self) [signal] """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findBufferChanged(self):
    """ findBufferChanged(self) [signal] """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def image(self, arg0=None):
    """ image(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QImage """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, arg0=None):
    """ mimeData(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QMimeData """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def ownsClipboard(self):
    """ ownsClipboard(self) -> bool """
    return None

  def ownsFindBuffer(self):
    """ ownsFindBuffer(self) -> bool """
    return None

  def ownsSelection(self):
    """ ownsSelection(self) -> bool """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pixmap(self, arg0=None):
    """ pixmap(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QPixmap """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def selectionChanged(self):
    """ selectionChanged(self) [signal] """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setImage():
    """ setImage(self, QImage, mode: QClipboard.Mode = QClipboard.Clipboard) """
    pass

  def setMimeData():
    """ setMimeData(self, QMimeData, mode: QClipboard.Mode = QClipboard.Clipboard) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPixmap():
    """ setPixmap(self, QPixmap, mode: QClipboard.Mode = QClipboard.Clipboard) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setText():
    """ setText(self, str, mode: QClipboard.Mode = QClipboard.Clipboard) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsFindBuffer(self):
    """ supportsFindBuffer(self) -> bool """
    return None

  def supportsSelection(self):
    """ supportsSelection(self) -> bool """
    return None

  def text(self, arg0=None):
    """ text(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> str
    text(self, str, mode: QClipboard.Mode = QClipboard.Clipboard) -> Tuple[str, str] """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QCloseEvent(QEvent):
  """ QCloseEvent()
  QCloseEvent(QCloseEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QColor(simplewrapper):
  """ QColor(Qt.GlobalColor)
  QColor(int)
  QColor(QRgba64)
  QColor(Any)
  QColor()
  QColor(int, int, int, alpha: int = 255)
  QColor(str)
  QColor(Union[QColor, Qt.GlobalColor, QGradient]) """

  Cmyk = None
  HexArgb = None
  HexRgb = None
  Hsl = None
  Hsv = None
  Invalid = None

  class NameFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Rgb = None

  class Spec(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def alpha(self):
    """ alpha(self) -> int """
    return 1

  def alphaF(self):
    """ alphaF(self) -> float """
    return 1.0

  def black(self):
    """ black(self) -> int """
    return 1

  def blackF(self):
    """ blackF(self) -> float """
    return 1.0

  def blue(self):
    """ blue(self) -> int """
    return 1

  def blueF(self):
    """ blueF(self) -> float """
    return 1.0

  def colorNames():
    """ colorNames() -> List[str] """
    return ""

  def convertTo(self, arg0):
    """ convertTo(self, QColor.Spec) -> QColor """
    return None

  def cyan(self):
    """ cyan(self) -> int """
    return 1

  def cyanF(self):
    """ cyanF(self) -> float """
    return 1.0

  def darker(self, arg0=None):
    """ darker(self, factor: int = 200) -> QColor """
    return None

  def fromCmyk(int, int, int, int, arg0=None):
    """ fromCmyk(int, int, int, int, alpha: int = 255) -> QColor """
    return None

  def fromCmykF(float, float, float, float, arg0=None):
    """ fromCmykF(float, float, float, float, alpha: float = 1) -> QColor """
    return None

  def fromHsl(int, int, int, arg0=None):
    """ fromHsl(int, int, int, alpha: int = 255) -> QColor """
    return None

  def fromHslF(float, float, float, arg0=None):
    """ fromHslF(float, float, float, alpha: float = 1) -> QColor """
    return None

  def fromHsv(int, int, int, arg0=None):
    """ fromHsv(int, int, int, alpha: int = 255) -> QColor """
    return None

  def fromHsvF(float, float, float, arg0=None):
    """ fromHsvF(float, float, float, alpha: float = 1) -> QColor """
    return None

  def fromRgb(int):
    """ fromRgb(int) -> QColor
    fromRgb(int, int, int, alpha: int = 255) -> QColor """
    return None

  def fromRgbF(float, float, float, arg0=None):
    """ fromRgbF(float, float, float, alpha: float = 1) -> QColor """
    return None

  def fromRgba(int):
    """ fromRgba(int) -> QColor """
    return None

  def fromRgba64(int, int, int, arg0=None):
    """ fromRgba64(int, int, int, alpha: int = 65535) -> QColor
    fromRgba64(QRgba64) -> QColor """
    return None

  def getCmyk(self):
    """ getCmyk(self) -> Tuple[int, int, int, int, int] """
    return 1

  def getCmykF(self):
    """ getCmykF(self) -> Tuple[float, float, float, float, float] """
    return 1.0

  def getHsl(self):
    """ getHsl(self) -> Tuple[int, int, int, int] """
    return 1

  def getHslF(self):
    """ getHslF(self) -> Tuple[float, float, float, float] """
    return 1.0

  def getHsv(self):
    """ getHsv(self) -> Tuple[int, int, int, int] """
    return 1

  def getHsvF(self):
    """ getHsvF(self) -> Tuple[float, float, float, float] """
    return 1.0

  def getRgb(self):
    """ getRgb(self) -> Tuple[int, int, int, int] """
    return 1

  def getRgbF(self):
    """ getRgbF(self) -> Tuple[float, float, float, float] """
    return 1.0

  def green(self):
    """ green(self) -> int """
    return 1

  def greenF(self):
    """ greenF(self) -> float """
    return 1.0

  def hslHue(self):
    """ hslHue(self) -> int """
    return 1

  def hslHueF(self):
    """ hslHueF(self) -> float """
    return 1.0

  def hslSaturation(self):
    """ hslSaturation(self) -> int """
    return 1

  def hslSaturationF(self):
    """ hslSaturationF(self) -> float """
    return 1.0

  def hsvHue(self):
    """ hsvHue(self) -> int """
    return 1

  def hsvHueF(self):
    """ hsvHueF(self) -> float """
    return 1.0

  def hsvSaturation(self):
    """ hsvSaturation(self) -> int """
    return 1

  def hsvSaturationF(self):
    """ hsvSaturationF(self) -> float """
    return 1.0

  def hue(self):
    """ hue(self) -> int """
    return 1

  def hueF(self):
    """ hueF(self) -> float """
    return 1.0

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isValidColor(str):
    """ isValidColor(str) -> bool """
    return None

  def lighter(self, arg0=None):
    """ lighter(self, factor: int = 150) -> QColor """
    return None

  def lightness(self):
    """ lightness(self) -> int """
    return 1

  def lightnessF(self):
    """ lightnessF(self) -> float """
    return 1.0

  def magenta(self):
    """ magenta(self) -> int """
    return 1

  def magentaF(self):
    """ magentaF(self) -> float """
    return 1.0

  def name(self):
    """ name(self) -> str
    name(self, QColor.NameFormat) -> str """
    return ""

  def red(self):
    """ red(self) -> int """
    return 1

  def redF(self):
    """ redF(self) -> float """
    return 1.0

  def rgb(self):
    """ rgb(self) -> int """
    return 1

  def rgba(self):
    """ rgba(self) -> int """
    return 1

  def rgba64(self):
    """ rgba64(self) -> QRgba64 """
    return None

  def saturation(self):
    """ saturation(self) -> int """
    return 1

  def saturationF(self):
    """ saturationF(self) -> float """
    return 1.0

  def setAlpha(self, int):
    """ setAlpha(self, int) """
    pass

  def setAlphaF(self, float):
    """ setAlphaF(self, float) """
    pass

  def setBlue(self, int):
    """ setBlue(self, int) """
    pass

  def setBlueF(self, float):
    """ setBlueF(self, float) """
    pass

  def setCmyk():
    """ setCmyk(self, int, int, int, int, alpha: int = 255) """
    pass

  def setCmykF():
    """ setCmykF(self, float, float, float, float, alpha: float = 1) """
    pass

  def setGreen(self, int):
    """ setGreen(self, int) """
    pass

  def setGreenF(self, float):
    """ setGreenF(self, float) """
    pass

  def setHsl():
    """ setHsl(self, int, int, int, alpha: int = 255) """
    pass

  def setHslF():
    """ setHslF(self, float, float, float, alpha: float = 1) """
    pass

  def setHsv():
    """ setHsv(self, int, int, int, alpha: int = 255) """
    pass

  def setHsvF():
    """ setHsvF(self, float, float, float, alpha: float = 1) """
    pass

  def setNamedColor(self, str):
    """ setNamedColor(self, str) """
    pass

  def setRed(self, int):
    """ setRed(self, int) """
    pass

  def setRedF(self, float):
    """ setRedF(self, float) """
    pass

  def setRgb(self, int):
    """ setRgb(self, int, int, int, alpha: int = 255)
    setRgb(self, int) """
    pass

  def setRgbF():
    """ setRgbF(self, float, float, float, alpha: float = 1) """
    pass

  def setRgba(self, int):
    """ setRgba(self, int) """
    pass

  def setRgba64(self, QRgba64):
    """ setRgba64(self, QRgba64) """
    pass

  def spec(self):
    """ spec(self) -> QColor.Spec """
    return None

  def toCmyk(self):
    """ toCmyk(self) -> QColor """
    return None

  def toHsl(self):
    """ toHsl(self) -> QColor """
    return None

  def toHsv(self):
    """ toHsv(self) -> QColor """
    return None

  def toRgb(self):
    """ toRgb(self) -> QColor """
    return None

  def value(self):
    """ value(self) -> int """
    return 1

  def valueF(self):
    """ valueF(self) -> float """
    return 1.0

  def yellow(self):
    """ yellow(self) -> int """
    return 1

  def yellowF(self):
    """ yellowF(self) -> float """
    return 1.0

class QConicalGradient(QGradient):
  """ QConicalGradient()
  QConicalGradient(Union[QPointF, QPoint], float)
  QConicalGradient(float, float, float)
  QConicalGradient(QConicalGradient) """

  AboveTheSky = None
  AfricanField = None
  AlchemistLab = None
  AmourAmour = None
  AmyCrisp = None
  AngelCare = None
  AquaGuidance = None
  AquaSplash = None
  AwesomePine = None
  BigMango = None
  BlackSea = None
  Blessing = None
  BurningSpring = None
  CheerfulCaramel = None
  ChildCare = None
  CleanMirror = None
  CloudyApple = None
  CloudyKnoxville = None
  CochitiLake = None
  ColdEvening = None
  ColorfulPeach = None
  ConfidentCloud = None
  ConicalGradient = None

  class CoordinateMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CrystalRiver = None
  Crystalline = None
  DeepBlue = None
  DeepRelief = None
  DenseWater = None
  DesertHump = None
  DirtyBeauty = None
  DustyGrass = None
  EternalConstance = None
  EverlastingSky = None
  FabledSunset = None
  FarawayRiver = None
  FebruaryInk = None
  FlyHigh = None
  FlyingLemon = None
  ForestInei = None
  FreshMilk = None
  FreshOasis = None
  FrozenBerry = None
  FrozenDreams = None
  FrozenHeat = None
  FruitBlend = None
  GagarinView = None
  GentleCare = None
  GlassWater = None
  GrassShampoo = None
  GreatWhale = None
  GrownEarly = None
  HappyAcid = None
  HappyFisher = None
  HappyMemories = None
  HappyUnicorn = None
  HealthyWater = None
  HeavenPeach = None
  HeavyRain = None
  HiddenJaguar = None
  HighFlight = None
  ItmeoBranding = None
  JapanBlush = None
  JuicyCake = None
  JuicyPeach = None
  JungleDay = None
  KindSteel = None
  LadogaBottom = None
  LadyLips = None
  LandingAircraft = None
  LeCocktail = None
  LemonGate = None
  LightBlue = None
  LilyMeadow = None
  LinearGradient = None
  LogicalMode = None
  LoveKiss = None
  MagicLake = None
  MagicRay = None
  MalibuBeach = None
  MarbleWall = None
  MarsParty = None
  MeanFruit = None
  MidnightBloom = None
  MillenniumPine = None
  MindCrawl = None
  MixedHopes = None
  MoleHall = None
  MorningSalad = None
  MorpheusDen = None
  MountainRock = None
  NearMoon = None
  Nega = None
  NewLife = None
  NewRetrowave = None
  NewYork = None
  NightCall = None
  NightFade = None
  NightParty = None
  NightSky = None
  NoGradient = None
  NorseBeauty = None
  NorthMiracle = None
  ObjectBoundingMode = None
  ObjectMode = None
  OctoberSilence = None
  OldHat = None
  OrangeJuice = None
  OverSun = None
  PadSpread = None
  PaloAlto = None
  PartyBliss = None
  PassionateBed = None
  PerfectBlue = None
  PerfectWhite = None
  PhoenixStart = None
  PlumBath = None
  PlumPlate = None
  PoliteRumors = None
  PremiumDark = None
  PremiumWhite = None

  class Preset(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PurpleDivision = None
  RadialGradient = None
  RainyAshville = None
  RareWind = None
  RedSalvation = None
  ReflectSpread = None
  RepeatSpread = None
  RichMetal = None
  RipeMalinka = None
  RiskyConcrete = None
  RiverCity = None
  RoyalGarden = None
  SaintPetersburg = None
  SaltMountain = None
  SandStrike = None
  SeaLord = None
  SeaStrike = None
  Seashore = None
  ShadyWater = None
  SharpBlues = None
  SharpeyeEagle = None
  ShyRainbow = None
  SkyGlider = None
  SleeplessNight = None
  SmartIndigo = None
  SmilingRain = None
  SnowAgain = None
  SoftCherish = None
  SoftGrass = None
  SoftLipstick = None
  SolidStone = None
  SpaceShift = None
  SpikyNaga = None

  class Spread(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SpringWarmth = None
  StarWine = None
  StretchToDeviceMode = None
  StrictNovember = None
  StrongBliss = None
  StrongStick = None
  SugarLollipop = None
  SummerGames = None
  SunVeggie = None
  SunnyMorning = None
  SupremeSky = None
  SweetDessert = None
  SweetPeriod = None
  TeenNotebook = None
  TeenParty = None
  TemptingAzure = None
  TrueSunset = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ViciousStance = None
  WarmFlame = None
  WideMatrix = None
  WildApple = None
  WinterNeva = None
  WitchDance = None
  YoungGrass = None
  YoungPassion = None
  ZeusMiracle = None

  def angle(self):
    """ angle(self) -> float """
    return 1.0

  def center(self):
    """ center(self) -> QPointF """
    return 1

  def coordinateMode(self):
    """ coordinateMode(self) -> QGradient.CoordinateMode """
    return None

  def setAngle(self, float):
    """ setAngle(self, float) """
    pass

  def setCenter(self, UnionQPointF=None, QPoint=None):
    """ setCenter(self, Union[QPointF, QPoint])
    setCenter(self, float, float) """
    pass

  def setColorAt(self, float, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColorAt(self, float, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCoordinateMode(self, arg0):
    """ setCoordinateMode(self, QGradient.CoordinateMode) """
    pass

  def setSpread(self, arg0):
    """ setSpread(self, QGradient.Spread) """
    pass

  def setStops(self, IterableTuplefloat=None, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setStops(self, Iterable[Tuple[float, Union[QColor, Qt.GlobalColor, QGradient]]]) """
    pass

  def spread(self):
    """ spread(self) -> QGradient.Spread """
    return None

  def stops(self):
    """ stops(self) -> List[Tuple[float, QColor]] """
    return 1.0

  def type(self):
    """ type(self) -> QGradient.Type """
    return None

class QContextMenuEvent(QInputEvent):
  """ QContextMenuEvent(QContextMenuEvent.Reason, QPoint, QPoint, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])
  QContextMenuEvent(QContextMenuEvent.Reason, QPoint, QPoint)
  QContextMenuEvent(QContextMenuEvent.Reason, QPoint)
  QContextMenuEvent(QContextMenuEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  Keyboard = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  Mouse = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Other = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None

  class Reason(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def globalPos(self):
    """ globalPos(self) -> QPoint """
    return 1

  def globalX(self):
    """ globalX(self) -> int """
    return 1

  def globalY(self):
    """ globalY(self) -> int """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def reason(self):
    """ reason(self) -> QContextMenuEvent.Reason """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QCursor(simplewrapper):
  """ QCursor()
  QCursor(QBitmap, QBitmap, hotX: int = -1, hotY: int = -1)
  QCursor(QPixmap, hotX: int = -1, hotY: int = -1)
  QCursor(Union[QCursor, Qt.CursorShape])
  QCursor(Any) """

  def bitmap(self):
    """ bitmap(self) -> QBitmap """
    return None

  def hotSpot(self):
    """ hotSpot(self) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QBitmap """
    return None

  def pixmap(self):
    """ pixmap(self) -> QPixmap """
    return None

  def pos():
    """ pos() -> QPoint
    pos(QScreen) -> QPoint """
    return 1

  def setPos(int, int):
    """ setPos(int, int)
    setPos(QPoint)
    setPos(QScreen, int, int)
    setPos(QScreen, QPoint) """
    pass

  def setShape(self, arg0):
    """ setShape(self, Qt.CursorShape) """
    pass

  def shape(self):
    """ shape(self) -> Qt.CursorShape """
    return None

  def swap(self, UnionQCursor=None, Qt.CursorShape=None):
    """ swap(self, Union[QCursor, Qt.CursorShape]) """
    pass

class QDesktopServices(simplewrapper):
  """ QDesktopServices()
  QDesktopServices(QDesktopServices) """

  def openUrl(QUrl):
    """ openUrl(QUrl) -> bool """
    return None

  def setUrlHandler(str, QObject, str):
    """ setUrlHandler(str, QObject, str)
    setUrlHandler(str, Callable[[QUrl], None]) """
    pass

  def unsetUrlHandler(str):
    """ unsetUrlHandler(str) """
    pass

class QDoubleValidator(QValidator):
  """ QDoubleValidator(parent: QObject = None)
  QDoubleValidator(float, float, int, parent: QObject = None) """

  Acceptable = None
  Intermediate = None
  Invalid = None

  class Notation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScientificNotation = None
  StandardNotation = None

  class State(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bottom(self):
    """ bottom(self) -> float """
    return 1.0

  def changed(self):
    """ changed(self) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def decimals(self):
    """ decimals(self) -> int """
    return 1

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def notation(self):
    """ notation(self) -> QDoubleValidator.Notation """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBottom(self, float):
    """ setBottom(self, float) """
    pass

  def setDecimals(self, int):
    """ setDecimals(self, int) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setNotation(self, arg0):
    """ setNotation(self, QDoubleValidator.Notation) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRange():
    """ setRange(self, float, float, decimals: int = 0) """
    pass

  def setTop(self, float):
    """ setTop(self, float) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def top(self):
    """ top(self) -> float """
    return 1.0

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

class QDrag(QObject):
  """ QDrag(QObject) """

  def actionChanged(self, arg0):
    """ actionChanged(self, Qt.DropAction) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cancel():
    """ cancel() """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def defaultAction(self):
    """ defaultAction(self) -> Qt.DropAction """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dragCursor(self, arg0):
    """ dragCursor(self, Qt.DropAction) -> QPixmap """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exec(self, arg0=None, arg1=None):
    """ exec(self, supportedActions: Union[Qt.DropActions, Qt.DropAction] = Qt.MoveAction) -> Qt.DropAction
    exec(self, Union[Qt.DropActions, Qt.DropAction], Qt.DropAction) -> Qt.DropAction """
    return None

  def exec_(self, arg0=None, arg1=None):
    """ exec_(self, supportedActions: Union[Qt.DropActions, Qt.DropAction] = Qt.MoveAction) -> Qt.DropAction
    exec_(self, Union[Qt.DropActions, Qt.DropAction], Qt.DropAction) -> Qt.DropAction """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hotSpot(self):
    """ hotSpot(self) -> QPoint """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self):
    """ mimeData(self) -> QMimeData """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pixmap(self):
    """ pixmap(self) -> QPixmap """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setDragCursor(self, QPixmap, arg0):
    """ setDragCursor(self, QPixmap, Qt.DropAction) """
    pass

  def setHotSpot(self, QPoint):
    """ setHotSpot(self, QPoint) """
    pass

  def setMimeData(self, QMimeData):
    """ setMimeData(self, QMimeData) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPixmap(self, QPixmap):
    """ setPixmap(self, QPixmap) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def source(self):
    """ source(self) -> QObject """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportedActions(self):
    """ supportedActions(self) -> Qt.DropActions """
    return None

  def target(self):
    """ target(self) -> QObject """
    return None

  def targetChanged(self, QObject):
    """ targetChanged(self, QObject) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QDragEnterEvent(QDragMoveEvent):
  """ QDragEnterEvent(QPoint, Union[Qt.DropActions, Qt.DropAction], QMimeData, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])
  QDragEnterEvent(QDragEnterEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self)
    accept(self, QRect) """
    pass

  def acceptProposedAction(self):
    """ acceptProposedAction(self) """
    pass

  def answerRect(self):
    """ answerRect(self) -> QRect """
    return None

  def dropAction(self):
    """ dropAction(self) -> Qt.DropAction """
    return None

  def ignore(self):
    """ ignore(self)
    ignore(self, QRect) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def keyboardModifiers(self):
    """ keyboardModifiers(self) -> Qt.KeyboardModifiers """
    return None

  def mimeData(self):
    """ mimeData(self) -> QMimeData """
    return None

  def mouseButtons(self):
    """ mouseButtons(self) -> Qt.MouseButtons """
    return None

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def posF(self):
    """ posF(self) -> QPointF """
    return 1

  def possibleActions(self):
    """ possibleActions(self) -> Qt.DropActions """
    return None

  def proposedAction(self):
    """ proposedAction(self) -> Qt.DropAction """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setDropAction(self, arg0):
    """ setDropAction(self, Qt.DropAction) """
    pass

  def source(self):
    """ source(self) -> QObject """
    return None

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QDragLeaveEvent(QEvent):
  """ QDragLeaveEvent()
  QDragLeaveEvent(QDragLeaveEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QDragMoveEvent(QDropEvent):
  """ QDragMoveEvent(QPoint, Union[Qt.DropActions, Qt.DropAction], QMimeData, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], type: QEvent.Type = QEvent.DragMove)
  QDragMoveEvent(QDragMoveEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self)
    accept(self, QRect) """
    pass

  def acceptProposedAction(self):
    """ acceptProposedAction(self) """
    pass

  def answerRect(self):
    """ answerRect(self) -> QRect """
    return None

  def dropAction(self):
    """ dropAction(self) -> Qt.DropAction """
    return None

  def ignore(self):
    """ ignore(self)
    ignore(self, QRect) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def keyboardModifiers(self):
    """ keyboardModifiers(self) -> Qt.KeyboardModifiers """
    return None

  def mimeData(self):
    """ mimeData(self) -> QMimeData """
    return None

  def mouseButtons(self):
    """ mouseButtons(self) -> Qt.MouseButtons """
    return None

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def posF(self):
    """ posF(self) -> QPointF """
    return 1

  def possibleActions(self):
    """ possibleActions(self) -> Qt.DropActions """
    return None

  def proposedAction(self):
    """ proposedAction(self) -> Qt.DropAction """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setDropAction(self, arg0):
    """ setDropAction(self, Qt.DropAction) """
    pass

  def source(self):
    """ source(self) -> QObject """
    return None

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QDropEvent(QEvent):
  """ QDropEvent(Union[QPointF, QPoint], Union[Qt.DropActions, Qt.DropAction], QMimeData, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], type: QEvent.Type = QEvent.Drop)
  QDropEvent(QDropEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def acceptProposedAction(self):
    """ acceptProposedAction(self) """
    pass

  def dropAction(self):
    """ dropAction(self) -> Qt.DropAction """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def keyboardModifiers(self):
    """ keyboardModifiers(self) -> Qt.KeyboardModifiers """
    return None

  def mimeData(self):
    """ mimeData(self) -> QMimeData """
    return None

  def mouseButtons(self):
    """ mouseButtons(self) -> Qt.MouseButtons """
    return None

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def posF(self):
    """ posF(self) -> QPointF """
    return 1

  def possibleActions(self):
    """ possibleActions(self) -> Qt.DropActions """
    return None

  def proposedAction(self):
    """ proposedAction(self) -> Qt.DropAction """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setDropAction(self, arg0):
    """ setDropAction(self, Qt.DropAction) """
    pass

  def source(self):
    """ source(self) -> QObject """
    return None

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QEnterEvent(QEvent):
  """ QEnterEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint])
  QEnterEvent(QEnterEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def globalPos(self):
    """ globalPos(self) -> QPoint """
    return 1

  def globalX(self):
    """ globalX(self) -> int """
    return 1

  def globalY(self):
    """ globalY(self) -> int """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def localPos(self):
    """ localPos(self) -> QPointF """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def screenPos(self):
    """ screenPos(self) -> QPointF """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def windowPos(self):
    """ windowPos(self) -> QPointF """
    return 1

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QExposeEvent(QEvent):
  """ QExposeEvent(QRegion)
  QExposeEvent(QExposeEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def region(self):
    """ region(self) -> QRegion """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QFileOpenEvent(QEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def file(self):
    """ file(self) -> str """
    return ""

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def openFile(self, QFile, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ openFile(self, QFile, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def url(self):
    """ url(self) -> QUrl """
    return None

class QFocusEvent(QEvent):
  """ QFocusEvent(QEvent.Type, reason: Qt.FocusReason = Qt.OtherFocusReason)
  QFocusEvent(QFocusEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def gotFocus(self):
    """ gotFocus(self) -> bool """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def lostFocus(self):
    """ lostFocus(self) -> bool """
    return None

  def reason(self):
    """ reason(self) -> Qt.FocusReason """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QFont(simplewrapper):
  """ QFont()
  QFont(str, pointSize: int = -1, weight: int = -1, italic: bool = False)
  QFont(QFont, QPaintDevice)
  QFont(QFont)
  QFont(Any) """

  AbsoluteSpacing = None
  AllLowercase = None
  AllUppercase = None
  AnyStretch = None
  AnyStyle = None
  Black = None
  Bold = None

  class Capitalization(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Capitalize = None
  Condensed = None
  Courier = None
  Cursive = None
  Decorative = None
  DemiBold = None
  Expanded = None
  ExtraBold = None
  ExtraCondensed = None
  ExtraExpanded = None
  ExtraLight = None
  Fantasy = None
  ForceIntegerMetrics = None
  ForceOutline = None
  Helvetica = None

  class HintingPreference(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Light = None
  Medium = None
  MixedCase = None
  Monospace = None
  NoAntialias = None
  NoFontMerging = None
  NoSubpixelAntialias = None
  Normal = None
  OldEnglish = None
  OpenGLCompatible = None
  PercentageSpacing = None
  PreferAntialias = None
  PreferBitmap = None
  PreferDefault = None
  PreferDefaultHinting = None
  PreferDevice = None
  PreferFullHinting = None
  PreferMatch = None
  PreferNoHinting = None
  PreferNoShaping = None
  PreferOutline = None
  PreferQuality = None
  PreferVerticalHinting = None
  SansSerif = None
  SemiCondensed = None
  SemiExpanded = None
  Serif = None
  SmallCaps = None

  class SpacingType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Stretch(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Style(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StyleHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StyleItalic = None
  StyleNormal = None
  StyleOblique = None

  class StyleStrategy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  System = None
  Thin = None
  Times = None
  TypeWriter = None
  UltraCondensed = None
  UltraExpanded = None
  Unstretched = None

  class Weight(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def bold(self):
    """ bold(self) -> bool """
    return None

  def cacheStatistics():
    """ cacheStatistics() """
    pass

  def capitalization(self):
    """ capitalization(self) -> QFont.Capitalization """
    return None

  def cleanup():
    """ cleanup() """
    pass

  def defaultFamily(self):
    """ defaultFamily(self) -> str """
    return ""

  def exactMatch(self):
    """ exactMatch(self) -> bool """
    return None

  def families(self):
    """ families(self) -> List[str] """
    return ""

  def family(self):
    """ family(self) -> str """
    return ""

  def fixedPitch(self):
    """ fixedPitch(self) -> bool """
    return None

  def fromString(self, str):
    """ fromString(self, str) -> bool """
    return None

  def hintingPreference(self):
    """ hintingPreference(self) -> QFont.HintingPreference """
    return 1

  def initialize():
    """ initialize() """
    pass

  def insertSubstitution(str, str):
    """ insertSubstitution(str, str) """
    pass

  def insertSubstitutions(str, Iterablestr=None):
    """ insertSubstitutions(str, Iterable[str]) """
    pass

  def isCopyOf(self, QFont):
    """ isCopyOf(self, QFont) -> bool """
    return None

  def italic(self):
    """ italic(self) -> bool """
    return None

  def kerning(self):
    """ kerning(self) -> bool """
    return None

  def key(self):
    """ key(self) -> str """
    return ""

  def lastResortFamily(self):
    """ lastResortFamily(self) -> str """
    return ""

  def lastResortFont(self):
    """ lastResortFont(self) -> str """
    return ""

  def letterSpacing(self):
    """ letterSpacing(self) -> float """
    return 1.0

  def letterSpacingType(self):
    """ letterSpacingType(self) -> QFont.SpacingType """
    return None

  def overline(self):
    """ overline(self) -> bool """
    return None

  def pixelSize(self):
    """ pixelSize(self) -> int """
    return 1

  def pointSize(self):
    """ pointSize(self) -> int """
    return 1

  def pointSizeF(self):
    """ pointSizeF(self) -> float """
    return 1.0

  def rawMode(self):
    """ rawMode(self) -> bool """
    return None

  def rawName(self):
    """ rawName(self) -> str """
    return ""

  def removeSubstitutions(str):
    """ removeSubstitutions(str) """
    pass

  def resolve(self, QFont):
    """ resolve(self, QFont) -> QFont """
    return None

  def setBold(self, bool):
    """ setBold(self, bool) """
    pass

  def setCapitalization(self, arg0):
    """ setCapitalization(self, QFont.Capitalization) """
    pass

  def setFamilies(self, Iterablestr=None):
    """ setFamilies(self, Iterable[str]) """
    pass

  def setFamily(self, str):
    """ setFamily(self, str) """
    pass

  def setFixedPitch(self, bool):
    """ setFixedPitch(self, bool) """
    pass

  def setHintingPreference(self, arg0):
    """ setHintingPreference(self, QFont.HintingPreference) """
    pass

  def setItalic(self, bool):
    """ setItalic(self, bool) """
    pass

  def setKerning(self, bool):
    """ setKerning(self, bool) """
    pass

  def setLetterSpacing(self, arg0, float):
    """ setLetterSpacing(self, QFont.SpacingType, float) """
    pass

  def setOverline(self, bool):
    """ setOverline(self, bool) """
    pass

  def setPixelSize(self, int):
    """ setPixelSize(self, int) """
    pass

  def setPointSize(self, int):
    """ setPointSize(self, int) """
    pass

  def setPointSizeF(self, float):
    """ setPointSizeF(self, float) """
    pass

  def setRawMode(self, bool):
    """ setRawMode(self, bool) """
    pass

  def setRawName(self, str):
    """ setRawName(self, str) """
    pass

  def setStretch(self, int):
    """ setStretch(self, int) """
    pass

  def setStrikeOut(self, bool):
    """ setStrikeOut(self, bool) """
    pass

  def setStyle(self, arg0):
    """ setStyle(self, QFont.Style) """
    pass

  def setStyleHint():
    """ setStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault) """
    pass

  def setStyleName(self, str):
    """ setStyleName(self, str) """
    pass

  def setStyleStrategy(self, arg0):
    """ setStyleStrategy(self, QFont.StyleStrategy) """
    pass

  def setUnderline(self, bool):
    """ setUnderline(self, bool) """
    pass

  def setWeight(self, int):
    """ setWeight(self, int) """
    pass

  def setWordSpacing(self, float):
    """ setWordSpacing(self, float) """
    pass

  def stretch(self):
    """ stretch(self) -> int """
    return 1

  def strikeOut(self):
    """ strikeOut(self) -> bool """
    return None

  def style(self):
    """ style(self) -> QFont.Style """
    return None

  def styleHint(self):
    """ styleHint(self) -> QFont.StyleHint """
    return 1

  def styleName(self):
    """ styleName(self) -> str """
    return ""

  def styleStrategy(self):
    """ styleStrategy(self) -> QFont.StyleStrategy """
    return None

  def substitute(str):
    """ substitute(str) -> str """
    return ""

  def substitutes(str):
    """ substitutes(str) -> List[str] """
    return ""

  def substitutions():
    """ substitutions() -> List[str] """
    return ""

  def swap(self, QFont):
    """ swap(self, QFont) """
    pass

  def toString(self):
    """ toString(self) -> str """
    return ""

  def underline(self):
    """ underline(self) -> bool """
    return None

  def weight(self):
    """ weight(self) -> int """
    return 1

  def wordSpacing(self):
    """ wordSpacing(self) -> float """
    return 1.0

class QFontDatabase(simplewrapper):
  """ QFontDatabase()
  QFontDatabase(QFontDatabase) """

  Any = None
  Arabic = None
  Armenian = None
  Bengali = None
  Cyrillic = None
  Devanagari = None
  FixedFont = None
  GeneralFont = None
  Georgian = None
  Greek = None
  Gujarati = None
  Gurmukhi = None
  Hebrew = None
  Japanese = None
  Kannada = None
  Khmer = None
  Korean = None
  Lao = None
  Latin = None
  Malayalam = None
  Myanmar = None
  Nko = None
  Ogham = None
  Oriya = None
  Other = None
  Runic = None
  SimplifiedChinese = None
  Sinhala = None
  SmallestReadableFont = None
  Symbol = None
  Syriac = None

  class SystemFont(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Tamil = None
  Telugu = None
  Thaana = None
  Thai = None
  Tibetan = None
  TitleFont = None
  TraditionalChinese = None
  Vietnamese = None

  class WritingSystem(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def addApplicationFont(str):
    """ addApplicationFont(str) -> int """
    return 1

  def addApplicationFontFromData(UnionQByteArray=None, bytes=None, bytearray=None):
    """ addApplicationFontFromData(Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def applicationFontFamilies(int):
    """ applicationFontFamilies(int) -> List[str] """
    return ""

  def bold(self, str, str):
    """ bold(self, str, str) -> bool """
    return None

  def families(self, arg0=None):
    """ families(self, writingSystem: QFontDatabase.WritingSystem = QFontDatabase.Any) -> List[str] """
    return ""

  def font(self, str, str, int):
    """ font(self, str, str, int) -> QFont """
    return None

  def isBitmapScalable(self, str, arg0=None):
    """ isBitmapScalable(self, str, style: str = '') -> bool """
    return None

  def isFixedPitch(self, str, arg0=None):
    """ isFixedPitch(self, str, style: str = '') -> bool """
    return None

  def isPrivateFamily(self, str):
    """ isPrivateFamily(self, str) -> bool """
    return None

  def isScalable(self, str, arg0=None):
    """ isScalable(self, str, style: str = '') -> bool """
    return None

  def isSmoothlyScalable(self, str, arg0=None):
    """ isSmoothlyScalable(self, str, style: str = '') -> bool """
    return None

  def italic(self, str, str):
    """ italic(self, str, str) -> bool """
    return None

  def pointSizes(self, str, arg0=None):
    """ pointSizes(self, str, style: str = '') -> List[int] """
    return 1

  def removeAllApplicationFonts():
    """ removeAllApplicationFonts() -> bool """
    return None

  def removeApplicationFont(int):
    """ removeApplicationFont(int) -> bool """
    return None

  def smoothSizes(self, str, str):
    """ smoothSizes(self, str, str) -> List[int] """
    return 1

  def standardSizes():
    """ standardSizes() -> List[int] """
    return 1

  def styleString(self, QFont):
    """ styleString(self, QFont) -> str
    styleString(self, QFontInfo) -> str """
    return ""

  def styles(self, str):
    """ styles(self, str) -> List[str] """
    return ""

  def supportsThreadedFontRendering():
    """ supportsThreadedFontRendering() -> bool """
    return None

  def systemFont(arg0):
    """ systemFont(QFontDatabase.SystemFont) -> QFont """
    return None

  def weight(self, str, str):
    """ weight(self, str, str) -> int """
    return 1

  def writingSystemName(arg0):
    """ writingSystemName(QFontDatabase.WritingSystem) -> str """
    return ""

  def writingSystemSample(arg0):
    """ writingSystemSample(QFontDatabase.WritingSystem) -> str """
    return ""

  def writingSystems(self):
    """ writingSystems(self) -> List[QFontDatabase.WritingSystem]
    writingSystems(self, str) -> List[QFontDatabase.WritingSystem] """
    return None

class QFontInfo(simplewrapper):
  """ QFontInfo(QFont)
  QFontInfo(QFontInfo) """

  def bold(self):
    """ bold(self) -> bool """
    return None

  def exactMatch(self):
    """ exactMatch(self) -> bool """
    return None

  def family(self):
    """ family(self) -> str """
    return ""

  def fixedPitch(self):
    """ fixedPitch(self) -> bool """
    return None

  def italic(self):
    """ italic(self) -> bool """
    return None

  def pixelSize(self):
    """ pixelSize(self) -> int """
    return 1

  def pointSize(self):
    """ pointSize(self) -> int """
    return 1

  def pointSizeF(self):
    """ pointSizeF(self) -> float """
    return 1.0

  def rawMode(self):
    """ rawMode(self) -> bool """
    return None

  def style(self):
    """ style(self) -> QFont.Style """
    return None

  def styleHint(self):
    """ styleHint(self) -> QFont.StyleHint """
    return 1

  def styleName(self):
    """ styleName(self) -> str """
    return ""

  def swap(self, QFontInfo):
    """ swap(self, QFontInfo) """
    pass

  def weight(self):
    """ weight(self) -> int """
    return 1

class QFontMetrics(simplewrapper):
  """ QFontMetrics(QFont)
  QFontMetrics(QFont, QPaintDevice)
  QFontMetrics(QFontMetrics) """

  def ascent(self):
    """ ascent(self) -> int """
    return 1

  def averageCharWidth(self):
    """ averageCharWidth(self) -> int """
    return 1

  def boundingRect(self, str):
    """ boundingRect(self, str) -> QRect
    boundingRect(self, QRect, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRect
    boundingRect(self, int, int, int, int, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRect """
    return None

  def boundingRectChar(self, str):
    """ boundingRectChar(self, str) -> QRect """
    return None

  def capHeight(self):
    """ capHeight(self) -> int """
    return 1

  def descent(self):
    """ descent(self) -> int """
    return 1

  def elidedText(self, str, arg0, int, arg1=None):
    """ elidedText(self, str, Qt.TextElideMode, int, flags: int = 0) -> str """
    return ""

  def height(self):
    """ height(self) -> int """
    return 1

  def horizontalAdvance(self, str, arg0=None):
    """ horizontalAdvance(self, str, length: int = -1) -> int """
    return 1

  def inFont(self, str):
    """ inFont(self, str) -> bool """
    return None

  def inFontUcs4(self, int):
    """ inFontUcs4(self, int) -> bool """
    return None

  def leading(self):
    """ leading(self) -> int """
    return 1

  def leftBearing(self, str):
    """ leftBearing(self, str) -> int """
    return 1

  def lineSpacing(self):
    """ lineSpacing(self) -> int """
    return 1

  def lineWidth(self):
    """ lineWidth(self) -> int """
    return 1

  def maxWidth(self):
    """ maxWidth(self) -> int """
    return 1

  def minLeftBearing(self):
    """ minLeftBearing(self) -> int """
    return 1

  def minRightBearing(self):
    """ minRightBearing(self) -> int """
    return 1

  def overlinePos(self):
    """ overlinePos(self) -> int """
    return 1

  def rightBearing(self, str):
    """ rightBearing(self, str) -> int """
    return 1

  def size(self, int, str, arg0=None, arg1=None):
    """ size(self, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QSize """
    return None

  def strikeOutPos(self):
    """ strikeOutPos(self) -> int """
    return 1

  def swap(self, QFontMetrics):
    """ swap(self, QFontMetrics) """
    pass

  def tightBoundingRect(self, str):
    """ tightBoundingRect(self, str) -> QRect """
    return None

  def underlinePos(self):
    """ underlinePos(self) -> int """
    return 1

  def width(self, str, arg0=None):
    """ width(self, str, length: int = -1) -> int """
    return 1

  def widthChar(self, str):
    """ widthChar(self, str) -> int """
    return 1

  def xHeight(self):
    """ xHeight(self) -> int """
    return 1

class QFontMetricsF(simplewrapper):
  """ QFontMetricsF(QFont)
  QFontMetricsF(QFont, QPaintDevice)
  QFontMetricsF(QFontMetrics)
  QFontMetricsF(QFontMetricsF) """

  def ascent(self):
    """ ascent(self) -> float """
    return 1.0

  def averageCharWidth(self):
    """ averageCharWidth(self) -> float """
    return 1.0

  def boundingRect(self, str):
    """ boundingRect(self, str) -> QRectF
    boundingRect(self, QRectF, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRectF """
    return None

  def boundingRectChar(self, str):
    """ boundingRectChar(self, str) -> QRectF """
    return None

  def capHeight(self):
    """ capHeight(self) -> float """
    return 1.0

  def descent(self):
    """ descent(self) -> float """
    return 1.0

  def elidedText(self, str, arg0, float, arg1=None):
    """ elidedText(self, str, Qt.TextElideMode, float, flags: int = 0) -> str """
    return ""

  def height(self):
    """ height(self) -> float """
    return 1.0

  def horizontalAdvance(self, str, arg0=None):
    """ horizontalAdvance(self, str, length: int = -1) -> float """
    return 1.0

  def inFont(self, str):
    """ inFont(self, str) -> bool """
    return None

  def inFontUcs4(self, int):
    """ inFontUcs4(self, int) -> bool """
    return None

  def leading(self):
    """ leading(self) -> float """
    return 1.0

  def leftBearing(self, str):
    """ leftBearing(self, str) -> float """
    return 1.0

  def lineSpacing(self):
    """ lineSpacing(self) -> float """
    return 1.0

  def lineWidth(self):
    """ lineWidth(self) -> float """
    return 1.0

  def maxWidth(self):
    """ maxWidth(self) -> float """
    return 1.0

  def minLeftBearing(self):
    """ minLeftBearing(self) -> float """
    return 1.0

  def minRightBearing(self):
    """ minRightBearing(self) -> float """
    return 1.0

  def overlinePos(self):
    """ overlinePos(self) -> float """
    return 1.0

  def rightBearing(self, str):
    """ rightBearing(self, str) -> float """
    return 1.0

  def size(self, int, str, arg0=None, arg1=None):
    """ size(self, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QSizeF """
    return None

  def strikeOutPos(self):
    """ strikeOutPos(self) -> float """
    return 1.0

  def swap(self, QFontMetricsF):
    """ swap(self, QFontMetricsF) """
    pass

  def tightBoundingRect(self, str):
    """ tightBoundingRect(self, str) -> QRectF """
    return None

  def underlinePos(self):
    """ underlinePos(self) -> float """
    return 1.0

  def width(self, str):
    """ width(self, str) -> float """
    return 1.0

  def widthChar(self, str):
    """ widthChar(self, str) -> float """
    return 1.0

  def xHeight(self):
    """ xHeight(self) -> float """
    return 1.0

class QGlyphRun(simplewrapper):
  """ QGlyphRun()
  QGlyphRun(QGlyphRun) """

  class GlyphRunFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class GlyphRunFlags(simplewrapper):
    """ QGlyphRun.GlyphRunFlags()
    QGlyphRun.GlyphRunFlags(Union[QGlyphRun.GlyphRunFlags, QGlyphRun.GlyphRunFlag])
    QGlyphRun.GlyphRunFlags(QGlyphRun.GlyphRunFlags) """

    pass

  Overline = None
  RightToLeft = None
  SplitLigature = None
  StrikeOut = None
  Underline = None

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def flags(self):
    """ flags(self) -> QGlyphRun.GlyphRunFlags """
    return None

  def glyphIndexes(self):
    """ glyphIndexes(self) -> List[int] """
    return 1

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isRightToLeft(self):
    """ isRightToLeft(self) -> bool """
    return None

  def overline(self):
    """ overline(self) -> bool """
    return None

  def positions(self):
    """ positions(self) -> List[QPointF] """
    return 1

  def rawFont(self):
    """ rawFont(self) -> QRawFont """
    return None

  def setBoundingRect(self, QRectF):
    """ setBoundingRect(self, QRectF) """
    pass

  def setFlag():
    """ setFlag(self, QGlyphRun.GlyphRunFlag, enabled: bool = True) """
    pass

  def setFlags(self, UnionQGlyphRun.GlyphRunFlags=None, QGlyphRun.GlyphRunFlag=None):
    """ setFlags(self, Union[QGlyphRun.GlyphRunFlags, QGlyphRun.GlyphRunFlag]) """
    pass

  def setGlyphIndexes(self, Iterableint=None):
    """ setGlyphIndexes(self, Iterable[int]) """
    pass

  def setOverline(self, bool):
    """ setOverline(self, bool) """
    pass

  def setPositions(self, IterableUnionQPointF=None, QPoint=None):
    """ setPositions(self, Iterable[Union[QPointF, QPoint]]) """
    pass

  def setRawFont(self, QRawFont):
    """ setRawFont(self, QRawFont) """
    pass

  def setRightToLeft(self, bool):
    """ setRightToLeft(self, bool) """
    pass

  def setStrikeOut(self, bool):
    """ setStrikeOut(self, bool) """
    pass

  def setUnderline(self, bool):
    """ setUnderline(self, bool) """
    pass

  def strikeOut(self):
    """ strikeOut(self) -> bool """
    return None

  def swap(self, QGlyphRun):
    """ swap(self, QGlyphRun) """
    pass

  def underline(self):
    """ underline(self) -> bool """
    return None

class QGradient(simplewrapper):
  """ QGradient()
  QGradient(QGradient.Preset)
  QGradient(QGradient) """

  AboveTheSky = None
  AfricanField = None
  AlchemistLab = None
  AmourAmour = None
  AmyCrisp = None
  AngelCare = None
  AquaGuidance = None
  AquaSplash = None
  AwesomePine = None
  BigMango = None
  BlackSea = None
  Blessing = None
  BurningSpring = None
  CheerfulCaramel = None
  ChildCare = None
  CleanMirror = None
  CloudyApple = None
  CloudyKnoxville = None
  CochitiLake = None
  ColdEvening = None
  ColorfulPeach = None
  ConfidentCloud = None
  ConicalGradient = None
  CrystalRiver = None
  Crystalline = None
  DeepBlue = None
  DeepRelief = None
  DenseWater = None
  DesertHump = None
  DirtyBeauty = None
  DustyGrass = None
  EternalConstance = None
  EverlastingSky = None
  FabledSunset = None
  FarawayRiver = None
  FebruaryInk = None
  FlyHigh = None
  FlyingLemon = None
  ForestInei = None
  FreshMilk = None
  FreshOasis = None
  FrozenBerry = None
  FrozenDreams = None
  FrozenHeat = None
  FruitBlend = None
  GagarinView = None
  GentleCare = None
  GlassWater = None
  GrassShampoo = None
  GreatWhale = None
  GrownEarly = None
  HappyAcid = None
  HappyFisher = None
  HappyMemories = None
  HappyUnicorn = None
  HealthyWater = None
  HeavenPeach = None
  HeavyRain = None
  HiddenJaguar = None
  HighFlight = None
  ItmeoBranding = None
  JapanBlush = None
  JuicyCake = None
  JuicyPeach = None
  JungleDay = None
  KindSteel = None
  LadogaBottom = None
  LadyLips = None
  LandingAircraft = None
  LeCocktail = None
  LemonGate = None
  LightBlue = None
  LilyMeadow = None
  LinearGradient = None
  LogicalMode = None
  LoveKiss = None
  MagicLake = None
  MagicRay = None
  MalibuBeach = None
  MarbleWall = None
  MarsParty = None
  MeanFruit = None
  MidnightBloom = None
  MillenniumPine = None
  MindCrawl = None
  MixedHopes = None
  MoleHall = None
  MorningSalad = None
  MorpheusDen = None
  MountainRock = None
  NearMoon = None
  Nega = None
  NewLife = None
  NewRetrowave = None
  NewYork = None
  NightCall = None
  NightFade = None
  NightParty = None
  NightSky = None
  NoGradient = None
  NorseBeauty = None
  NorthMiracle = None
  ObjectBoundingMode = None
  ObjectMode = None
  OctoberSilence = None
  OldHat = None
  OrangeJuice = None
  OverSun = None
  PadSpread = None
  PaloAlto = None
  PartyBliss = None
  PassionateBed = None
  PerfectBlue = None
  PerfectWhite = None
  PhoenixStart = None
  PlumBath = None
  PlumPlate = None
  PoliteRumors = None
  PremiumDark = None
  PremiumWhite = None
  PurpleDivision = None
  RadialGradient = None
  RainyAshville = None
  RareWind = None
  RedSalvation = None
  ReflectSpread = None
  RepeatSpread = None
  RichMetal = None
  RipeMalinka = None
  RiskyConcrete = None
  RiverCity = None
  RoyalGarden = None
  SaintPetersburg = None
  SaltMountain = None
  SandStrike = None
  SeaLord = None
  SeaStrike = None
  Seashore = None
  ShadyWater = None
  SharpBlues = None
  SharpeyeEagle = None
  ShyRainbow = None
  SkyGlider = None
  SleeplessNight = None
  SmartIndigo = None
  SmilingRain = None
  SnowAgain = None
  SoftCherish = None
  SoftGrass = None
  SoftLipstick = None
  SolidStone = None
  SpaceShift = None
  SpikyNaga = None
  SpringWarmth = None
  StarWine = None
  StretchToDeviceMode = None
  StrictNovember = None
  StrongBliss = None
  StrongStick = None
  SugarLollipop = None
  SummerGames = None
  SunVeggie = None
  SunnyMorning = None
  SupremeSky = None
  SweetDessert = None
  SweetPeriod = None
  TeenNotebook = None
  TeenParty = None
  TemptingAzure = None
  TrueSunset = None
  ViciousStance = None
  WarmFlame = None
  WideMatrix = None
  WildApple = None
  WinterNeva = None
  WitchDance = None
  YoungGrass = None
  YoungPassion = None
  ZeusMiracle = None

  def coordinateMode(self):
    """ coordinateMode(self) -> QGradient.CoordinateMode """
    return None

  def setColorAt(self, float, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColorAt(self, float, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCoordinateMode(self, arg0):
    """ setCoordinateMode(self, QGradient.CoordinateMode) """
    pass

  def setSpread(self, arg0):
    """ setSpread(self, QGradient.Spread) """
    pass

  def setStops(self, IterableTuplefloat=None, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setStops(self, Iterable[Tuple[float, Union[QColor, Qt.GlobalColor, QGradient]]]) """
    pass

  def spread(self):
    """ spread(self) -> QGradient.Spread """
    return None

  def stops(self):
    """ stops(self) -> List[Tuple[float, QColor]] """
    return 1.0

  def type(self):
    """ type(self) -> QGradient.Type """
    return None

class QGuiApplication(QCoreApplication):
  """ QGuiApplication(List[str]) """

  def aboutToQuit(self):
    """ aboutToQuit(self) [signal] """
    pass

  def addLibraryPath(str):
    """ addLibraryPath(str) """
    pass

  def allWindows():
    """ allWindows() -> List[QWindow] """
    return None

  def applicationDirPath():
    """ applicationDirPath() -> str """
    return ""

  def applicationDisplayName():
    """ applicationDisplayName() -> str """
    return ""

  def applicationDisplayNameChanged(self):
    """ applicationDisplayNameChanged(self) [signal] """
    pass

  def applicationFilePath():
    """ applicationFilePath() -> str """
    return ""

  def applicationName():
    """ applicationName() -> str """
    return ""

  def applicationPid():
    """ applicationPid() -> int """
    return 1

  def applicationState():
    """ applicationState() -> Qt.ApplicationState """
    return None

  def applicationStateChanged(self, arg0):
    """ applicationStateChanged(self, Qt.ApplicationState) [signal] """
    pass

  def applicationVersion():
    """ applicationVersion() -> str """
    return ""

  def arguments():
    """ arguments() -> List[str] """
    return ""

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changeOverrideCursor(UnionQCursor=None, Qt.CursorShape=None):
    """ changeOverrideCursor(Union[QCursor, Qt.CursorShape]) """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clipboard():
    """ clipboard() -> QClipboard """
    return None

  def closingDown():
    """ closingDown() -> bool """
    return None

  def commitDataRequest(self, QSessionManager):
    """ commitDataRequest(self, QSessionManager) [signal] """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def desktopFileName():
    """ desktopFileName() -> str """
    return ""

  def desktopSettingsAware():
    """ desktopSettingsAware() -> bool """
    return None

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventDispatcher():
    """ eventDispatcher() -> QAbstractEventDispatcher """
    return ""

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exec():
    """ exec() -> int """
    return 1

  def exec_():
    """ exec_() -> int """
    return 1

  def exit():
    """ exit(returnCode: int = 0) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush():
    """ flush() """
    pass

  def focusObject():
    """ focusObject() -> QObject """
    return None

  def focusObjectChanged(self, QObject):
    """ focusObjectChanged(self, QObject) [signal] """
    pass

  def focusWindow():
    """ focusWindow() -> QWindow """
    return None

  def focusWindowChanged(self, QWindow):
    """ focusWindowChanged(self, QWindow) [signal] """
    pass

  def font():
    """ font() -> QFont """
    return None

  def fontChanged(self, QFont):
    """ fontChanged(self, QFont) [signal] """
    pass

  def fontDatabaseChanged(self):
    """ fontDatabaseChanged(self) [signal] """
    pass

  def hasPendingEvents():
    """ hasPendingEvents() -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def inputMethod():
    """ inputMethod() -> QInputMethod """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def installNativeEventFilter(self, QAbstractNativeEventFilter):
    """ installNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def installTranslator(QTranslator):
    """ installTranslator(QTranslator) -> bool """
    return None

  def instance():
    """ instance() -> QCoreApplication """
    return None

  def isFallbackSessionManagementEnabled():
    """ isFallbackSessionManagementEnabled() -> bool """
    return None

  def isLeftToRight():
    """ isLeftToRight() -> bool """
    return None

  def isQuitLockEnabled():
    """ isQuitLockEnabled() -> bool """
    return None

  def isRightToLeft():
    """ isRightToLeft() -> bool """
    return None

  def isSavingSession(self):
    """ isSavingSession(self) -> bool """
    return None

  def isSessionRestored(self):
    """ isSessionRestored(self) -> bool """
    return None

  def isSetuidAllowed():
    """ isSetuidAllowed() -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyboardModifiers():
    """ keyboardModifiers() -> Qt.KeyboardModifiers """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastWindowClosed(self):
    """ lastWindowClosed(self) [signal] """
    pass

  def layoutDirection():
    """ layoutDirection() -> Qt.LayoutDirection """
    return None

  def layoutDirectionChanged(self, arg0):
    """ layoutDirectionChanged(self, Qt.LayoutDirection) [signal] """
    pass

  def libraryPaths():
    """ libraryPaths() -> List[str] """
    return ""

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def modalWindow():
    """ modalWindow() -> QWindow """
    return None

  def mouseButtons():
    """ mouseButtons() -> Qt.MouseButtons """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def notify(self, QObject, QEvent):
    """ notify(self, QObject, QEvent) -> bool """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def organizationDomain():
    """ organizationDomain() -> str """
    return ""

  def organizationName():
    """ organizationName() -> str """
    return ""

  def overrideCursor():
    """ overrideCursor() -> QCursor """
    return None

  def palette():
    """ palette() -> QPalette """
    return None

  def paletteChanged(self, QPalette):
    """ paletteChanged(self, QPalette) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def platformName():
    """ platformName() -> str """
    return ""

  def postEvent():
    """ postEvent(QObject, QEvent, priority: int = Qt.NormalEventPriority) """
    pass

  def primaryScreen():
    """ primaryScreen() -> QScreen """
    return None

  def primaryScreenChanged(self, QScreen):
    """ primaryScreenChanged(self, QScreen) [signal] """
    pass

  def processEvents(UnionQEventLoop.ProcessEventsFlags=None, QEventLoop.ProcessEventsFlag=None, int=None):
    """ processEvents(flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents)
    processEvents(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def queryKeyboardModifiers():
    """ queryKeyboardModifiers() -> Qt.KeyboardModifiers """
    return None

  def quit():
    """ quit() """
    pass

  def quitOnLastWindowClosed():
    """ quitOnLastWindowClosed() -> bool """
    return None

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeLibraryPath(str):
    """ removeLibraryPath(str) """
    pass

  def removeNativeEventFilter(self, QAbstractNativeEventFilter):
    """ removeNativeEventFilter(self, QAbstractNativeEventFilter) """
    pass

  def removePostedEvents():
    """ removePostedEvents(QObject, eventType: int = 0) """
    pass

  def removeTranslator(QTranslator):
    """ removeTranslator(QTranslator) -> bool """
    return None

  def restoreOverrideCursor():
    """ restoreOverrideCursor() """
    pass

  def saveStateRequest(self, QSessionManager):
    """ saveStateRequest(self, QSessionManager) [signal] """
    pass

  def screenAdded(self, QScreen):
    """ screenAdded(self, QScreen) [signal] """
    pass

  def screenAt(QPoint):
    """ screenAt(QPoint) -> QScreen """
    return None

  def screenRemoved(self, QScreen):
    """ screenRemoved(self, QScreen) [signal] """
    pass

  def screens():
    """ screens() -> List[QScreen] """
    return None

  def sendEvent(QObject, QEvent):
    """ sendEvent(QObject, QEvent) -> bool """
    return None

  def sendPostedEvents():
    """ sendPostedEvents(receiver: QObject = None, eventType: int = 0) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def sessionId(self):
    """ sessionId(self) -> str """
    return ""

  def sessionKey(self):
    """ sessionKey(self) -> str """
    return ""

  def setApplicationDisplayName(str):
    """ setApplicationDisplayName(str) """
    pass

  def setApplicationName(str):
    """ setApplicationName(str) """
    pass

  def setApplicationVersion(str):
    """ setApplicationVersion(str) """
    pass

  def setAttribute():
    """ setAttribute(Qt.ApplicationAttribute, on: bool = True) """
    pass

  def setDesktopFileName(str):
    """ setDesktopFileName(str) """
    pass

  def setDesktopSettingsAware(bool):
    """ setDesktopSettingsAware(bool) """
    pass

  def setEventDispatcher(QAbstractEventDispatcher):
    """ setEventDispatcher(QAbstractEventDispatcher) """
    pass

  def setFallbackSessionManagementEnabled(bool):
    """ setFallbackSessionManagementEnabled(bool) """
    pass

  def setFont(QFont):
    """ setFont(QFont) """
    pass

  def setLayoutDirection(arg0):
    """ setLayoutDirection(Qt.LayoutDirection) """
    pass

  def setLibraryPaths(Iterablestr=None):
    """ setLibraryPaths(Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrganizationDomain(str):
    """ setOrganizationDomain(str) """
    pass

  def setOrganizationName(str):
    """ setOrganizationName(str) """
    pass

  def setOverrideCursor(UnionQCursor=None, Qt.CursorShape=None):
    """ setOverrideCursor(Union[QCursor, Qt.CursorShape]) """
    pass

  def setPalette(QPalette):
    """ setPalette(QPalette) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setQuitLockEnabled(bool):
    """ setQuitLockEnabled(bool) """
    pass

  def setQuitOnLastWindowClosed(bool):
    """ setQuitOnLastWindowClosed(bool) """
    pass

  def setSetuidAllowed(bool):
    """ setSetuidAllowed(bool) """
    pass

  def setWindowIcon(QIcon):
    """ setWindowIcon(QIcon) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startingUp():
    """ startingUp() -> bool """
    return None

  staticMetaObject = None

  def styleHints():
    """ styleHints() -> QStyleHints """
    return 1

  def sync():
    """ sync() """
    pass

  def testAttribute(arg0):
    """ testAttribute(Qt.ApplicationAttribute) -> bool """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def topLevelAt(QPoint):
    """ topLevelAt(QPoint) -> QWindow """
    return None

  def topLevelWindows():
    """ topLevelWindows() -> List[QWindow] """
    return None

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def translate(str, str, arg0=None, arg1=None):
    """ translate(str, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def windowIcon():
    """ windowIcon() -> QIcon """
    return None

class QHelpEvent(QEvent):
  """ QHelpEvent(QEvent.Type, QPoint, QPoint)
  QHelpEvent(QHelpEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def globalPos(self):
    """ globalPos(self) -> QPoint """
    return 1

  def globalX(self):
    """ globalX(self) -> int """
    return 1

  def globalY(self):
    """ globalY(self) -> int """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QHideEvent(QEvent):
  """ QHideEvent()
  QHideEvent(QHideEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QHoverEvent(QInputEvent):
  """ QHoverEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], modifiers: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier)
  QHoverEvent(QHoverEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def oldPos(self):
    """ oldPos(self) -> QPoint """
    return 1

  def oldPosF(self):
    """ oldPosF(self) -> QPointF """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def posF(self):
    """ posF(self) -> QPointF """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QIcon(wrapper):
  """ QIcon()
  QIcon(QPixmap)
  QIcon(QIcon)
  QIcon(str)
  QIcon(QIconEngine)
  QIcon(Any) """

  Active = None
  Disabled = None

  class Mode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Normal = None
  Off = None
  On = None
  Selected = None

  class State(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def actualSize(self, QSize, arg0=None, arg1=None):
    """ actualSize(self, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QSize
    actualSize(self, QWindow, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QSize """
    return None

  def addFile():
    """ addFile(self, str, size: QSize = QSize(), mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) """
    pass

  def addPixmap():
    """ addPixmap(self, QPixmap, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) """
    pass

  def availableSizes(self, arg0=None, arg1=None):
    """ availableSizes(self, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> List[QSize] """
    return None

  def cacheKey(self):
    """ cacheKey(self) -> int """
    return 1

  def fallbackSearchPaths():
    """ fallbackSearchPaths() -> List[str] """
    return ""

  def fallbackThemeName():
    """ fallbackThemeName() -> str """
    return ""

  def fromTheme(str):
    """ fromTheme(str) -> QIcon
    fromTheme(str, QIcon) -> QIcon """
    return None

  def hasThemeIcon(str):
    """ hasThemeIcon(str) -> bool """
    return None

  def isDetached(self):
    """ isDetached(self) -> bool """
    return None

  def isMask(self):
    """ isMask(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def paint():
    """ paint(self, QPainter, QRect, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.AlignCenter, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off)
    paint(self, QPainter, int, int, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.AlignCenter, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) """
    pass

  def pixmap(self, QSize, arg0=None, arg1=None):
    """ pixmap(self, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap
    pixmap(self, int, int, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap
    pixmap(self, int, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap
    pixmap(self, QWindow, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap """
    return None

  def setFallbackSearchPaths(Iterablestr=None):
    """ setFallbackSearchPaths(Iterable[str]) """
    pass

  def setFallbackThemeName(str):
    """ setFallbackThemeName(str) """
    pass

  def setIsMask(self, bool):
    """ setIsMask(self, bool) """
    pass

  def setThemeName(str):
    """ setThemeName(str) """
    pass

  def setThemeSearchPaths(Iterablestr=None):
    """ setThemeSearchPaths(Iterable[str]) """
    pass

  def swap(self, QIcon):
    """ swap(self, QIcon) """
    pass

  def themeName():
    """ themeName() -> str """
    return ""

  def themeSearchPaths():
    """ themeSearchPaths() -> List[str] """
    return ""

class QIconDragEvent(QEvent):
  """ QIconDragEvent()
  QIconDragEvent(QIconDragEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QIconEngine(wrapper):
  """ QIconEngine()
  QIconEngine(QIconEngine) """

  class AvailableSizesArgument(simplewrapper):
    """ QIconEngine.AvailableSizesArgument()
    QIconEngine.AvailableSizesArgument(QIconEngine.AvailableSizesArgument) """

    mode = None
    sizes = None
    state = None

  AvailableSizesHook = None

  class IconEngineHook(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  IconNameHook = None
  IsNullHook = None

  class ScaledPixmapArgument(simplewrapper):
    """ QIconEngine.ScaledPixmapArgument()
    QIconEngine.ScaledPixmapArgument(QIconEngine.ScaledPixmapArgument) """

    mode = None
    pixmap = None
    scale = None
    size = None
    state = None

  ScaledPixmapHook = None

  def actualSize(self, QSize, arg0, arg1):
    """ actualSize(self, QSize, QIcon.Mode, QIcon.State) -> QSize """
    return None

  def addFile(self, str, QSize, arg0, arg1):
    """ addFile(self, str, QSize, QIcon.Mode, QIcon.State) """
    pass

  def addPixmap(self, QPixmap, arg0, arg1):
    """ addPixmap(self, QPixmap, QIcon.Mode, QIcon.State) """
    pass

  def availableSizes(self, arg0=None, arg1=None):
    """ availableSizes(self, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> List[QSize] """
    return None

  def clone(self):
    """ clone(self) -> QIconEngine """
    return None

  def iconName(self):
    """ iconName(self) -> str """
    return ""

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def key(self):
    """ key(self) -> str """
    return ""

  def paint(self, QPainter, QRect, arg0, arg1):
    """ paint(self, QPainter, QRect, QIcon.Mode, QIcon.State) """
    pass

  def pixmap(self, QSize, arg0, arg1):
    """ pixmap(self, QSize, QIcon.Mode, QIcon.State) -> QPixmap """
    return None

  def read(self, QDataStream):
    """ read(self, QDataStream) -> bool """
    return None

  def scaledPixmap(self, QSize, arg0, arg1, float):
    """ scaledPixmap(self, QSize, QIcon.Mode, QIcon.State, float) -> QPixmap """
    return None

  def write(self, QDataStream):
    """ write(self, QDataStream) -> bool """
    return None

class QImage(QPaintDevice):
  """ QImage()
  QImage(QSize, QImage.Format)
  QImage(int, int, QImage.Format)
  QImage(bytes, int, int, QImage.Format)
  QImage(sip.voidptr, int, int, QImage.Format)
  QImage(bytes, int, int, int, QImage.Format)
  QImage(sip.voidptr, int, int, int, QImage.Format)
  QImage(List[str])
  QImage(str, format: str = None)
  QImage(QImage)
  QImage(Any) """

  class Format(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Format_A2BGR30_Premultiplied = None
  Format_A2RGB30_Premultiplied = None
  Format_ARGB32 = None
  Format_ARGB32_Premultiplied = None
  Format_ARGB4444_Premultiplied = None
  Format_ARGB6666_Premultiplied = None
  Format_ARGB8555_Premultiplied = None
  Format_ARGB8565_Premultiplied = None
  Format_Alpha8 = None
  Format_BGR30 = None
  Format_Grayscale16 = None
  Format_Grayscale8 = None
  Format_Indexed8 = None
  Format_Invalid = None
  Format_Mono = None
  Format_MonoLSB = None
  Format_RGB16 = None
  Format_RGB30 = None
  Format_RGB32 = None
  Format_RGB444 = None
  Format_RGB555 = None
  Format_RGB666 = None
  Format_RGB888 = None
  Format_RGBA64 = None
  Format_RGBA64_Premultiplied = None
  Format_RGBA8888 = None
  Format_RGBA8888_Premultiplied = None
  Format_RGBX64 = None
  Format_RGBX8888 = None

  class InvertMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  InvertRgb = None
  InvertRgba = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  def allGray(self):
    """ allGray(self) -> bool """
    return None

  def bitPlaneCount(self):
    """ bitPlaneCount(self) -> int """
    return 1

  def bits(self):
    """ bits(self) -> sip.voidptr """
    return None

  def byteCount(self):
    """ byteCount(self) -> int """
    return 1

  def bytesPerLine(self):
    """ bytesPerLine(self) -> int """
    return 1

  def cacheKey(self):
    """ cacheKey(self) -> int """
    return 1

  def color(self, int):
    """ color(self, int) -> int """
    return 1

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def colorTable(self):
    """ colorTable(self) -> List[int] """
    return 1

  def constBits(self):
    """ constBits(self) -> sip.voidptr """
    return None

  def constScanLine(self, int):
    """ constScanLine(self, int) -> sip.voidptr """
    return None

  def convertTo():
    """ convertTo(self, QImage.Format, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor) """
    pass

  def convertToFormat(self, arg0, arg1=None, arg2=None):
    """ convertToFormat(self, QImage.Format, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor) -> QImage
    convertToFormat(self, QImage.Format, Iterable[int], flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor) -> QImage """
    return None

  def copy(self, arg0=None):
    """ copy(self, rect: QRect = QRect()) -> QImage
    copy(self, int, int, int, int) -> QImage """
    return None

  def createAlphaMask(self, arg0=None, arg1=None):
    """ createAlphaMask(self, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor) -> QImage """
    return None

  def createHeuristicMask(self, arg0=None):
    """ createHeuristicMask(self, clipTight: bool = True) -> QImage """
    return None

  def createMaskFromColor(self, int, arg0=None):
    """ createMaskFromColor(self, int, mode: Qt.MaskMode = Qt.MaskInColor) -> QImage """
    return None

  def depth(self):
    """ depth(self) -> int """
    return 1

  def detach(self):
    """ detach(self) """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dotsPerMeterX(self):
    """ dotsPerMeterX(self) -> int """
    return 1

  def dotsPerMeterY(self):
    """ dotsPerMeterY(self) -> int """
    return 1

  def fill(self, arg0):
    """ fill(self, Qt.GlobalColor)
    fill(self, Union[QColor, Qt.GlobalColor, QGradient])
    fill(self, int) """
    pass

  def format(self):
    """ format(self) -> QImage.Format """
    return None

  def fromData(bytes, arg0=None):
    """ fromData(bytes, format: str = None) -> QImage
    fromData(Union[QByteArray, bytes, bytearray], format: str = None) -> QImage """
    return None

  def hasAlphaChannel(self):
    """ hasAlphaChannel(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def invertPixels():
    """ invertPixels(self, mode: QImage.InvertMode = QImage.InvertRgb) """
    pass

  def isDetached(self):
    """ isDetached(self) -> bool """
    return None

  def isGrayscale(self):
    """ isGrayscale(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def load(self, QIODevice, str):
    """ load(self, QIODevice, str) -> bool
    load(self, str, format: str = None) -> bool """
    return None

  def loadFromData(self, bytes, arg0=None):
    """ loadFromData(self, bytes, format: str = None) -> bool
    loadFromData(self, Union[QByteArray, bytes, bytearray], format: str = None) -> bool """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def mirrored(self, arg0=None, arg1=None):
    """ mirrored(self, horizontal: bool = False, vertical: bool = True) -> QImage """
    return None

  def offset(self):
    """ offset(self) -> QPoint """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def pixel(self, QPoint):
    """ pixel(self, QPoint) -> int
    pixel(self, int, int) -> int """
    return 1

  def pixelColor(self, int, int):
    """ pixelColor(self, int, int) -> QColor
    pixelColor(self, QPoint) -> QColor """
    return None

  def pixelFormat(self):
    """ pixelFormat(self) -> QPixelFormat """
    return None

  def pixelIndex(self, QPoint):
    """ pixelIndex(self, QPoint) -> int
    pixelIndex(self, int, int) -> int """
    return 1

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def reinterpretAsFormat(self, arg0):
    """ reinterpretAsFormat(self, QImage.Format) -> bool """
    return None

  def rgbSwapped(self):
    """ rgbSwapped(self) -> QImage """
    return None

  def save(self, str, arg0=None, arg1=None):
    """ save(self, str, format: str = None, quality: int = -1) -> bool
    save(self, QIODevice, format: str = None, quality: int = -1) -> bool """
    return None

  def scaled(self, int, int, arg0=None, arg1=None):
    """ scaled(self, int, int, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QImage
    scaled(self, QSize, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QImage """
    return None

  def scaledToHeight(self, int, arg0=None):
    """ scaledToHeight(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage """
    return None

  def scaledToWidth(self, int, arg0=None):
    """ scaledToWidth(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage """
    return None

  def scanLine(self, int):
    """ scanLine(self, int) -> sip.voidptr """
    return None

  def setColor(self, int, int):
    """ setColor(self, int, int) """
    pass

  def setColorCount(self, int):
    """ setColorCount(self, int) """
    pass

  def setColorTable(self, Iterableint=None):
    """ setColorTable(self, Iterable[int]) """
    pass

  def setDevicePixelRatio(self, float):
    """ setDevicePixelRatio(self, float) """
    pass

  def setDotsPerMeterX(self, int):
    """ setDotsPerMeterX(self, int) """
    pass

  def setDotsPerMeterY(self, int):
    """ setDotsPerMeterY(self, int) """
    pass

  def setOffset(self, QPoint):
    """ setOffset(self, QPoint) """
    pass

  def setPixel(self, QPoint, int):
    """ setPixel(self, QPoint, int)
    setPixel(self, int, int, int) """
    pass

  def setPixelColor(self, int, int, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPixelColor(self, int, int, Union[QColor, Qt.GlobalColor, QGradient])
    setPixelColor(self, QPoint, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setText(self, str, str):
    """ setText(self, str, str) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeInBytes(self):
    """ sizeInBytes(self) -> int """
    return 1

  def smoothScaled(self, int, int):
    """ smoothScaled(self, int, int) -> QImage """
    return None

  def swap(self, QImage):
    """ swap(self, QImage) """
    pass

  def text(self, arg0=None):
    """ text(self, key: str = '') -> str """
    return ""

  def textKeys(self):
    """ textKeys(self) -> List[str] """
    return ""

  def toImageFormat(QPixelFormat):
    """ toImageFormat(QPixelFormat) -> QImage.Format """
    return None

  def toPixelFormat(arg0):
    """ toPixelFormat(QImage.Format) -> QPixelFormat """
    return None

  def transformed(self, QTransform, arg0=None):
    """ transformed(self, QTransform, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage """
    return None

  def trueMatrix(QTransform, int, int):
    """ trueMatrix(QTransform, int, int) -> QTransform """
    return None

  def valid(self, QPoint):
    """ valid(self, QPoint) -> bool
    valid(self, int, int) -> bool """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QImageIOHandler(simplewrapper):
  """ QImageIOHandler() """

  Animation = None
  BackgroundColor = None
  ClipRect = None
  CompressionRatio = None
  Description = None
  Endianness = None
  Gamma = None

  class ImageOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ImageTransformation = None
  IncrementalReading = None
  Name = None
  OptimizedWrite = None
  ProgressiveScanWrite = None
  Quality = None
  ScaledClipRect = None
  ScaledSize = None
  Size = None
  SubType = None
  SupportedSubTypes = None

  class Transformation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TransformationFlip = None
  TransformationFlipAndRotate90 = None
  TransformationMirror = None
  TransformationMirrorAndRotate90 = None
  TransformationNone = None
  TransformationRotate180 = None
  TransformationRotate270 = None
  TransformationRotate90 = None

  class Transformations(simplewrapper):
    """ QImageIOHandler.Transformations()
    QImageIOHandler.Transformations(Union[QImageIOHandler.Transformations, QImageIOHandler.Transformation])
    QImageIOHandler.Transformations(QImageIOHandler.Transformations) """

    pass

  TransformedByDefault = None

  def canRead(self):
    """ canRead(self) -> bool """
    return None

  def currentImageNumber(self):
    """ currentImageNumber(self) -> int """
    return 1

  def currentImageRect(self):
    """ currentImageRect(self) -> QRect """
    return None

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def format(self):
    """ format(self) -> QByteArray """
    return None

  def imageCount(self):
    """ imageCount(self) -> int """
    return 1

  def jumpToImage(self, int):
    """ jumpToImage(self, int) -> bool """
    return None

  def jumpToNextImage(self):
    """ jumpToNextImage(self) -> bool """
    return None

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def nextImageDelay(self):
    """ nextImageDelay(self) -> int """
    return 1

  def option(self, arg0):
    """ option(self, QImageIOHandler.ImageOption) -> Any """
    return None

  def read(self, QImage):
    """ read(self, QImage) -> bool """
    return None

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setFormat(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setFormat(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setOption(self, arg0, Any):
    """ setOption(self, QImageIOHandler.ImageOption, Any) """
    pass

  def supportsOption(self, arg0):
    """ supportsOption(self, QImageIOHandler.ImageOption) -> bool """
    return None

  def write(self, QImage):
    """ write(self, QImage) -> bool """
    return None

class QImageReader(simplewrapper):
  """ QImageReader()
  QImageReader(QIODevice, format: Union[QByteArray, bytes, bytearray] = QByteArray())
  QImageReader(str, format: Union[QByteArray, bytes, bytearray] = QByteArray()) """

  DeviceError = None
  FileNotFoundError = None

  class ImageReaderError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  InvalidDataError = None
  UnknownError = None
  UnsupportedFormatError = None

  def autoDetectImageFormat(self):
    """ autoDetectImageFormat(self) -> bool """
    return None

  def autoTransform(self):
    """ autoTransform(self) -> bool """
    return None

  def backgroundColor(self):
    """ backgroundColor(self) -> QColor """
    return None

  def canRead(self):
    """ canRead(self) -> bool """
    return None

  def clipRect(self):
    """ clipRect(self) -> QRect """
    return None

  def currentImageNumber(self):
    """ currentImageNumber(self) -> int """
    return 1

  def currentImageRect(self):
    """ currentImageRect(self) -> QRect """
    return None

  def decideFormatFromContent(self):
    """ decideFormatFromContent(self) -> bool """
    return None

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def error(self):
    """ error(self) -> QImageReader.ImageReaderError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def format(self):
    """ format(self) -> QByteArray """
    return None

  def gamma(self):
    """ gamma(self) -> float """
    return 1.0

  def imageCount(self):
    """ imageCount(self) -> int """
    return 1

  def imageFormat(str):
    """ imageFormat(str) -> QByteArray
    imageFormat(QIODevice) -> QByteArray
    imageFormat(self) -> QImage.Format """
    return None

  def imageFormatsForMimeType(UnionQByteArray=None, bytes=None, bytearray=None):
    """ imageFormatsForMimeType(Union[QByteArray, bytes, bytearray]) -> List[QByteArray] """
    return None

  def jumpToImage(self, int):
    """ jumpToImage(self, int) -> bool """
    return None

  def jumpToNextImage(self):
    """ jumpToNextImage(self) -> bool """
    return None

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def nextImageDelay(self):
    """ nextImageDelay(self) -> int """
    return 1

  def quality(self):
    """ quality(self) -> int """
    return 1

  def read(self):
    """ read(self) -> QImage
    read(self, QImage) -> bool """
    return None

  def scaledClipRect(self):
    """ scaledClipRect(self) -> QRect """
    return None

  def scaledSize(self):
    """ scaledSize(self) -> QSize """
    return None

  def setAutoDetectImageFormat(self, bool):
    """ setAutoDetectImageFormat(self, bool) """
    pass

  def setAutoTransform(self, bool):
    """ setAutoTransform(self, bool) """
    pass

  def setBackgroundColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setClipRect(self, QRect):
    """ setClipRect(self, QRect) """
    pass

  def setDecideFormatFromContent(self, bool):
    """ setDecideFormatFromContent(self, bool) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFormat(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setFormat(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setGamma(self, float):
    """ setGamma(self, float) """
    pass

  def setQuality(self, int):
    """ setQuality(self, int) """
    pass

  def setScaledClipRect(self, QRect):
    """ setScaledClipRect(self, QRect) """
    pass

  def setScaledSize(self, QSize):
    """ setScaledSize(self, QSize) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def subType(self):
    """ subType(self) -> QByteArray """
    return None

  def supportedImageFormats():
    """ supportedImageFormats() -> List[QByteArray] """
    return None

  def supportedMimeTypes():
    """ supportedMimeTypes() -> List[QByteArray] """
    return None

  def supportedSubTypes(self):
    """ supportedSubTypes(self) -> List[QByteArray] """
    return None

  def supportsAnimation(self):
    """ supportsAnimation(self) -> bool """
    return None

  def supportsOption(self, arg0):
    """ supportsOption(self, QImageIOHandler.ImageOption) -> bool """
    return None

  def text(self, str):
    """ text(self, str) -> str """
    return ""

  def textKeys(self):
    """ textKeys(self) -> List[str] """
    return ""

  def transformation(self):
    """ transformation(self) -> QImageIOHandler.Transformations """
    return None

class QImageWriter(simplewrapper):
  """ QImageWriter()
  QImageWriter(QIODevice, Union[QByteArray, bytes, bytearray])
  QImageWriter(str, format: Union[QByteArray, bytes, bytearray] = QByteArray()) """

  DeviceError = None

  class ImageWriterError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  InvalidImageError = None
  UnknownError = None
  UnsupportedFormatError = None

  def canWrite(self):
    """ canWrite(self) -> bool """
    return None

  def compression(self):
    """ compression(self) -> int """
    return 1

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def error(self):
    """ error(self) -> QImageWriter.ImageWriterError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def format(self):
    """ format(self) -> QByteArray """
    return None

  def gamma(self):
    """ gamma(self) -> float """
    return 1.0

  def imageFormatsForMimeType(UnionQByteArray=None, bytes=None, bytearray=None):
    """ imageFormatsForMimeType(Union[QByteArray, bytes, bytearray]) -> List[QByteArray] """
    return None

  def optimizedWrite(self):
    """ optimizedWrite(self) -> bool """
    return None

  def progressiveScanWrite(self):
    """ progressiveScanWrite(self) -> bool """
    return None

  def quality(self):
    """ quality(self) -> int """
    return 1

  def setCompression(self, int):
    """ setCompression(self, int) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFormat(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setFormat(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setGamma(self, float):
    """ setGamma(self, float) """
    pass

  def setOptimizedWrite(self, bool):
    """ setOptimizedWrite(self, bool) """
    pass

  def setProgressiveScanWrite(self, bool):
    """ setProgressiveScanWrite(self, bool) """
    pass

  def setQuality(self, int):
    """ setQuality(self, int) """
    pass

  def setSubType(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setSubType(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setText(self, str, str):
    """ setText(self, str, str) """
    pass

  def setTransformation(self, UnionQImageIOHandler.Transformations=None, QImageIOHandler.Transformation=None):
    """ setTransformation(self, Union[QImageIOHandler.Transformations, QImageIOHandler.Transformation]) """
    pass

  def subType(self):
    """ subType(self) -> QByteArray """
    return None

  def supportedImageFormats():
    """ supportedImageFormats() -> List[QByteArray] """
    return None

  def supportedMimeTypes():
    """ supportedMimeTypes() -> List[QByteArray] """
    return None

  def supportedSubTypes(self):
    """ supportedSubTypes(self) -> List[QByteArray] """
    return None

  def supportsOption(self, arg0):
    """ supportsOption(self, QImageIOHandler.ImageOption) -> bool """
    return None

  def transformation(self):
    """ transformation(self) -> QImageIOHandler.Transformations """
    return None

  def write(self, QImage):
    """ write(self, QImage) -> bool """
    return None

class QInputEvent(QEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QInputMethod(QObject):

  class Action(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Click = None
  ContextMenu = None

  def anchorRectangle(self):
    """ anchorRectangle(self) -> QRectF """
    return None

  def anchorRectangleChanged(self):
    """ anchorRectangleChanged(self) [signal] """
    pass

  def animatingChanged(self):
    """ animatingChanged(self) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def commit(self):
    """ commit(self) """
    pass

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def cursorRectangle(self):
    """ cursorRectangle(self) -> QRectF """
    return None

  def cursorRectangleChanged(self):
    """ cursorRectangleChanged(self) [signal] """
    pass

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hide(self):
    """ hide(self) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def inputDirection(self):
    """ inputDirection(self) -> Qt.LayoutDirection """
    return None

  def inputDirectionChanged(self, arg0):
    """ inputDirectionChanged(self, Qt.LayoutDirection) [signal] """
    pass

  def inputItemClipRectangle(self):
    """ inputItemClipRectangle(self) -> QRectF """
    return None

  def inputItemClipRectangleChanged(self):
    """ inputItemClipRectangleChanged(self) [signal] """
    pass

  def inputItemRectangle(self):
    """ inputItemRectangle(self) -> QRectF """
    return None

  def inputItemTransform(self):
    """ inputItemTransform(self) -> QTransform """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invokeAction(self, arg0, int):
    """ invokeAction(self, QInputMethod.Action, int) """
    pass

  def isAnimating(self):
    """ isAnimating(self) -> bool """
    return None

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyboardRectangle(self):
    """ keyboardRectangle(self) -> QRectF """
    return None

  def keyboardRectangleChanged(self):
    """ keyboardRectangleChanged(self) [signal] """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def localeChanged(self):
    """ localeChanged(self) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def queryFocusObject(arg0, Any):
    """ queryFocusObject(Qt.InputMethodQuery, Any) -> Any """
    return None

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setInputItemRectangle(self, QRectF):
    """ setInputItemRectangle(self, QRectF) """
    pass

  def setInputItemTransform(self, QTransform):
    """ setInputItemTransform(self, QTransform) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def show(self):
    """ show(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def update(self, UnionQt.InputMethodQueries=None, Qt.InputMethodQuery=None):
    """ update(self, Union[Qt.InputMethodQueries, Qt.InputMethodQuery]) """
    pass

  def visibleChanged(self):
    """ visibleChanged(self) [signal] """
    pass

class QInputMethodEvent(QEvent):
  """ QInputMethodEvent()
  QInputMethodEvent(str, Iterable[QInputMethodEvent.Attribute])
  QInputMethodEvent(QInputMethodEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None

  class Attribute(simplewrapper):
    """ QInputMethodEvent.Attribute(QInputMethodEvent.AttributeType, int, int, Any)
    QInputMethodEvent.Attribute(QInputMethodEvent.AttributeType, int, int)
    QInputMethodEvent.Attribute(QInputMethodEvent.Attribute) """

    length = None
    start = None
    type = None
    value = None

  class AttributeType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  Cursor = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  Language = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Ruby = None
  Scroll = None
  ScrollPrepare = None
  Selection = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  TextFormat = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def attributes(self):
    """ attributes(self) -> List[QInputMethodEvent.Attribute] """
    return None

  def commitString(self):
    """ commitString(self) -> str """
    return ""

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def preeditString(self):
    """ preeditString(self) -> str """
    return ""

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def replacementLength(self):
    """ replacementLength(self) -> int """
    return 1

  def replacementStart(self):
    """ replacementStart(self) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setCommitString():
    """ setCommitString(self, str, from_: int = 0, length: int = 0) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QInputMethodQueryEvent(QEvent):
  """ QInputMethodQueryEvent(Union[Qt.InputMethodQueries, Qt.InputMethodQuery])
  QInputMethodQueryEvent(QInputMethodQueryEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def queries(self):
    """ queries(self) -> Qt.InputMethodQueries """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setValue(self, arg0, Any):
    """ setValue(self, Qt.InputMethodQuery, Any) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def value(self, arg0):
    """ value(self, Qt.InputMethodQuery) -> Any """
    return None

class QIntValidator(QValidator):
  """ QIntValidator(parent: QObject = None)
  QIntValidator(int, int, parent: QObject = None) """

  Acceptable = None
  Intermediate = None
  Invalid = None
  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bottom(self):
    """ bottom(self) -> int """
    return 1

  def changed(self):
    """ changed(self) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBottom(self, int):
    """ setBottom(self, int) """
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRange(self, int, int):
    """ setRange(self, int, int) """
    pass

  def setTop(self, int):
    """ setTop(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def top(self):
    """ top(self) -> int """
    return 1

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

class QKeyEvent(QInputEvent):
  """ QKeyEvent(QEvent.Type, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], int, int, int, text: str = '', autorep: bool = False, count: int = 1)
  QKeyEvent(QEvent.Type, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], text: str = '', autorep: bool = False, count: int = 1)
  QKeyEvent(QKeyEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def count(self):
    """ count(self) -> int """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def isAutoRepeat(self):
    """ isAutoRepeat(self) -> bool """
    return None

  def key(self):
    """ key(self) -> int """
    return 1

  def matches(self, arg0):
    """ matches(self, QKeySequence.StandardKey) -> bool """
    return None

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def nativeModifiers(self):
    """ nativeModifiers(self) -> int """
    return 1

  def nativeScanCode(self):
    """ nativeScanCode(self) -> int """
    return 1

  def nativeVirtualKey(self):
    """ nativeVirtualKey(self) -> int """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def text(self):
    """ text(self) -> str """
    return ""

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QKeySequence(simplewrapper):
  """ QKeySequence()
  QKeySequence(Union[QKeySequence, QKeySequence.StandardKey, str, int])
  QKeySequence(str, format: QKeySequence.SequenceFormat = QKeySequence.NativeText)
  QKeySequence(int, key2: int = 0, key3: int = 0, key4: int = 0)
  QKeySequence(Any) """

  AddTab = None
  Back = None
  Backspace = None
  Bold = None
  Cancel = None
  Close = None
  Copy = None
  Cut = None
  Delete = None
  DeleteCompleteLine = None
  DeleteEndOfLine = None
  DeleteEndOfWord = None
  DeleteStartOfWord = None
  Deselect = None
  ExactMatch = None
  Find = None
  FindNext = None
  FindPrevious = None
  Forward = None
  FullScreen = None
  HelpContents = None
  InsertLineSeparator = None
  InsertParagraphSeparator = None
  Italic = None
  MoveToEndOfBlock = None
  MoveToEndOfDocument = None
  MoveToEndOfLine = None
  MoveToNextChar = None
  MoveToNextLine = None
  MoveToNextPage = None
  MoveToNextWord = None
  MoveToPreviousChar = None
  MoveToPreviousLine = None
  MoveToPreviousPage = None
  MoveToPreviousWord = None
  MoveToStartOfBlock = None
  MoveToStartOfDocument = None
  MoveToStartOfLine = None
  NativeText = None
  New = None
  NextChild = None
  NoMatch = None
  Open = None
  PartialMatch = None
  Paste = None
  PortableText = None
  Preferences = None
  PreviousChild = None
  Print = None
  Quit = None
  Redo = None
  Refresh = None
  Replace = None
  Save = None
  SaveAs = None
  SelectAll = None
  SelectEndOfBlock = None
  SelectEndOfDocument = None
  SelectEndOfLine = None
  SelectNextChar = None
  SelectNextLine = None
  SelectNextPage = None
  SelectNextWord = None
  SelectPreviousChar = None
  SelectPreviousLine = None
  SelectPreviousPage = None
  SelectPreviousWord = None
  SelectStartOfBlock = None
  SelectStartOfDocument = None
  SelectStartOfLine = None

  class SequenceFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SequenceMatch(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StandardKey(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Underline = None
  Undo = None
  UnknownKey = None
  WhatsThis = None
  ZoomIn = None
  ZoomOut = None

  def count(self):
    """ count(self) -> int """
    return 1

  def fromString(str, arg0=None):
    """ fromString(str, format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> QKeySequence """
    return None

  def isDetached(self):
    """ isDetached(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def keyBindings(arg0):
    """ keyBindings(QKeySequence.StandardKey) -> List[QKeySequence] """
    return None

  def listFromString(str, arg0=None):
    """ listFromString(str, format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> List[QKeySequence] """
    return None

  def listToString(IterableUnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None, arg0=None):
    """ listToString(Iterable[Union[QKeySequence, QKeySequence.StandardKey, str, int]], format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> str """
    return ""

  def matches(self, UnionQKeySequence=None, QKeySequence.StandardKey=None, str=None, int=None):
    """ matches(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) -> QKeySequence.SequenceMatch """
    return None

  def mnemonic(str):
    """ mnemonic(str) -> QKeySequence """
    return None

  def swap(self, QKeySequence):
    """ swap(self, QKeySequence) """
    pass

  def toString(self, arg0=None):
    """ toString(self, format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> str """
    return ""

class QLinearGradient(QGradient):
  """ QLinearGradient()
  QLinearGradient(Union[QPointF, QPoint], Union[QPointF, QPoint])
  QLinearGradient(float, float, float, float)
  QLinearGradient(QLinearGradient) """

  AboveTheSky = None
  AfricanField = None
  AlchemistLab = None
  AmourAmour = None
  AmyCrisp = None
  AngelCare = None
  AquaGuidance = None
  AquaSplash = None
  AwesomePine = None
  BigMango = None
  BlackSea = None
  Blessing = None
  BurningSpring = None
  CheerfulCaramel = None
  ChildCare = None
  CleanMirror = None
  CloudyApple = None
  CloudyKnoxville = None
  CochitiLake = None
  ColdEvening = None
  ColorfulPeach = None
  ConfidentCloud = None
  ConicalGradient = None
  CrystalRiver = None
  Crystalline = None
  DeepBlue = None
  DeepRelief = None
  DenseWater = None
  DesertHump = None
  DirtyBeauty = None
  DustyGrass = None
  EternalConstance = None
  EverlastingSky = None
  FabledSunset = None
  FarawayRiver = None
  FebruaryInk = None
  FlyHigh = None
  FlyingLemon = None
  ForestInei = None
  FreshMilk = None
  FreshOasis = None
  FrozenBerry = None
  FrozenDreams = None
  FrozenHeat = None
  FruitBlend = None
  GagarinView = None
  GentleCare = None
  GlassWater = None
  GrassShampoo = None
  GreatWhale = None
  GrownEarly = None
  HappyAcid = None
  HappyFisher = None
  HappyMemories = None
  HappyUnicorn = None
  HealthyWater = None
  HeavenPeach = None
  HeavyRain = None
  HiddenJaguar = None
  HighFlight = None
  ItmeoBranding = None
  JapanBlush = None
  JuicyCake = None
  JuicyPeach = None
  JungleDay = None
  KindSteel = None
  LadogaBottom = None
  LadyLips = None
  LandingAircraft = None
  LeCocktail = None
  LemonGate = None
  LightBlue = None
  LilyMeadow = None
  LinearGradient = None
  LogicalMode = None
  LoveKiss = None
  MagicLake = None
  MagicRay = None
  MalibuBeach = None
  MarbleWall = None
  MarsParty = None
  MeanFruit = None
  MidnightBloom = None
  MillenniumPine = None
  MindCrawl = None
  MixedHopes = None
  MoleHall = None
  MorningSalad = None
  MorpheusDen = None
  MountainRock = None
  NearMoon = None
  Nega = None
  NewLife = None
  NewRetrowave = None
  NewYork = None
  NightCall = None
  NightFade = None
  NightParty = None
  NightSky = None
  NoGradient = None
  NorseBeauty = None
  NorthMiracle = None
  ObjectBoundingMode = None
  ObjectMode = None
  OctoberSilence = None
  OldHat = None
  OrangeJuice = None
  OverSun = None
  PadSpread = None
  PaloAlto = None
  PartyBliss = None
  PassionateBed = None
  PerfectBlue = None
  PerfectWhite = None
  PhoenixStart = None
  PlumBath = None
  PlumPlate = None
  PoliteRumors = None
  PremiumDark = None
  PremiumWhite = None
  PurpleDivision = None
  RadialGradient = None
  RainyAshville = None
  RareWind = None
  RedSalvation = None
  ReflectSpread = None
  RepeatSpread = None
  RichMetal = None
  RipeMalinka = None
  RiskyConcrete = None
  RiverCity = None
  RoyalGarden = None
  SaintPetersburg = None
  SaltMountain = None
  SandStrike = None
  SeaLord = None
  SeaStrike = None
  Seashore = None
  ShadyWater = None
  SharpBlues = None
  SharpeyeEagle = None
  ShyRainbow = None
  SkyGlider = None
  SleeplessNight = None
  SmartIndigo = None
  SmilingRain = None
  SnowAgain = None
  SoftCherish = None
  SoftGrass = None
  SoftLipstick = None
  SolidStone = None
  SpaceShift = None
  SpikyNaga = None
  SpringWarmth = None
  StarWine = None
  StretchToDeviceMode = None
  StrictNovember = None
  StrongBliss = None
  StrongStick = None
  SugarLollipop = None
  SummerGames = None
  SunVeggie = None
  SunnyMorning = None
  SupremeSky = None
  SweetDessert = None
  SweetPeriod = None
  TeenNotebook = None
  TeenParty = None
  TemptingAzure = None
  TrueSunset = None
  ViciousStance = None
  WarmFlame = None
  WideMatrix = None
  WildApple = None
  WinterNeva = None
  WitchDance = None
  YoungGrass = None
  YoungPassion = None
  ZeusMiracle = None

  def coordinateMode(self):
    """ coordinateMode(self) -> QGradient.CoordinateMode """
    return None

  def finalStop(self):
    """ finalStop(self) -> QPointF """
    return 1

  def setColorAt(self, float, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColorAt(self, float, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCoordinateMode(self, arg0):
    """ setCoordinateMode(self, QGradient.CoordinateMode) """
    pass

  def setFinalStop(self, UnionQPointF=None, QPoint=None):
    """ setFinalStop(self, Union[QPointF, QPoint])
    setFinalStop(self, float, float) """
    pass

  def setSpread(self, arg0):
    """ setSpread(self, QGradient.Spread) """
    pass

  def setStart(self, UnionQPointF=None, QPoint=None):
    """ setStart(self, Union[QPointF, QPoint])
    setStart(self, float, float) """
    pass

  def setStops(self, IterableTuplefloat=None, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setStops(self, Iterable[Tuple[float, Union[QColor, Qt.GlobalColor, QGradient]]]) """
    pass

  def spread(self):
    """ spread(self) -> QGradient.Spread """
    return None

  def start(self):
    """ start(self) -> QPointF """
    return 1

  def stops(self):
    """ stops(self) -> List[Tuple[float, QColor]] """
    return 1.0

  def type(self):
    """ type(self) -> QGradient.Type """
    return None

class QMatrix2x2(simplewrapper):
  """ QMatrix2x2()
  QMatrix2x2(QMatrix2x2)
  QMatrix2x2(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix2x2 """
    return None

class QMatrix2x3(simplewrapper):
  """ QMatrix2x3()
  QMatrix2x3(QMatrix2x3)
  QMatrix2x3(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix3x2 """
    return None

class QMatrix2x4(simplewrapper):
  """ QMatrix2x4()
  QMatrix2x4(QMatrix2x4)
  QMatrix2x4(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix4x2 """
    return None

class QMatrix3x2(simplewrapper):
  """ QMatrix3x2()
  QMatrix3x2(QMatrix3x2)
  QMatrix3x2(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix2x3 """
    return None

class QMatrix3x3(simplewrapper):
  """ QMatrix3x3()
  QMatrix3x3(QMatrix3x3)
  QMatrix3x3(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix3x3 """
    return None

class QMatrix3x4(simplewrapper):
  """ QMatrix3x4()
  QMatrix3x4(QMatrix3x4)
  QMatrix3x4(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix4x3 """
    return None

class QMatrix4x2(simplewrapper):
  """ QMatrix4x2()
  QMatrix4x2(QMatrix4x2)
  QMatrix4x2(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix2x4 """
    return None

class QMatrix4x3(simplewrapper):
  """ QMatrix4x3()
  QMatrix4x3(QMatrix4x3)
  QMatrix4x3(Sequence[float]) """

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix3x4 """
    return None

class QMatrix4x4(simplewrapper):
  """ QMatrix4x4()
  QMatrix4x4(Sequence[float])
  QMatrix4x4(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
  QMatrix4x4(QTransform)
  QMatrix4x4(QMatrix4x4) """

  def column(self, int):
    """ column(self, int) -> QVector4D """
    return None

  def copyDataTo(self):
    """ copyDataTo(self) -> List[float] """
    return 1.0

  def data(self):
    """ data(self) -> List[float] """
    return 1.0

  def determinant(self):
    """ determinant(self) -> float """
    return 1.0

  def fill(self, float):
    """ fill(self, float) """
    pass

  def frustum(self, float, float, float, float, float, float):
    """ frustum(self, float, float, float, float, float, float) """
    pass

  def inverted(self):
    """ inverted(self) -> Tuple[QMatrix4x4, bool] """
    return None

  def isAffine(self):
    """ isAffine(self) -> bool """
    return None

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def lookAt(self, QVector3D, QVector3D, QVector3D):
    """ lookAt(self, QVector3D, QVector3D, QVector3D) """
    pass

  def map(self, QPoint):
    """ map(self, QPoint) -> QPoint
    map(self, Union[QPointF, QPoint]) -> QPointF
    map(self, QVector3D) -> QVector3D
    map(self, QVector4D) -> QVector4D """
    return 1

  def mapRect(self, QRect):
    """ mapRect(self, QRect) -> QRect
    mapRect(self, QRectF) -> QRectF """
    return None

  def mapVector(self, QVector3D):
    """ mapVector(self, QVector3D) -> QVector3D """
    return None

  def normalMatrix(self):
    """ normalMatrix(self) -> QMatrix3x3 """
    return None

  def optimize(self):
    """ optimize(self) """
    pass

  def ortho(self, QRect):
    """ ortho(self, QRect)
    ortho(self, QRectF)
    ortho(self, float, float, float, float, float, float) """
    pass

  def perspective(self, float, float, float, float):
    """ perspective(self, float, float, float, float) """
    pass

  def rotate(self, float, QVector3D):
    """ rotate(self, float, QVector3D)
    rotate(self, float, float, float, z: float = 0)
    rotate(self, QQuaternion) """
    pass

  def row(self, int):
    """ row(self, int) -> QVector4D """
    return None

  def scale(self, QVector3D):
    """ scale(self, QVector3D)
    scale(self, float, float)
    scale(self, float, float, float)
    scale(self, float) """
    pass

  def setColumn(self, int, QVector4D):
    """ setColumn(self, int, QVector4D) """
    pass

  def setRow(self, int, QVector4D):
    """ setRow(self, int, QVector4D) """
    pass

  def setToIdentity(self):
    """ setToIdentity(self) """
    pass

  def toTransform(self):
    """ toTransform(self) -> QTransform
    toTransform(self, float) -> QTransform """
    return None

  def translate(self, QVector3D):
    """ translate(self, QVector3D)
    translate(self, float, float)
    translate(self, float, float, float) """
    pass

  def transposed(self):
    """ transposed(self) -> QMatrix4x4 """
    return None

  def viewport(self, QRectF):
    """ viewport(self, float, float, float, float, nearPlane: float = 0, farPlane: float = 1)
    viewport(self, QRectF) """
    pass

class QMouseEvent(QInputEvent):
  """ QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])
  QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])
  QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])
  QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.MouseEventSource)
  QMouseEvent(QMouseEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def button(self):
    """ button(self) -> Qt.MouseButton """
    return None

  def buttons(self):
    """ buttons(self) -> Qt.MouseButtons """
    return None

  def flags(self):
    """ flags(self) -> Qt.MouseEventFlags """
    return None

  def globalPos(self):
    """ globalPos(self) -> QPoint """
    return 1

  def globalX(self):
    """ globalX(self) -> int """
    return 1

  def globalY(self):
    """ globalY(self) -> int """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def localPos(self):
    """ localPos(self) -> QPointF """
    return 1

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def screenPos(self):
    """ screenPos(self) -> QPointF """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def source(self):
    """ source(self) -> Qt.MouseEventSource """
    return None

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def windowPos(self):
    """ windowPos(self) -> QPointF """
    return 1

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QMoveEvent(QEvent):
  """ QMoveEvent(QPoint, QPoint)
  QMoveEvent(QMoveEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def oldPos(self):
    """ oldPos(self) -> QPoint """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QMovie(QObject):
  """ QMovie(parent: QObject = None)
  QMovie(QIODevice, format: Union[QByteArray, bytes, bytearray] = QByteArray(), parent: QObject = None)
  QMovie(str, format: Union[QByteArray, bytes, bytearray] = QByteArray(), parent: QObject = None) """

  CacheAll = None

  class CacheMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CacheNone = None

  class MovieState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NotRunning = None
  Paused = None
  Running = None

  def backgroundColor(self):
    """ backgroundColor(self) -> QColor """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cacheMode(self):
    """ cacheMode(self) -> QMovie.CacheMode """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentFrameNumber(self):
    """ currentFrameNumber(self) -> int """
    return 1

  def currentImage(self):
    """ currentImage(self) -> QImage """
    return None

  def currentPixmap(self):
    """ currentPixmap(self) -> QPixmap """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self, arg0):
    """ error(self, QImageReader.ImageReaderError) [signal] """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def format(self):
    """ format(self) -> QByteArray """
    return None

  def frameChanged(self, int):
    """ frameChanged(self, int) [signal] """
    pass

  def frameCount(self):
    """ frameCount(self) -> int """
    return 1

  def frameRect(self):
    """ frameRect(self) -> QRect """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def jumpToFrame(self, int):
    """ jumpToFrame(self, int) -> bool """
    return None

  def jumpToNextFrame(self):
    """ jumpToNextFrame(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastError(self):
    """ lastError(self) -> QImageReader.ImageReaderError """
    return None

  def lastErrorString(self):
    """ lastErrorString(self) -> str """
    return ""

  def loopCount(self):
    """ loopCount(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nextFrameDelay(self):
    """ nextFrameDelay(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resized(self, QSize):
    """ resized(self, QSize) [signal] """
    pass

  def scaledSize(self):
    """ scaledSize(self) -> QSize """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBackgroundColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCacheMode(self, arg0):
    """ setCacheMode(self, QMovie.CacheMode) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFormat(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setFormat(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPaused(self, bool):
    """ setPaused(self, bool) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setScaledSize(self, QSize):
    """ setScaledSize(self, QSize) """
    pass

  def setSpeed(self, int):
    """ setSpeed(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def speed(self):
    """ speed(self) -> int """
    return 1

  def start(self):
    """ start(self) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def started(self):
    """ started(self) [signal] """
    pass

  def state(self):
    """ state(self) -> QMovie.MovieState """
    return None

  def stateChanged(self, arg0):
    """ stateChanged(self, QMovie.MovieState) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def supportedFormats():
    """ supportedFormats() -> List[QByteArray] """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updated(self, QRect):
    """ updated(self, QRect) [signal] """
    pass

class QNativeGestureEvent(QInputEvent):
  """ QNativeGestureEvent(Qt.NativeGestureType, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], float, int, int)
  QNativeGestureEvent(Qt.NativeGestureType, QTouchDevice, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], float, int, int)
  QNativeGestureEvent(QNativeGestureEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def device(self):
    """ device(self) -> QTouchDevice """
    return None

  def gestureType(self):
    """ gestureType(self) -> Qt.NativeGestureType """
    return None

  def globalPos(self):
    """ globalPos(self) -> QPoint """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def localPos(self):
    """ localPos(self) -> QPointF """
    return 1

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def screenPos(self):
    """ screenPos(self) -> QPointF """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def value(self):
    """ value(self) -> float """
    return 1.0

  def windowPos(self):
    """ windowPos(self) -> QPointF """
    return 1

class QOffscreenSurface(QObject):
  """ QOffscreenSurface(screen: QScreen = None)
  QOffscreenSurface(QScreen, QObject) """

  MetalSurface = None
  Offscreen = None
  OpenGLSurface = None
  OpenVGSurface = None
  RasterGLSurface = None
  RasterSurface = None

  class SurfaceClass(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SurfaceType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  VulkanSurface = None
  Window = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def create(self):
    """ create(self) """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeHandle(self):
    """ nativeHandle(self) -> sip.voidptr """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def requestedFormat(self):
    """ requestedFormat(self) -> QSurfaceFormat """
    return None

  def screen(self):
    """ screen(self) -> QScreen """
    return None

  def screenChanged(self, QScreen):
    """ screenChanged(self, QScreen) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFormat(self, QSurfaceFormat):
    """ setFormat(self, QSurfaceFormat) """
    pass

  def setNativeHandle(self, arg0):
    """ setNativeHandle(self, sip.voidptr) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setScreen(self, QScreen):
    """ setScreen(self, QScreen) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsOpenGL(self):
    """ supportsOpenGL(self) -> bool """
    return None

  def surfaceClass(self):
    """ surfaceClass(self) -> QSurface.SurfaceClass """
    return None

  def surfaceType(self):
    """ surfaceType(self) -> QSurface.SurfaceType """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QOpenGLBuffer(simplewrapper):
  """ QOpenGLBuffer()
  QOpenGLBuffer(QOpenGLBuffer.Type)
  QOpenGLBuffer(QOpenGLBuffer) """

  class Access(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DynamicCopy = None
  DynamicDraw = None
  DynamicRead = None
  IndexBuffer = None
  PixelPackBuffer = None
  PixelUnpackBuffer = None

  class RangeAccessFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RangeAccessFlags(simplewrapper):
    """ QOpenGLBuffer.RangeAccessFlags()
    QOpenGLBuffer.RangeAccessFlags(Union[QOpenGLBuffer.RangeAccessFlags, QOpenGLBuffer.RangeAccessFlag])
    QOpenGLBuffer.RangeAccessFlags(QOpenGLBuffer.RangeAccessFlags) """

    pass

  RangeFlushExplicit = None
  RangeInvalidate = None
  RangeInvalidateBuffer = None
  RangeRead = None
  RangeUnsynchronized = None
  RangeWrite = None
  ReadOnly = None
  ReadWrite = None
  StaticCopy = None
  StaticDraw = None
  StaticRead = None
  StreamCopy = None
  StreamDraw = None
  StreamRead = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class UsagePattern(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  VertexBuffer = None
  WriteOnly = None

  def allocate(self, arg0, int):
    """ allocate(self, sip.voidptr, int)
    allocate(self, int) """
    pass

  def bind(self):
    """ bind(self) -> bool """
    return None

  def bufferId(self):
    """ bufferId(self) -> int """
    return 1

  def create(self):
    """ create(self) -> bool """
    return None

  def destroy(self):
    """ destroy(self) """
    pass

  def isCreated(self):
    """ isCreated(self) -> bool """
    return None

  def map(self, arg0):
    """ map(self, QOpenGLBuffer.Access) -> sip.voidptr """
    return None

  def mapRange(self, int, int, UnionQOpenGLBuffer.RangeAccessFlags=None, QOpenGLBuffer.RangeAccessFlag=None):
    """ mapRange(self, int, int, Union[QOpenGLBuffer.RangeAccessFlags, QOpenGLBuffer.RangeAccessFlag]) -> sip.voidptr """
    return None

  def read(self, int, arg0, int):
    """ read(self, int, sip.voidptr, int) -> bool """
    return None

  def release(self):
    """ release(self)
    release(QOpenGLBuffer.Type) """
    pass

  def setUsagePattern(self, arg0):
    """ setUsagePattern(self, QOpenGLBuffer.UsagePattern) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QOpenGLBuffer.Type """
    return None

  def unmap(self):
    """ unmap(self) -> bool """
    return None

  def usagePattern(self):
    """ usagePattern(self) -> QOpenGLBuffer.UsagePattern """
    return None

  def write(self, int, arg0, int):
    """ write(self, int, sip.voidptr, int) """
    pass

class QOpenGLContext(QObject):
  """ QOpenGLContext(parent: QObject = None) """

  LibGL = None
  LibGLES = None

  class OpenGLModuleType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def aboutToBeDestroyed(self):
    """ aboutToBeDestroyed(self) [signal] """
    pass

  def areSharing(QOpenGLContext, QOpenGLContext):
    """ areSharing(QOpenGLContext, QOpenGLContext) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def create(self):
    """ create(self) -> bool """
    return None

  def currentContext():
    """ currentContext() -> QOpenGLContext """
    return None

  def customEvent():
    pass

  def defaultFramebufferObject(self):
    """ defaultFramebufferObject(self) -> int """
    return 1

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def doneCurrent(self):
    """ doneCurrent(self) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def extensions(self):
    """ extensions(self) -> Set[QByteArray] """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return None

  def getProcAddress(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ getProcAddress(self, Union[QByteArray, bytes, bytearray]) -> sip.voidptr """
    return None

  def globalShareContext():
    """ globalShareContext() -> QOpenGLContext """
    return None

  def hasExtension(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ hasExtension(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpenGLES(self):
    """ isOpenGLES(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def makeCurrent(self, QSurface):
    """ makeCurrent(self, QSurface) -> bool """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def nativeHandle(self):
    """ nativeHandle(self) -> Any """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def openGLModuleHandle():
    """ openGLModuleHandle() -> sip.voidptr """
    return None

  def openGLModuleType():
    """ openGLModuleType() -> QOpenGLContext.OpenGLModuleType """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def screen(self):
    """ screen(self) -> QScreen """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFormat(self, QSurfaceFormat):
    """ setFormat(self, QSurfaceFormat) """
    pass

  def setNativeHandle(self, Any):
    """ setNativeHandle(self, Any) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setScreen(self, QScreen):
    """ setScreen(self, QScreen) """
    pass

  def setShareContext(self, QOpenGLContext):
    """ setShareContext(self, QOpenGLContext) """
    pass

  def shareContext(self):
    """ shareContext(self) -> QOpenGLContext """
    return None

  def shareGroup(self):
    """ shareGroup(self) -> QOpenGLContextGroup """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsThreadedOpenGL():
    """ supportsThreadedOpenGL() -> bool """
    return None

  def surface(self):
    """ surface(self) -> QSurface """
    return None

  def swapBuffers(self, QSurface):
    """ swapBuffers(self, QSurface) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def versionFunctions(self, arg0=None):
    """ versionFunctions(self, versionProfile: QOpenGLVersionProfile = None) -> object """
    return None

class QOpenGLContextGroup(QObject):

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def currentContextGroup():
    """ currentContextGroup() -> QOpenGLContextGroup """
    return None

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def shares(self):
    """ shares(self) -> List[QOpenGLContext] """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QOpenGLDebugLogger(QObject):
  """ QOpenGLDebugLogger(parent: QObject = None) """

  AsynchronousLogging = None

  class LoggingMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SynchronousLogging = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disableMessages():
    """ disableMessages(self, sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType, severities: Union[QOpenGLDebugMessage.Severities, QOpenGLDebugMessage.Severity] = QOpenGLDebugMessage.AnySeverity)
    disableMessages(self, Iterable[int], sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType) """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enableMessages():
    """ enableMessages(self, sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType, severities: Union[QOpenGLDebugMessage.Severities, QOpenGLDebugMessage.Severity] = QOpenGLDebugMessage.AnySeverity)
    enableMessages(self, Iterable[int], sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initialize(self):
    """ initialize(self) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isLogging(self):
    """ isLogging(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def logMessage(self, QOpenGLDebugMessage):
    """ logMessage(self, QOpenGLDebugMessage) """
    pass

  def loggedMessages(self):
    """ loggedMessages(self) -> List[QOpenGLDebugMessage] """
    return None

  def loggingMode(self):
    """ loggingMode(self) -> QOpenGLDebugLogger.LoggingMode """
    return None

  def maximumMessageLength(self):
    """ maximumMessageLength(self) -> int """
    return 1

  def messageLogged(self, QOpenGLDebugMessage):
    """ messageLogged(self, QOpenGLDebugMessage) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def popGroup(self):
    """ popGroup(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pushGroup():
    """ pushGroup(self, str, id: int = 0, source: QOpenGLDebugMessage.Source = QOpenGLDebugMessage.ApplicationSource) """
    pass

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startLogging():
    """ startLogging(self, loggingMode: QOpenGLDebugLogger.LoggingMode = QOpenGLDebugLogger.AsynchronousLogging) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def stopLogging(self):
    """ stopLogging(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QOpenGLDebugMessage(simplewrapper):
  """ QOpenGLDebugMessage()
  QOpenGLDebugMessage(QOpenGLDebugMessage) """

  APISource = None
  AnySeverity = None
  AnySource = None
  AnyType = None
  ApplicationSource = None
  DeprecatedBehaviorType = None
  ErrorType = None
  GroupPopType = None
  GroupPushType = None
  HighSeverity = None
  InvalidSeverity = None
  InvalidSource = None
  InvalidType = None
  LowSeverity = None
  MarkerType = None
  MediumSeverity = None
  NotificationSeverity = None
  OtherSource = None
  OtherType = None
  PerformanceType = None
  PortabilityType = None

  class Severities(simplewrapper):
    """ QOpenGLDebugMessage.Severities()
    QOpenGLDebugMessage.Severities(Union[QOpenGLDebugMessage.Severities, QOpenGLDebugMessage.Severity])
    QOpenGLDebugMessage.Severities(QOpenGLDebugMessage.Severities) """

    pass

  class Severity(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ShaderCompilerSource = None

  class Source(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Sources(simplewrapper):
    """ QOpenGLDebugMessage.Sources()
    QOpenGLDebugMessage.Sources(Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source])
    QOpenGLDebugMessage.Sources(QOpenGLDebugMessage.Sources) """

    pass

  ThirdPartySource = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Types(simplewrapper):
    """ QOpenGLDebugMessage.Types()
    QOpenGLDebugMessage.Types(Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type])
    QOpenGLDebugMessage.Types(QOpenGLDebugMessage.Types) """

    pass

  UndefinedBehaviorType = None
  WindowSystemSource = None

  def createApplicationMessage(str, arg0=None, arg1=None, arg2=None):
    """ createApplicationMessage(str, id: int = 0, severity: QOpenGLDebugMessage.Severity = QOpenGLDebugMessage.NotificationSeverity, type: QOpenGLDebugMessage.Type = QOpenGLDebugMessage.OtherType) -> QOpenGLDebugMessage """
    return None

  def createThirdPartyMessage(str, arg0=None, arg1=None, arg2=None):
    """ createThirdPartyMessage(str, id: int = 0, severity: QOpenGLDebugMessage.Severity = QOpenGLDebugMessage.NotificationSeverity, type: QOpenGLDebugMessage.Type = QOpenGLDebugMessage.OtherType) -> QOpenGLDebugMessage """
    return None

  def id(self):
    """ id(self) -> int """
    return 1

  def message(self):
    """ message(self) -> str """
    return ""

  def severity(self):
    """ severity(self) -> QOpenGLDebugMessage.Severity """
    return None

  def source(self):
    """ source(self) -> QOpenGLDebugMessage.Source """
    return None

  def swap(self, QOpenGLDebugMessage):
    """ swap(self, QOpenGLDebugMessage) """
    pass

  def type(self):
    """ type(self) -> QOpenGLDebugMessage.Type """
    return None

class QOpenGLFramebufferObject(simplewrapper):
  """ QOpenGLFramebufferObject(QSize, target: int = GL_TEXTURE_2D)
  QOpenGLFramebufferObject(int, int, target: int = GL_TEXTURE_2D)
  QOpenGLFramebufferObject(QSize, QOpenGLFramebufferObject.Attachment, target: int = GL_TEXTURE_2D, internal_format: int = GL_RGBA8)
  QOpenGLFramebufferObject(int, int, QOpenGLFramebufferObject.Attachment, target: int = GL_TEXTURE_2D, internal_format: int = GL_RGBA8)
  QOpenGLFramebufferObject(QSize, QOpenGLFramebufferObjectFormat)
  QOpenGLFramebufferObject(int, int, QOpenGLFramebufferObjectFormat) """

  class Attachment(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CombinedDepthStencil = None
  Depth = None
  DontRestoreFramebufferBinding = None

  class FramebufferRestorePolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoAttachment = None
  RestoreFrameBufferBinding = None
  RestoreFramebufferBindingToDefault = None

  def addColorAttachment():
    """ addColorAttachment(self, QSize, internal_format: int = 0)
    addColorAttachment(self, int, int, internal_format: int = 0) """
    pass

  def attachment(self):
    """ attachment(self) -> QOpenGLFramebufferObject.Attachment """
    return None

  def bind(self):
    """ bind(self) -> bool """
    return None

  def bindDefault():
    """ bindDefault() -> bool """
    return None

  def blitFramebuffer(QOpenGLFramebufferObject, QRect, QOpenGLFramebufferObject, QRect, int, int, int, int):
    """ blitFramebuffer(QOpenGLFramebufferObject, QRect, QOpenGLFramebufferObject, QRect, buffers: int = GL_COLOR_BUFFER_BIT, filter: int = GL_NEAREST)
    blitFramebuffer(QOpenGLFramebufferObject, QOpenGLFramebufferObject, buffers: int = GL_COLOR_BUFFER_BIT, filter: int = GL_NEAREST)
    blitFramebuffer(QOpenGLFramebufferObject, QRect, QOpenGLFramebufferObject, QRect, int, int, int, int)
    blitFramebuffer(QOpenGLFramebufferObject, QRect, QOpenGLFramebufferObject, QRect, int, int, int, int, QOpenGLFramebufferObject.FramebufferRestorePolicy) """
    pass

  def format(self):
    """ format(self) -> QOpenGLFramebufferObjectFormat """
    return None

  def handle(self):
    """ handle(self) -> int """
    return 1

  def hasOpenGLFramebufferBlit():
    """ hasOpenGLFramebufferBlit() -> bool """
    return None

  def hasOpenGLFramebufferObjects():
    """ hasOpenGLFramebufferObjects() -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def isBound(self):
    """ isBound(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def release(self):
    """ release(self) -> bool """
    return None

  def setAttachment(self, arg0):
    """ setAttachment(self, QOpenGLFramebufferObject.Attachment) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizes(self):
    """ sizes(self) -> List[QSize] """
    return None

  def takeTexture(self):
    """ takeTexture(self) -> int
    takeTexture(self, int) -> int """
    return 1

  def texture(self):
    """ texture(self) -> int """
    return 1

  def textures(self):
    """ textures(self) -> List[int] """
    return 1

  def toImage(self):
    """ toImage(self) -> QImage
    toImage(self, bool) -> QImage
    toImage(self, bool, int) -> QImage """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

class QOpenGLFramebufferObjectFormat(simplewrapper):
  """ QOpenGLFramebufferObjectFormat()
  QOpenGLFramebufferObjectFormat(QOpenGLFramebufferObjectFormat) """

  def attachment(self):
    """ attachment(self) -> QOpenGLFramebufferObject.Attachment """
    return None

  def internalTextureFormat(self):
    """ internalTextureFormat(self) -> int """
    return 1

  def mipmap(self):
    """ mipmap(self) -> bool """
    return None

  def samples(self):
    """ samples(self) -> int """
    return 1

  def setAttachment(self, arg0):
    """ setAttachment(self, QOpenGLFramebufferObject.Attachment) """
    pass

  def setInternalTextureFormat(self, int):
    """ setInternalTextureFormat(self, int) """
    pass

  def setMipmap(self, bool):
    """ setMipmap(self, bool) """
    pass

  def setSamples(self, int):
    """ setSamples(self, int) """
    pass

  def setTextureTarget(self, int):
    """ setTextureTarget(self, int) """
    pass

  def textureTarget(self):
    """ textureTarget(self) -> int """
    return 1

class QOpenGLPaintDevice(QPaintDevice):
  """ QOpenGLPaintDevice()
  QOpenGLPaintDevice(QSize)
  QOpenGLPaintDevice(int, int) """

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def context(self):
    """ context(self) -> QOpenGLContext """
    return None

  def depth(self):
    """ depth(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def dotsPerMeterX(self):
    """ dotsPerMeterX(self) -> float """
    return 1.0

  def dotsPerMeterY(self):
    """ dotsPerMeterY(self) -> float """
    return 1.0

  def ensureActiveTarget(self):
    """ ensureActiveTarget(self) """
    pass

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintFlipped(self):
    """ paintFlipped(self) -> bool """
    return None

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def setDevicePixelRatio(self, float):
    """ setDevicePixelRatio(self, float) """
    pass

  def setDotsPerMeterX(self, float):
    """ setDotsPerMeterX(self, float) """
    pass

  def setDotsPerMeterY(self, float):
    """ setDotsPerMeterY(self, float) """
    pass

  def setPaintFlipped(self, bool):
    """ setPaintFlipped(self, bool) """
    pass

  def setSize(self, QSize):
    """ setSize(self, QSize) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QOpenGLPixelTransferOptions(simplewrapper):
  """ QOpenGLPixelTransferOptions()
  QOpenGLPixelTransferOptions(QOpenGLPixelTransferOptions) """

  def alignment(self):
    """ alignment(self) -> int """
    return 1

  def imageHeight(self):
    """ imageHeight(self) -> int """
    return 1

  def isLeastSignificantBitFirst(self):
    """ isLeastSignificantBitFirst(self) -> bool """
    return None

  def isSwapBytesEnabled(self):
    """ isSwapBytesEnabled(self) -> bool """
    return None

  def rowLength(self):
    """ rowLength(self) -> int """
    return 1

  def setAlignment(self, int):
    """ setAlignment(self, int) """
    pass

  def setImageHeight(self, int):
    """ setImageHeight(self, int) """
    pass

  def setLeastSignificantByteFirst(self, bool):
    """ setLeastSignificantByteFirst(self, bool) """
    pass

  def setRowLength(self, int):
    """ setRowLength(self, int) """
    pass

  def setSkipImages(self, int):
    """ setSkipImages(self, int) """
    pass

  def setSkipPixels(self, int):
    """ setSkipPixels(self, int) """
    pass

  def setSkipRows(self, int):
    """ setSkipRows(self, int) """
    pass

  def setSwapBytesEnabled(self, bool):
    """ setSwapBytesEnabled(self, bool) """
    pass

  def skipImages(self):
    """ skipImages(self) -> int """
    return 1

  def skipPixels(self):
    """ skipPixels(self) -> int """
    return 1

  def skipRows(self):
    """ skipRows(self) -> int """
    return 1

  def swap(self, QOpenGLPixelTransferOptions):
    """ swap(self, QOpenGLPixelTransferOptions) """
    pass

class QOpenGLShader(QObject):
  """ QOpenGLShader(Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], parent: QObject = None) """

  Compute = None
  Fragment = None
  Geometry = None

  class ShaderType(simplewrapper):
    """ QOpenGLShader.ShaderType()
    QOpenGLShader.ShaderType(Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit])
    QOpenGLShader.ShaderType(QOpenGLShader.ShaderType) """

    pass

  class ShaderTypeBit(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TessellationControl = None
  TessellationEvaluation = None
  Vertex = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def compileSourceCode(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ compileSourceCode(self, Union[QByteArray, bytes, bytearray]) -> bool
    compileSourceCode(self, str) -> bool """
    return None

  def compileSourceFile(self, str):
    """ compileSourceFile(self, str) -> bool """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hasOpenGLShaders(UnionQOpenGLShader.ShaderType=None, QOpenGLShader.ShaderTypeBit=None, arg0=None):
    """ hasOpenGLShaders(Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], context: QOpenGLContext = None) -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCompiled(self):
    """ isCompiled(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def log(self):
    """ log(self) -> str """
    return ""

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def shaderId(self):
    """ shaderId(self) -> int """
    return 1

  def shaderType(self):
    """ shaderType(self) -> QOpenGLShader.ShaderType """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sourceCode(self):
    """ sourceCode(self) -> QByteArray """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QOpenGLShaderProgram(QObject):
  """ QOpenGLShaderProgram(parent: QObject = None) """

  def addCacheableShaderFromSourceCode(self, UnionQOpenGLShader.ShaderType=None, QOpenGLShader.ShaderTypeBit=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ addCacheableShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], Union[QByteArray, bytes, bytearray]) -> bool
    addCacheableShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool """
    return None

  def addCacheableShaderFromSourceFile(self, UnionQOpenGLShader.ShaderType=None, QOpenGLShader.ShaderTypeBit=None, str=None):
    """ addCacheableShaderFromSourceFile(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool """
    return None

  def addShader(self, QOpenGLShader):
    """ addShader(self, QOpenGLShader) -> bool """
    return None

  def addShaderFromSourceCode(self, UnionQOpenGLShader.ShaderType=None, QOpenGLShader.ShaderTypeBit=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ addShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], Union[QByteArray, bytes, bytearray]) -> bool
    addShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool """
    return None

  def addShaderFromSourceFile(self, UnionQOpenGLShader.ShaderType=None, QOpenGLShader.ShaderTypeBit=None, str=None):
    """ addShaderFromSourceFile(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool """
    return None

  def attributeLocation(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ attributeLocation(self, Union[QByteArray, bytes, bytearray]) -> int
    attributeLocation(self, str) -> int """
    return 1

  def bind(self):
    """ bind(self) -> bool """
    return None

  def bindAttributeLocation(self, UnionQByteArray=None, bytes=None, bytearray=None, int=None):
    """ bindAttributeLocation(self, Union[QByteArray, bytes, bytearray], int)
    bindAttributeLocation(self, str, int) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def create(self):
    """ create(self) -> bool """
    return None

  def customEvent():
    pass

  def defaultInnerTessellationLevels(self):
    """ defaultInnerTessellationLevels(self) -> List[float] """
    return 1.0

  def defaultOuterTessellationLevels(self):
    """ defaultOuterTessellationLevels(self) -> List[float] """
    return 1.0

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disableAttributeArray(self, int):
    """ disableAttributeArray(self, int)
    disableAttributeArray(self, str) """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enableAttributeArray(self, int):
    """ enableAttributeArray(self, int)
    enableAttributeArray(self, str) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hasOpenGLShaderPrograms(arg0=None):
    """ hasOpenGLShaderPrograms(context: QOpenGLContext = None) -> bool """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isLinked(self):
    """ isLinked(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def link(self):
    """ link(self) -> bool """
    return None

  def log(self):
    """ log(self) -> str """
    return ""

  def maxGeometryOutputVertices(self):
    """ maxGeometryOutputVertices(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def patchVertexCount(self):
    """ patchVertexCount(self) -> int """
    return 1

  def programId(self):
    """ programId(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def release(self):
    """ release(self) """
    pass

  def removeAllShaders(self):
    """ removeAllShaders(self) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeShader(self, QOpenGLShader):
    """ removeShader(self, QOpenGLShader) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAttributeArray(self, int, PYQT_SHADER_ATTRIBUTE_ARRAY):
    """ setAttributeArray(self, int, PYQT_SHADER_ATTRIBUTE_ARRAY)
    setAttributeArray(self, str, PYQT_SHADER_ATTRIBUTE_ARRAY) """
    pass

  def setAttributeBuffer():
    """ setAttributeBuffer(self, int, int, int, int, stride: int = 0)
    setAttributeBuffer(self, str, int, int, int, stride: int = 0) """
    pass

  def setAttributeValue(self, int, float):
    """ setAttributeValue(self, int, float)
    setAttributeValue(self, int, float, float)
    setAttributeValue(self, int, float, float, float)
    setAttributeValue(self, int, float, float, float, float)
    setAttributeValue(self, int, QVector2D)
    setAttributeValue(self, int, QVector3D)
    setAttributeValue(self, int, QVector4D)
    setAttributeValue(self, int, Union[QColor, Qt.GlobalColor, QGradient])
    setAttributeValue(self, str, float)
    setAttributeValue(self, str, float, float)
    setAttributeValue(self, str, float, float, float)
    setAttributeValue(self, str, float, float, float, float)
    setAttributeValue(self, str, QVector2D)
    setAttributeValue(self, str, QVector3D)
    setAttributeValue(self, str, QVector4D)
    setAttributeValue(self, str, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setDefaultInnerTessellationLevels(self, Iterablefloat=None):
    """ setDefaultInnerTessellationLevels(self, Iterable[float]) """
    pass

  def setDefaultOuterTessellationLevels(self, Iterablefloat=None):
    """ setDefaultOuterTessellationLevels(self, Iterable[float]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPatchVertexCount(self, int):
    """ setPatchVertexCount(self, int) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setUniformValue(self, int, int):
    """ setUniformValue(self, int, int)
    setUniformValue(self, int, float)
    setUniformValue(self, int, float, float)
    setUniformValue(self, int, float, float, float)
    setUniformValue(self, int, float, float, float, float)
    setUniformValue(self, int, QVector2D)
    setUniformValue(self, int, QVector3D)
    setUniformValue(self, int, QVector4D)
    setUniformValue(self, int, Union[QColor, Qt.GlobalColor, QGradient])
    setUniformValue(self, int, QPoint)
    setUniformValue(self, int, Union[QPointF, QPoint])
    setUniformValue(self, int, QSize)
    setUniformValue(self, int, QSizeF)
    setUniformValue(self, int, QMatrix2x2)
    setUniformValue(self, int, QMatrix2x3)
    setUniformValue(self, int, QMatrix2x4)
    setUniformValue(self, int, QMatrix3x2)
    setUniformValue(self, int, QMatrix3x3)
    setUniformValue(self, int, QMatrix3x4)
    setUniformValue(self, int, QMatrix4x2)
    setUniformValue(self, int, QMatrix4x3)
    setUniformValue(self, int, QMatrix4x4)
    setUniformValue(self, int, QTransform)
    setUniformValue(self, str, int)
    setUniformValue(self, str, float)
    setUniformValue(self, str, float, float)
    setUniformValue(self, str, float, float, float)
    setUniformValue(self, str, float, float, float, float)
    setUniformValue(self, str, QVector2D)
    setUniformValue(self, str, QVector3D)
    setUniformValue(self, str, QVector4D)
    setUniformValue(self, str, Union[QColor, Qt.GlobalColor, QGradient])
    setUniformValue(self, str, QPoint)
    setUniformValue(self, str, Union[QPointF, QPoint])
    setUniformValue(self, str, QSize)
    setUniformValue(self, str, QSizeF)
    setUniformValue(self, str, QMatrix2x2)
    setUniformValue(self, str, QMatrix2x3)
    setUniformValue(self, str, QMatrix2x4)
    setUniformValue(self, str, QMatrix3x2)
    setUniformValue(self, str, QMatrix3x3)
    setUniformValue(self, str, QMatrix3x4)
    setUniformValue(self, str, QMatrix4x2)
    setUniformValue(self, str, QMatrix4x3)
    setUniformValue(self, str, QMatrix4x4)
    setUniformValue(self, str, QTransform) """
    pass

  def setUniformValueArray(self, int, PYQT_SHADER_UNIFORM_VALUE_ARRAY):
    """ setUniformValueArray(self, int, PYQT_SHADER_UNIFORM_VALUE_ARRAY)
    setUniformValueArray(self, str, PYQT_SHADER_UNIFORM_VALUE_ARRAY) """
    pass

  def shaders(self):
    """ shaders(self) -> List[QOpenGLShader] """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def uniformLocation(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ uniformLocation(self, Union[QByteArray, bytes, bytearray]) -> int
    uniformLocation(self, str) -> int """
    return 1

class QOpenGLTexture(simplewrapper):
  """ QOpenGLTexture(QOpenGLTexture.Target)
  QOpenGLTexture(QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = QOpenGLTexture.GenerateMipMaps) """

  Alpha = None
  AlphaFormat = None
  AlphaValue = None
  AnisotropicFiltering = None
  BGR = None
  BGRA = None
  BGRA_Integer = None
  BGR_Integer = None

  class BindingTarget(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  BindingTarget1D = None
  BindingTarget1DArray = None
  BindingTarget2D = None
  BindingTarget2DArray = None
  BindingTarget2DMultisample = None
  BindingTarget2DMultisampleArray = None
  BindingTarget3D = None
  BindingTargetBuffer = None
  BindingTargetCubeMap = None
  BindingTargetCubeMapArray = None
  BindingTargetRectangle = None
  BlueValue = None
  ClampToBorder = None
  ClampToEdge = None
  CommpareNotEqual = None
  CompareAlways = None
  CompareEqual = None
  CompareGreater = None
  CompareGreaterEqual = None
  CompareLess = None
  CompareLessEqual = None
  CompareNever = None
  CompareNone = None
  CompareRefToTexture = None

  class ComparisonFunction(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ComparisonMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class CoordinateDirection(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class CubeMapFace(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CubeMapNegativeX = None
  CubeMapNegativeY = None
  CubeMapNegativeZ = None
  CubeMapPositiveX = None
  CubeMapPositiveY = None
  CubeMapPositiveZ = None
  D16 = None
  D24 = None
  D24S8 = None
  D32 = None
  D32F = None
  D32FS8X24 = None
  Depth = None
  DepthFormat = None
  DepthMode = None
  DepthStencil = None

  class DepthStencilMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DirectionR = None
  DirectionS = None
  DirectionT = None
  DontGenerateMipMaps = None
  DontResetTextureUnit = None

  class Feature(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Features(simplewrapper):
    """ QOpenGLTexture.Features()
    QOpenGLTexture.Features(Union[QOpenGLTexture.Features, QOpenGLTexture.Feature])
    QOpenGLTexture.Features(QOpenGLTexture.Features) """

    pass

  class Filter(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Float16 = None
  Float16OES = None
  Float32 = None
  Float32_D32_UInt32_S8_X24 = None
  GenerateMipMaps = None
  GreenValue = None
  ImmutableMultisampleStorage = None
  ImmutableStorage = None
  Int16 = None
  Int32 = None
  Int8 = None
  Linear = None
  LinearMipMapLinear = None
  LinearMipMapNearest = None
  Luminance = None
  LuminanceAlpha = None
  LuminanceAlphaFormat = None
  LuminanceFormat = None

  class MipMapGeneration(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MirroredRepeat = None
  NPOTTextureRepeat = None
  NPOTTextures = None
  Nearest = None
  NearestMipMapLinear = None
  NearestMipMapNearest = None
  NoFormat = None
  NoPixelType = None
  NoSourceFormat = None
  OneValue = None

  class PixelFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PixelType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  R11_EAC_SNorm = None
  R11_EAC_UNorm = None
  R16F = None
  R16I = None
  R16U = None
  R16_SNorm = None
  R16_UNorm = None
  R32F = None
  R32I = None
  R32U = None
  R5G6B5 = None
  R8I = None
  R8U = None
  R8_SNorm = None
  R8_UNorm = None
  RG = None
  RG11B10F = None
  RG11_EAC_SNorm = None
  RG11_EAC_UNorm = None
  RG16F = None
  RG16I = None
  RG16U = None
  RG16_SNorm = None
  RG16_UNorm = None
  RG32F = None
  RG32I = None
  RG32U = None
  RG3B2 = None
  RG8I = None
  RG8U = None
  RG8_SNorm = None
  RG8_UNorm = None
  RGB = None
  RGB10A2 = None
  RGB16F = None
  RGB16I = None
  RGB16U = None
  RGB16_SNorm = None
  RGB16_UNorm = None
  RGB32F = None
  RGB32I = None
  RGB32U = None
  RGB5A1 = None
  RGB8I = None
  RGB8U = None
  RGB8_ETC1 = None
  RGB8_ETC2 = None
  RGB8_PunchThrough_Alpha1_ETC2 = None
  RGB8_SNorm = None
  RGB8_UNorm = None
  RGB9E5 = None
  RGBA = None
  RGBA16F = None
  RGBA16I = None
  RGBA16U = None
  RGBA16_SNorm = None
  RGBA16_UNorm = None
  RGBA32F = None
  RGBA32I = None
  RGBA32U = None
  RGBA4 = None
  RGBA8I = None
  RGBA8U = None
  RGBA8_ETC2_EAC = None
  RGBA8_SNorm = None
  RGBA8_UNorm = None
  RGBAFormat = None
  RGBA_ASTC_10x10 = None
  RGBA_ASTC_10x5 = None
  RGBA_ASTC_10x6 = None
  RGBA_ASTC_10x8 = None
  RGBA_ASTC_12x10 = None
  RGBA_ASTC_12x12 = None
  RGBA_ASTC_4x4 = None
  RGBA_ASTC_5x4 = None
  RGBA_ASTC_5x5 = None
  RGBA_ASTC_6x5 = None
  RGBA_ASTC_6x6 = None
  RGBA_ASTC_8x5 = None
  RGBA_ASTC_8x6 = None
  RGBA_ASTC_8x8 = None
  RGBA_DXT1 = None
  RGBA_DXT3 = None
  RGBA_DXT5 = None
  RGBA_Integer = None
  RGBFormat = None
  RGB_BP_SIGNED_FLOAT = None
  RGB_BP_UNSIGNED_FLOAT = None
  RGB_BP_UNorm = None
  RGB_DXT1 = None
  RGB_Integer = None
  RG_ATI2N_SNorm = None
  RG_ATI2N_UNorm = None
  RG_Integer = None
  R_ATI1N_SNorm = None
  R_ATI1N_UNorm = None
  Red = None
  RedValue = None
  Red_Integer = None
  Repeat = None
  ResetTextureUnit = None
  S8 = None
  SRGB8 = None
  SRGB8_Alpha8 = None
  SRGB8_Alpha8_ASTC_10x10 = None
  SRGB8_Alpha8_ASTC_10x5 = None
  SRGB8_Alpha8_ASTC_10x6 = None
  SRGB8_Alpha8_ASTC_10x8 = None
  SRGB8_Alpha8_ASTC_12x10 = None
  SRGB8_Alpha8_ASTC_12x12 = None
  SRGB8_Alpha8_ASTC_4x4 = None
  SRGB8_Alpha8_ASTC_5x4 = None
  SRGB8_Alpha8_ASTC_5x5 = None
  SRGB8_Alpha8_ASTC_6x5 = None
  SRGB8_Alpha8_ASTC_6x6 = None
  SRGB8_Alpha8_ASTC_8x5 = None
  SRGB8_Alpha8_ASTC_8x6 = None
  SRGB8_Alpha8_ASTC_8x8 = None
  SRGB8_Alpha8_ETC2_EAC = None
  SRGB8_ETC2 = None
  SRGB8_PunchThrough_Alpha1_ETC2 = None
  SRGB_Alpha_DXT1 = None
  SRGB_Alpha_DXT3 = None
  SRGB_Alpha_DXT5 = None
  SRGB_BP_UNorm = None
  SRGB_DXT1 = None
  Stencil = None
  StencilMode = None
  StencilTexturing = None
  Swizzle = None
  SwizzleAlpha = None
  SwizzleBlue = None

  class SwizzleComponent(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SwizzleGreen = None
  SwizzleRed = None

  class SwizzleValue(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Target(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Target1D = None
  Target1DArray = None
  Target2D = None
  Target2DArray = None
  Target2DMultisample = None
  Target2DMultisampleArray = None
  Target3D = None
  TargetBuffer = None
  TargetCubeMap = None
  TargetCubeMapArray = None
  TargetRectangle = None
  Texture1D = None
  Texture3D = None
  TextureArrays = None
  TextureBuffer = None
  TextureComparisonOperators = None
  TextureCubeMapArrays = None

  class TextureFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TextureMipMapLevel = None
  TextureMultisample = None
  TextureRectangle = None

  class TextureUnitReset(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UInt16 = None
  UInt16_R5G6B5 = None
  UInt16_R5G6B5_Rev = None
  UInt16_RGB5A1 = None
  UInt16_RGB5A1_Rev = None
  UInt16_RGBA4 = None
  UInt16_RGBA4_Rev = None
  UInt32 = None
  UInt32_D24S8 = None
  UInt32_RG11B10F = None
  UInt32_RGB10A2 = None
  UInt32_RGB10A2_Rev = None
  UInt32_RGB9_E5 = None
  UInt32_RGBA8 = None
  UInt32_RGBA8_Rev = None
  UInt8 = None
  UInt8_RG3B2 = None
  UInt8_RG3B2_Rev = None

  class WrapMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ZeroValue = None

  def allocateStorage(self):
    """ allocateStorage(self)
    allocateStorage(self, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType) """
    pass

  def bind(self):
    """ bind(self)
    bind(self, int, reset: QOpenGLTexture.TextureUnitReset = QOpenGLTexture.DontResetTextureUnit) """
    pass

  def borderColor(self):
    """ borderColor(self) -> QColor """
    return None

  def boundTextureId(arg0):
    """ boundTextureId(QOpenGLTexture.BindingTarget) -> int
    boundTextureId(int, QOpenGLTexture.BindingTarget) -> int """
    return 1

  def comparisonFunction(self):
    """ comparisonFunction(self) -> QOpenGLTexture.ComparisonFunction """
    return None

  def comparisonMode(self):
    """ comparisonMode(self) -> QOpenGLTexture.ComparisonMode """
    return None

  def create(self):
    """ create(self) -> bool """
    return None

  def createTextureView(self, arg0, arg1, int, int, int, int):
    """ createTextureView(self, QOpenGLTexture.Target, QOpenGLTexture.TextureFormat, int, int, int, int) -> QOpenGLTexture """
    return None

  def depth(self):
    """ depth(self) -> int """
    return 1

  def depthStencilMode(self):
    """ depthStencilMode(self) -> QOpenGLTexture.DepthStencilMode """
    return None

  def destroy(self):
    """ destroy(self) """
    pass

  def faces(self):
    """ faces(self) -> int """
    return 1

  def format(self):
    """ format(self) -> QOpenGLTexture.TextureFormat """
    return None

  def generateMipMaps(self):
    """ generateMipMaps(self)
    generateMipMaps(self, int, resetBaseLevel: bool = True) """
    pass

  def hasFeature(arg0):
    """ hasFeature(QOpenGLTexture.Feature) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def isAutoMipMapGenerationEnabled(self):
    """ isAutoMipMapGenerationEnabled(self) -> bool """
    return None

  def isBound(self):
    """ isBound(self) -> bool
    isBound(self, int) -> bool """
    return None

  def isCreated(self):
    """ isCreated(self) -> bool """
    return None

  def isFixedSamplePositions(self):
    """ isFixedSamplePositions(self) -> bool """
    return None

  def isStorageAllocated(self):
    """ isStorageAllocated(self) -> bool """
    return None

  def isTextureView(self):
    """ isTextureView(self) -> bool """
    return None

  def layers(self):
    """ layers(self) -> int """
    return 1

  def levelOfDetailRange(self):
    """ levelOfDetailRange(self) -> Tuple[float, float] """
    return 1.0

  def levelofDetailBias(self):
    """ levelofDetailBias(self) -> float """
    return 1.0

  def magnificationFilter(self):
    """ magnificationFilter(self) -> QOpenGLTexture.Filter """
    return None

  def maximumAnisotropy(self):
    """ maximumAnisotropy(self) -> float """
    return 1.0

  def maximumLevelOfDetail(self):
    """ maximumLevelOfDetail(self) -> float """
    return 1.0

  def maximumMipLevels(self):
    """ maximumMipLevels(self) -> int """
    return 1

  def minMagFilters(self):
    """ minMagFilters(self) -> Tuple[QOpenGLTexture.Filter, QOpenGLTexture.Filter] """
    return None

  def minificationFilter(self):
    """ minificationFilter(self) -> QOpenGLTexture.Filter """
    return None

  def minimumLevelOfDetail(self):
    """ minimumLevelOfDetail(self) -> float """
    return 1.0

  def mipBaseLevel(self):
    """ mipBaseLevel(self) -> int """
    return 1

  def mipLevelRange(self):
    """ mipLevelRange(self) -> Tuple[int, int] """
    return 1

  def mipLevels(self):
    """ mipLevels(self) -> int """
    return 1

  def mipMaxLevel(self):
    """ mipMaxLevel(self) -> int """
    return 1

  def release(self):
    """ release(self)
    release(self, int, reset: QOpenGLTexture.TextureUnitReset = QOpenGLTexture.DontResetTextureUnit) """
    pass

  def samples(self):
    """ samples(self) -> int """
    return 1

  def setAutoMipMapGenerationEnabled(self, bool):
    """ setAutoMipMapGenerationEnabled(self, bool) """
    pass

  def setBorderColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBorderColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setComparisonFunction(self, arg0):
    """ setComparisonFunction(self, QOpenGLTexture.ComparisonFunction) """
    pass

  def setComparisonMode(self, arg0):
    """ setComparisonMode(self, QOpenGLTexture.ComparisonMode) """
    pass

  def setCompressedData():
    """ setCompressedData(self, int, int, QOpenGLTexture.CubeMapFace, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setCompressedData(self, int, int, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setCompressedData(self, int, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setCompressedData(self, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setCompressedData(self, int, int, int, QOpenGLTexture.CubeMapFace, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None) """
    pass

  def setData():
    """ setData(self, int, int, QOpenGLTexture.CubeMapFace, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setData(self, int, int, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setData(self, int, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setData(self, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)
    setData(self, QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = QOpenGLTexture.GenerateMipMaps)
    setData(self, int, int, int, QOpenGLTexture.CubeMapFace, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None) """
    pass

  def setDepthStencilMode(self, arg0):
    """ setDepthStencilMode(self, QOpenGLTexture.DepthStencilMode) """
    pass

  def setFixedSamplePositions(self, bool):
    """ setFixedSamplePositions(self, bool) """
    pass

  def setFormat(self, arg0):
    """ setFormat(self, QOpenGLTexture.TextureFormat) """
    pass

  def setLayers(self, int):
    """ setLayers(self, int) """
    pass

  def setLevelOfDetailRange(self, float, float):
    """ setLevelOfDetailRange(self, float, float) """
    pass

  def setLevelofDetailBias(self, float):
    """ setLevelofDetailBias(self, float) """
    pass

  def setMagnificationFilter(self, arg0):
    """ setMagnificationFilter(self, QOpenGLTexture.Filter) """
    pass

  def setMaximumAnisotropy(self, float):
    """ setMaximumAnisotropy(self, float) """
    pass

  def setMaximumLevelOfDetail(self, float):
    """ setMaximumLevelOfDetail(self, float) """
    pass

  def setMinMagFilters(self, arg0, arg1):
    """ setMinMagFilters(self, QOpenGLTexture.Filter, QOpenGLTexture.Filter) """
    pass

  def setMinificationFilter(self, arg0):
    """ setMinificationFilter(self, QOpenGLTexture.Filter) """
    pass

  def setMinimumLevelOfDetail(self, float):
    """ setMinimumLevelOfDetail(self, float) """
    pass

  def setMipBaseLevel(self, int):
    """ setMipBaseLevel(self, int) """
    pass

  def setMipLevelRange(self, int, int):
    """ setMipLevelRange(self, int, int) """
    pass

  def setMipLevels(self, int):
    """ setMipLevels(self, int) """
    pass

  def setMipMaxLevel(self, int):
    """ setMipMaxLevel(self, int) """
    pass

  def setSamples(self, int):
    """ setSamples(self, int) """
    pass

  def setSize():
    """ setSize(self, int, height: int = 1, depth: int = 1) """
    pass

  def setSwizzleMask(self, arg0, arg1):
    """ setSwizzleMask(self, QOpenGLTexture.SwizzleComponent, QOpenGLTexture.SwizzleValue)
    setSwizzleMask(self, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue) """
    pass

  def setWrapMode(self, arg0):
    """ setWrapMode(self, QOpenGLTexture.WrapMode)
    setWrapMode(self, QOpenGLTexture.CoordinateDirection, QOpenGLTexture.WrapMode) """
    pass

  def swizzleMask(self, arg0):
    """ swizzleMask(self, QOpenGLTexture.SwizzleComponent) -> QOpenGLTexture.SwizzleValue """
    return None

  def target(self):
    """ target(self) -> QOpenGLTexture.Target """
    return None

  def textureId(self):
    """ textureId(self) -> int """
    return 1

  def width(self):
    """ width(self) -> int """
    return 1

  def wrapMode(self, arg0):
    """ wrapMode(self, QOpenGLTexture.CoordinateDirection) -> QOpenGLTexture.WrapMode """
    return None

class QOpenGLTextureBlitter(simplewrapper):
  """ QOpenGLTextureBlitter() """

  class Origin(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  OriginBottomLeft = None
  OriginTopLeft = None

  def bind():
    """ bind(self, target: int = GL_TEXTURE_2D) """
    pass

  def blit(self, int, QMatrix4x4, arg0):
    """ blit(self, int, QMatrix4x4, QOpenGLTextureBlitter.Origin)
    blit(self, int, QMatrix4x4, QMatrix3x3) """
    pass

  def create(self):
    """ create(self) -> bool """
    return None

  def destroy(self):
    """ destroy(self) """
    pass

  def isCreated(self):
    """ isCreated(self) -> bool """
    return None

  def release(self):
    """ release(self) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setRedBlueSwizzle(self, bool):
    """ setRedBlueSwizzle(self, bool) """
    pass

  def sourceTransform(QRectF, QSize, arg0):
    """ sourceTransform(QRectF, QSize, QOpenGLTextureBlitter.Origin) -> QMatrix3x3 """
    return None

  def supportsExternalOESTarget(self):
    """ supportsExternalOESTarget(self) -> bool """
    return None

  def targetTransform(QRectF, QRect):
    """ targetTransform(QRectF, QRect) -> QMatrix4x4 """
    return None

class QOpenGLTimeMonitor(QObject):
  """ QOpenGLTimeMonitor(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def create(self):
    """ create(self) -> bool """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCreated(self):
    """ isCreated(self) -> bool """
    return None

  def isResultAvailable(self):
    """ isResultAvailable(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectIds(self):
    """ objectIds(self) -> List[int] """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def recordSample(self):
    """ recordSample(self) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) """
    pass

  def sampleCount(self):
    """ sampleCount(self) -> int """
    return 1

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSampleCount(self, int):
    """ setSampleCount(self, int) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def waitForIntervals(self):
    """ waitForIntervals(self) -> List[int] """
    return 1

  def waitForSamples(self):
    """ waitForSamples(self) -> List[int] """
    return 1

class QOpenGLTimerQuery(QObject):
  """ QOpenGLTimerQuery(parent: QObject = None) """

  def begin(self):
    """ begin(self) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def create(self):
    """ create(self) -> bool """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def end(self):
    """ end(self) """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCreated(self):
    """ isCreated(self) -> bool """
    return None

  def isResultAvailable(self):
    """ isResultAvailable(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectId(self):
    """ objectId(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def recordTimestamp(self):
    """ recordTimestamp(self) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def waitForResult(self):
    """ waitForResult(self) -> int """
    return 1

  def waitForTimestamp(self):
    """ waitForTimestamp(self) -> int """
    return 1

class QOpenGLVersionProfile(simplewrapper):
  """ QOpenGLVersionProfile()
  QOpenGLVersionProfile(QSurfaceFormat)
  QOpenGLVersionProfile(QOpenGLVersionProfile) """

  def hasProfiles(self):
    """ hasProfiles(self) -> bool """
    return None

  def isLegacyVersion(self):
    """ isLegacyVersion(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def profile(self):
    """ profile(self) -> QSurfaceFormat.OpenGLContextProfile """
    return None

  def setProfile(self, arg0):
    """ setProfile(self, QSurfaceFormat.OpenGLContextProfile) """
    pass

  def setVersion(self, int, int):
    """ setVersion(self, int, int) """
    pass

  def version(self):
    """ version(self) -> Tuple[int, int] """
    return 1

class QOpenGLVertexArrayObject(QObject):
  """ QOpenGLVertexArrayObject(parent: QObject = None) """

  class Binder(simplewrapper):
    """ QOpenGLVertexArrayObject.Binder(QOpenGLVertexArrayObject) """

    def rebind(self):
      """ rebind(self) """
      pass

    def release(self):
      """ release(self) """
      pass

  def bind(self):
    """ bind(self) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def create(self):
    """ create(self) -> bool """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isCreated(self):
    """ isCreated(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectId(self):
    """ objectId(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def release(self):
    """ release(self) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QOpenGLWindow(QPaintDeviceWindow):
  """ QOpenGLWindow(updateBehavior: QOpenGLWindow.UpdateBehavior = QOpenGLWindow.NoPartialUpdate, parent: QWindow = None)
  QOpenGLWindow(QOpenGLContext, updateBehavior: QOpenGLWindow.UpdateBehavior = QOpenGLWindow.NoPartialUpdate, parent: QWindow = None) """

  class AncestorMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AutomaticVisibility = None
  ExcludeTransients = None
  FullScreen = None
  Hidden = None
  IncludeTransients = None
  Maximized = None
  MetalSurface = None
  Minimized = None
  NoPartialUpdate = None
  Offscreen = None
  OpenGLSurface = None
  OpenVGSurface = None
  PartialUpdateBlend = None
  PartialUpdateBlit = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  RasterGLSurface = None
  RasterSurface = None
  class UpdateBehavior(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Visibility(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  VulkanSurface = None
  Window = None
  Windowed = None

  def activeChanged(self):
    """ activeChanged(self) [signal] """
    pass

  def alert(self, int):
    """ alert(self, int) """
    pass

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) -> bool """
    return None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentOrientation(self):
    """ contentOrientation(self) -> Qt.ScreenOrientation """
    return None

  def contentOrientationChanged(self, arg0):
    """ contentOrientationChanged(self, Qt.ScreenOrientation) [signal] """
    pass

  def context(self):
    """ context(self) -> QOpenGLContext """
    return None

  def create(self):
    """ create(self) """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customEvent():
    pass

  def defaultFramebufferObject(self):
    """ defaultFramebufferObject(self) -> int """
    return 1

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def doneCurrent(self):
    """ doneCurrent(self) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event():
    pass

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exposeEvent():
    pass

  def filePath(self):
    """ filePath(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> Qt.WindowFlags """
    return None

  def focusInEvent():
    pass

  def focusObject(self):
    """ focusObject(self) -> QObject """
    return None

  def focusObjectChanged(self, QObject):
    """ focusObjectChanged(self, QObject) [signal] """
    pass

  def focusOutEvent():
    pass

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameMargins(self):
    """ frameMargins(self) -> QMargins """
    return None

  def framePosition(self):
    """ framePosition(self) -> QPoint """
    return 1

  def frameSwapped(self):
    """ frameSwapped(self) [signal] """
    pass

  def fromWinId(arg0):
    """ fromWinId(sip.voidptr) -> QWindow """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def grabFramebuffer(self):
    """ grabFramebuffer(self) -> QImage """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightChanged(self, int):
    """ heightChanged(self, int) [signal] """
    pass

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def initializeGL(self):
    """ initializeGL(self) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def isAncestorOf(self, QWindow, arg0=None):
    """ isAncestorOf(self, QWindow, mode: QWindow.AncestorMode = QWindow.IncludeTransients) -> bool """
    return None

  def isExposed(self):
    """ isExposed(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTopLevel(self):
    """ isTopLevel(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def makeCurrent(self):
    """ makeCurrent(self) """
    pass

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumHeightChanged(self, int):
    """ maximumHeightChanged(self, int) [signal] """
    pass

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def maximumWidthChanged(self, int):
    """ maximumWidthChanged(self, int) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumHeightChanged(self, int):
    """ minimumHeightChanged(self, int) [signal] """
    pass

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def minimumWidthChanged(self, int):
    """ minimumWidthChanged(self, int) [signal] """
    pass

  def modality(self):
    """ modality(self) -> Qt.WindowModality """
    return None

  def modalityChanged(self, arg0):
    """ modalityChanged(self, Qt.WindowModality) [signal] """
    pass

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self, float):
    """ opacityChanged(self, float) [signal] """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent(self, QPaintEvent):
    """ paintEvent(self, QPaintEvent) """
    pass

  def paintGL(self):
    """ paintGL(self) """
    pass

  def paintOverGL(self):
    """ paintOverGL(self) """
    pass

  def paintUnderGL(self):
    """ paintUnderGL(self) """
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def parent(self):
    """ parent(self) -> QWindow
    parent(self, QWindow.AncestorMode) -> QWindow """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def position(self):
    """ position(self) -> QPoint """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reportContentOrientationChange(self, arg0):
    """ reportContentOrientationChange(self, Qt.ScreenOrientation) """
    pass

  def requestActivate(self):
    """ requestActivate(self) """
    pass

  def requestUpdate(self):
    """ requestUpdate(self) """
    pass

  def requestedFormat(self):
    """ requestedFormat(self) -> QSurfaceFormat """
    return None

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def resizeGL(self, int, int):
    """ resizeGL(self, int, int) """
    pass

  def screen(self):
    """ screen(self) -> QScreen """
    return None

  def screenChanged(self, QScreen):
    """ screenChanged(self, QScreen) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBaseSize(self, QSize):
    """ setBaseSize(self, QSize) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setFilePath(self, str):
    """ setFilePath(self, str) """
    pass

  def setFlag():
    """ setFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setFormat(self, QSurfaceFormat):
    """ setFormat(self, QSurfaceFormat) """
    pass

  def setFramePosition(self, QPoint):
    """ setFramePosition(self, QPoint) """
    pass

  def setGeometry(self, int, int, int, int):
    """ setGeometry(self, int, int, int, int)
    setGeometry(self, QRect) """
    pass

  def setHeight(self, int):
    """ setHeight(self, int) """
    pass

  def setIcon(self, QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setKeyboardGrabEnabled(self, bool):
    """ setKeyboardGrabEnabled(self, bool) -> bool """
    return None

  def setMask(self, QRegion):
    """ setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, QSize):
    """ setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, QSize):
    """ setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModality(self, arg0):
    """ setModality(self, Qt.WindowModality) """
    pass

  def setMouseGrabEnabled(self, bool):
    """ setMouseGrabEnabled(self, bool) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setParent(self, QWindow):
    """ setParent(self, QWindow) """
    pass

  def setPosition(self, QPoint):
    """ setPosition(self, QPoint)
    setPosition(self, int, int) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setScreen(self, QScreen):
    """ setScreen(self, QScreen) """
    pass

  def setSizeIncrement(self, QSize):
    """ setSizeIncrement(self, QSize) """
    pass

  def setSurfaceType(self, arg0):
    """ setSurfaceType(self, QSurface.SurfaceType) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def setTransientParent(self, QWindow):
    """ setTransientParent(self, QWindow) """
    pass

  def setVisibility(self, arg0):
    """ setVisibility(self, QWindow.Visibility) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWidth(self, int):
    """ setWidth(self, int) """
    pass

  def setWindowState(self, arg0):
    """ setWindowState(self, Qt.WindowState) """
    pass

  def setWindowStates(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowStates(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setX(self, int):
    """ setX(self, int) """
    pass

  def setY(self, int):
    """ setY(self, int) """
    pass

  def shareContext(self):
    """ shareContext(self) -> QOpenGLContext """
    return None

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsOpenGL(self):
    """ supportsOpenGL(self) -> bool """
    return None

  def surfaceClass(self):
    """ surfaceClass(self) -> QSurface.SurfaceClass """
    return None

  def surfaceType(self):
    """ surfaceType(self) -> QSurface.SurfaceType """
    return None

  def tabletEvent():
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def touchEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transientParent(self):
    """ transientParent(self) -> QWindow """
    return None

  def type(self):
    """ type(self) -> Qt.WindowType """
    return None

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, QRect):
    """ update(self, QRect)
    update(self, QRegion)
    update(self) """
    pass

  def updateBehavior(self):
    """ updateBehavior(self) -> QOpenGLWindow.UpdateBehavior """
    return None

  def visibility(self):
    """ visibility(self) -> QWindow.Visibility """
    return None

  def visibilityChanged(self, arg0):
    """ visibilityChanged(self, QWindow.Visibility) [signal] """
    pass

  def visibleChanged(self, bool):
    """ visibleChanged(self, bool) [signal] """
    pass

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthChanged(self, int):
    """ widthChanged(self, int) [signal] """
    pass

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def windowState(self):
    """ windowState(self) -> Qt.WindowState """
    return None

  def windowStateChanged(self, arg0):
    """ windowStateChanged(self, Qt.WindowState) [signal] """
    pass

  def windowStates(self):
    """ windowStates(self) -> Qt.WindowStates """
    return None

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def x(self):
    """ x(self) -> int """
    return 1

  def xChanged(self, int):
    """ xChanged(self, int) [signal] """
    pass

  def y(self):
    """ y(self) -> int """
    return 1

  def yChanged(self, int):
    """ yChanged(self, int) [signal] """
    pass

class QPageLayout(simplewrapper):
  """ QPageLayout()
  QPageLayout(QPageSize, QPageLayout.Orientation, QMarginsF, units: QPageLayout.Unit = QPageLayout.Point, minMargins: QMarginsF = QMarginsF(0,0,0,0))
  QPageLayout(QPageLayout) """

  Cicero = None
  Didot = None
  FullPageMode = None
  Inch = None
  Landscape = None
  Millimeter = None

  class Mode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Orientation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Pica = None
  Point = None
  Portrait = None
  StandardMode = None

  class Unit(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def fullRect(self):
    """ fullRect(self) -> QRectF
    fullRect(self, QPageLayout.Unit) -> QRectF """
    return None

  def fullRectPixels(self, int):
    """ fullRectPixels(self, int) -> QRect """
    return None

  def fullRectPoints(self):
    """ fullRectPoints(self) -> QRect """
    return None

  def isEquivalentTo(self, QPageLayout):
    """ isEquivalentTo(self, QPageLayout) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def margins(self):
    """ margins(self) -> QMarginsF
    margins(self, QPageLayout.Unit) -> QMarginsF """
    return None

  def marginsPixels(self, int):
    """ marginsPixels(self, int) -> QMargins """
    return None

  def marginsPoints(self):
    """ marginsPoints(self) -> QMargins """
    return None

  def maximumMargins(self):
    """ maximumMargins(self) -> QMarginsF """
    return None

  def minimumMargins(self):
    """ minimumMargins(self) -> QMarginsF """
    return None

  def mode(self):
    """ mode(self) -> QPageLayout.Mode """
    return None

  def orientation(self):
    """ orientation(self) -> QPageLayout.Orientation """
    return None

  def pageSize(self):
    """ pageSize(self) -> QPageSize """
    return None

  def paintRect(self):
    """ paintRect(self) -> QRectF
    paintRect(self, QPageLayout.Unit) -> QRectF """
    return None

  def paintRectPixels(self, int):
    """ paintRectPixels(self, int) -> QRect """
    return None

  def paintRectPoints(self):
    """ paintRectPoints(self) -> QRect """
    return None

  def setBottomMargin(self, float):
    """ setBottomMargin(self, float) -> bool """
    return None

  def setLeftMargin(self, float):
    """ setLeftMargin(self, float) -> bool """
    return None

  def setMargins(self, QMarginsF):
    """ setMargins(self, QMarginsF) -> bool """
    return None

  def setMinimumMargins(self, QMarginsF):
    """ setMinimumMargins(self, QMarginsF) """
    pass

  def setMode(self, arg0):
    """ setMode(self, QPageLayout.Mode) """
    pass

  def setOrientation(self, arg0):
    """ setOrientation(self, QPageLayout.Orientation) """
    pass

  def setPageSize():
    """ setPageSize(self, QPageSize, minMargins: QMarginsF = QMarginsF(0,0,0,0)) """
    pass

  def setRightMargin(self, float):
    """ setRightMargin(self, float) -> bool """
    return None

  def setTopMargin(self, float):
    """ setTopMargin(self, float) -> bool """
    return None

  def setUnits(self, arg0):
    """ setUnits(self, QPageLayout.Unit) """
    pass

  def swap(self, QPageLayout):
    """ swap(self, QPageLayout) """
    pass

  def units(self):
    """ units(self) -> QPageLayout.Unit """
    return None

class QPageSize(simplewrapper):
  """ QPageSize()
  QPageSize(QPageSize.PageSizeId)
  QPageSize(QSize, name: str = '', matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch)
  QPageSize(QSizeF, QPageSize.Unit, name: str = '', matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch)
  QPageSize(QPageSize) """

  A0 = None
  A1 = None
  A10 = None
  A2 = None
  A3 = None
  A3Extra = None
  A4 = None
  A4Extra = None
  A4Plus = None
  A4Small = None
  A5 = None
  A5Extra = None
  A6 = None
  A7 = None
  A8 = None
  A9 = None
  AnsiA = None
  AnsiB = None
  AnsiC = None
  AnsiD = None
  AnsiE = None
  ArchA = None
  ArchB = None
  ArchC = None
  ArchD = None
  ArchE = None
  B0 = None
  B1 = None
  B10 = None
  B2 = None
  B3 = None
  B4 = None
  B5 = None
  B5Extra = None
  B6 = None
  B7 = None
  B8 = None
  B9 = None
  C5E = None
  Cicero = None
  Comm10E = None
  Custom = None
  DLE = None
  Didot = None
  DoublePostcard = None
  Envelope10 = None
  Envelope11 = None
  Envelope12 = None
  Envelope14 = None
  Envelope9 = None
  EnvelopeB4 = None
  EnvelopeB5 = None
  EnvelopeB6 = None
  EnvelopeC0 = None
  EnvelopeC1 = None
  EnvelopeC2 = None
  EnvelopeC3 = None
  EnvelopeC4 = None
  EnvelopeC5 = None
  EnvelopeC6 = None
  EnvelopeC65 = None
  EnvelopeC7 = None
  EnvelopeChou3 = None
  EnvelopeChou4 = None
  EnvelopeDL = None
  EnvelopeInvite = None
  EnvelopeItalian = None
  EnvelopeKaku2 = None
  EnvelopeKaku3 = None
  EnvelopeMonarch = None
  EnvelopePersonal = None
  EnvelopePrc1 = None
  EnvelopePrc10 = None
  EnvelopePrc2 = None
  EnvelopePrc3 = None
  EnvelopePrc4 = None
  EnvelopePrc5 = None
  EnvelopePrc6 = None
  EnvelopePrc7 = None
  EnvelopePrc8 = None
  EnvelopePrc9 = None
  EnvelopeYou4 = None
  ExactMatch = None
  Executive = None
  ExecutiveStandard = None
  FanFoldGerman = None
  FanFoldGermanLegal = None
  FanFoldUS = None
  Folio = None
  FuzzyMatch = None
  FuzzyOrientationMatch = None
  Imperial10x11 = None
  Imperial10x13 = None
  Imperial10x14 = None
  Imperial12x11 = None
  Imperial15x11 = None
  Imperial7x9 = None
  Imperial8x10 = None
  Imperial9x11 = None
  Imperial9x12 = None
  Inch = None
  JisB0 = None
  JisB1 = None
  JisB10 = None
  JisB2 = None
  JisB3 = None
  JisB4 = None
  JisB5 = None
  JisB6 = None
  JisB7 = None
  JisB8 = None
  JisB9 = None
  LastPageSize = None
  Ledger = None
  Legal = None
  LegalExtra = None
  Letter = None
  LetterExtra = None
  LetterPlus = None
  LetterSmall = None
  Millimeter = None
  NPageSize = None
  NPaperSize = None
  Note = None

  class PageSizeId(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Pica = None
  Point = None
  Postcard = None
  Prc16K = None
  Prc32K = None
  Prc32KBig = None
  Quarto = None

  class SizeMatchPolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Statement = None
  SuperA = None
  SuperB = None
  Tabloid = None
  TabloidExtra = None

  class Unit(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def definitionSize(self):
    """ definitionSize(self) -> QSizeF
    definitionSize(QPageSize.PageSizeId) -> QSizeF """
    return None

  def definitionUnits(self):
    """ definitionUnits(self) -> QPageSize.Unit
    definitionUnits(QPageSize.PageSizeId) -> QPageSize.Unit """
    return None

  def id(self):
    """ id(self) -> QPageSize.PageSizeId
    id(QSize, matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch) -> QPageSize.PageSizeId
    id(QSizeF, QPageSize.Unit, matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch) -> QPageSize.PageSizeId
    id(int) -> QPageSize.PageSizeId """
    return None

  def isEquivalentTo(self, QPageSize):
    """ isEquivalentTo(self, QPageSize) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def key(self):
    """ key(self) -> str
    key(QPageSize.PageSizeId) -> str """
    return ""

  def name(self):
    """ name(self) -> str
    name(QPageSize.PageSizeId) -> str """
    return ""

  def rect(self, arg0):
    """ rect(self, QPageSize.Unit) -> QRectF """
    return None

  def rectPixels(self, int):
    """ rectPixels(self, int) -> QRect """
    return None

  def rectPoints(self):
    """ rectPoints(self) -> QRect """
    return None

  def size(self, arg0):
    """ size(self, QPageSize.Unit) -> QSizeF
    size(QPageSize.PageSizeId, QPageSize.Unit) -> QSizeF """
    return None

  def sizePixels(self, int):
    """ sizePixels(self, int) -> QSize
    sizePixels(QPageSize.PageSizeId, int) -> QSize """
    return None

  def sizePoints(self):
    """ sizePoints(self) -> QSize
    sizePoints(QPageSize.PageSizeId) -> QSize """
    return None

  def swap(self, QPageSize):
    """ swap(self, QPageSize) """
    pass

  def windowsId(self):
    """ windowsId(self) -> int
    windowsId(QPageSize.PageSizeId) -> int """
    return 1

class QPagedPaintDevice(QPaintDevice):
  """ QPagedPaintDevice() """

  A0 = None
  A1 = None
  A10 = None
  A2 = None
  A3 = None
  A3Extra = None
  A4 = None
  A4Extra = None
  A4Plus = None
  A4Small = None
  A5 = None
  A5Extra = None
  A6 = None
  A7 = None
  A8 = None
  A9 = None
  AnsiA = None
  AnsiB = None
  AnsiC = None
  AnsiD = None
  AnsiE = None
  ArchA = None
  ArchB = None
  ArchC = None
  ArchD = None
  ArchE = None
  B0 = None
  B1 = None
  B10 = None
  B2 = None
  B3 = None
  B4 = None
  B5 = None
  B5Extra = None
  B6 = None
  B7 = None
  B8 = None
  B9 = None
  C5E = None
  Comm10E = None
  Custom = None
  DLE = None
  DoublePostcard = None
  Envelope10 = None
  Envelope11 = None
  Envelope12 = None
  Envelope14 = None
  Envelope9 = None
  EnvelopeB4 = None
  EnvelopeB5 = None
  EnvelopeB6 = None
  EnvelopeC0 = None
  EnvelopeC1 = None
  EnvelopeC2 = None
  EnvelopeC3 = None
  EnvelopeC4 = None
  EnvelopeC5 = None
  EnvelopeC6 = None
  EnvelopeC65 = None
  EnvelopeC7 = None
  EnvelopeChou3 = None
  EnvelopeChou4 = None
  EnvelopeDL = None
  EnvelopeInvite = None
  EnvelopeItalian = None
  EnvelopeKaku2 = None
  EnvelopeKaku3 = None
  EnvelopeMonarch = None
  EnvelopePersonal = None
  EnvelopePrc1 = None
  EnvelopePrc10 = None
  EnvelopePrc2 = None
  EnvelopePrc3 = None
  EnvelopePrc4 = None
  EnvelopePrc5 = None
  EnvelopePrc6 = None
  EnvelopePrc7 = None
  EnvelopePrc8 = None
  EnvelopePrc9 = None
  EnvelopeYou4 = None
  Executive = None
  ExecutiveStandard = None
  FanFoldGerman = None
  FanFoldGermanLegal = None
  FanFoldUS = None
  Folio = None
  Imperial10x11 = None
  Imperial10x13 = None
  Imperial10x14 = None
  Imperial12x11 = None
  Imperial15x11 = None
  Imperial7x9 = None
  Imperial8x10 = None
  Imperial9x11 = None
  Imperial9x12 = None
  JisB0 = None
  JisB1 = None
  JisB10 = None
  JisB2 = None
  JisB3 = None
  JisB4 = None
  JisB5 = None
  JisB6 = None
  JisB7 = None
  JisB8 = None
  JisB9 = None
  LastPageSize = None
  Ledger = None
  Legal = None
  LegalExtra = None
  Letter = None
  LetterExtra = None
  LetterPlus = None
  LetterSmall = None

  class Margins(simplewrapper):
    """ QPagedPaintDevice.Margins()
    QPagedPaintDevice.Margins(QPagedPaintDevice.Margins) """

    bottom = None
    left = None
    right = None
    top = None

  NPaperSize = None
  Note = None

  class PageSize(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PdfVersion(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PdfVersion_1_4 = None
  PdfVersion_1_6 = None
  PdfVersion_A1b = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Postcard = None
  Prc16K = None
  Prc32K = None
  Prc32KBig = None
  Quarto = None
  Statement = None
  SuperA = None
  SuperB = None
  Tabloid = None
  TabloidExtra = None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def depth(self):
    """ depth(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def margins(self):
    """ margins(self) -> QPagedPaintDevice.Margins """
    return 1

  def metric():
    pass

  def newPage(self):
    """ newPage(self) -> bool """
    return None

  def pageLayout(self):
    """ pageLayout(self) -> QPageLayout """
    return None

  def pageSize(self):
    """ pageSize(self) -> QPagedPaintDevice.PageSize """
    return 1

  def pageSizeMM(self):
    """ pageSizeMM(self) -> QSizeF """
    return None

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def setMargins(self, arg0):
    """ setMargins(self, QPagedPaintDevice.Margins) """
    pass

  def setPageLayout(self, QPageLayout):
    """ setPageLayout(self, QPageLayout) -> bool """
    return None

  def setPageMargins(self, QMarginsF):
    """ setPageMargins(self, QMarginsF) -> bool
    setPageMargins(self, QMarginsF, QPageLayout.Unit) -> bool """
    return None

  def setPageOrientation(self, arg0):
    """ setPageOrientation(self, QPageLayout.Orientation) -> bool """
    return None

  def setPageSize(self, arg0):
    """ setPageSize(self, QPagedPaintDevice.PageSize)
    setPageSize(self, QPageSize) -> bool """
    pass

  def setPageSizeMM(self, QSizeF):
    """ setPageSizeMM(self, QSizeF) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QPaintDevice(simplewrapper):
  """ QPaintDevice() """

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def depth(self):
    """ depth(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QPaintDeviceWindow(QWindow):

  AutomaticVisibility = None
  ExcludeTransients = None
  FullScreen = None
  Hidden = None
  IncludeTransients = None
  Maximized = None
  MetalSurface = None
  Minimized = None
  Offscreen = None
  OpenGLSurface = None
  OpenVGSurface = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  RasterGLSurface = None
  RasterSurface = None
  VulkanSurface = None
  Window = None
  Windowed = None

  def activeChanged(self):
    """ activeChanged(self) [signal] """
    pass

  def alert(self, int):
    """ alert(self, int) """
    pass

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) -> bool """
    return None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentOrientation(self):
    """ contentOrientation(self) -> Qt.ScreenOrientation """
    return None

  def contentOrientationChanged(self, arg0):
    """ contentOrientationChanged(self, Qt.ScreenOrientation) [signal] """
    pass

  def create(self):
    """ create(self) """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exposeEvent(self, QExposeEvent):
    """ exposeEvent(self, QExposeEvent) """
    pass

  def filePath(self):
    """ filePath(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> Qt.WindowFlags """
    return None

  def focusInEvent(self, QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusObject(self):
    """ focusObject(self) -> QObject """
    return None

  def focusObjectChanged(self, QObject):
    """ focusObjectChanged(self, QObject) [signal] """
    pass

  def focusOutEvent(self, QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameMargins(self):
    """ frameMargins(self) -> QMargins """
    return None

  def framePosition(self):
    """ framePosition(self) -> QPoint """
    return 1

  def fromWinId(arg0):
    """ fromWinId(sip.voidptr) -> QWindow """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightChanged(self, int):
    """ heightChanged(self, int) [signal] """
    pass

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def isAncestorOf(self, QWindow, arg0=None):
    """ isAncestorOf(self, QWindow, mode: QWindow.AncestorMode = QWindow.IncludeTransients) -> bool """
    return None

  def isExposed(self):
    """ isExposed(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTopLevel(self):
    """ isTopLevel(self) -> bool """
    return None

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent(self, QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumHeightChanged(self, int):
    """ maximumHeightChanged(self, int) [signal] """
    pass

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def maximumWidthChanged(self, int):
    """ maximumWidthChanged(self, int) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumHeightChanged(self, int):
    """ minimumHeightChanged(self, int) [signal] """
    pass

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def minimumWidthChanged(self, int):
    """ minimumWidthChanged(self, int) [signal] """
    pass

  def modality(self):
    """ modality(self) -> Qt.WindowModality """
    return None

  def modalityChanged(self, arg0):
    """ modalityChanged(self, Qt.WindowModality) [signal] """
    pass

  def mouseDoubleClickEvent(self, QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseMoveEvent(self, QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def moveEvent(self, QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self, float):
    """ opacityChanged(self, float) [signal] """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def parent(self):
    """ parent(self) -> QWindow
    parent(self, QWindow.AncestorMode) -> QWindow """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def position(self):
    """ position(self) -> QPoint """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reportContentOrientationChange(self, arg0):
    """ reportContentOrientationChange(self, Qt.ScreenOrientation) """
    pass

  def requestActivate(self):
    """ requestActivate(self) """
    pass

  def requestUpdate(self):
    """ requestUpdate(self) """
    pass

  def requestedFormat(self):
    """ requestedFormat(self) -> QSurfaceFormat """
    return None

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def screen(self):
    """ screen(self) -> QScreen """
    return None

  def screenChanged(self, QScreen):
    """ screenChanged(self, QScreen) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBaseSize(self, QSize):
    """ setBaseSize(self, QSize) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setFilePath(self, str):
    """ setFilePath(self, str) """
    pass

  def setFlag():
    """ setFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setFormat(self, QSurfaceFormat):
    """ setFormat(self, QSurfaceFormat) """
    pass

  def setFramePosition(self, QPoint):
    """ setFramePosition(self, QPoint) """
    pass

  def setGeometry(self, int, int, int, int):
    """ setGeometry(self, int, int, int, int)
    setGeometry(self, QRect) """
    pass

  def setHeight(self, int):
    """ setHeight(self, int) """
    pass

  def setIcon(self, QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setKeyboardGrabEnabled(self, bool):
    """ setKeyboardGrabEnabled(self, bool) -> bool """
    return None

  def setMask(self, QRegion):
    """ setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, QSize):
    """ setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, QSize):
    """ setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModality(self, arg0):
    """ setModality(self, Qt.WindowModality) """
    pass

  def setMouseGrabEnabled(self, bool):
    """ setMouseGrabEnabled(self, bool) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setParent(self, QWindow):
    """ setParent(self, QWindow) """
    pass

  def setPosition(self, QPoint):
    """ setPosition(self, QPoint)
    setPosition(self, int, int) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setScreen(self, QScreen):
    """ setScreen(self, QScreen) """
    pass

  def setSizeIncrement(self, QSize):
    """ setSizeIncrement(self, QSize) """
    pass

  def setSurfaceType(self, arg0):
    """ setSurfaceType(self, QSurface.SurfaceType) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def setTransientParent(self, QWindow):
    """ setTransientParent(self, QWindow) """
    pass

  def setVisibility(self, arg0):
    """ setVisibility(self, QWindow.Visibility) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWidth(self, int):
    """ setWidth(self, int) """
    pass

  def setWindowState(self, arg0):
    """ setWindowState(self, Qt.WindowState) """
    pass

  def setWindowStates(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowStates(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setX(self, int):
    """ setX(self, int) """
    pass

  def setY(self, int):
    """ setY(self, int) """
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsOpenGL(self):
    """ supportsOpenGL(self) -> bool """
    return None

  def surfaceClass(self):
    """ surfaceClass(self) -> QSurface.SurfaceClass """
    return None

  def surfaceType(self):
    """ surfaceType(self) -> QSurface.SurfaceType """
    return None

  def tabletEvent(self, QTabletEvent):
    """ tabletEvent(self, QTabletEvent) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def touchEvent(self, QTouchEvent):
    """ touchEvent(self, QTouchEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transientParent(self):
    """ transientParent(self) -> QWindow """
    return None

  def type(self):
    """ type(self) -> Qt.WindowType """
    return None

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, QRect):
    """ update(self, QRect)
    update(self, QRegion)
    update(self) """
    pass

  def visibility(self):
    """ visibility(self) -> QWindow.Visibility """
    return None

  def visibilityChanged(self, arg0):
    """ visibilityChanged(self, QWindow.Visibility) [signal] """
    pass

  def visibleChanged(self, bool):
    """ visibleChanged(self, bool) [signal] """
    pass

  def wheelEvent(self, QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthChanged(self, int):
    """ widthChanged(self, int) [signal] """
    pass

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def windowState(self):
    """ windowState(self) -> Qt.WindowState """
    return None

  def windowStateChanged(self, arg0):
    """ windowStateChanged(self, Qt.WindowState) [signal] """
    pass

  def windowStates(self):
    """ windowStates(self) -> Qt.WindowStates """
    return None

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def x(self):
    """ x(self) -> int """
    return 1

  def xChanged(self, int):
    """ xChanged(self, int) [signal] """
    pass

  def y(self):
    """ y(self) -> int """
    return 1

  def yChanged(self, int):
    """ yChanged(self, int) [signal] """
    pass

class QPaintEngine(simplewrapper):
  """ QPaintEngine(features: Union[QPaintEngine.PaintEngineFeatures, QPaintEngine.PaintEngineFeature] = QPaintEngine.PaintEngineFeatures()) """

  AllDirty = None
  AllFeatures = None
  AlphaBlend = None
  Antialiasing = None
  BlendModes = None
  Blitter = None
  BrushStroke = None
  ConicalGradientFill = None
  ConstantOpacity = None
  ConvexMode = None
  CoreGraphics = None
  Direct2D = None
  Direct3D = None
  DirtyBackground = None
  DirtyBackgroundMode = None
  DirtyBrush = None
  DirtyBrushOrigin = None
  DirtyClipEnabled = None
  DirtyClipPath = None
  DirtyClipRegion = None
  DirtyCompositionMode = None

  class DirtyFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class DirtyFlags(simplewrapper):
    """ QPaintEngine.DirtyFlags()
    QPaintEngine.DirtyFlags(Union[QPaintEngine.DirtyFlags, QPaintEngine.DirtyFlag])
    QPaintEngine.DirtyFlags(QPaintEngine.DirtyFlags) """

    pass

  DirtyFont = None
  DirtyHints = None
  DirtyOpacity = None
  DirtyPen = None
  DirtyTransform = None
  LinearGradientFill = None
  MacPrinter = None
  MaskedBrush = None
  MaxUser = None
  ObjectBoundingModeGradients = None
  OddEvenMode = None
  OpenGL = None
  OpenGL2 = None
  OpenVG = None
  PaintBuffer = None

  class PaintEngineFeature(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PaintEngineFeatures(simplewrapper):
    """ QPaintEngine.PaintEngineFeatures()
    QPaintEngine.PaintEngineFeatures(Union[QPaintEngine.PaintEngineFeatures, QPaintEngine.PaintEngineFeature])
    QPaintEngine.PaintEngineFeatures(QPaintEngine.PaintEngineFeatures) """

    pass

  PaintOutsidePaintEvent = None
  PainterPaths = None
  PatternBrush = None
  PatternTransform = None
  Pdf = None
  PerspectiveTransform = None
  Picture = None
  PixmapTransform = None

  class PolygonDrawMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PolylineMode = None
  PorterDuff = None
  PostScript = None
  PrimitiveTransform = None
  QWindowSystem = None
  QuickDraw = None
  RadialGradientFill = None
  Raster = None
  RasterOpModes = None
  SVG = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  User = None
  WindingMode = None
  Windows = None
  X11 = None

  def begin(self, QPaintDevice):
    """ begin(self, QPaintDevice) -> bool """
    return None

  def drawEllipse(self, QRectF):
    """ drawEllipse(self, QRectF)
    drawEllipse(self, QRect) """
    pass

  def drawImage():
    """ drawImage(self, QRectF, QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) """
    pass

  def drawLines(self, QLine):
    """ drawLines(self, QLine)
    drawLines(self, QLineF) """
    pass

  def drawPath(self, QPainterPath):
    """ drawPath(self, QPainterPath) """
    pass

  def drawPixmap(self, QRectF, QPixmap, QRectF):
    """ drawPixmap(self, QRectF, QPixmap, QRectF) """
    pass

  def drawPoints(self, UnionQPointF=None, QPoint=None):
    """ drawPoints(self, Union[QPointF, QPoint])
    drawPoints(self, QPoint) """
    pass

  def drawPolygon(self, UnionQPointF=None, QPoint=None, QPaintEngine.PolygonDrawMode=None):
    """ drawPolygon(self, Union[QPointF, QPoint], QPaintEngine.PolygonDrawMode)
    drawPolygon(self, QPoint, QPaintEngine.PolygonDrawMode) """
    pass

  def drawRects(self, QRect):
    """ drawRects(self, QRect)
    drawRects(self, QRectF) """
    pass

  def drawTextItem(self, UnionQPointF=None, QPoint=None, QTextItem=None):
    """ drawTextItem(self, Union[QPointF, QPoint], QTextItem) """
    pass

  def drawTiledPixmap(self, QRectF, QPixmap, UnionQPointF=None, QPoint=None):
    """ drawTiledPixmap(self, QRectF, QPixmap, Union[QPointF, QPoint]) """
    pass

  def end(self):
    """ end(self) -> bool """
    return None

  def hasFeature(self, UnionQPaintEngine.PaintEngineFeatures=None, QPaintEngine.PaintEngineFeature=None):
    """ hasFeature(self, Union[QPaintEngine.PaintEngineFeatures, QPaintEngine.PaintEngineFeature]) -> bool """
    return None

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def paintDevice(self):
    """ paintDevice(self) -> QPaintDevice """
    return 1

  def painter(self):
    """ painter(self) -> QPainter """
    return 1

  def setActive(self, bool):
    """ setActive(self, bool) """
    pass

  def setPaintDevice(self, QPaintDevice):
    """ setPaintDevice(self, QPaintDevice) """
    pass

  def type(self):
    """ type(self) -> QPaintEngine.Type """
    return 1

  def updateState(self, QPaintEngineState):
    """ updateState(self, QPaintEngineState) """
    pass

class QPaintEngineState(simplewrapper):
  """ QPaintEngineState()
  QPaintEngineState(QPaintEngineState) """

  def backgroundBrush(self):
    """ backgroundBrush(self) -> QBrush """
    return None

  def backgroundMode(self):
    """ backgroundMode(self) -> Qt.BGMode """
    return None

  def brush(self):
    """ brush(self) -> QBrush """
    return None

  def brushNeedsResolving(self):
    """ brushNeedsResolving(self) -> bool """
    return None

  def brushOrigin(self):
    """ brushOrigin(self) -> QPointF """
    return 1

  def clipOperation(self):
    """ clipOperation(self) -> Qt.ClipOperation """
    return None

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return 1

  def clipRegion(self):
    """ clipRegion(self) -> QRegion """
    return None

  def compositionMode(self):
    """ compositionMode(self) -> QPainter.CompositionMode """
    return 1

  def font(self):
    """ font(self) -> QFont """
    return None

  def isClipEnabled(self):
    """ isClipEnabled(self) -> bool """
    return None

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def painter(self):
    """ painter(self) -> QPainter """
    return 1

  def pen(self):
    """ pen(self) -> QPen """
    return None

  def penNeedsResolving(self):
    """ penNeedsResolving(self) -> bool """
    return None

  def renderHints(self):
    """ renderHints(self) -> QPainter.RenderHints """
    return 1

  def state(self):
    """ state(self) -> QPaintEngine.DirtyFlags """
    return 1

  def transform(self):
    """ transform(self) -> QTransform """
    return None

class QPaintEvent(QEvent):
  """ QPaintEvent(QRegion)
  QPaintEvent(QRect)
  QPaintEvent(QPaintEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def region(self):
    """ region(self) -> QRegion """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QPainter(simplewrapper):
  """ QPainter()
  QPainter(QPaintDevice) """

  Antialiasing = None

  class CompositionMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CompositionMode_Clear = None
  CompositionMode_ColorBurn = None
  CompositionMode_ColorDodge = None
  CompositionMode_Darken = None
  CompositionMode_Destination = None
  CompositionMode_DestinationAtop = None
  CompositionMode_DestinationIn = None
  CompositionMode_DestinationOut = None
  CompositionMode_DestinationOver = None
  CompositionMode_Difference = None
  CompositionMode_Exclusion = None
  CompositionMode_HardLight = None
  CompositionMode_Lighten = None
  CompositionMode_Multiply = None
  CompositionMode_Overlay = None
  CompositionMode_Plus = None
  CompositionMode_Screen = None
  CompositionMode_SoftLight = None
  CompositionMode_Source = None
  CompositionMode_SourceAtop = None
  CompositionMode_SourceIn = None
  CompositionMode_SourceOut = None
  CompositionMode_SourceOver = None
  CompositionMode_Xor = None
  HighQualityAntialiasing = None
  LosslessImageRendering = None
  NonCosmeticDefaultPen = None
  OpaqueHint = None

  class PixmapFragment(simplewrapper):
    """ QPainter.PixmapFragment()
    QPainter.PixmapFragment(QPainter.PixmapFragment) """

    def create(UnionQPointF=None, QPoint=None, QRectF=None, arg0=None, arg1=None, arg2=None, arg3=None):
      """ create(Union[QPointF, QPoint], QRectF, scaleX: float = 1, scaleY: float = 1, rotation: float = 0, opacity: float = 1) -> QPainter.PixmapFragment """
      return 1

    height = None
    opacity = None
    rotation = None
    scaleX = None
    scaleY = None
    sourceLeft = None
    sourceTop = None
    width = None
    x = None
    y = None

  class PixmapFragmentHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PixmapFragmentHints(simplewrapper):
    """ QPainter.PixmapFragmentHints()
    QPainter.PixmapFragmentHints(Union[QPainter.PixmapFragmentHints, QPainter.PixmapFragmentHint])
    QPainter.PixmapFragmentHints(QPainter.PixmapFragmentHints) """

    pass

  Qt4CompatiblePainting = None
  RasterOp_ClearDestination = None
  RasterOp_NotDestination = None
  RasterOp_NotSource = None
  RasterOp_NotSourceAndDestination = None
  RasterOp_NotSourceAndNotDestination = None
  RasterOp_NotSourceOrDestination = None
  RasterOp_NotSourceOrNotDestination = None
  RasterOp_NotSourceXorDestination = None
  RasterOp_SetDestination = None
  RasterOp_SourceAndDestination = None
  RasterOp_SourceAndNotDestination = None
  RasterOp_SourceOrDestination = None
  RasterOp_SourceOrNotDestination = None
  RasterOp_SourceXorDestination = None

  class RenderHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RenderHints(simplewrapper):
    """ QPainter.RenderHints()
    QPainter.RenderHints(Union[QPainter.RenderHints, QPainter.RenderHint])
    QPainter.RenderHints(QPainter.RenderHints) """

    pass

  SmoothPixmapTransform = None
  TextAntialiasing = None

  def background(self):
    """ background(self) -> QBrush """
    return None

  def backgroundMode(self):
    """ backgroundMode(self) -> Qt.BGMode """
    return None

  def begin(self, QPaintDevice):
    """ begin(self, QPaintDevice) -> bool """
    return None

  def beginNativePainting(self):
    """ beginNativePainting(self) """
    pass

  def boundingRect(self, QRectF, int, str):
    """ boundingRect(self, QRectF, int, str) -> QRectF
    boundingRect(self, QRect, int, str) -> QRect
    boundingRect(self, QRectF, str, option: QTextOption = QTextOption()) -> QRectF
    boundingRect(self, int, int, int, int, int, str) -> QRect """
    return None

  def brush(self):
    """ brush(self) -> QBrush """
    return None

  def brushOrigin(self):
    """ brushOrigin(self) -> QPoint """
    return 1

  def clipBoundingRect(self):
    """ clipBoundingRect(self) -> QRectF """
    return None

  def clipPath(self):
    """ clipPath(self) -> QPainterPath """
    return 1

  def clipRegion(self):
    """ clipRegion(self) -> QRegion """
    return None

  def combinedTransform(self):
    """ combinedTransform(self) -> QTransform """
    return None

  def compositionMode(self):
    """ compositionMode(self) -> QPainter.CompositionMode """
    return 1

  def device(self):
    """ device(self) -> QPaintDevice """
    return 1

  def deviceTransform(self):
    """ deviceTransform(self) -> QTransform """
    return None

  def drawArc(self, QRectF, int, int):
    """ drawArc(self, QRectF, int, int)
    drawArc(self, QRect, int, int)
    drawArc(self, int, int, int, int, int, int) """
    pass

  def drawChord(self, QRectF, int, int):
    """ drawChord(self, QRectF, int, int)
    drawChord(self, QRect, int, int)
    drawChord(self, int, int, int, int, int, int) """
    pass

  def drawConvexPolygon(self, UnionQPointF=None, QPoint=None, *):
    """ drawConvexPolygon(self, Union[QPointF, QPoint], *)
    drawConvexPolygon(self, QPolygonF)
    drawConvexPolygon(self, QPoint, *)
    drawConvexPolygon(self, QPolygon) """
    pass

  def drawEllipse(self, QRectF):
    """ drawEllipse(self, QRectF)
    drawEllipse(self, QRect)
    drawEllipse(self, int, int, int, int)
    drawEllipse(self, Union[QPointF, QPoint], float, float)
    drawEllipse(self, QPoint, int, int) """
    pass

  def drawGlyphRun(self, UnionQPointF=None, QPoint=None, QGlyphRun=None):
    """ drawGlyphRun(self, Union[QPointF, QPoint], QGlyphRun) """
    pass

  def drawImage(self, QRectF, QImage):
    """ drawImage(self, QRectF, QImage)
    drawImage(self, QRect, QImage)
    drawImage(self, Union[QPointF, QPoint], QImage)
    drawImage(self, QPoint, QImage)
    drawImage(self, int, int, QImage, sx: int = 0, sy: int = 0, sw: int = -1, sh: int = -1, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, QRectF, QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, QRect, QImage, QRect, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, Union[QPointF, QPoint], QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
    drawImage(self, QPoint, QImage, QRect, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor) """
    pass

  def drawLine(self, QLineF):
    """ drawLine(self, QLineF)
    drawLine(self, QLine)
    drawLine(self, int, int, int, int)
    drawLine(self, QPoint, QPoint)
    drawLine(self, Union[QPointF, QPoint], Union[QPointF, QPoint]) """
    pass

  def drawLines(self, QLineF, arg0):
    """ drawLines(self, QLineF, *)
    drawLines(self, Iterable[QLineF])
    drawLines(self, Union[QPointF, QPoint], *)
    drawLines(self, Iterable[Union[QPointF, QPoint]])
    drawLines(self, QLine, *)
    drawLines(self, Iterable[QLine])
    drawLines(self, QPoint, *)
    drawLines(self, Iterable[QPoint]) """
    pass

  def drawPath(self, QPainterPath):
    """ drawPath(self, QPainterPath) """
    pass

  def drawPicture(self, UnionQPointF=None, QPoint=None, QPicture=None):
    """ drawPicture(self, Union[QPointF, QPoint], QPicture)
    drawPicture(self, int, int, QPicture)
    drawPicture(self, QPoint, QPicture) """
    pass

  def drawPie(self, QRectF, int, int):
    """ drawPie(self, QRectF, int, int)
    drawPie(self, QRect, int, int)
    drawPie(self, int, int, int, int, int, int) """
    pass

  def drawPixmap(self, QRectF, QPixmap, QRectF):
    """ drawPixmap(self, QRectF, QPixmap, QRectF)
    drawPixmap(self, QRect, QPixmap, QRect)
    drawPixmap(self, Union[QPointF, QPoint], QPixmap)
    drawPixmap(self, QPoint, QPixmap)
    drawPixmap(self, QRect, QPixmap)
    drawPixmap(self, int, int, QPixmap)
    drawPixmap(self, int, int, int, int, QPixmap)
    drawPixmap(self, int, int, int, int, QPixmap, int, int, int, int)
    drawPixmap(self, int, int, QPixmap, int, int, int, int)
    drawPixmap(self, Union[QPointF, QPoint], QPixmap, QRectF)
    drawPixmap(self, QPoint, QPixmap, QRect) """
    pass

  def drawPixmapFragments():
    """ drawPixmapFragments(self, List[QPainter.PixmapFragment], QPixmap, hints: QPainter.PixmapFragmentHints = 0) """
    pass

  def drawPoint(self, UnionQPointF=None, QPoint=None):
    """ drawPoint(self, Union[QPointF, QPoint])
    drawPoint(self, int, int)
    drawPoint(self, QPoint) """
    pass

  def drawPoints(self, UnionQPointF=None, QPoint=None, *):
    """ drawPoints(self, Union[QPointF, QPoint], *)
    drawPoints(self, QPolygonF)
    drawPoints(self, QPoint, *)
    drawPoints(self, QPolygon) """
    pass

  def drawPolygon(self, UnionQPointF=None, QPoint=None, *):
    """ drawPolygon(self, Union[QPointF, QPoint], *)
    drawPolygon(self, QPolygonF, fillRule: Qt.FillRule = Qt.OddEvenFill)
    drawPolygon(self, QPoint, *)
    drawPolygon(self, QPolygon, fillRule: Qt.FillRule = Qt.OddEvenFill) """
    pass

  def drawPolyline(self, UnionQPointF=None, QPoint=None, *):
    """ drawPolyline(self, Union[QPointF, QPoint], *)
    drawPolyline(self, QPolygonF)
    drawPolyline(self, QPoint, *)
    drawPolyline(self, QPolygon) """
    pass

  def drawRect(self, QRectF):
    """ drawRect(self, QRectF)
    drawRect(self, int, int, int, int)
    drawRect(self, QRect) """
    pass

  def drawRects(self, QRectF, arg0):
    """ drawRects(self, QRectF, *)
    drawRects(self, Iterable[QRectF])
    drawRects(self, QRect, *)
    drawRects(self, Iterable[QRect]) """
    pass

  def drawRoundedRect():
    """ drawRoundedRect(self, QRectF, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)
    drawRoundedRect(self, int, int, int, int, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)
    drawRoundedRect(self, QRect, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize) """
    pass

  def drawStaticText(self, UnionQPointF=None, QPoint=None, QStaticText=None):
    """ drawStaticText(self, Union[QPointF, QPoint], QStaticText)
    drawStaticText(self, QPoint, QStaticText)
    drawStaticText(self, int, int, QStaticText) """
    pass

  def drawText(self, UnionQPointF=None, QPoint=None, str=None):
    """ drawText(self, Union[QPointF, QPoint], str)
    drawText(self, QRectF, int, str) -> QRectF
    drawText(self, QRect, int, str) -> QRect
    drawText(self, QRectF, str, option: QTextOption = QTextOption())
    drawText(self, QPoint, str)
    drawText(self, int, int, int, int, int, str) -> QRect
    drawText(self, int, int, str) """
    pass

  def drawTiledPixmap():
    """ drawTiledPixmap(self, QRectF, QPixmap, pos: Union[QPointF, QPoint] = QPointF())
    drawTiledPixmap(self, QRect, QPixmap, pos: QPoint = QPoint())
    drawTiledPixmap(self, int, int, int, int, QPixmap, sx: int = 0, sy: int = 0) """
    pass

  def end(self):
    """ end(self) -> bool """
    return None

  def endNativePainting(self):
    """ endNativePainting(self) """
    pass

  def eraseRect(self, QRectF):
    """ eraseRect(self, QRectF)
    eraseRect(self, QRect)
    eraseRect(self, int, int, int, int) """
    pass

  def fillPath(self, QPainterPath, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ fillPath(self, QPainterPath, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def fillRect(self, QRectF, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ fillRect(self, QRectF, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    fillRect(self, QRect, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    fillRect(self, int, int, int, int, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    fillRect(self, QRectF, Union[QColor, Qt.GlobalColor, QGradient])
    fillRect(self, QRect, Union[QColor, Qt.GlobalColor, QGradient])
    fillRect(self, int, int, int, int, Union[QColor, Qt.GlobalColor, QGradient])
    fillRect(self, int, int, int, int, Qt.GlobalColor)
    fillRect(self, QRect, Qt.GlobalColor)
    fillRect(self, QRectF, Qt.GlobalColor)
    fillRect(self, int, int, int, int, Qt.BrushStyle)
    fillRect(self, QRect, Qt.BrushStyle)
    fillRect(self, QRectF, Qt.BrushStyle)
    fillRect(self, int, int, int, int, QGradient.Preset)
    fillRect(self, QRect, QGradient.Preset)
    fillRect(self, QRectF, QGradient.Preset) """
    pass

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontInfo(self):
    """ fontInfo(self) -> QFontInfo """
    return None

  def fontMetrics(self):
    """ fontMetrics(self) -> QFontMetrics """
    return None

  def hasClipping(self):
    """ hasClipping(self) -> bool """
    return None

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def pen(self):
    """ pen(self) -> QPen """
    return None

  def renderHints(self):
    """ renderHints(self) -> QPainter.RenderHints """
    return 1

  def resetTransform(self):
    """ resetTransform(self) """
    pass

  def restore(self):
    """ restore(self) """
    pass

  def rotate(self, float):
    """ rotate(self, float) """
    pass

  def save(self):
    """ save(self) """
    pass

  def scale(self, float, float):
    """ scale(self, float, float) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBackgroundMode(self, arg0):
    """ setBackgroundMode(self, Qt.BGMode) """
    pass

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    setBrush(self, Qt.BrushStyle) """
    pass

  def setBrushOrigin(self, UnionQPointF=None, QPoint=None):
    """ setBrushOrigin(self, Union[QPointF, QPoint])
    setBrushOrigin(self, int, int)
    setBrushOrigin(self, QPoint) """
    pass

  def setClipPath():
    """ setClipPath(self, QPainterPath, operation: Qt.ClipOperation = Qt.ReplaceClip) """
    pass

  def setClipRect():
    """ setClipRect(self, QRectF, operation: Qt.ClipOperation = Qt.ReplaceClip)
    setClipRect(self, int, int, int, int, operation: Qt.ClipOperation = Qt.ReplaceClip)
    setClipRect(self, QRect, operation: Qt.ClipOperation = Qt.ReplaceClip) """
    pass

  def setClipRegion():
    """ setClipRegion(self, QRegion, operation: Qt.ClipOperation = Qt.ReplaceClip) """
    pass

  def setClipping(self, bool):
    """ setClipping(self, bool) """
    pass

  def setCompositionMode(self, arg0):
    """ setCompositionMode(self, QPainter.CompositionMode) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setPen(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setPen(self, Union[QColor, Qt.GlobalColor, QGradient])
    setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient])
    setPen(self, Qt.PenStyle) """
    pass

  def setRenderHint():
    """ setRenderHint(self, QPainter.RenderHint, on: bool = True) """
    pass

  def setRenderHints():
    """ setRenderHints(self, Union[QPainter.RenderHints, QPainter.RenderHint], on: bool = True) """
    pass

  def setTransform():
    """ setTransform(self, QTransform, combine: bool = False) """
    pass

  def setViewTransformEnabled(self, bool):
    """ setViewTransformEnabled(self, bool) """
    pass

  def setViewport(self, QRect):
    """ setViewport(self, QRect)
    setViewport(self, int, int, int, int) """
    pass

  def setWindow(self, QRect):
    """ setWindow(self, QRect)
    setWindow(self, int, int, int, int) """
    pass

  def setWorldMatrixEnabled(self, bool):
    """ setWorldMatrixEnabled(self, bool) """
    pass

  def setWorldTransform():
    """ setWorldTransform(self, QTransform, combine: bool = False) """
    pass

  def shear(self, float, float):
    """ shear(self, float, float) """
    pass

  def strokePath(self, QPainterPath, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ strokePath(self, QPainterPath, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def testRenderHint(self, arg0):
    """ testRenderHint(self, QPainter.RenderHint) -> bool """
    return None

  def transform(self):
    """ transform(self) -> QTransform """
    return None

  def translate(self, UnionQPointF=None, QPoint=None):
    """ translate(self, Union[QPointF, QPoint])
    translate(self, float, float)
    translate(self, QPoint) """
    pass

  def viewTransformEnabled(self):
    """ viewTransformEnabled(self) -> bool """
    return None

  def viewport(self):
    """ viewport(self) -> QRect """
    return None

  def window(self):
    """ window(self) -> QRect """
    return None

  def worldMatrixEnabled(self):
    """ worldMatrixEnabled(self) -> bool """
    return None

  def worldTransform(self):
    """ worldTransform(self) -> QTransform """
    return None

class QPainterPath(simplewrapper):
  """ QPainterPath()
  QPainterPath(Union[QPointF, QPoint])
  QPainterPath(QPainterPath) """

  CurveToDataElement = None
  CurveToElement = None

  class Element(simplewrapper):
    """ QPainterPath.Element()
    QPainterPath.Element(QPainterPath.Element) """

    def isCurveTo(self):
      """ isCurveTo(self) -> bool """
      return None

    def isLineTo(self):
      """ isLineTo(self) -> bool """
      return None

    def isMoveTo(self):
      """ isMoveTo(self) -> bool """
      return None

    type = None
    x = None
    y = None

  class ElementType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LineToElement = None
  MoveToElement = None

  def addEllipse(self, QRectF):
    """ addEllipse(self, QRectF)
    addEllipse(self, float, float, float, float)
    addEllipse(self, Union[QPointF, QPoint], float, float) """
    pass

  def addPath(self, QPainterPath):
    """ addPath(self, QPainterPath) """
    pass

  def addPolygon(self, QPolygonF):
    """ addPolygon(self, QPolygonF) """
    pass

  def addRect(self, QRectF):
    """ addRect(self, QRectF)
    addRect(self, float, float, float, float) """
    pass

  def addRegion(self, QRegion):
    """ addRegion(self, QRegion) """
    pass

  def addRoundedRect():
    """ addRoundedRect(self, QRectF, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)
    addRoundedRect(self, float, float, float, float, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize) """
    pass

  def addText(self, UnionQPointF=None, QPoint=None, QFont=None, str=None):
    """ addText(self, Union[QPointF, QPoint], QFont, str)
    addText(self, float, float, QFont, str) """
    pass

  def angleAtPercent(self, float):
    """ angleAtPercent(self, float) -> float """
    return 1.0

  def arcMoveTo(self, QRectF, float):
    """ arcMoveTo(self, QRectF, float)
    arcMoveTo(self, float, float, float, float, float) """
    pass

  def arcTo(self, QRectF, float, float):
    """ arcTo(self, QRectF, float, float)
    arcTo(self, float, float, float, float, float, float) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return None

  def capacity(self):
    """ capacity(self) -> int """
    return 1

  def clear(self):
    """ clear(self) """
    pass

  def closeSubpath(self):
    """ closeSubpath(self) """
    pass

  def connectPath(self, QPainterPath):
    """ connectPath(self, QPainterPath) """
    pass

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool
    contains(self, QRectF) -> bool
    contains(self, QPainterPath) -> bool """
    return None

  def controlPointRect(self):
    """ controlPointRect(self) -> QRectF """
    return None

  def cubicTo(self, UnionQPointF=None, QPoint=None, UnionQPointF=None, QPoint=None, UnionQPointF=None, QPoint=None):
    """ cubicTo(self, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint])
    cubicTo(self, float, float, float, float, float, float) """
    pass

  def currentPosition(self):
    """ currentPosition(self) -> QPointF """
    return 1

  def elementAt(self, int):
    """ elementAt(self, int) -> QPainterPath.Element """
    return 1

  def elementCount(self):
    """ elementCount(self) -> int """
    return 1

  def fillRule(self):
    """ fillRule(self) -> Qt.FillRule """
    return None

  def intersected(self, QPainterPath):
    """ intersected(self, QPainterPath) -> QPainterPath """
    return 1

  def intersects(self, QRectF):
    """ intersects(self, QRectF) -> bool
    intersects(self, QPainterPath) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def length(self):
    """ length(self) -> float """
    return 1.0

  def lineTo(self, UnionQPointF=None, QPoint=None):
    """ lineTo(self, Union[QPointF, QPoint])
    lineTo(self, float, float) """
    pass

  def moveTo(self, UnionQPointF=None, QPoint=None):
    """ moveTo(self, Union[QPointF, QPoint])
    moveTo(self, float, float) """
    pass

  def percentAtLength(self, float):
    """ percentAtLength(self, float) -> float """
    return 1.0

  def pointAtPercent(self, float):
    """ pointAtPercent(self, float) -> QPointF """
    return 1

  def quadTo(self, UnionQPointF=None, QPoint=None, UnionQPointF=None, QPoint=None):
    """ quadTo(self, Union[QPointF, QPoint], Union[QPointF, QPoint])
    quadTo(self, float, float, float, float) """
    pass

  def reserve(self, int):
    """ reserve(self, int) """
    pass

  def setElementPositionAt(self, int, float, float):
    """ setElementPositionAt(self, int, float, float) """
    pass

  def setFillRule(self, arg0):
    """ setFillRule(self, Qt.FillRule) """
    pass

  def simplified(self):
    """ simplified(self) -> QPainterPath """
    return 1

  def slopeAtPercent(self, float):
    """ slopeAtPercent(self, float) -> float """
    return 1.0

  def subtracted(self, QPainterPath):
    """ subtracted(self, QPainterPath) -> QPainterPath """
    return 1

  def swap(self, QPainterPath):
    """ swap(self, QPainterPath) """
    pass

  def toFillPolygon(self):
    """ toFillPolygon(self) -> QPolygonF
    toFillPolygon(self, QTransform) -> QPolygonF """
    return None

  def toFillPolygons(self):
    """ toFillPolygons(self) -> List[QPolygonF]
    toFillPolygons(self, QTransform) -> List[QPolygonF] """
    return None

  def toReversed(self):
    """ toReversed(self) -> QPainterPath """
    return 1

  def toSubpathPolygons(self):
    """ toSubpathPolygons(self) -> List[QPolygonF]
    toSubpathPolygons(self, QTransform) -> List[QPolygonF] """
    return None

  def translate(self, float, float):
    """ translate(self, float, float)
    translate(self, Union[QPointF, QPoint]) """
    pass

  def translated(self, float, float):
    """ translated(self, float, float) -> QPainterPath
    translated(self, Union[QPointF, QPoint]) -> QPainterPath """
    return 1

  def united(self, QPainterPath):
    """ united(self, QPainterPath) -> QPainterPath """
    return 1

class QPainterPathStroker(simplewrapper):
  """ QPainterPathStroker()
  QPainterPathStroker(Union[QPen, QColor, Qt.GlobalColor, QGradient]) """

  def capStyle(self):
    """ capStyle(self) -> Qt.PenCapStyle """
    return None

  def createStroke(self, QPainterPath):
    """ createStroke(self, QPainterPath) -> QPainterPath """
    return 1

  def curveThreshold(self):
    """ curveThreshold(self) -> float """
    return 1.0

  def dashOffset(self):
    """ dashOffset(self) -> float """
    return 1.0

  def dashPattern(self):
    """ dashPattern(self) -> List[float] """
    return 1.0

  def joinStyle(self):
    """ joinStyle(self) -> Qt.PenJoinStyle """
    return None

  def miterLimit(self):
    """ miterLimit(self) -> float """
    return 1.0

  def setCapStyle(self, arg0):
    """ setCapStyle(self, Qt.PenCapStyle) """
    pass

  def setCurveThreshold(self, float):
    """ setCurveThreshold(self, float) """
    pass

  def setDashOffset(self, float):
    """ setDashOffset(self, float) """
    pass

  def setDashPattern(self, arg0):
    """ setDashPattern(self, Qt.PenStyle)
    setDashPattern(self, Iterable[float]) """
    pass

  def setJoinStyle(self, arg0):
    """ setJoinStyle(self, Qt.PenJoinStyle) """
    pass

  def setMiterLimit(self, float):
    """ setMiterLimit(self, float) """
    pass

  def setWidth(self, float):
    """ setWidth(self, float) """
    pass

  def width(self):
    """ width(self) -> float """
    return 1.0

class QPalette(simplewrapper):
  """ QPalette()
  QPalette(Union[QColor, Qt.GlobalColor, QGradient])
  QPalette(Qt.GlobalColor)
  QPalette(Union[QColor, Qt.GlobalColor, QGradient], Union[QColor, Qt.GlobalColor, QGradient])
  QPalette(Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient])
  QPalette(QPalette)
  QPalette(Any) """

  Active = None
  All = None
  AlternateBase = None
  Background = None
  Base = None
  BrightText = None
  Button = None
  ButtonText = None

  class ColorGroup(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class ColorRole(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Current = None
  Dark = None
  Disabled = None
  Foreground = None
  Highlight = None
  HighlightedText = None
  Inactive = None
  Light = None
  Link = None
  LinkVisited = None
  Mid = None
  Midlight = None
  NColorGroups = None
  NColorRoles = None
  NoRole = None
  Normal = None
  PlaceholderText = None
  Shadow = None
  Text = None
  ToolTipBase = None
  ToolTipText = None
  Window = None
  WindowText = None

  def alternateBase(self):
    """ alternateBase(self) -> QBrush """
    return None

  def base(self):
    """ base(self) -> QBrush """
    return None

  def brightText(self):
    """ brightText(self) -> QBrush """
    return None

  def brush(self, arg0, arg1):
    """ brush(self, QPalette.ColorGroup, QPalette.ColorRole) -> QBrush
    brush(self, QPalette.ColorRole) -> QBrush """
    return None

  def button(self):
    """ button(self) -> QBrush """
    return None

  def buttonText(self):
    """ buttonText(self) -> QBrush """
    return None

  def cacheKey(self):
    """ cacheKey(self) -> int """
    return 1

  def color(self, arg0, arg1):
    """ color(self, QPalette.ColorGroup, QPalette.ColorRole) -> QColor
    color(self, QPalette.ColorRole) -> QColor """
    return None

  def currentColorGroup(self):
    """ currentColorGroup(self) -> QPalette.ColorGroup """
    return None

  def dark(self):
    """ dark(self) -> QBrush """
    return None

  def highlight(self):
    """ highlight(self) -> QBrush """
    return None

  def highlightedText(self):
    """ highlightedText(self) -> QBrush """
    return None

  def isBrushSet(self, arg0, arg1):
    """ isBrushSet(self, QPalette.ColorGroup, QPalette.ColorRole) -> bool """
    return None

  def isCopyOf(self, QPalette):
    """ isCopyOf(self, QPalette) -> bool """
    return None

  def isEqual(self, arg0, arg1):
    """ isEqual(self, QPalette.ColorGroup, QPalette.ColorGroup) -> bool """
    return None

  def light(self):
    """ light(self) -> QBrush """
    return None

  def link(self):
    """ link(self) -> QBrush """
    return None

  def linkVisited(self):
    """ linkVisited(self) -> QBrush """
    return None

  def mid(self):
    """ mid(self) -> QBrush """
    return None

  def midlight(self):
    """ midlight(self) -> QBrush """
    return None

  def placeholderText(self):
    """ placeholderText(self) -> QBrush """
    return None

  def resolve(self, QPalette):
    """ resolve(self, QPalette) -> QPalette
    resolve(self) -> int
    resolve(self, int) """
    return None

  def setBrush(self, arg0, arg1, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, QPalette.ColorGroup, QPalette.ColorRole, Union[QBrush, QColor, Qt.GlobalColor, QGradient])
    setBrush(self, QPalette.ColorRole, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setColor(self, arg0, arg1, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColor(self, QPalette.ColorGroup, QPalette.ColorRole, Union[QColor, Qt.GlobalColor, QGradient])
    setColor(self, QPalette.ColorRole, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setColorGroup(self, arg0, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColorGroup(self, QPalette.ColorGroup, Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCurrentColorGroup(self, arg0):
    """ setCurrentColorGroup(self, QPalette.ColorGroup) """
    pass

  def shadow(self):
    """ shadow(self) -> QBrush """
    return None

  def swap(self, QPalette):
    """ swap(self, QPalette) """
    pass

  def text(self):
    """ text(self) -> QBrush """
    return None

  def toolTipBase(self):
    """ toolTipBase(self) -> QBrush """
    return None

  def toolTipText(self):
    """ toolTipText(self) -> QBrush """
    return None

  def window(self):
    """ window(self) -> QBrush """
    return None

  def windowText(self):
    """ windowText(self) -> QBrush """
    return None

class QPdfWriter(QObject):
  """ QPdfWriter(str)
  QPdfWriter(QIODevice) """

  A0 = None
  A1 = None
  A10 = None
  A2 = None
  A3 = None
  A3Extra = None
  A4 = None
  A4Extra = None
  A4Plus = None
  A4Small = None
  A5 = None
  A5Extra = None
  A6 = None
  A7 = None
  A8 = None
  A9 = None
  AnsiA = None
  AnsiB = None
  AnsiC = None
  AnsiD = None
  AnsiE = None
  ArchA = None
  ArchB = None
  ArchC = None
  ArchD = None
  ArchE = None
  B0 = None
  B1 = None
  B10 = None
  B2 = None
  B3 = None
  B4 = None
  B5 = None
  B5Extra = None
  B6 = None
  B7 = None
  B8 = None
  B9 = None
  C5E = None
  Comm10E = None
  Custom = None
  DLE = None
  DoublePostcard = None
  Envelope10 = None
  Envelope11 = None
  Envelope12 = None
  Envelope14 = None
  Envelope9 = None
  EnvelopeB4 = None
  EnvelopeB5 = None
  EnvelopeB6 = None
  EnvelopeC0 = None
  EnvelopeC1 = None
  EnvelopeC2 = None
  EnvelopeC3 = None
  EnvelopeC4 = None
  EnvelopeC5 = None
  EnvelopeC6 = None
  EnvelopeC65 = None
  EnvelopeC7 = None
  EnvelopeChou3 = None
  EnvelopeChou4 = None
  EnvelopeDL = None
  EnvelopeInvite = None
  EnvelopeItalian = None
  EnvelopeKaku2 = None
  EnvelopeKaku3 = None
  EnvelopeMonarch = None
  EnvelopePersonal = None
  EnvelopePrc1 = None
  EnvelopePrc10 = None
  EnvelopePrc2 = None
  EnvelopePrc3 = None
  EnvelopePrc4 = None
  EnvelopePrc5 = None
  EnvelopePrc6 = None
  EnvelopePrc7 = None
  EnvelopePrc8 = None
  EnvelopePrc9 = None
  EnvelopeYou4 = None
  Executive = None
  ExecutiveStandard = None
  FanFoldGerman = None
  FanFoldGermanLegal = None
  FanFoldUS = None
  Folio = None
  Imperial10x11 = None
  Imperial10x13 = None
  Imperial10x14 = None
  Imperial12x11 = None
  Imperial15x11 = None
  Imperial7x9 = None
  Imperial8x10 = None
  Imperial9x11 = None
  Imperial9x12 = None
  JisB0 = None
  JisB1 = None
  JisB10 = None
  JisB2 = None
  JisB3 = None
  JisB4 = None
  JisB5 = None
  JisB6 = None
  JisB7 = None
  JisB8 = None
  JisB9 = None
  LastPageSize = None
  Ledger = None
  Legal = None
  LegalExtra = None
  Letter = None
  LetterExtra = None
  LetterPlus = None
  LetterSmall = None
  NPaperSize = None
  Note = None
  PdfVersion_1_4 = None
  PdfVersion_1_6 = None
  PdfVersion_A1b = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  Postcard = None
  Prc16K = None
  Prc32K = None
  Prc32KBig = None
  Quarto = None
  Statement = None
  SuperA = None
  SuperB = None
  Tabloid = None
  TabloidExtra = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def creator(self):
    """ creator(self) -> str """
    return ""

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def margins(self):
    """ margins(self) -> QPagedPaintDevice.Margins """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def newPage(self):
    """ newPage(self) -> bool """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def pageLayout(self):
    """ pageLayout(self) -> QPageLayout """
    return None

  def pageSize(self):
    """ pageSize(self) -> QPagedPaintDevice.PageSize """
    return 1

  def pageSizeMM(self):
    """ pageSizeMM(self) -> QSizeF """
    return None

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pdfVersion(self):
    """ pdfVersion(self) -> QPagedPaintDevice.PdfVersion """
    return 1

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resolution(self):
    """ resolution(self) -> int """
    return 1

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCreator(self, str):
    """ setCreator(self, str) """
    pass

  def setMargins(self, arg0):
    """ setMargins(self, QPagedPaintDevice.Margins) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPageLayout(self, QPageLayout):
    """ setPageLayout(self, QPageLayout) -> bool """
    return None

  def setPageMargins(self, QMarginsF):
    """ setPageMargins(self, QMarginsF) -> bool
    setPageMargins(self, QMarginsF, QPageLayout.Unit) -> bool """
    return None

  def setPageOrientation(self, arg0):
    """ setPageOrientation(self, QPageLayout.Orientation) -> bool """
    return None

  def setPageSize(self, arg0):
    """ setPageSize(self, QPagedPaintDevice.PageSize) """
    pass

  def setPageSizeMM(self, QSizeF):
    """ setPageSizeMM(self, QSizeF) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPdfVersion(self, arg0):
    """ setPdfVersion(self, QPagedPaintDevice.PdfVersion) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setResolution(self, int):
    """ setResolution(self, int) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QPen(simplewrapper):
  """ QPen()
  QPen(Qt.PenStyle)
  QPen(Union[QBrush, QColor, Qt.GlobalColor, QGradient], float, style: Qt.PenStyle = Qt.SolidLine, cap: Qt.PenCapStyle = Qt.SquareCap, join: Qt.PenJoinStyle = Qt.BevelJoin)
  QPen(Union[QPen, QColor, Qt.GlobalColor, QGradient])
  QPen(Any) """

  def brush(self):
    """ brush(self) -> QBrush """
    return None

  def capStyle(self):
    """ capStyle(self) -> Qt.PenCapStyle """
    return None

  def color(self):
    """ color(self) -> QColor """
    return None

  def dashOffset(self):
    """ dashOffset(self) -> float """
    return 1.0

  def dashPattern(self):
    """ dashPattern(self) -> List[float] """
    return 1.0

  def isCosmetic(self):
    """ isCosmetic(self) -> bool """
    return None

  def isSolid(self):
    """ isSolid(self) -> bool """
    return None

  def joinStyle(self):
    """ joinStyle(self) -> Qt.PenJoinStyle """
    return None

  def miterLimit(self):
    """ miterLimit(self) -> float """
    return 1.0

  def setBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCapStyle(self, arg0):
    """ setCapStyle(self, Qt.PenCapStyle) """
    pass

  def setColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCosmetic(self, bool):
    """ setCosmetic(self, bool) """
    pass

  def setDashOffset(self, float):
    """ setDashOffset(self, float) """
    pass

  def setDashPattern(self, Iterablefloat=None):
    """ setDashPattern(self, Iterable[float]) """
    pass

  def setJoinStyle(self, arg0):
    """ setJoinStyle(self, Qt.PenJoinStyle) """
    pass

  def setMiterLimit(self, float):
    """ setMiterLimit(self, float) """
    pass

  def setStyle(self, arg0):
    """ setStyle(self, Qt.PenStyle) """
    pass

  def setWidth(self, int):
    """ setWidth(self, int) """
    pass

  def setWidthF(self, float):
    """ setWidthF(self, float) """
    pass

  def style(self):
    """ style(self) -> Qt.PenStyle """
    return None

  def swap(self, QPen):
    """ swap(self, QPen) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthF(self):
    """ widthF(self) -> float """
    return 1.0

class QPicture(QPaintDevice):
  """ QPicture(formatVersion: int = -1)
  QPicture(QPicture) """

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  def boundingRect(self):
    """ boundingRect(self) -> QRect """
    return None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def data(self):
    """ data(self) -> str """
    return ""

  def depth(self):
    """ depth(self) -> int """
    return 1

  def detach(self):
    """ detach(self) """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> int """
    return 1

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def isDetached(self):
    """ isDetached(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def load(self, QIODevice, arg0=None):
    """ load(self, QIODevice, format: str = None) -> bool
    load(self, str, format: str = None) -> bool """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def play(self, QPainter):
    """ play(self, QPainter) -> bool """
    return None

  def save(self, QIODevice, arg0=None):
    """ save(self, QIODevice, format: str = None) -> bool
    save(self, str, format: str = None) -> bool """
    return None

  def setBoundingRect(self, QRect):
    """ setBoundingRect(self, QRect) """
    pass

  def setData(self, bytes):
    """ setData(self, bytes) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def swap(self, QPicture):
    """ swap(self, QPicture) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QPictureIO(simplewrapper):
  """ QPictureIO()
  QPictureIO(QIODevice, str)
  QPictureIO(str, str) """

  def defineIOHandler(str, str, str, OptionalCallableQPictureIO=None, None=None, OptionalCallableQPictureIO=None, None=None):
    """ defineIOHandler(str, str, str, Optional[Callable[[QPictureIO], None]], Optional[Callable[[QPictureIO], None]]) """
    pass

  def description(self):
    """ description(self) -> str """
    return ""

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def format(self):
    """ format(self) -> str """
    return ""

  def gamma(self):
    """ gamma(self) -> float """
    return 1.0

  def inputFormats():
    """ inputFormats() -> List[QByteArray] """
    return None

  def ioDevice(self):
    """ ioDevice(self) -> QIODevice """
    return None

  def outputFormats():
    """ outputFormats() -> List[QByteArray] """
    return None

  def parameters(self):
    """ parameters(self) -> str """
    return ""

  def picture(self):
    """ picture(self) -> QPicture """
    return None

  def pictureFormat(str):
    """ pictureFormat(str) -> QByteArray
    pictureFormat(QIODevice) -> QByteArray """
    return None

  def quality(self):
    """ quality(self) -> int """
    return 1

  def read(self):
    """ read(self) -> bool """
    return None

  def setDescription(self, str):
    """ setDescription(self, str) """
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFormat(self, str):
    """ setFormat(self, str) """
    pass

  def setGamma(self, float):
    """ setGamma(self, float) """
    pass

  def setIODevice(self, QIODevice):
    """ setIODevice(self, QIODevice) """
    pass

  def setParameters(self, str):
    """ setParameters(self, str) """
    pass

  def setPicture(self, QPicture):
    """ setPicture(self, QPicture) """
    pass

  def setQuality(self, int):
    """ setQuality(self, int) """
    pass

  def setStatus(self, int):
    """ setStatus(self, int) """
    pass

  def status(self):
    """ status(self) -> int """
    return 1

  def write(self):
    """ write(self) -> bool """
    return None

class QPixelFormat(simplewrapper):
  """ QPixelFormat()
  QPixelFormat(QPixelFormat.ColorModel, int, int, int, int, int, int, QPixelFormat.AlphaUsage, QPixelFormat.AlphaPosition, QPixelFormat.AlphaPremultiplied, QPixelFormat.TypeInterpretation, byteOrder: QPixelFormat.ByteOrder = QPixelFormat.CurrentSystemEndian, subEnum: int = 0)
  QPixelFormat(QPixelFormat) """

  Alpha = None

  class AlphaPosition(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class AlphaPremultiplied(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class AlphaUsage(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AtBeginning = None
  AtEnd = None
  BGR = None
  BigEndian = None

  class ByteOrder(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CMYK = None

  class ColorModel(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CurrentSystemEndian = None
  FloatingPoint = None
  Grayscale = None
  HSL = None
  HSV = None
  IMC1 = None
  IMC2 = None
  IMC3 = None
  IMC4 = None
  IgnoresAlpha = None
  Indexed = None
  LittleEndian = None
  NV12 = None
  NV21 = None
  NotPremultiplied = None
  Premultiplied = None
  RGB = None

  class TypeInterpretation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UYVY = None
  UnsignedByte = None
  UnsignedInteger = None
  UnsignedShort = None
  UsesAlpha = None
  Y16 = None
  Y8 = None
  YUV = None
  YUV411 = None
  YUV420P = None
  YUV420SP = None
  YUV422 = None
  YUV444 = None

  class YUVLayout(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  YUYV = None
  YV12 = None

  def alphaPosition(self):
    """ alphaPosition(self) -> QPixelFormat.AlphaPosition """
    return None

  def alphaSize(self):
    """ alphaSize(self) -> int """
    return 1

  def alphaUsage(self):
    """ alphaUsage(self) -> QPixelFormat.AlphaUsage """
    return None

  def bitsPerPixel(self):
    """ bitsPerPixel(self) -> int """
    return 1

  def blackSize(self):
    """ blackSize(self) -> int """
    return 1

  def blueSize(self):
    """ blueSize(self) -> int """
    return 1

  def brightnessSize(self):
    """ brightnessSize(self) -> int """
    return 1

  def byteOrder(self):
    """ byteOrder(self) -> QPixelFormat.ByteOrder """
    return None

  def channelCount(self):
    """ channelCount(self) -> int """
    return 1

  def colorModel(self):
    """ colorModel(self) -> QPixelFormat.ColorModel """
    return None

  def cyanSize(self):
    """ cyanSize(self) -> int """
    return 1

  def greenSize(self):
    """ greenSize(self) -> int """
    return 1

  def hueSize(self):
    """ hueSize(self) -> int """
    return 1

  def lightnessSize(self):
    """ lightnessSize(self) -> int """
    return 1

  def magentaSize(self):
    """ magentaSize(self) -> int """
    return 1

  def premultiplied(self):
    """ premultiplied(self) -> QPixelFormat.AlphaPremultiplied """
    return None

  def redSize(self):
    """ redSize(self) -> int """
    return 1

  def saturationSize(self):
    """ saturationSize(self) -> int """
    return 1

  def subEnum(self):
    """ subEnum(self) -> int """
    return 1

  def typeInterpretation(self):
    """ typeInterpretation(self) -> QPixelFormat.TypeInterpretation """
    return None

  def yellowSize(self):
    """ yellowSize(self) -> int """
    return 1

  def yuvLayout(self):
    """ yuvLayout(self) -> QPixelFormat.YUVLayout """
    return None

class QPixmap(QPaintDevice):
  """ QPixmap()
  QPixmap(int, int)
  QPixmap(QSize)
  QPixmap(str, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)
  QPixmap(List[str])
  QPixmap(QPixmap)
  QPixmap(Any) """

  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None

  def cacheKey(self):
    """ cacheKey(self) -> int """
    return 1

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def convertFromImage(self, QImage, arg0=None, arg1=None):
    """ convertFromImage(self, QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool """
    return None

  def copy(self, arg0=None):
    """ copy(self, rect: QRect = QRect()) -> QPixmap
    copy(self, int, int, int, int) -> QPixmap """
    return None

  def createHeuristicMask(self, arg0=None):
    """ createHeuristicMask(self, clipTight: bool = True) -> QBitmap """
    return None

  def createMaskFromColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None, arg0=None):
    """ createMaskFromColor(self, Union[QColor, Qt.GlobalColor, QGradient], mode: Qt.MaskMode = Qt.MaskInColor) -> QBitmap """
    return None

  def defaultDepth():
    """ defaultDepth() -> int """
    return 1

  def depth(self):
    """ depth(self) -> int """
    return 1

  def detach(self):
    """ detach(self) """
    pass

  def devType(self):
    """ devType(self) -> int """
    return 1

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def fill():
    """ fill(self, color: Union[QColor, Qt.GlobalColor, QGradient] = Qt.GlobalColor.white) """
    pass

  def fromImage(QImage, arg0=None, arg1=None):
    """ fromImage(QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QPixmap """
    return None

  def fromImageReader(QImageReader, arg0=None, arg1=None):
    """ fromImageReader(QImageReader, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QPixmap """
    return None

  def hasAlpha(self):
    """ hasAlpha(self) -> bool """
    return None

  def hasAlphaChannel(self):
    """ hasAlphaChannel(self) -> bool """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isQBitmap(self):
    """ isQBitmap(self) -> bool """
    return None

  def load(self, str, arg0=None, arg1=None, arg2=None):
    """ load(self, str, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool """
    return None

  def loadFromData(self, bytes, arg0=None, arg1=None, arg2=None):
    """ loadFromData(self, bytes, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool
    loadFromData(self, Union[QByteArray, bytes, bytearray], format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool """
    return None

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def mask(self):
    """ mask(self) -> QBitmap """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def rect(self):
    """ rect(self) -> QRect """
    return None

  def save(self, str, arg0=None, arg1=None):
    """ save(self, str, format: str = None, quality: int = -1) -> bool
    save(self, QIODevice, format: str = None, quality: int = -1) -> bool """
    return None

  def scaled(self, int, int, arg0=None, arg1=None):
    """ scaled(self, int, int, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap
    scaled(self, QSize, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap """
    return None

  def scaledToHeight(self, int, arg0=None):
    """ scaledToHeight(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap """
    return None

  def scaledToWidth(self, int, arg0=None):
    """ scaledToWidth(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap """
    return None

  def scroll(self, int, int, QRect):
    """ scroll(self, int, int, QRect) -> QRegion
    scroll(self, int, int, int, int, int, int) -> QRegion """
    return None

  def setDevicePixelRatio(self, float):
    """ setDevicePixelRatio(self, float) """
    pass

  def setMask(self, QBitmap):
    """ setMask(self, QBitmap) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def swap(self, QPixmap):
    """ swap(self, QPixmap) """
    pass

  def toImage(self):
    """ toImage(self) -> QImage """
    return None

  def transformed(self, QTransform, arg0=None):
    """ transformed(self, QTransform, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap """
    return None

  def trueMatrix(QTransform, int, int):
    """ trueMatrix(QTransform, int, int) -> QTransform """
    return None

  def width(self):
    """ width(self) -> int """
    return 1

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

class QPixmapCache(simplewrapper):
  """ QPixmapCache()
  QPixmapCache(QPixmapCache) """

  class Key(simplewrapper):
    """ QPixmapCache.Key()
    QPixmapCache.Key(QPixmapCache.Key) """

    def isValid(self):
      """ isValid(self) -> bool """
      return None

    def swap(self, arg0):
      """ swap(self, QPixmapCache.Key) """
      pass

  def cacheLimit():
    """ cacheLimit() -> int """
    return 1

  def clear():
    """ clear() """
    pass

  def find(str):
    """ find(str) -> QPixmap
    find(QPixmapCache.Key) -> QPixmap """
    return None

  def insert(str, QPixmap):
    """ insert(str, QPixmap) -> bool
    insert(QPixmap) -> QPixmapCache.Key """
    return None

  def remove(str):
    """ remove(str)
    remove(QPixmapCache.Key) """
    pass

  def replace(arg0, QPixmap):
    """ replace(QPixmapCache.Key, QPixmap) -> bool """
    return None

  def setCacheLimit(int):
    """ setCacheLimit(int) """
    pass

class QPlatformSurfaceEvent(QEvent):
  """ QPlatformSurfaceEvent(QPlatformSurfaceEvent.SurfaceEventType)
  QPlatformSurfaceEvent(QPlatformSurfaceEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  SurfaceAboutToBeDestroyed = None
  SurfaceCreated = None

  class SurfaceEventType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def surfaceEventType(self):
    """ surfaceEventType(self) -> QPlatformSurfaceEvent.SurfaceEventType """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QPointingDeviceUniqueId(simplewrapper):
  """ QPointingDeviceUniqueId()
  QPointingDeviceUniqueId(QPointingDeviceUniqueId) """

  def fromNumericId(int):
    """ fromNumericId(int) -> QPointingDeviceUniqueId """
    return 1

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def numericId(self):
    """ numericId(self) -> int """
    return 1

class QPolygon(simplewrapper):
  """ QPolygon()
  QPolygon(QPolygon)
  QPolygon(List[int])
  QPolygon(Iterable[QPoint])
  QPolygon(QRect, closed: bool = False)
  QPolygon(int)
  QPolygon(Any) """

  def append(self, QPoint):
    """ append(self, QPoint) """
    pass

  def at(self, int):
    """ at(self, int) -> QPoint """
    return 1

  def boundingRect(self):
    """ boundingRect(self) -> QRect """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def contains(self, QPoint):
    """ contains(self, QPoint) -> bool """
    return None

  def containsPoint(self, QPoint, arg0):
    """ containsPoint(self, QPoint, Qt.FillRule) -> bool """
    return None

  def count(self, QPoint):
    """ count(self, QPoint) -> int
    count(self) -> int """
    return 1

  def data(self):
    """ data(self) -> sip.voidptr """
    return None

  def fill():
    """ fill(self, QPoint, size: int = -1) """
    pass

  def first(self):
    """ first(self) -> QPoint """
    return 1

  def indexOf(self, QPoint, arg0=None):
    """ indexOf(self, QPoint, from_: int = 0) -> int """
    return 1

  def insert(self, int, QPoint):
    """ insert(self, int, QPoint) """
    pass

  def intersected(self, QPolygon):
    """ intersected(self, QPolygon) -> QPolygon """
    return None

  def intersects(self, QPolygon):
    """ intersects(self, QPolygon) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def last(self):
    """ last(self) -> QPoint """
    return 1

  def lastIndexOf(self, QPoint, arg0=None):
    """ lastIndexOf(self, QPoint, from_: int = -1) -> int """
    return 1

  def mid(self, int, arg0=None):
    """ mid(self, int, length: int = -1) -> QPolygon """
    return None

  def point(self, int):
    """ point(self, int) -> QPoint """
    return 1

  def prepend(self, QPoint):
    """ prepend(self, QPoint) """
    pass

  def putPoints(self, int, int, int, arg0):
    """ putPoints(self, int, int, int, *)
    putPoints(self, int, int, QPolygon, from_: int = 0) """
    pass

  def remove(self, int):
    """ remove(self, int)
    remove(self, int, int) """
    pass

  def replace(self, int, QPoint):
    """ replace(self, int, QPoint) """
    pass

  def setPoint(self, int, QPoint):
    """ setPoint(self, int, QPoint)
    setPoint(self, int, int, int) """
    pass

  def setPoints(self, Listint=None):
    """ setPoints(self, List[int])
    setPoints(self, int, int, *) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def subtracted(self, QPolygon):
    """ subtracted(self, QPolygon) -> QPolygon """
    return None

  def swap(self, QPolygon):
    """ swap(self, QPolygon) """
    pass

  def translate(self, int, int):
    """ translate(self, int, int)
    translate(self, QPoint) """
    pass

  def translated(self, int, int):
    """ translated(self, int, int) -> QPolygon
    translated(self, QPoint) -> QPolygon """
    return None

  def united(self, QPolygon):
    """ united(self, QPolygon) -> QPolygon """
    return None

  def value(self, int):
    """ value(self, int) -> QPoint
    value(self, int, QPoint) -> QPoint """
    return 1

class QPolygonF(simplewrapper):
  """ QPolygonF()
  QPolygonF(QPolygonF)
  QPolygonF(Iterable[Union[QPointF, QPoint]])
  QPolygonF(QRectF)
  QPolygonF(QPolygon)
  QPolygonF(int) """

  def append(self, UnionQPointF=None, QPoint=None):
    """ append(self, Union[QPointF, QPoint]) """
    pass

  def at(self, int):
    """ at(self, int) -> QPointF """
    return 1

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def contains(self, UnionQPointF=None, QPoint=None):
    """ contains(self, Union[QPointF, QPoint]) -> bool """
    return None

  def containsPoint(self, UnionQPointF=None, QPoint=None, Qt.FillRule=None):
    """ containsPoint(self, Union[QPointF, QPoint], Qt.FillRule) -> bool """
    return None

  def count(self, UnionQPointF=None, QPoint=None):
    """ count(self, Union[QPointF, QPoint]) -> int
    count(self) -> int """
    return 1

  def data(self):
    """ data(self) -> sip.voidptr """
    return None

  def fill():
    """ fill(self, Union[QPointF, QPoint], size: int = -1) """
    pass

  def first(self):
    """ first(self) -> QPointF """
    return 1

  def indexOf(self, UnionQPointF=None, QPoint=None, arg0=None):
    """ indexOf(self, Union[QPointF, QPoint], from_: int = 0) -> int """
    return 1

  def insert(self, int, UnionQPointF=None, QPoint=None):
    """ insert(self, int, Union[QPointF, QPoint]) """
    pass

  def intersected(self, QPolygonF):
    """ intersected(self, QPolygonF) -> QPolygonF """
    return None

  def intersects(self, QPolygonF):
    """ intersects(self, QPolygonF) -> bool """
    return None

  def isClosed(self):
    """ isClosed(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def last(self):
    """ last(self) -> QPointF """
    return 1

  def lastIndexOf(self, UnionQPointF=None, QPoint=None, arg0=None):
    """ lastIndexOf(self, Union[QPointF, QPoint], from_: int = -1) -> int """
    return 1

  def mid(self, int, arg0=None):
    """ mid(self, int, length: int = -1) -> QPolygonF """
    return None

  def prepend(self, UnionQPointF=None, QPoint=None):
    """ prepend(self, Union[QPointF, QPoint]) """
    pass

  def remove(self, int):
    """ remove(self, int)
    remove(self, int, int) """
    pass

  def replace(self, int, UnionQPointF=None, QPoint=None):
    """ replace(self, int, Union[QPointF, QPoint]) """
    pass

  def size(self):
    """ size(self) -> int """
    return 1

  def subtracted(self, QPolygonF):
    """ subtracted(self, QPolygonF) -> QPolygonF """
    return None

  def swap(self, QPolygonF):
    """ swap(self, QPolygonF) """
    pass

  def toPolygon(self):
    """ toPolygon(self) -> QPolygon """
    return None

  def translate(self, UnionQPointF=None, QPoint=None):
    """ translate(self, Union[QPointF, QPoint])
    translate(self, float, float) """
    pass

  def translated(self, UnionQPointF=None, QPoint=None):
    """ translated(self, Union[QPointF, QPoint]) -> QPolygonF
    translated(self, float, float) -> QPolygonF """
    return None

  def united(self, QPolygonF):
    """ united(self, QPolygonF) -> QPolygonF """
    return None

  def value(self, int):
    """ value(self, int) -> QPointF
    value(self, int, Union[QPointF, QPoint]) -> QPointF """
    return 1

class QQuaternion(simplewrapper):
  """ QQuaternion()
  QQuaternion(float, float, float, float)
  QQuaternion(float, QVector3D)
  QQuaternion(QVector4D)
  QQuaternion(QQuaternion) """

  def conjugate(self):
    """ conjugate(self) -> QQuaternion """
    return None

  def conjugated(self):
    """ conjugated(self) -> QQuaternion """
    return None

  def dotProduct(QQuaternion, QQuaternion):
    """ dotProduct(QQuaternion, QQuaternion) -> float """
    return 1.0

  def fromAxes(QVector3D, QVector3D, QVector3D):
    """ fromAxes(QVector3D, QVector3D, QVector3D) -> QQuaternion """
    return None

  def fromAxisAndAngle(QVector3D, float):
    """ fromAxisAndAngle(QVector3D, float) -> QQuaternion
    fromAxisAndAngle(float, float, float, float) -> QQuaternion """
    return None

  def fromDirection(QVector3D, QVector3D):
    """ fromDirection(QVector3D, QVector3D) -> QQuaternion """
    return None

  def fromEulerAngles(float, float, float):
    """ fromEulerAngles(float, float, float) -> QQuaternion
    fromEulerAngles(QVector3D) -> QQuaternion """
    return None

  def fromRotationMatrix(QMatrix3x3):
    """ fromRotationMatrix(QMatrix3x3) -> QQuaternion """
    return None

  def getAxes(self):
    """ getAxes(self) -> Tuple[QVector3D, QVector3D, QVector3D] """
    return None

  def getAxisAndAngle(self):
    """ getAxisAndAngle(self) -> Tuple[QVector3D, float] """
    return 1.0

  def getEulerAngles(self):
    """ getEulerAngles(self) -> Tuple[float, float, float] """
    return 1.0

  def inverted(self):
    """ inverted(self) -> QQuaternion """
    return None

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def length(self):
    """ length(self) -> float """
    return 1.0

  def lengthSquared(self):
    """ lengthSquared(self) -> float """
    return 1.0

  def nlerp(QQuaternion, QQuaternion, float):
    """ nlerp(QQuaternion, QQuaternion, float) -> QQuaternion """
    return None

  def normalize(self):
    """ normalize(self) """
    pass

  def normalized(self):
    """ normalized(self) -> QQuaternion """
    return None

  def rotatedVector(self, QVector3D):
    """ rotatedVector(self, QVector3D) -> QVector3D """
    return None

  def rotationTo(QVector3D, QVector3D):
    """ rotationTo(QVector3D, QVector3D) -> QQuaternion """
    return None

  def scalar(self):
    """ scalar(self) -> float """
    return 1.0

  def setScalar(self, float):
    """ setScalar(self, float) """
    pass

  def setVector(self, QVector3D):
    """ setVector(self, QVector3D)
    setVector(self, float, float, float) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZ(self, float):
    """ setZ(self, float) """
    pass

  def slerp(QQuaternion, QQuaternion, float):
    """ slerp(QQuaternion, QQuaternion, float) -> QQuaternion """
    return None

  def toEulerAngles(self):
    """ toEulerAngles(self) -> QVector3D """
    return None

  def toRotationMatrix(self):
    """ toRotationMatrix(self) -> QMatrix3x3 """
    return None

  def toVector4D(self):
    """ toVector4D(self) -> QVector4D """
    return None

  def vector(self):
    """ vector(self) -> QVector3D """
    return None

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def z(self):
    """ z(self) -> float """
    return 1.0

class QRadialGradient(QGradient):
  """ QRadialGradient()
  QRadialGradient(Union[QPointF, QPoint], float, Union[QPointF, QPoint])
  QRadialGradient(Union[QPointF, QPoint], float, Union[QPointF, QPoint], float)
  QRadialGradient(Union[QPointF, QPoint], float)
  QRadialGradient(float, float, float, float, float)
  QRadialGradient(float, float, float, float, float, float)
  QRadialGradient(float, float, float)
  QRadialGradient(QRadialGradient) """

  AboveTheSky = None
  AfricanField = None
  AlchemistLab = None
  AmourAmour = None
  AmyCrisp = None
  AngelCare = None
  AquaGuidance = None
  AquaSplash = None
  AwesomePine = None
  BigMango = None
  BlackSea = None
  Blessing = None
  BurningSpring = None
  CheerfulCaramel = None
  ChildCare = None
  CleanMirror = None
  CloudyApple = None
  CloudyKnoxville = None
  CochitiLake = None
  ColdEvening = None
  ColorfulPeach = None
  ConfidentCloud = None
  ConicalGradient = None
  CrystalRiver = None
  Crystalline = None
  DeepBlue = None
  DeepRelief = None
  DenseWater = None
  DesertHump = None
  DirtyBeauty = None
  DustyGrass = None
  EternalConstance = None
  EverlastingSky = None
  FabledSunset = None
  FarawayRiver = None
  FebruaryInk = None
  FlyHigh = None
  FlyingLemon = None
  ForestInei = None
  FreshMilk = None
  FreshOasis = None
  FrozenBerry = None
  FrozenDreams = None
  FrozenHeat = None
  FruitBlend = None
  GagarinView = None
  GentleCare = None
  GlassWater = None
  GrassShampoo = None
  GreatWhale = None
  GrownEarly = None
  HappyAcid = None
  HappyFisher = None
  HappyMemories = None
  HappyUnicorn = None
  HealthyWater = None
  HeavenPeach = None
  HeavyRain = None
  HiddenJaguar = None
  HighFlight = None
  ItmeoBranding = None
  JapanBlush = None
  JuicyCake = None
  JuicyPeach = None
  JungleDay = None
  KindSteel = None
  LadogaBottom = None
  LadyLips = None
  LandingAircraft = None
  LeCocktail = None
  LemonGate = None
  LightBlue = None
  LilyMeadow = None
  LinearGradient = None
  LogicalMode = None
  LoveKiss = None
  MagicLake = None
  MagicRay = None
  MalibuBeach = None
  MarbleWall = None
  MarsParty = None
  MeanFruit = None
  MidnightBloom = None
  MillenniumPine = None
  MindCrawl = None
  MixedHopes = None
  MoleHall = None
  MorningSalad = None
  MorpheusDen = None
  MountainRock = None
  NearMoon = None
  Nega = None
  NewLife = None
  NewRetrowave = None
  NewYork = None
  NightCall = None
  NightFade = None
  NightParty = None
  NightSky = None
  NoGradient = None
  NorseBeauty = None
  NorthMiracle = None
  ObjectBoundingMode = None
  ObjectMode = None
  OctoberSilence = None
  OldHat = None
  OrangeJuice = None
  OverSun = None
  PadSpread = None
  PaloAlto = None
  PartyBliss = None
  PassionateBed = None
  PerfectBlue = None
  PerfectWhite = None
  PhoenixStart = None
  PlumBath = None
  PlumPlate = None
  PoliteRumors = None
  PremiumDark = None
  PremiumWhite = None
  PurpleDivision = None
  RadialGradient = None
  RainyAshville = None
  RareWind = None
  RedSalvation = None
  ReflectSpread = None
  RepeatSpread = None
  RichMetal = None
  RipeMalinka = None
  RiskyConcrete = None
  RiverCity = None
  RoyalGarden = None
  SaintPetersburg = None
  SaltMountain = None
  SandStrike = None
  SeaLord = None
  SeaStrike = None
  Seashore = None
  ShadyWater = None
  SharpBlues = None
  SharpeyeEagle = None
  ShyRainbow = None
  SkyGlider = None
  SleeplessNight = None
  SmartIndigo = None
  SmilingRain = None
  SnowAgain = None
  SoftCherish = None
  SoftGrass = None
  SoftLipstick = None
  SolidStone = None
  SpaceShift = None
  SpikyNaga = None
  SpringWarmth = None
  StarWine = None
  StretchToDeviceMode = None
  StrictNovember = None
  StrongBliss = None
  StrongStick = None
  SugarLollipop = None
  SummerGames = None
  SunVeggie = None
  SunnyMorning = None
  SupremeSky = None
  SweetDessert = None
  SweetPeriod = None
  TeenNotebook = None
  TeenParty = None
  TemptingAzure = None
  TrueSunset = None
  ViciousStance = None
  WarmFlame = None
  WideMatrix = None
  WildApple = None
  WinterNeva = None
  WitchDance = None
  YoungGrass = None
  YoungPassion = None
  ZeusMiracle = None

  def center(self):
    """ center(self) -> QPointF """
    return 1

  def centerRadius(self):
    """ centerRadius(self) -> float """
    return 1.0

  def coordinateMode(self):
    """ coordinateMode(self) -> QGradient.CoordinateMode """
    return None

  def focalPoint(self):
    """ focalPoint(self) -> QPointF """
    return 1

  def focalRadius(self):
    """ focalRadius(self) -> float """
    return 1.0

  def radius(self):
    """ radius(self) -> float """
    return 1.0

  def setCenter(self, UnionQPointF=None, QPoint=None):
    """ setCenter(self, Union[QPointF, QPoint])
    setCenter(self, float, float) """
    pass

  def setCenterRadius(self, float):
    """ setCenterRadius(self, float) """
    pass

  def setColorAt(self, float, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setColorAt(self, float, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCoordinateMode(self, arg0):
    """ setCoordinateMode(self, QGradient.CoordinateMode) """
    pass

  def setFocalPoint(self, UnionQPointF=None, QPoint=None):
    """ setFocalPoint(self, Union[QPointF, QPoint])
    setFocalPoint(self, float, float) """
    pass

  def setFocalRadius(self, float):
    """ setFocalRadius(self, float) """
    pass

  def setRadius(self, float):
    """ setRadius(self, float) """
    pass

  def setSpread(self, arg0):
    """ setSpread(self, QGradient.Spread) """
    pass

  def setStops(self, IterableTuplefloat=None, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setStops(self, Iterable[Tuple[float, Union[QColor, Qt.GlobalColor, QGradient]]]) """
    pass

  def spread(self):
    """ spread(self) -> QGradient.Spread """
    return None

  def stops(self):
    """ stops(self) -> List[Tuple[float, QColor]] """
    return 1.0

  def type(self):
    """ type(self) -> QGradient.Type """
    return None

class QRasterWindow(QPaintDeviceWindow):
  """ QRasterWindow(parent: QWindow = None) """

  AutomaticVisibility = None
  ExcludeTransients = None
  FullScreen = None
  Hidden = None
  IncludeTransients = None
  Maximized = None
  MetalSurface = None
  Minimized = None
  Offscreen = None
  OpenGLSurface = None
  OpenVGSurface = None
  PdmDepth = None
  PdmDevicePixelRatio = None
  PdmDevicePixelRatioScaled = None
  PdmDpiX = None
  PdmDpiY = None
  PdmHeight = None
  PdmHeightMM = None
  PdmNumColors = None
  PdmPhysicalDpiX = None
  PdmPhysicalDpiY = None
  PdmWidth = None
  PdmWidthMM = None
  RasterGLSurface = None
  RasterSurface = None
  VulkanSurface = None
  Window = None
  Windowed = None

  def activeChanged(self):
    """ activeChanged(self) [signal] """
    pass

  def alert(self, int):
    """ alert(self, int) """
    pass

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) -> bool """
    return None

  def colorCount(self):
    """ colorCount(self) -> int """
    return 1

  def connectNotify():
    pass

  def contentOrientation(self):
    """ contentOrientation(self) -> Qt.ScreenOrientation """
    return None

  def contentOrientationChanged(self, arg0):
    """ contentOrientationChanged(self, Qt.ScreenOrientation) [signal] """
    pass

  def create(self):
    """ create(self) """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def devicePixelRatioF(self):
    """ devicePixelRatioF(self) -> float """
    return 1.0

  def devicePixelRatioFScale():
    """ devicePixelRatioFScale() -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event():
    pass

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exposeEvent():
    pass

  def filePath(self):
    """ filePath(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> Qt.WindowFlags """
    return None

  def focusInEvent():
    pass

  def focusObject(self):
    """ focusObject(self) -> QObject """
    return None

  def focusObjectChanged(self, QObject):
    """ focusObjectChanged(self, QObject) [signal] """
    pass

  def focusOutEvent():
    pass

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameMargins(self):
    """ frameMargins(self) -> QMargins """
    return None

  def framePosition(self):
    """ framePosition(self) -> QPoint """
    return 1

  def fromWinId(arg0):
    """ fromWinId(sip.voidptr) -> QWindow """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightChanged(self, int):
    """ heightChanged(self, int) [signal] """
    pass

  def heightMM(self):
    """ heightMM(self) -> int """
    return 1

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent():
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def isAncestorOf(self, QWindow, arg0=None):
    """ isAncestorOf(self, QWindow, mode: QWindow.AncestorMode = QWindow.IncludeTransients) -> bool """
    return None

  def isExposed(self):
    """ isExposed(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTopLevel(self):
    """ isTopLevel(self) -> bool """
    return None

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent():
    pass

  def keyReleaseEvent():
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def logicalDpiX(self):
    """ logicalDpiX(self) -> int """
    return 1

  def logicalDpiY(self):
    """ logicalDpiY(self) -> int """
    return 1

  def lower(self):
    """ lower(self) """
    pass

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumHeightChanged(self, int):
    """ maximumHeightChanged(self, int) [signal] """
    pass

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def maximumWidthChanged(self, int):
    """ maximumWidthChanged(self, int) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def metric(self, arg0):
    """ metric(self, QPaintDevice.PaintDeviceMetric) -> int """
    return 1

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumHeightChanged(self, int):
    """ minimumHeightChanged(self, int) [signal] """
    pass

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def minimumWidthChanged(self, int):
    """ minimumWidthChanged(self, int) [signal] """
    pass

  def modality(self):
    """ modality(self) -> Qt.WindowModality """
    return None

  def modalityChanged(self, arg0):
    """ modalityChanged(self, Qt.WindowModality) [signal] """
    pass

  def mouseDoubleClickEvent():
    pass

  def mouseMoveEvent():
    pass

  def mousePressEvent():
    pass

  def mouseReleaseEvent():
    pass

  def moveEvent():
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self, float):
    """ opacityChanged(self, float) [signal] """
    pass

  def paintEngine(self):
    """ paintEngine(self) -> QPaintEngine """
    return 1

  def paintEvent():
    pass

  def paintingActive(self):
    """ paintingActive(self) -> bool """
    return None

  def parent(self):
    """ parent(self) -> QWindow
    parent(self, QWindow.AncestorMode) -> QWindow """
    return None

  def physicalDpiX(self):
    """ physicalDpiX(self) -> int """
    return 1

  def physicalDpiY(self):
    """ physicalDpiY(self) -> int """
    return 1

  def position(self):
    """ position(self) -> QPoint """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reportContentOrientationChange(self, arg0):
    """ reportContentOrientationChange(self, Qt.ScreenOrientation) """
    pass

  def requestActivate(self):
    """ requestActivate(self) """
    pass

  def requestUpdate(self):
    """ requestUpdate(self) """
    pass

  def requestedFormat(self):
    """ requestedFormat(self) -> QSurfaceFormat """
    return None

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent():
    pass

  def screen(self):
    """ screen(self) -> QScreen """
    return None

  def screenChanged(self, QScreen):
    """ screenChanged(self, QScreen) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBaseSize(self, QSize):
    """ setBaseSize(self, QSize) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setFilePath(self, str):
    """ setFilePath(self, str) """
    pass

  def setFlag():
    """ setFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setFormat(self, QSurfaceFormat):
    """ setFormat(self, QSurfaceFormat) """
    pass

  def setFramePosition(self, QPoint):
    """ setFramePosition(self, QPoint) """
    pass

  def setGeometry(self, int, int, int, int):
    """ setGeometry(self, int, int, int, int)
    setGeometry(self, QRect) """
    pass

  def setHeight(self, int):
    """ setHeight(self, int) """
    pass

  def setIcon(self, QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setKeyboardGrabEnabled(self, bool):
    """ setKeyboardGrabEnabled(self, bool) -> bool """
    return None

  def setMask(self, QRegion):
    """ setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, QSize):
    """ setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, QSize):
    """ setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModality(self, arg0):
    """ setModality(self, Qt.WindowModality) """
    pass

  def setMouseGrabEnabled(self, bool):
    """ setMouseGrabEnabled(self, bool) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setParent(self, QWindow):
    """ setParent(self, QWindow) """
    pass

  def setPosition(self, QPoint):
    """ setPosition(self, QPoint)
    setPosition(self, int, int) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setScreen(self, QScreen):
    """ setScreen(self, QScreen) """
    pass

  def setSizeIncrement(self, QSize):
    """ setSizeIncrement(self, QSize) """
    pass

  def setSurfaceType(self, arg0):
    """ setSurfaceType(self, QSurface.SurfaceType) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def setTransientParent(self, QWindow):
    """ setTransientParent(self, QWindow) """
    pass

  def setVisibility(self, arg0):
    """ setVisibility(self, QWindow.Visibility) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWidth(self, int):
    """ setWidth(self, int) """
    pass

  def setWindowState(self, arg0):
    """ setWindowState(self, Qt.WindowState) """
    pass

  def setWindowStates(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowStates(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setX(self, int):
    """ setX(self, int) """
    pass

  def setY(self, int):
    """ setY(self, int) """
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent():
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsOpenGL(self):
    """ supportsOpenGL(self) -> bool """
    return None

  def surfaceClass(self):
    """ surfaceClass(self) -> QSurface.SurfaceClass """
    return None

  def surfaceType(self):
    """ surfaceType(self) -> QSurface.SurfaceType """
    return None

  def tabletEvent():
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def touchEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transientParent(self):
    """ transientParent(self) -> QWindow """
    return None

  def type(self):
    """ type(self) -> Qt.WindowType """
    return None

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def update(self, QRect):
    """ update(self, QRect)
    update(self, QRegion)
    update(self) """
    pass

  def visibility(self):
    """ visibility(self) -> QWindow.Visibility """
    return None

  def visibilityChanged(self, arg0):
    """ visibilityChanged(self, QWindow.Visibility) [signal] """
    pass

  def visibleChanged(self, bool):
    """ visibleChanged(self, bool) [signal] """
    pass

  def wheelEvent():
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthChanged(self, int):
    """ widthChanged(self, int) [signal] """
    pass

  def widthMM(self):
    """ widthMM(self) -> int """
    return 1

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def windowState(self):
    """ windowState(self) -> Qt.WindowState """
    return None

  def windowStateChanged(self, arg0):
    """ windowStateChanged(self, Qt.WindowState) [signal] """
    pass

  def windowStates(self):
    """ windowStates(self) -> Qt.WindowStates """
    return None

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def x(self):
    """ x(self) -> int """
    return 1

  def xChanged(self, int):
    """ xChanged(self, int) [signal] """
    pass

  def y(self):
    """ y(self) -> int """
    return 1

  def yChanged(self, int):
    """ yChanged(self, int) [signal] """
    pass

class QRawFont(simplewrapper):
  """ QRawFont()
  QRawFont(str, float, hintingPreference: QFont.HintingPreference = QFont.PreferDefaultHinting)
  QRawFont(Union[QByteArray, bytes, bytearray], float, hintingPreference: QFont.HintingPreference = QFont.PreferDefaultHinting)
  QRawFont(QRawFont) """

  class AntialiasingType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  KernedAdvances = None

  class LayoutFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class LayoutFlags(simplewrapper):
    """ QRawFont.LayoutFlags()
    QRawFont.LayoutFlags(Union[QRawFont.LayoutFlags, QRawFont.LayoutFlag])
    QRawFont.LayoutFlags(QRawFont.LayoutFlags) """

    pass

  PixelAntialiasing = None
  SeparateAdvances = None
  SubPixelAntialiasing = None
  UseDesignMetrics = None

  def advancesForGlyphIndexes(self, Iterableint=None):
    """ advancesForGlyphIndexes(self, Iterable[int]) -> List[QPointF]
    advancesForGlyphIndexes(self, Iterable[int], Union[QRawFont.LayoutFlags, QRawFont.LayoutFlag]) -> List[QPointF] """
    return 1

  def alphaMapForGlyph(self, int, arg0=None, arg1=None):
    """ alphaMapForGlyph(self, int, antialiasingType: QRawFont.AntialiasingType = QRawFont.SubPixelAntialiasing, transform: QTransform = QTransform()) -> QImage """
    return None

  def ascent(self):
    """ ascent(self) -> float """
    return 1.0

  def averageCharWidth(self):
    """ averageCharWidth(self) -> float """
    return 1.0

  def boundingRect(self, int):
    """ boundingRect(self, int) -> QRectF """
    return None

  def capHeight(self):
    """ capHeight(self) -> float """
    return 1.0

  def descent(self):
    """ descent(self) -> float """
    return 1.0

  def familyName(self):
    """ familyName(self) -> str """
    return ""

  def fontTable(self, str):
    """ fontTable(self, str) -> QByteArray """
    return None

  def fromFont(QFont, arg0=None):
    """ fromFont(QFont, writingSystem: QFontDatabase.WritingSystem = QFontDatabase.Any) -> QRawFont """
    return None

  def glyphIndexesForString(self, str):
    """ glyphIndexesForString(self, str) -> List[int] """
    return 1

  def hintingPreference(self):
    """ hintingPreference(self) -> QFont.HintingPreference """
    return 1

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def leading(self):
    """ leading(self) -> float """
    return 1.0

  def lineThickness(self):
    """ lineThickness(self) -> float """
    return 1.0

  def loadFromData(self, UnionQByteArray=None, bytes=None, bytearray=None, float=None, QFont.HintingPreference=None):
    """ loadFromData(self, Union[QByteArray, bytes, bytearray], float, QFont.HintingPreference) """
    pass

  def loadFromFile(self, str, float, arg0):
    """ loadFromFile(self, str, float, QFont.HintingPreference) """
    pass

  def maxCharWidth(self):
    """ maxCharWidth(self) -> float """
    return 1.0

  def pathForGlyph(self, int):
    """ pathForGlyph(self, int) -> QPainterPath """
    return 1

  def pixelSize(self):
    """ pixelSize(self) -> float """
    return 1.0

  def setPixelSize(self, float):
    """ setPixelSize(self, float) """
    pass

  def style(self):
    """ style(self) -> QFont.Style """
    return None

  def styleName(self):
    """ styleName(self) -> str """
    return ""

  def supportedWritingSystems(self):
    """ supportedWritingSystems(self) -> List[QFontDatabase.WritingSystem] """
    return None

  def supportsCharacter(self, int):
    """ supportsCharacter(self, int) -> bool
    supportsCharacter(self, str) -> bool """
    return None

  def swap(self, QRawFont):
    """ swap(self, QRawFont) """
    pass

  def underlinePosition(self):
    """ underlinePosition(self) -> float """
    return 1.0

  def unitsPerEm(self):
    """ unitsPerEm(self) -> float """
    return 1.0

  def weight(self):
    """ weight(self) -> int """
    return 1

  def xHeight(self):
    """ xHeight(self) -> float """
    return 1.0

class QRegExpValidator(QValidator):
  """ QRegExpValidator(parent: QObject = None)
  QRegExpValidator(QRegExp, parent: QObject = None) """

  Acceptable = None
  Intermediate = None
  Invalid = None
  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changed(self):
    """ changed(self) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def regExp(self):
    """ regExp(self) -> QRegExp """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRegExp(self, QRegExp):
    """ setRegExp(self, QRegExp) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

class QRegion(simplewrapper):
  """ QRegion()
  QRegion(int, int, int, int, type: QRegion.RegionType = QRegion.Rectangle)
  QRegion(QRect, type: QRegion.RegionType = QRegion.Rectangle)
  QRegion(QPolygon, fillRule: Qt.FillRule = Qt.OddEvenFill)
  QRegion(QBitmap)
  QRegion(QRegion)
  QRegion(Any) """

  Ellipse = None
  Rectangle = None

  class RegionType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def boundingRect(self):
    """ boundingRect(self) -> QRect """
    return None

  def contains(self, QPoint):
    """ contains(self, QPoint) -> bool
    contains(self, QRect) -> bool """
    return None

  def intersected(self, QRegion):
    """ intersected(self, QRegion) -> QRegion
    intersected(self, QRect) -> QRegion """
    return None

  def intersects(self, QRegion):
    """ intersects(self, QRegion) -> bool
    intersects(self, QRect) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def rectCount(self):
    """ rectCount(self) -> int """
    return 1

  def rects(self):
    """ rects(self) -> List[QRect] """
    return None

  def setRects(self, IterableQRect=None):
    """ setRects(self, Iterable[QRect]) """
    pass

  def subtracted(self, QRegion):
    """ subtracted(self, QRegion) -> QRegion """
    return None

  def swap(self, QRegion):
    """ swap(self, QRegion) """
    pass

  def translate(self, int, int):
    """ translate(self, int, int)
    translate(self, QPoint) """
    pass

  def translated(self, int, int):
    """ translated(self, int, int) -> QRegion
    translated(self, QPoint) -> QRegion """
    return None

  def united(self, QRegion):
    """ united(self, QRegion) -> QRegion
    united(self, QRect) -> QRegion """
    return None

  def xored(self, QRegion):
    """ xored(self, QRegion) -> QRegion """
    return None

class QRegularExpressionValidator(QValidator):
  """ QRegularExpressionValidator(parent: QObject = None)
  QRegularExpressionValidator(QRegularExpression, parent: QObject = None) """

  Acceptable = None
  Intermediate = None
  Invalid = None
  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changed(self):
    """ changed(self) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def regularExpression(self):
    """ regularExpression(self) -> QRegularExpression """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRegularExpression(self, QRegularExpression):
    """ setRegularExpression(self, QRegularExpression) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

class QResizeEvent(QEvent):
  """ QResizeEvent(QSize, QSize)
  QResizeEvent(QResizeEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def oldSize(self):
    """ oldSize(self) -> QSize """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def size(self):
    """ size(self) -> QSize """
    return None

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QRgba64(simplewrapper):
  """ QRgba64()
  QRgba64(QRgba64) """

  def alpha(self):
    """ alpha(self) -> int """
    return 1

  def alpha8(self):
    """ alpha8(self) -> int """
    return 1

  def blue(self):
    """ blue(self) -> int """
    return 1

  def blue8(self):
    """ blue8(self) -> int """
    return 1

  def fromArgb32(int):
    """ fromArgb32(int) -> QRgba64 """
    return None

  def fromRgba(int, int, int, int):
    """ fromRgba(int, int, int, int) -> QRgba64 """
    return None

  def fromRgba64(int):
    """ fromRgba64(int) -> QRgba64
    fromRgba64(int, int, int, int) -> QRgba64 """
    return None

  def green(self):
    """ green(self) -> int """
    return 1

  def green8(self):
    """ green8(self) -> int """
    return 1

  def isOpaque(self):
    """ isOpaque(self) -> bool """
    return None

  def isTransparent(self):
    """ isTransparent(self) -> bool """
    return None

  def premultiplied(self):
    """ premultiplied(self) -> QRgba64 """
    return None

  def red(self):
    """ red(self) -> int """
    return 1

  def red8(self):
    """ red8(self) -> int """
    return 1

  def setAlpha(self, int):
    """ setAlpha(self, int) """
    pass

  def setBlue(self, int):
    """ setBlue(self, int) """
    pass

  def setGreen(self, int):
    """ setGreen(self, int) """
    pass

  def setRed(self, int):
    """ setRed(self, int) """
    pass

  def toArgb32(self):
    """ toArgb32(self) -> int """
    return 1

  def toRgb16(self):
    """ toRgb16(self) -> int """
    return 1

  def unpremultiplied(self):
    """ unpremultiplied(self) -> QRgba64 """
    return None

class QScreen(QObject):

  def angleBetween(self, arg0, arg1):
    """ angleBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation) -> int """
    return 1

  def availableGeometry(self):
    """ availableGeometry(self) -> QRect """
    return None

  def availableGeometryChanged(self, QRect):
    """ availableGeometryChanged(self, QRect) [signal] """
    pass

  def availableSize(self):
    """ availableSize(self) -> QSize """
    return None

  def availableVirtualGeometry(self):
    """ availableVirtualGeometry(self) -> QRect """
    return None

  def availableVirtualSize(self):
    """ availableVirtualSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def depth(self):
    """ depth(self) -> int """
    return 1

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def geometryChanged(self, QRect):
    """ geometryChanged(self, QRect) [signal] """
    pass

  def grabWindow(self, arg0, arg1=None, arg2=None, arg3=None, arg4=None):
    """ grabWindow(self, sip.voidptr, x: int = 0, y: int = 0, width: int = -1, height: int = -1) -> QPixmap """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isLandscape(self, arg0):
    """ isLandscape(self, Qt.ScreenOrientation) -> bool """
    return None

  def isPortrait(self, arg0):
    """ isPortrait(self, Qt.ScreenOrientation) -> bool """
    return None

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def logicalDotsPerInch(self):
    """ logicalDotsPerInch(self) -> float """
    return 1.0

  def logicalDotsPerInchChanged(self, float):
    """ logicalDotsPerInchChanged(self, float) [signal] """
    pass

  def logicalDotsPerInchX(self):
    """ logicalDotsPerInchX(self) -> float """
    return 1.0

  def logicalDotsPerInchY(self):
    """ logicalDotsPerInchY(self) -> float """
    return 1.0

  def manufacturer(self):
    """ manufacturer(self) -> str """
    return ""

  def mapBetween(self, arg0, arg1, QRect):
    """ mapBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation, QRect) -> QRect """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def model(self):
    """ model(self) -> str """
    return ""

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def name(self):
    """ name(self) -> str """
    return ""

  def nativeOrientation(self):
    """ nativeOrientation(self) -> Qt.ScreenOrientation """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def orientation(self):
    """ orientation(self) -> Qt.ScreenOrientation """
    return None

  def orientationChanged(self, arg0):
    """ orientationChanged(self, Qt.ScreenOrientation) [signal] """
    pass

  def orientationUpdateMask(self):
    """ orientationUpdateMask(self) -> Qt.ScreenOrientations """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def physicalDotsPerInch(self):
    """ physicalDotsPerInch(self) -> float """
    return 1.0

  def physicalDotsPerInchChanged(self, float):
    """ physicalDotsPerInchChanged(self, float) [signal] """
    pass

  def physicalDotsPerInchX(self):
    """ physicalDotsPerInchX(self) -> float """
    return 1.0

  def physicalDotsPerInchY(self):
    """ physicalDotsPerInchY(self) -> float """
    return 1.0

  def physicalSize(self):
    """ physicalSize(self) -> QSizeF """
    return None

  def physicalSizeChanged(self, QSizeF):
    """ physicalSizeChanged(self, QSizeF) [signal] """
    pass

  def primaryOrientation(self):
    """ primaryOrientation(self) -> Qt.ScreenOrientation """
    return None

  def primaryOrientationChanged(self, arg0):
    """ primaryOrientationChanged(self, Qt.ScreenOrientation) [signal] """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def refreshRate(self):
    """ refreshRate(self) -> float """
    return 1.0

  def refreshRateChanged(self, float):
    """ refreshRateChanged(self, float) [signal] """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def serialNumber(self):
    """ serialNumber(self) -> str """
    return ""

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOrientationUpdateMask(self, UnionQt.ScreenOrientations=None, Qt.ScreenOrientation=None):
    """ setOrientationUpdateMask(self, Union[Qt.ScreenOrientations, Qt.ScreenOrientation]) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transformBetween(self, arg0, arg1, QRect):
    """ transformBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation, QRect) -> QTransform """
    return None

  def virtualGeometry(self):
    """ virtualGeometry(self) -> QRect """
    return None

  def virtualGeometryChanged(self, QRect):
    """ virtualGeometryChanged(self, QRect) [signal] """
    pass

  def virtualSiblings(self):
    """ virtualSiblings(self) -> List[QScreen] """
    return None

  def virtualSize(self):
    """ virtualSize(self) -> QSize """
    return None

class QScrollEvent(QEvent):
  """ QScrollEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QScrollEvent.ScrollState)
  QScrollEvent(QScrollEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollFinished = None
  ScrollPrepare = None
  ScrollStarted = None

  class ScrollState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ScrollUpdated = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def contentPos(self):
    """ contentPos(self) -> QPointF """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def overshootDistance(self):
    """ overshootDistance(self) -> QPointF """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def scrollState(self):
    """ scrollState(self) -> QScrollEvent.ScrollState """
    return None

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QScrollPrepareEvent(QEvent):
  """ QScrollPrepareEvent(Union[QPointF, QPoint])
  QScrollPrepareEvent(QScrollPrepareEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def contentPos(self):
    """ contentPos(self) -> QPointF """
    return 1

  def contentPosRange(self):
    """ contentPosRange(self) -> QRectF """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setContentPos(self, UnionQPointF=None, QPoint=None):
    """ setContentPos(self, Union[QPointF, QPoint]) """
    pass

  def setContentPosRange(self, QRectF):
    """ setContentPosRange(self, QRectF) """
    pass

  def setViewportSize(self, QSizeF):
    """ setViewportSize(self, QSizeF) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def startPos(self):
    """ startPos(self) -> QPointF """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def viewportSize(self):
    """ viewportSize(self) -> QSizeF """
    return None

class QSessionManager(QObject):

  RestartAnyway = None

  class RestartHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RestartIfRunning = None
  RestartImmediately = None
  RestartNever = None

  def allowsErrorInteraction(self):
    """ allowsErrorInteraction(self) -> bool """
    return None

  def allowsInteraction(self):
    """ allowsInteraction(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cancel(self):
    """ cancel(self) """
    pass

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def discardCommand(self):
    """ discardCommand(self) -> List[str] """
    return ""

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isPhase2(self):
    """ isPhase2(self) -> bool """
    return None

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def release(self):
    """ release(self) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def requestPhase2(self):
    """ requestPhase2(self) """
    pass

  def restartCommand(self):
    """ restartCommand(self) -> List[str] """
    return ""

  def restartHint(self):
    """ restartHint(self) -> QSessionManager.RestartHint """
    return 1

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def sessionId(self):
    """ sessionId(self) -> str """
    return ""

  def sessionKey(self):
    """ sessionKey(self) -> str """
    return ""

  def setDiscardCommand(self, Iterablestr=None):
    """ setDiscardCommand(self, Iterable[str]) """
    pass

  def setManagerProperty(self, str, str):
    """ setManagerProperty(self, str, str)
    setManagerProperty(self, str, Iterable[str]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRestartCommand(self, Iterablestr=None):
    """ setRestartCommand(self, Iterable[str]) """
    pass

  def setRestartHint(self, arg0):
    """ setRestartHint(self, QSessionManager.RestartHint) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QShortcutEvent(QEvent):
  """ QShortcutEvent(Union[QKeySequence, QKeySequence.StandardKey, str, int], int, ambiguous: bool = False)
  QShortcutEvent(QShortcutEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def isAmbiguous(self):
    """ isAmbiguous(self) -> bool """
    return None

  def key(self):
    """ key(self) -> QKeySequence """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def shortcutId(self):
    """ shortcutId(self) -> int """
    return 1

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QShowEvent(QEvent):
  """ QShowEvent()
  QShowEvent(QShowEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QStandardItem(wrapper):
  """ QStandardItem()
  QStandardItem(str)
  QStandardItem(QIcon, str)
  QStandardItem(int, columns: int = 1)
  QStandardItem(QStandardItem) """

  class ItemType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Type = None
  UserType = None

  def accessibleDescription(self):
    """ accessibleDescription(self) -> str """
    return ""

  def accessibleText(self):
    """ accessibleText(self) -> str """
    return ""

  def appendColumn(self, IterableQStandardItem=None):
    """ appendColumn(self, Iterable[QStandardItem]) """
    pass

  def appendRow(self, IterableQStandardItem=None):
    """ appendRow(self, Iterable[QStandardItem])
    appendRow(self, QStandardItem) """
    pass

  def appendRows(self, IterableQStandardItem=None):
    """ appendRows(self, Iterable[QStandardItem]) """
    pass

  def background(self):
    """ background(self) -> QBrush """
    return None

  def checkState(self):
    """ checkState(self) -> Qt.CheckState """
    return None

  def child(self, int, arg0=None):
    """ child(self, int, column: int = 0) -> QStandardItem """
    return None

  def clearData(self):
    """ clearData(self) """
    pass

  def clone(self):
    """ clone(self) -> QStandardItem """
    return None

  def column(self):
    """ column(self) -> int """
    return 1

  def columnCount(self):
    """ columnCount(self) -> int """
    return 1

  def data(self, arg0=None):
    """ data(self, role: int = Qt.UserRole+1) -> Any """
    return None

  def emitDataChanged(self):
    """ emitDataChanged(self) """
    pass

  def flags(self):
    """ flags(self) -> Qt.ItemFlags """
    return None

  def font(self):
    """ font(self) -> QFont """
    return None

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasChildren(self):
    """ hasChildren(self) -> bool """
    return None

  def icon(self):
    """ icon(self) -> QIcon """
    return None

  def index(self):
    """ index(self) -> QModelIndex """
    return None

  def insertColumn(self, int, IterableQStandardItem=None):
    """ insertColumn(self, int, Iterable[QStandardItem]) """
    pass

  def insertColumns(self, int, int):
    """ insertColumns(self, int, int) """
    pass

  def insertRow(self, int, IterableQStandardItem=None):
    """ insertRow(self, int, Iterable[QStandardItem])
    insertRow(self, int, QStandardItem) """
    pass

  def insertRows(self, int, int):
    """ insertRows(self, int, int)
    insertRows(self, int, Iterable[QStandardItem]) """
    pass

  def isAutoTristate(self):
    """ isAutoTristate(self) -> bool """
    return None

  def isCheckable(self):
    """ isCheckable(self) -> bool """
    return None

  def isDragEnabled(self):
    """ isDragEnabled(self) -> bool """
    return None

  def isDropEnabled(self):
    """ isDropEnabled(self) -> bool """
    return None

  def isEditable(self):
    """ isEditable(self) -> bool """
    return None

  def isEnabled(self):
    """ isEnabled(self) -> bool """
    return None

  def isSelectable(self):
    """ isSelectable(self) -> bool """
    return None

  def isTristate(self):
    """ isTristate(self) -> bool """
    return None

  def isUserTristate(self):
    """ isUserTristate(self) -> bool """
    return None

  def model(self):
    """ model(self) -> QStandardItemModel """
    return None

  def parent(self):
    """ parent(self) -> QStandardItem """
    return None

  def read(self, QDataStream):
    """ read(self, QDataStream) """
    pass

  def removeColumn(self, int):
    """ removeColumn(self, int) """
    pass

  def removeColumns(self, int, int):
    """ removeColumns(self, int, int) """
    pass

  def removeRow(self, int):
    """ removeRow(self, int) """
    pass

  def removeRows(self, int, int):
    """ removeRows(self, int, int) """
    pass

  def row(self):
    """ row(self) -> int """
    return 1

  def rowCount(self):
    """ rowCount(self) -> int """
    return 1

  def setAccessibleDescription(self, str):
    """ setAccessibleDescription(self, str) """
    pass

  def setAccessibleText(self, str):
    """ setAccessibleText(self, str) """
    pass

  def setAutoTristate(self, bool):
    """ setAutoTristate(self, bool) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setCheckState(self, arg0):
    """ setCheckState(self, Qt.CheckState) """
    pass

  def setCheckable(self, bool):
    """ setCheckable(self, bool) """
    pass

  def setChild(self, int, int, QStandardItem):
    """ setChild(self, int, int, QStandardItem)
    setChild(self, int, QStandardItem) """
    pass

  def setColumnCount(self, int):
    """ setColumnCount(self, int) """
    pass

  def setData():
    """ setData(self, Any, role: int = Qt.UserRole+1) """
    pass

  def setDragEnabled(self, bool):
    """ setDragEnabled(self, bool) """
    pass

  def setDropEnabled(self, bool):
    """ setDropEnabled(self, bool) """
    pass

  def setEditable(self, bool):
    """ setEditable(self, bool) """
    pass

  def setEnabled(self, bool):
    """ setEnabled(self, bool) """
    pass

  def setFlags(self, UnionQt.ItemFlags=None, Qt.ItemFlag=None):
    """ setFlags(self, Union[Qt.ItemFlags, Qt.ItemFlag]) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setIcon(self, QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setRowCount(self, int):
    """ setRowCount(self, int) """
    pass

  def setSelectable(self, bool):
    """ setSelectable(self, bool) """
    pass

  def setSizeHint(self, QSize):
    """ setSizeHint(self, QSize) """
    pass

  def setStatusTip(self, str):
    """ setStatusTip(self, str) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setTextAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTristate(self, bool):
    """ setTristate(self, bool) """
    pass

  def setUserTristate(self, bool):
    """ setUserTristate(self, bool) """
    pass

  def setWhatsThis(self, str):
    """ setWhatsThis(self, str) """
    pass

  def sizeHint(self):
    """ sizeHint(self) -> QSize """
    return None

  def sortChildren():
    """ sortChildren(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def statusTip(self):
    """ statusTip(self) -> str """
    return ""

  def takeChild(self, int, arg0=None):
    """ takeChild(self, int, column: int = 0) -> QStandardItem """
    return None

  def takeColumn(self, int):
    """ takeColumn(self, int) -> List[QStandardItem] """
    return None

  def takeRow(self, int):
    """ takeRow(self, int) -> List[QStandardItem] """
    return None

  def text(self):
    """ text(self) -> str """
    return ""

  def textAlignment(self):
    """ textAlignment(self) -> Qt.Alignment """
    return None

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def type(self):
    """ type(self) -> int """
    return 1

  def whatsThis(self):
    """ whatsThis(self) -> str """
    return ""

  def write(self, QDataStream):
    """ write(self, QDataStream) """
    pass

class QStandardItemModel(QAbstractItemModel):
  """ QStandardItemModel(parent: QObject = None)
  QStandardItemModel(int, int, parent: QObject = None) """

  class CheckIndexOption(IntEnum):
    """ An enumeration. """

    DoNotUseParent = None
    IndexIsValid = None
    NoOption = None
    ParentIsInvalid = None

  class CheckIndexOptions(simplewrapper):
    """ QAbstractItemModel.CheckIndexOptions()
    QAbstractItemModel.CheckIndexOptions(Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption])
    QAbstractItemModel.CheckIndexOptions(QAbstractItemModel.CheckIndexOptions) """

    pass

  HorizontalSortHint = None

  class LayoutChangeHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NoLayoutChangeHint = None
  VerticalSortHint = None

  def appendColumn(self, IterableQStandardItem=None):
    """ appendColumn(self, Iterable[QStandardItem]) """
    pass

  def appendRow(self, IterableQStandardItem=None):
    """ appendRow(self, Iterable[QStandardItem])
    appendRow(self, QStandardItem) """
    pass

  def beginInsertColumns():
    pass

  def beginInsertRows():
    pass

  def beginMoveColumns():
    pass

  def beginMoveRows():
    pass

  def beginRemoveColumns():
    pass

  def beginRemoveRows():
    pass

  def beginResetModel():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def buddy(self, QModelIndex):
    """ buddy(self, QModelIndex) -> QModelIndex """
    return None

  def canDropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def canFetchMore(self, QModelIndex):
    """ canFetchMore(self, QModelIndex) -> bool """
    return None

  def changePersistentIndex():
    pass

  def changePersistentIndexList():
    pass

  def checkIndex(self, QModelIndex, arg0=None, arg1=None):
    """ checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def clearItemData(self, QModelIndex):
    """ clearItemData(self, QModelIndex) -> bool """
    return None

  def columnCount(self, arg0=None):
    """ columnCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def columnsAboutToBeInserted(self, QModelIndex, int, int):
    """ columnsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsAboutToBeRemoved(self, QModelIndex, int, int):
    """ columnsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def columnsInserted(self, QModelIndex, int, int):
    """ columnsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def columnsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ columnsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def columnsRemoved(self, QModelIndex, int, int):
    """ columnsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def connectNotify():
    pass

  def createIndex():
    pass

  def customEvent():
    pass

  def data(self, QModelIndex, arg0=None):
    """ data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any """
    return None

  def dataChanged():
    """ dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = []) [signal] """
    pass

  def decodeData():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dropMimeData(self, QMimeData, arg0, int, int, QModelIndex):
    """ dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encodeData():
    pass

  def endInsertColumns():
    pass

  def endInsertRows():
    pass

  def endMoveColumns():
    pass

  def endMoveRows():
    pass

  def endRemoveColumns():
    pass

  def endRemoveRows():
    pass

  def endResetModel():
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def fetchMore(self, QModelIndex):
    """ fetchMore(self, QModelIndex) """
    pass

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def findItems(self, str, arg0=None, arg1=None, arg2=None):
    """ findItems(self, str, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchExactly, column: int = 0) -> List[QStandardItem] """
    return None

  def flags(self, QModelIndex):
    """ flags(self, QModelIndex) -> Qt.ItemFlags """
    return None

  def hasChildren(self, arg0=None):
    """ hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def hasIndex(self, int, int, arg0=None):
    """ hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def headerData(self, int, arg0, arg1=None):
    """ headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any """
    return None

  def headerDataChanged(self, arg0, int, int):
    """ headerDataChanged(self, Qt.Orientation, int, int) [signal] """
    pass

  def horizontalHeaderItem(self, int):
    """ horizontalHeaderItem(self, int) -> QStandardItem """
    return None

  def index(self, int, int, arg0=None):
    """ index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex """
    return None

  def indexFromItem(self, QStandardItem):
    """ indexFromItem(self, QStandardItem) -> QModelIndex """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumn(self, int, IterableQStandardItem=None):
    """ insertColumn(self, int, Iterable[QStandardItem])
    insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    pass

  def insertColumns(self, int, int, arg0=None):
    """ insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def insertRow(self, int, IterableQStandardItem=None):
    """ insertRow(self, int, Iterable[QStandardItem])
    insertRow(self, int, QStandardItem)
    insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    pass

  def insertRows(self, int, int, arg0=None):
    """ insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def invisibleRootItem(self):
    """ invisibleRootItem(self) -> QStandardItem """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def item(self, int, arg0=None):
    """ item(self, int, column: int = 0) -> QStandardItem """
    return None

  def itemChanged(self, QStandardItem):
    """ itemChanged(self, QStandardItem) [signal] """
    pass

  def itemData(self, QModelIndex):
    """ itemData(self, QModelIndex) -> Dict[int, Any] """
    return 1

  def itemFromIndex(self, QModelIndex):
    """ itemFromIndex(self, QModelIndex) -> QStandardItem """
    return None

  def itemPrototype(self):
    """ itemPrototype(self) -> QStandardItem """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def layoutAboutToBeChanged():
    """ layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def layoutChanged():
    """ layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint) [signal] """
    pass

  def match(self, QModelIndex, int, Any, arg0=None, arg1=None, arg2=None):
    """ match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mimeData(self, IterableQModelIndex=None):
    """ mimeData(self, Iterable[QModelIndex]) -> QMimeData """
    return None

  def mimeTypes(self):
    """ mimeTypes(self) -> List[str] """
    return ""

  def modelAboutToBeReset(self):
    """ modelAboutToBeReset(self) [signal] """
    pass

  def modelReset(self):
    """ modelReset(self) [signal] """
    pass

  def moveColumn(self, QModelIndex, int, QModelIndex, int):
    """ moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveColumns(self, QModelIndex, int, int, QModelIndex, int):
    """ moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveRow(self, QModelIndex, int, QModelIndex, int):
    """ moveRow(self, QModelIndex, int, QModelIndex, int) -> bool """
    return None

  def moveRows(self, QModelIndex, int, int, QModelIndex, int):
    """ moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self, QModelIndex):
    """ parent(self, QModelIndex) -> QModelIndex
    parent(self) -> QObject """
    return None

  def persistentIndexList():
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumn(self, int, arg0=None):
    """ removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeColumns(self, int, int, arg0=None):
    """ removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRow(self, int, arg0=None):
    """ removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def removeRows(self, int, int, arg0=None):
    """ removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool """
    return None

  def resetInternalData():
    pass

  def revert(self):
    """ revert(self) """
    pass

  def roleNames(self):
    """ roleNames(self) -> Dict[int, QByteArray] """
    return 1

  def rowCount(self, arg0=None):
    """ rowCount(self, parent: QModelIndex = QModelIndex()) -> int """
    return 1

  def rowsAboutToBeInserted(self, QModelIndex, int, int):
    """ rowsAboutToBeInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsAboutToBeRemoved(self, QModelIndex, int, int):
    """ rowsAboutToBeRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def rowsInserted(self, QModelIndex, int, int):
    """ rowsInserted(self, QModelIndex, int, int) [signal] """
    pass

  def rowsMoved(self, QModelIndex, int, int, QModelIndex, int):
    """ rowsMoved(self, QModelIndex, int, int, QModelIndex, int) [signal] """
    pass

  def rowsRemoved(self, QModelIndex, int, int):
    """ rowsRemoved(self, QModelIndex, int, int) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setColumnCount(self, int):
    """ setColumnCount(self, int) """
    pass

  def setData(self, QModelIndex, Any, arg0=None):
    """ setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHeaderData(self, int, arg0, Any, arg1=None):
    """ setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool """
    return None

  def setHorizontalHeaderItem(self, int, QStandardItem):
    """ setHorizontalHeaderItem(self, int, QStandardItem) """
    pass

  def setHorizontalHeaderLabels(self, Iterablestr=None):
    """ setHorizontalHeaderLabels(self, Iterable[str]) """
    pass

  def setItem(self, int, int, QStandardItem):
    """ setItem(self, int, int, QStandardItem)
    setItem(self, int, QStandardItem) """
    pass

  def setItemData(self, QModelIndex, Dictint=None, Any=None):
    """ setItemData(self, QModelIndex, Dict[int, Any]) -> bool """
    return None

  def setItemPrototype(self, QStandardItem):
    """ setItemPrototype(self, QStandardItem) """
    pass

  def setItemRoleNames(self, Dictint=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setItemRoleNames(self, Dict[int, Union[QByteArray, bytes, bytearray]]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRowCount(self, int):
    """ setRowCount(self, int) """
    pass

  def setSortRole(self, int):
    """ setSortRole(self, int) """
    pass

  def setVerticalHeaderItem(self, int, QStandardItem):
    """ setVerticalHeaderItem(self, int, QStandardItem) """
    pass

  def setVerticalHeaderLabels(self, Iterablestr=None):
    """ setVerticalHeaderLabels(self, Iterable[str]) """
    pass

  def sibling(self, int, int, QModelIndex):
    """ sibling(self, int, int, QModelIndex) -> QModelIndex """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sort():
    """ sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder) """
    pass

  def sortRole(self):
    """ sortRole(self) -> int """
    return 1

  def span(self, QModelIndex):
    """ span(self, QModelIndex) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def submit(self):
    """ submit(self) -> bool """
    return None

  def supportedDragActions(self):
    """ supportedDragActions(self) -> Qt.DropActions """
    return None

  def supportedDropActions(self):
    """ supportedDropActions(self) -> Qt.DropActions """
    return None

  def takeColumn(self, int):
    """ takeColumn(self, int) -> List[QStandardItem] """
    return None

  def takeHorizontalHeaderItem(self, int):
    """ takeHorizontalHeaderItem(self, int) -> QStandardItem """
    return None

  def takeItem(self, int, arg0=None):
    """ takeItem(self, int, column: int = 0) -> QStandardItem """
    return None

  def takeRow(self, int):
    """ takeRow(self, int) -> List[QStandardItem] """
    return None

  def takeVerticalHeaderItem(self, int):
    """ takeVerticalHeaderItem(self, int) -> QStandardItem """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def verticalHeaderItem(self, int):
    """ verticalHeaderItem(self, int) -> QStandardItem """
    return None

class QStaticText(simplewrapper):
  """ QStaticText()
  QStaticText(str)
  QStaticText(QStaticText) """

  AggressiveCaching = None
  ModerateCaching = None

  class PerformanceHint(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def performanceHint(self):
    """ performanceHint(self) -> QStaticText.PerformanceHint """
    return 1

  def prepare():
    """ prepare(self, matrix: QTransform = QTransform(), font: QFont = QFont()) """
    pass

  def setPerformanceHint(self, arg0):
    """ setPerformanceHint(self, QStaticText.PerformanceHint) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextFormat(self, arg0):
    """ setTextFormat(self, Qt.TextFormat) """
    pass

  def setTextOption(self, QTextOption):
    """ setTextOption(self, QTextOption) """
    pass

  def setTextWidth(self, float):
    """ setTextWidth(self, float) """
    pass

  def size(self):
    """ size(self) -> QSizeF """
    return None

  def swap(self, QStaticText):
    """ swap(self, QStaticText) """
    pass

  def text(self):
    """ text(self) -> str """
    return ""

  def textFormat(self):
    """ textFormat(self) -> Qt.TextFormat """
    return None

  def textOption(self):
    """ textOption(self) -> QTextOption """
    return None

  def textWidth(self):
    """ textWidth(self) -> float """
    return 1.0

class QStatusTipEvent(QEvent):
  """ QStatusTipEvent(str)
  QStatusTipEvent(QStatusTipEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def tip(self):
    """ tip(self) -> str """
    return ""

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QStyleHints(QObject):

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent(self, QChildEvent):
    """ childEvent(self, QChildEvent) """
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def cursorFlashTime(self):
    """ cursorFlashTime(self) -> int """
    return 1

  def cursorFlashTimeChanged(self, int):
    """ cursorFlashTimeChanged(self, int) [signal] """
    pass

  def customEvent(self, QEvent):
    """ customEvent(self, QEvent) """
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fontSmoothingGamma(self):
    """ fontSmoothingGamma(self) -> float """
    return 1.0

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected(self, QMetaMethod):
    """ isSignalConnected(self, QMetaMethod) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyboardAutoRepeatRate(self):
    """ keyboardAutoRepeatRate(self) -> int """
    return 1

  def keyboardInputInterval(self):
    """ keyboardInputInterval(self) -> int """
    return 1

  def keyboardInputIntervalChanged(self, int):
    """ keyboardInputIntervalChanged(self, int) [signal] """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mouseDoubleClickInterval(self):
    """ mouseDoubleClickInterval(self) -> int """
    return 1

  def mouseDoubleClickIntervalChanged(self, int):
    """ mouseDoubleClickIntervalChanged(self, int) [signal] """
    pass

  def mousePressAndHoldInterval(self):
    """ mousePressAndHoldInterval(self) -> int """
    return 1

  def mousePressAndHoldIntervalChanged(self, int):
    """ mousePressAndHoldIntervalChanged(self, int) [signal] """
    pass

  def mouseQuickSelectionThreshold(self):
    """ mouseQuickSelectionThreshold(self) -> int """
    return 1

  def mouseQuickSelectionThresholdChanged(self, int):
    """ mouseQuickSelectionThresholdChanged(self, int) [signal] """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def passwordMaskCharacter(self):
    """ passwordMaskCharacter(self) -> str """
    return ""

  def passwordMaskDelay(self):
    """ passwordMaskDelay(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers(self, PYQT_SIGNAL):
    """ receivers(self, PYQT_SIGNAL) -> int """
    return 1

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender(self):
    """ sender(self) -> QObject """
    return None

  def senderSignalIndex(self):
    """ senderSignalIndex(self) -> int """
    return 1

  def setFocusOnTouchRelease(self):
    """ setFocusOnTouchRelease(self) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setShowShortcutsInContextMenus(self, bool):
    """ setShowShortcutsInContextMenus(self, bool) """
    pass

  def setUseHoverEffects(self, bool):
    """ setUseHoverEffects(self, bool) """
    pass

  def showIsFullScreen(self):
    """ showIsFullScreen(self) -> bool """
    return None

  def showIsMaximized(self):
    """ showIsMaximized(self) -> bool """
    return None

  def showShortcutsInContextMenus(self):
    """ showShortcutsInContextMenus(self) -> bool """
    return None

  def showShortcutsInContextMenusChanged(self, bool):
    """ showShortcutsInContextMenusChanged(self, bool) [signal] """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def singleClickActivation(self):
    """ singleClickActivation(self) -> bool """
    return None

  def startDragDistance(self):
    """ startDragDistance(self) -> int """
    return 1

  def startDragDistanceChanged(self, int):
    """ startDragDistanceChanged(self, int) [signal] """
    pass

  def startDragTime(self):
    """ startDragTime(self) -> int """
    return 1

  def startDragTimeChanged(self, int):
    """ startDragTimeChanged(self, int) [signal] """
    pass

  def startDragVelocity(self):
    """ startDragVelocity(self) -> int """
    return 1

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def tabFocusBehavior(self):
    """ tabFocusBehavior(self) -> Qt.TabFocusBehavior """
    return None

  def tabFocusBehaviorChanged(self, arg0):
    """ tabFocusBehaviorChanged(self, Qt.TabFocusBehavior) [signal] """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent(self, QTimerEvent):
    """ timerEvent(self, QTimerEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def useHoverEffects(self):
    """ useHoverEffects(self) -> bool """
    return None

  def useHoverEffectsChanged(self, bool):
    """ useHoverEffectsChanged(self, bool) [signal] """
    pass

  def useRtlExtensions(self):
    """ useRtlExtensions(self) -> bool """
    return None

  def wheelScrollLines(self):
    """ wheelScrollLines(self) -> int """
    return 1

  def wheelScrollLinesChanged(self, int):
    """ wheelScrollLinesChanged(self, int) [signal] """
    pass

class QSurface(simplewrapper):

  MetalSurface = None
  Offscreen = None
  OpenGLSurface = None
  OpenVGSurface = None
  RasterGLSurface = None
  RasterSurface = None
  VulkanSurface = None
  Window = None

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def supportsOpenGL(self):
    """ supportsOpenGL(self) -> bool """
    return None

  def surfaceClass(self):
    """ surfaceClass(self) -> QSurface.SurfaceClass """
    return None

  def surfaceType(self):
    """ surfaceType(self) -> QSurface.SurfaceType """
    return None

class QSurfaceFormat(simplewrapper):
  """ QSurfaceFormat()
  QSurfaceFormat(Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])
  QSurfaceFormat(QSurfaceFormat) """

  class ColorSpace(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CompatibilityProfile = None
  CoreProfile = None
  DebugContext = None
  DefaultColorSpace = None
  DefaultRenderableType = None
  DefaultSwapBehavior = None
  DeprecatedFunctions = None
  DoubleBuffer = None

  class FormatOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FormatOptions(simplewrapper):
    """ QSurfaceFormat.FormatOptions()
    QSurfaceFormat.FormatOptions(Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])
    QSurfaceFormat.FormatOptions(QSurfaceFormat.FormatOptions) """

    pass

  NoProfile = None
  OpenGL = None

  class OpenGLContextProfile(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  OpenGLES = None
  OpenVG = None

  class RenderableType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ResetNotification = None
  SingleBuffer = None
  StereoBuffers = None

  class SwapBehavior(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TripleBuffer = None

  def alphaBufferSize(self):
    """ alphaBufferSize(self) -> int """
    return 1

  def blueBufferSize(self):
    """ blueBufferSize(self) -> int """
    return 1

  def colorSpace(self):
    """ colorSpace(self) -> QSurfaceFormat.ColorSpace """
    return None

  def defaultFormat():
    """ defaultFormat() -> QSurfaceFormat """
    return None

  def depthBufferSize(self):
    """ depthBufferSize(self) -> int """
    return 1

  def greenBufferSize(self):
    """ greenBufferSize(self) -> int """
    return 1

  def hasAlpha(self):
    """ hasAlpha(self) -> bool """
    return None

  def majorVersion(self):
    """ majorVersion(self) -> int """
    return 1

  def minorVersion(self):
    """ minorVersion(self) -> int """
    return 1

  def options(self):
    """ options(self) -> QSurfaceFormat.FormatOptions """
    return None

  def profile(self):
    """ profile(self) -> QSurfaceFormat.OpenGLContextProfile """
    return None

  def redBufferSize(self):
    """ redBufferSize(self) -> int """
    return 1

  def renderableType(self):
    """ renderableType(self) -> QSurfaceFormat.RenderableType """
    return None

  sRGBColorSpace = None

  def samples(self):
    """ samples(self) -> int """
    return 1

  def setAlphaBufferSize(self, int):
    """ setAlphaBufferSize(self, int) """
    pass

  def setBlueBufferSize(self, int):
    """ setBlueBufferSize(self, int) """
    pass

  def setColorSpace(self, arg0):
    """ setColorSpace(self, QSurfaceFormat.ColorSpace) """
    pass

  def setDefaultFormat(QSurfaceFormat):
    """ setDefaultFormat(QSurfaceFormat) """
    pass

  def setDepthBufferSize(self, int):
    """ setDepthBufferSize(self, int) """
    pass

  def setGreenBufferSize(self, int):
    """ setGreenBufferSize(self, int) """
    pass

  def setMajorVersion(self, int):
    """ setMajorVersion(self, int) """
    pass

  def setMinorVersion(self, int):
    """ setMinorVersion(self, int) """
    pass

  def setOption(self, UnionQSurfaceFormat.FormatOptions=None, QSurfaceFormat.FormatOption=None):
    """ setOption(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])
    setOption(self, QSurfaceFormat.FormatOption, on: bool = True) """
    pass

  def setOptions(self, UnionQSurfaceFormat.FormatOptions=None, QSurfaceFormat.FormatOption=None):
    """ setOptions(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption]) """
    pass

  def setProfile(self, arg0):
    """ setProfile(self, QSurfaceFormat.OpenGLContextProfile) """
    pass

  def setRedBufferSize(self, int):
    """ setRedBufferSize(self, int) """
    pass

  def setRenderableType(self, arg0):
    """ setRenderableType(self, QSurfaceFormat.RenderableType) """
    pass

  def setSamples(self, int):
    """ setSamples(self, int) """
    pass

  def setStencilBufferSize(self, int):
    """ setStencilBufferSize(self, int) """
    pass

  def setStereo(self, bool):
    """ setStereo(self, bool) """
    pass

  def setSwapBehavior(self, arg0):
    """ setSwapBehavior(self, QSurfaceFormat.SwapBehavior) """
    pass

  def setSwapInterval(self, int):
    """ setSwapInterval(self, int) """
    pass

  def setVersion(self, int, int):
    """ setVersion(self, int, int) """
    pass

  def stencilBufferSize(self):
    """ stencilBufferSize(self) -> int """
    return 1

  def stereo(self):
    """ stereo(self) -> bool """
    return None

  def swapBehavior(self):
    """ swapBehavior(self) -> QSurfaceFormat.SwapBehavior """
    return None

  def swapInterval(self):
    """ swapInterval(self) -> int """
    return 1

  def testOption(self, UnionQSurfaceFormat.FormatOptions=None, QSurfaceFormat.FormatOption=None):
    """ testOption(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption]) -> bool
    testOption(self, QSurfaceFormat.FormatOption) -> bool """
    return None

  def version(self):
    """ version(self) -> Tuple[int, int] """
    return 1

class QSyntaxHighlighter(QObject):
  """ QSyntaxHighlighter(QTextDocument)
  QSyntaxHighlighter(QObject) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def currentBlock(self):
    """ currentBlock(self) -> QTextBlock """
    return None

  def currentBlockState(self):
    """ currentBlockState(self) -> int """
    return 1

  def currentBlockUserData(self):
    """ currentBlockUserData(self) -> QTextBlockUserData """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self, int):
    """ format(self, int) -> QTextCharFormat """
    return None

  def highlightBlock(self, str):
    """ highlightBlock(self, str) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def previousBlockState(self):
    """ previousBlockState(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def rehighlight(self):
    """ rehighlight(self) """
    pass

  def rehighlightBlock(self, QTextBlock):
    """ rehighlightBlock(self, QTextBlock) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentBlockState(self, int):
    """ setCurrentBlockState(self, int) """
    pass

  def setCurrentBlockUserData(self, QTextBlockUserData):
    """ setCurrentBlockUserData(self, QTextBlockUserData) """
    pass

  def setDocument(self, QTextDocument):
    """ setDocument(self, QTextDocument) """
    pass

  def setFormat(self, int, int, QTextCharFormat):
    """ setFormat(self, int, int, QTextCharFormat)
    setFormat(self, int, int, Union[QColor, Qt.GlobalColor, QGradient])
    setFormat(self, int, int, QFont) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTabletEvent(QInputEvent):
  """ QTabletEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], int, int, float, int, int, float, float, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], int, Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton])
  QTabletEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], int, int, float, int, int, float, float, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], int)
  QTabletEvent(QTabletEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  Airbrush = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  Cursor = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Eraser = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  FourDMouse = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NoDevice = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  Pen = None
  PlatformPanel = None
  PlatformSurface = None

  class PointerType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Polish = None
  PolishRequest = None
  Puck = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  RotationStylus = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  Stylus = None

  class TabletDevice(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UnknownPointer = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  XFreeEraser = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def button(self):
    """ button(self) -> Qt.MouseButton """
    return None

  def buttons(self):
    """ buttons(self) -> Qt.MouseButtons """
    return None

  def device(self):
    """ device(self) -> QTabletEvent.TabletDevice """
    return None

  def globalPos(self):
    """ globalPos(self) -> QPoint """
    return 1

  def globalPosF(self):
    """ globalPosF(self) -> QPointF """
    return 1

  def globalX(self):
    """ globalX(self) -> int """
    return 1

  def globalY(self):
    """ globalY(self) -> int """
    return 1

  def hiResGlobalX(self):
    """ hiResGlobalX(self) -> float """
    return 1.0

  def hiResGlobalY(self):
    """ hiResGlobalY(self) -> float """
    return 1.0

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def pointerType(self):
    """ pointerType(self) -> QTabletEvent.PointerType """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def posF(self):
    """ posF(self) -> QPointF """
    return 1

  def pressure(self):
    """ pressure(self) -> float """
    return 1.0

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def rotation(self):
    """ rotation(self) -> float """
    return 1.0

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def tangentialPressure(self):
    """ tangentialPressure(self) -> float """
    return 1.0

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def uniqueId(self):
    """ uniqueId(self) -> int """
    return 1

  def x(self):
    """ x(self) -> int """
    return 1

  def xTilt(self):
    """ xTilt(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

  def yTilt(self):
    """ yTilt(self) -> int """
    return 1

  def z(self):
    """ z(self) -> int """
    return 1

class QTextBlock(wrapper):
  """ QTextBlock()
  QTextBlock(QTextBlock) """

  def begin(self):
    """ begin(self) -> QTextBlock.iterator """
    return None

  def blockFormat(self):
    """ blockFormat(self) -> QTextBlockFormat """
    return None

  def blockFormatIndex(self):
    """ blockFormatIndex(self) -> int """
    return 1

  def blockNumber(self):
    """ blockNumber(self) -> int """
    return 1

  def charFormat(self):
    """ charFormat(self) -> QTextCharFormat """
    return None

  def charFormatIndex(self):
    """ charFormatIndex(self) -> int """
    return 1

  def clearLayout(self):
    """ clearLayout(self) """
    pass

  def contains(self, int):
    """ contains(self, int) -> bool """
    return None

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def end(self):
    """ end(self) -> QTextBlock.iterator """
    return None

  def firstLineNumber(self):
    """ firstLineNumber(self) -> int """
    return 1

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  class iterator(simplewrapper):
    """ QTextBlock.iterator()
    QTextBlock.iterator(QTextBlock.iterator) """

    def atEnd(self):
      """ atEnd(self) -> bool """
      return None

    def fragment(self):
      """ fragment(self) -> QTextFragment """
      return None

  def layout(self):
    """ layout(self) -> QTextLayout """
    return None

  def length(self):
    """ length(self) -> int """
    return 1

  def lineCount(self):
    """ lineCount(self) -> int """
    return 1

  def next(self):
    """ next(self) -> QTextBlock """
    return None

  def position(self):
    """ position(self) -> int """
    return 1

  def previous(self):
    """ previous(self) -> QTextBlock """
    return None

  def revision(self):
    """ revision(self) -> int """
    return 1

  def setLineCount(self, int):
    """ setLineCount(self, int) """
    pass

  def setRevision(self, int):
    """ setRevision(self, int) """
    pass

  def setUserData(self, QTextBlockUserData):
    """ setUserData(self, QTextBlockUserData) """
    pass

  def setUserState(self, int):
    """ setUserState(self, int) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def text(self):
    """ text(self) -> str """
    return ""

  def textDirection(self):
    """ textDirection(self) -> Qt.LayoutDirection """
    return None

  def textFormats(self):
    """ textFormats(self) -> List[QTextLayout.FormatRange] """
    return None

  def textList(self):
    """ textList(self) -> QTextList """
    return None

  def userData(self):
    """ userData(self) -> QTextBlockUserData """
    return None

  def userState(self):
    """ userState(self) -> int """
    return 1

class QTextBlockFormat(QTextFormat):
  """ QTextBlockFormat()
  QTextBlockFormat(QTextBlockFormat) """

  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None
  CharFormat = None
  CssFloat = None
  FirstFontProperty = None
  FixedHeight = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None

  class FormatType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineDistanceHeight = None
  LineHeight = None
  LineHeightType = None

  class LineHeightTypes(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ListFormat = None
  ListIndent = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListStyle = None
  MinimumHeight = None
  NoObject = None
  ObjectIndex = None
  ObjectType = None

  class ObjectTypes(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  OutlinePen = None

  class PageBreakFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PageBreakFlags(simplewrapper):
    """ QTextFormat.PageBreakFlags()
    QTextFormat.PageBreakFlags(Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag])
    QTextFormat.PageBreakFlags(QTextFormat.PageBreakFlags) """

    pass

  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None

  class Property(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ProportionalHeight = None
  SingleHeight = None
  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None
  UserFormat = None
  UserObject = None
  UserProperty = None

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def bottomMargin(self):
    """ bottomMargin(self) -> float """
    return 1.0

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def headingLevel(self):
    """ headingLevel(self) -> int """
    return 1

  def indent(self):
    """ indent(self) -> int """
    return 1

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leftMargin(self):
    """ leftMargin(self) -> float """
    return 1.0

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def lineHeight(self):
    """ lineHeight(self) -> float
    lineHeight(self, float, scaling: float = 1) -> float """
    return 1.0

  def lineHeightType(self):
    """ lineHeightType(self) -> int """
    return 1

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def nonBreakableLines(self):
    """ nonBreakableLines(self) -> bool """
    return None

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def pageBreakPolicy(self):
    """ pageBreakPolicy(self) -> QTextFormat.PageBreakFlags """
    return None

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def rightMargin(self):
    """ rightMargin(self) -> float """
    return 1.0

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBottomMargin(self, float):
    """ setBottomMargin(self, float) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setHeadingLevel(self, int):
    """ setHeadingLevel(self, int) """
    pass

  def setIndent(self, int):
    """ setIndent(self, int) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLeftMargin(self, float):
    """ setLeftMargin(self, float) """
    pass

  def setLineHeight(self, float, int):
    """ setLineHeight(self, float, int) """
    pass

  def setNonBreakableLines(self, bool):
    """ setNonBreakableLines(self, bool) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setPageBreakPolicy(self, UnionQTextFormat.PageBreakFlags=None, QTextFormat.PageBreakFlag=None):
    """ setPageBreakPolicy(self, Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag]) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def setRightMargin(self, float):
    """ setRightMargin(self, float) """
    pass

  def setTabPositions(self, IterableQTextOption.Tab=None):
    """ setTabPositions(self, Iterable[QTextOption.Tab]) """
    pass

  def setTextIndent(self, float):
    """ setTextIndent(self, float) """
    pass

  def setTopMargin(self, float):
    """ setTopMargin(self, float) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def tabPositions(self):
    """ tabPositions(self) -> List[QTextOption.Tab] """
    return None

  def textIndent(self):
    """ textIndent(self) -> float """
    return 1.0

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def topMargin(self):
    """ topMargin(self) -> float """
    return 1.0

  def type(self):
    """ type(self) -> int """
    return 1

class QTextBlockGroup(QTextObject):
  """ QTextBlockGroup(QTextDocument) """

  def blockFormatChanged(self, QTextBlock):
    """ blockFormatChanged(self, QTextBlock) """
    pass

  def blockInserted(self, QTextBlock):
    """ blockInserted(self, QTextBlock) """
    pass

  def blockList(self):
    """ blockList(self) -> List[QTextBlock] """
    return None

  def blockRemoved(self, QTextBlock):
    """ blockRemoved(self, QTextBlock) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self):
    """ format(self) -> QTextFormat """
    return None

  def formatIndex(self):
    """ formatIndex(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFormat():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTextBlockUserData(wrapper):
  """ QTextBlockUserData()
  QTextBlockUserData(QTextBlockUserData) """

  pass

class QTextCharFormat(QTextFormat):
  """ QTextCharFormat()
  QTextCharFormat(QTextCharFormat) """

  AlignBaseline = None
  AlignBottom = None
  AlignMiddle = None
  AlignNormal = None
  AlignSubScript = None
  AlignSuperScript = None
  AlignTop = None
  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None
  CharFormat = None
  CssFloat = None
  DashDotDotLine = None
  DashDotLine = None
  DashUnderline = None
  DotLine = None
  FirstFontProperty = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontPropertiesAll = None

  class FontPropertiesInheritanceBehavior(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FontPropertiesSpecifiedOnly = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None
  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineHeight = None
  LineHeightType = None
  ListFormat = None
  ListIndent = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListStyle = None
  NoObject = None
  NoUnderline = None
  ObjectIndex = None
  ObjectType = None
  OutlinePen = None
  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None
  SingleUnderline = None
  SpellCheckUnderline = None
  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None

  class UnderlineStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UserFormat = None
  UserObject = None
  UserProperty = None

  class VerticalAlignment(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WaveUnderline = None

  def anchorHref(self):
    """ anchorHref(self) -> str """
    return ""

  def anchorNames(self):
    """ anchorNames(self) -> List[str] """
    return ""

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontCapitalization(self):
    """ fontCapitalization(self) -> QFont.Capitalization """
    return None

  def fontFamilies(self):
    """ fontFamilies(self) -> Any """
    return None

  def fontFamily(self):
    """ fontFamily(self) -> str """
    return ""

  def fontFixedPitch(self):
    """ fontFixedPitch(self) -> bool """
    return None

  def fontHintingPreference(self):
    """ fontHintingPreference(self) -> QFont.HintingPreference """
    return 1

  def fontItalic(self):
    """ fontItalic(self) -> bool """
    return None

  def fontKerning(self):
    """ fontKerning(self) -> bool """
    return None

  def fontLetterSpacing(self):
    """ fontLetterSpacing(self) -> float """
    return 1.0

  def fontLetterSpacingType(self):
    """ fontLetterSpacingType(self) -> QFont.SpacingType """
    return None

  def fontOverline(self):
    """ fontOverline(self) -> bool """
    return None

  def fontPointSize(self):
    """ fontPointSize(self) -> float """
    return 1.0

  def fontStretch(self):
    """ fontStretch(self) -> int """
    return 1

  def fontStrikeOut(self):
    """ fontStrikeOut(self) -> bool """
    return None

  def fontStyleHint(self):
    """ fontStyleHint(self) -> QFont.StyleHint """
    return 1

  def fontStyleName(self):
    """ fontStyleName(self) -> Any """
    return None

  def fontStyleStrategy(self):
    """ fontStyleStrategy(self) -> QFont.StyleStrategy """
    return None

  def fontUnderline(self):
    """ fontUnderline(self) -> bool """
    return None

  def fontWeight(self):
    """ fontWeight(self) -> int """
    return 1

  def fontWordSpacing(self):
    """ fontWordSpacing(self) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isAnchor(self):
    """ isAnchor(self) -> bool """
    return None

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def setAnchor(self, bool):
    """ setAnchor(self, bool) """
    pass

  def setAnchorHref(self, str):
    """ setAnchorHref(self, str) """
    pass

  def setAnchorNames(self, Iterablestr=None):
    """ setAnchorNames(self, Iterable[str]) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont)
    setFont(self, QFont, QTextCharFormat.FontPropertiesInheritanceBehavior) """
    pass

  def setFontCapitalization(self, arg0):
    """ setFontCapitalization(self, QFont.Capitalization) """
    pass

  def setFontFamilies(self, Iterablestr=None):
    """ setFontFamilies(self, Iterable[str]) """
    pass

  def setFontFamily(self, str):
    """ setFontFamily(self, str) """
    pass

  def setFontFixedPitch(self, bool):
    """ setFontFixedPitch(self, bool) """
    pass

  def setFontHintingPreference(self, arg0):
    """ setFontHintingPreference(self, QFont.HintingPreference) """
    pass

  def setFontItalic(self, bool):
    """ setFontItalic(self, bool) """
    pass

  def setFontKerning(self, bool):
    """ setFontKerning(self, bool) """
    pass

  def setFontLetterSpacing(self, float):
    """ setFontLetterSpacing(self, float) """
    pass

  def setFontLetterSpacingType(self, arg0):
    """ setFontLetterSpacingType(self, QFont.SpacingType) """
    pass

  def setFontOverline(self, bool):
    """ setFontOverline(self, bool) """
    pass

  def setFontPointSize(self, float):
    """ setFontPointSize(self, float) """
    pass

  def setFontStretch(self, int):
    """ setFontStretch(self, int) """
    pass

  def setFontStrikeOut(self, bool):
    """ setFontStrikeOut(self, bool) """
    pass

  def setFontStyleHint():
    """ setFontStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault) """
    pass

  def setFontStyleName(self, str):
    """ setFontStyleName(self, str) """
    pass

  def setFontStyleStrategy(self, arg0):
    """ setFontStyleStrategy(self, QFont.StyleStrategy) """
    pass

  def setFontUnderline(self, bool):
    """ setFontUnderline(self, bool) """
    pass

  def setFontWeight(self, int):
    """ setFontWeight(self, int) """
    pass

  def setFontWordSpacing(self, float):
    """ setFontWordSpacing(self, float) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def setTableCellColumnSpan(self, int):
    """ setTableCellColumnSpan(self, int) """
    pass

  def setTableCellRowSpan(self, int):
    """ setTableCellRowSpan(self, int) """
    pass

  def setTextOutline(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTextOutline(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setUnderlineColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setUnderlineColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setUnderlineStyle(self, arg0):
    """ setUnderlineStyle(self, QTextCharFormat.UnderlineStyle) """
    pass

  def setVerticalAlignment(self, arg0):
    """ setVerticalAlignment(self, QTextCharFormat.VerticalAlignment) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def tableCellColumnSpan(self):
    """ tableCellColumnSpan(self) -> int """
    return 1

  def tableCellRowSpan(self):
    """ tableCellRowSpan(self) -> int """
    return 1

  def textOutline(self):
    """ textOutline(self) -> QPen """
    return None

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def type(self):
    """ type(self) -> int """
    return 1

  def underlineColor(self):
    """ underlineColor(self) -> QColor """
    return None

  def underlineStyle(self):
    """ underlineStyle(self) -> QTextCharFormat.UnderlineStyle """
    return None

  def verticalAlignment(self):
    """ verticalAlignment(self) -> QTextCharFormat.VerticalAlignment """
    return None

class QTextCursor(simplewrapper):
  """ QTextCursor()
  QTextCursor(QTextDocument)
  QTextCursor(QTextFrame)
  QTextCursor(QTextBlock)
  QTextCursor(QTextCursor) """

  BlockUnderCursor = None
  Document = None
  Down = None
  End = None
  EndOfBlock = None
  EndOfLine = None
  EndOfWord = None
  KeepAnchor = None
  Left = None
  LineUnderCursor = None
  MoveAnchor = None

  class MoveMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class MoveOperation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NextBlock = None
  NextCell = None
  NextCharacter = None
  NextRow = None
  NextWord = None
  NoMove = None
  PreviousBlock = None
  PreviousCell = None
  PreviousCharacter = None
  PreviousRow = None
  PreviousWord = None
  Right = None

  class SelectionType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Start = None
  StartOfBlock = None
  StartOfLine = None
  StartOfWord = None
  Up = None
  WordLeft = None
  WordRight = None
  WordUnderCursor = None

  def anchor(self):
    """ anchor(self) -> int """
    return 1

  def atBlockEnd(self):
    """ atBlockEnd(self) -> bool """
    return None

  def atBlockStart(self):
    """ atBlockStart(self) -> bool """
    return None

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def atStart(self):
    """ atStart(self) -> bool """
    return None

  def beginEditBlock(self):
    """ beginEditBlock(self) """
    pass

  def block(self):
    """ block(self) -> QTextBlock """
    return None

  def blockCharFormat(self):
    """ blockCharFormat(self) -> QTextCharFormat """
    return None

  def blockFormat(self):
    """ blockFormat(self) -> QTextBlockFormat """
    return None

  def blockNumber(self):
    """ blockNumber(self) -> int """
    return 1

  def charFormat(self):
    """ charFormat(self) -> QTextCharFormat """
    return None

  def clearSelection(self):
    """ clearSelection(self) """
    pass

  def columnNumber(self):
    """ columnNumber(self) -> int """
    return 1

  def createList(self, QTextListFormat):
    """ createList(self, QTextListFormat) -> QTextList
    createList(self, QTextListFormat.Style) -> QTextList """
    return None

  def currentFrame(self):
    """ currentFrame(self) -> QTextFrame """
    return None

  def currentList(self):
    """ currentList(self) -> QTextList """
    return None

  def currentTable(self):
    """ currentTable(self) -> QTextTable """
    return None

  def deleteChar(self):
    """ deleteChar(self) """
    pass

  def deletePreviousChar(self):
    """ deletePreviousChar(self) """
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def endEditBlock(self):
    """ endEditBlock(self) """
    pass

  def hasComplexSelection(self):
    """ hasComplexSelection(self) -> bool """
    return None

  def hasSelection(self):
    """ hasSelection(self) -> bool """
    return None

  def insertBlock(self):
    """ insertBlock(self)
    insertBlock(self, QTextBlockFormat)
    insertBlock(self, QTextBlockFormat, QTextCharFormat) """
    pass

  def insertFragment(self, QTextDocumentFragment):
    """ insertFragment(self, QTextDocumentFragment) """
    pass

  def insertFrame(self, QTextFrameFormat):
    """ insertFrame(self, QTextFrameFormat) -> QTextFrame """
    return None

  def insertHtml(self, str):
    """ insertHtml(self, str) """
    pass

  def insertImage(self, QTextImageFormat):
    """ insertImage(self, QTextImageFormat)
    insertImage(self, QTextImageFormat, QTextFrameFormat.Position)
    insertImage(self, str)
    insertImage(self, QImage, name: str = '') """
    pass

  def insertList(self, QTextListFormat):
    """ insertList(self, QTextListFormat) -> QTextList
    insertList(self, QTextListFormat.Style) -> QTextList """
    return None

  def insertTable(self, int, int, QTextTableFormat):
    """ insertTable(self, int, int, QTextTableFormat) -> QTextTable
    insertTable(self, int, int) -> QTextTable """
    return None

  def insertText(self, str):
    """ insertText(self, str)
    insertText(self, str, QTextCharFormat) """
    pass

  def isCopyOf(self, QTextCursor):
    """ isCopyOf(self, QTextCursor) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def joinPreviousEditBlock(self):
    """ joinPreviousEditBlock(self) """
    pass

  def keepPositionOnInsert(self):
    """ keepPositionOnInsert(self) -> bool """
    return None

  def mergeBlockCharFormat(self, QTextCharFormat):
    """ mergeBlockCharFormat(self, QTextCharFormat) """
    pass

  def mergeBlockFormat(self, QTextBlockFormat):
    """ mergeBlockFormat(self, QTextBlockFormat) """
    pass

  def mergeCharFormat(self, QTextCharFormat):
    """ mergeCharFormat(self, QTextCharFormat) """
    pass

  def movePosition(self, arg0, arg1=None, arg2=None):
    """ movePosition(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor, n: int = 1) -> bool """
    return None

  def position(self):
    """ position(self) -> int """
    return 1

  def positionInBlock(self):
    """ positionInBlock(self) -> int """
    return 1

  def removeSelectedText(self):
    """ removeSelectedText(self) """
    pass

  def select(self, arg0):
    """ select(self, QTextCursor.SelectionType) """
    pass

  def selectedTableCells(self):
    """ selectedTableCells(self) -> Tuple[int, int, int, int] """
    return 1

  def selectedText(self):
    """ selectedText(self) -> str """
    return ""

  def selection(self):
    """ selection(self) -> QTextDocumentFragment """
    return None

  def selectionEnd(self):
    """ selectionEnd(self) -> int """
    return 1

  def selectionStart(self):
    """ selectionStart(self) -> int """
    return 1

  def setBlockCharFormat(self, QTextCharFormat):
    """ setBlockCharFormat(self, QTextCharFormat) """
    pass

  def setBlockFormat(self, QTextBlockFormat):
    """ setBlockFormat(self, QTextBlockFormat) """
    pass

  def setCharFormat(self, QTextCharFormat):
    """ setCharFormat(self, QTextCharFormat) """
    pass

  def setKeepPositionOnInsert(self, bool):
    """ setKeepPositionOnInsert(self, bool) """
    pass

  def setPosition():
    """ setPosition(self, int, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor) """
    pass

  def setVerticalMovementX(self, int):
    """ setVerticalMovementX(self, int) """
    pass

  def setVisualNavigation(self, bool):
    """ setVisualNavigation(self, bool) """
    pass

  def swap(self, QTextCursor):
    """ swap(self, QTextCursor) """
    pass

  def verticalMovementX(self):
    """ verticalMovementX(self) -> int """
    return 1

  def visualNavigation(self):
    """ visualNavigation(self) -> bool """
    return None

class QTextDocument(QObject):
  """ QTextDocument(parent: QObject = None)
  QTextDocument(str, parent: QObject = None) """

  DocumentTitle = None
  DocumentUrl = None
  FindBackward = None
  FindCaseSensitively = None

  class FindFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FindFlags(simplewrapper):
    """ QTextDocument.FindFlags()
    QTextDocument.FindFlags(Union[QTextDocument.FindFlags, QTextDocument.FindFlag])
    QTextDocument.FindFlags(QTextDocument.FindFlags) """

    pass

  FindWholeWords = None
  HtmlResource = None
  ImageResource = None

  class MetaInformation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RedoStack = None

  class ResourceType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Stacks(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StyleSheetResource = None
  UndoAndRedoStacks = None
  UndoStack = None
  UserResource = None

  def addResource(self, int, QUrl, Any):
    """ addResource(self, int, QUrl, Any) """
    pass

  def adjustSize(self):
    """ adjustSize(self) """
    pass

  def allFormats(self):
    """ allFormats(self) -> List[QTextFormat] """
    return None

  def availableRedoSteps(self):
    """ availableRedoSteps(self) -> int """
    return 1

  def availableUndoSteps(self):
    """ availableUndoSteps(self) -> int """
    return 1

  def baseUrl(self):
    """ baseUrl(self) -> QUrl """
    return None

  def baseUrlChanged(self, QUrl):
    """ baseUrlChanged(self, QUrl) [signal] """
    pass

  def begin(self):
    """ begin(self) -> QTextBlock """
    return None

  def blockCount(self):
    """ blockCount(self) -> int """
    return 1

  def blockCountChanged(self, int):
    """ blockCountChanged(self, int) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def characterAt(self, int):
    """ characterAt(self, int) -> str """
    return ""

  def characterCount(self):
    """ characterCount(self) -> int """
    return 1

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def clearUndoRedoStacks():
    """ clearUndoRedoStacks(self, stacks: QTextDocument.Stacks = QTextDocument.UndoAndRedoStacks) """
    pass

  def clone(self, arg0=None):
    """ clone(self, parent: QObject = None) -> QTextDocument """
    return None

  def connectNotify():
    pass

  def contentsChange(self, int, int, int):
    """ contentsChange(self, int, int, int) [signal] """
    pass

  def contentsChanged(self):
    """ contentsChanged(self) [signal] """
    pass

  def createObject(self, QTextFormat):
    """ createObject(self, QTextFormat) -> QTextObject """
    return None

  def cursorPositionChanged(self, QTextCursor):
    """ cursorPositionChanged(self, QTextCursor) [signal] """
    pass

  def customEvent():
    pass

  def defaultCursorMoveStyle(self):
    """ defaultCursorMoveStyle(self) -> Qt.CursorMoveStyle """
    return None

  def defaultFont(self):
    """ defaultFont(self) -> QFont """
    return None

  def defaultStyleSheet(self):
    """ defaultStyleSheet(self) -> str """
    return ""

  def defaultTextOption(self):
    """ defaultTextOption(self) -> QTextOption """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def documentLayout(self):
    """ documentLayout(self) -> QAbstractTextDocumentLayout """
    return ""

  def documentLayoutChanged(self):
    """ documentLayoutChanged(self) [signal] """
    pass

  def documentMargin(self):
    """ documentMargin(self) -> float """
    return 1.0

  def drawContents():
    """ drawContents(self, QPainter, rect: QRectF = QRectF()) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def end(self):
    """ end(self) -> QTextBlock """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def find(self, str, arg0=None, arg1=None):
    """ find(self, str, position: int = 0, options: QTextDocument.FindFlags = 0) -> QTextCursor
    find(self, QRegExp, position: int = 0, options: QTextDocument.FindFlags = 0) -> QTextCursor
    find(self, QRegularExpression, position: int = 0, options: QTextDocument.FindFlags = 0) -> QTextCursor
    find(self, str, QTextCursor, options: QTextDocument.FindFlags = 0) -> QTextCursor
    find(self, QRegExp, QTextCursor, options: QTextDocument.FindFlags = 0) -> QTextCursor
    find(self, QRegularExpression, QTextCursor, options: QTextDocument.FindFlags = 0) -> QTextCursor """
    return None

  def findBlock(self, int):
    """ findBlock(self, int) -> QTextBlock """
    return None

  def findBlockByLineNumber(self, int):
    """ findBlockByLineNumber(self, int) -> QTextBlock """
    return None

  def findBlockByNumber(self, int):
    """ findBlockByNumber(self, int) -> QTextBlock """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def firstBlock(self):
    """ firstBlock(self) -> QTextBlock """
    return None

  def idealWidth(self):
    """ idealWidth(self) -> float """
    return 1.0

  def indentWidth(self):
    """ indentWidth(self) -> float """
    return 1.0

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isModified(self):
    """ isModified(self) -> bool """
    return None

  def isRedoAvailable(self):
    """ isRedoAvailable(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isUndoAvailable(self):
    """ isUndoAvailable(self) -> bool """
    return None

  def isUndoRedoEnabled(self):
    """ isUndoRedoEnabled(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastBlock(self):
    """ lastBlock(self) -> QTextBlock """
    return None

  def lineCount(self):
    """ lineCount(self) -> int """
    return 1

  def loadResource(self, int, QUrl):
    """ loadResource(self, int, QUrl) -> Any """
    return None

  def markContentsDirty(self, int, int):
    """ markContentsDirty(self, int, int) """
    pass

  def maximumBlockCount(self):
    """ maximumBlockCount(self) -> int """
    return 1

  def metaInformation(self, arg0):
    """ metaInformation(self, QTextDocument.MetaInformation) -> str """
    return ""

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def modificationChanged(self, bool):
    """ modificationChanged(self, bool) [signal] """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def object(self, int):
    """ object(self, int) -> QTextObject """
    return None

  def objectForFormat(self, QTextFormat):
    """ objectForFormat(self, QTextFormat) -> QTextObject """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def pageCount(self):
    """ pageCount(self) -> int """
    return 1

  def pageSize(self):
    """ pageSize(self) -> QSizeF """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def print(self, QPagedPaintDevice):
    """ print(self, QPagedPaintDevice) """
    pass

  def print_(self, QPagedPaintDevice):
    """ print_(self, QPagedPaintDevice) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def redo(self):
    """ redo(self)
    redo(self, QTextCursor) """
    pass

  def redoAvailable(self, bool):
    """ redoAvailable(self, bool) [signal] """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resource(self, int, QUrl):
    """ resource(self, int, QUrl) -> Any """
    return None

  def revision(self):
    """ revision(self) -> int """
    return 1

  def rootFrame(self):
    """ rootFrame(self) -> QTextFrame """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBaseUrl(self, QUrl):
    """ setBaseUrl(self, QUrl) """
    pass

  def setDefaultCursorMoveStyle(self, arg0):
    """ setDefaultCursorMoveStyle(self, Qt.CursorMoveStyle) """
    pass

  def setDefaultFont(self, QFont):
    """ setDefaultFont(self, QFont) """
    pass

  def setDefaultStyleSheet(self, str):
    """ setDefaultStyleSheet(self, str) """
    pass

  def setDefaultTextOption(self, QTextOption):
    """ setDefaultTextOption(self, QTextOption) """
    pass

  def setDocumentLayout(self, QAbstractTextDocumentLayout):
    """ setDocumentLayout(self, QAbstractTextDocumentLayout) """
    pass

  def setDocumentMargin(self, float):
    """ setDocumentMargin(self, float) """
    pass

  def setHtml(self, str):
    """ setHtml(self, str) """
    pass

  def setIndentWidth(self, float):
    """ setIndentWidth(self, float) """
    pass

  def setMaximumBlockCount(self, int):
    """ setMaximumBlockCount(self, int) """
    pass

  def setMetaInformation(self, arg0, str):
    """ setMetaInformation(self, QTextDocument.MetaInformation, str) """
    pass

  def setModified():
    """ setModified(self, on: bool = True) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setPageSize(self, QSizeF):
    """ setPageSize(self, QSizeF) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPlainText(self, str):
    """ setPlainText(self, str) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setTextWidth(self, float):
    """ setTextWidth(self, float) """
    pass

  def setUndoRedoEnabled(self, bool):
    """ setUndoRedoEnabled(self, bool) """
    pass

  def setUseDesignMetrics(self, bool):
    """ setUseDesignMetrics(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSizeF """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def textWidth(self):
    """ textWidth(self) -> float """
    return 1.0

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def toHtml(self, arg0=None, bytes=None, arg1=None):
    """ toHtml(self, encoding: Union[QByteArray, bytes, bytearray] = QByteArray()) -> str """
    return ""

  def toPlainText(self):
    """ toPlainText(self) -> str """
    return ""

  def toRawText(self):
    """ toRawText(self) -> str """
    return ""

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def undo(self):
    """ undo(self)
    undo(self, QTextCursor) """
    pass

  def undoAvailable(self, bool):
    """ undoAvailable(self, bool) [signal] """
    pass

  def undoCommandAdded(self):
    """ undoCommandAdded(self) [signal] """
    pass

  def useDesignMetrics(self):
    """ useDesignMetrics(self) -> bool """
    return None

class QTextDocumentFragment(simplewrapper):
  """ QTextDocumentFragment()
  QTextDocumentFragment(QTextDocument)
  QTextDocumentFragment(QTextCursor)
  QTextDocumentFragment(QTextDocumentFragment) """

  def fromHtml(str):
    """ fromHtml(str) -> QTextDocumentFragment
    fromHtml(str, QTextDocument) -> QTextDocumentFragment """
    return None

  def fromPlainText(str):
    """ fromPlainText(str) -> QTextDocumentFragment """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def toHtml(self, arg0=None, bytes=None, arg1=None):
    """ toHtml(self, encoding: Union[QByteArray, bytes, bytearray] = QByteArray()) -> str """
    return ""

  def toPlainText(self):
    """ toPlainText(self) -> str """
    return ""

class QTextDocumentWriter(simplewrapper):
  """ QTextDocumentWriter()
  QTextDocumentWriter(QIODevice, Union[QByteArray, bytes, bytearray])
  QTextDocumentWriter(str, format: Union[QByteArray, bytes, bytearray] = QByteArray()) """

  def codec(self):
    """ codec(self) -> QTextCodec """
    return None

  def device(self):
    """ device(self) -> QIODevice """
    return None

  def fileName(self):
    """ fileName(self) -> str """
    return ""

  def format(self):
    """ format(self) -> QByteArray """
    return None

  def setCodec(self, QTextCodec):
    """ setCodec(self, QTextCodec) """
    pass

  def setDevice(self, QIODevice):
    """ setDevice(self, QIODevice) """
    pass

  def setFileName(self, str):
    """ setFileName(self, str) """
    pass

  def setFormat(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setFormat(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def supportedDocumentFormats():
    """ supportedDocumentFormats() -> List[QByteArray] """
    return None

  def write(self, QTextDocument):
    """ write(self, QTextDocument) -> bool
    write(self, QTextDocumentFragment) -> bool """
    return None

class QTextFormat(simplewrapper):
  """ QTextFormat()
  QTextFormat(int)
  QTextFormat(QTextFormat)
  QTextFormat(Any) """

  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None
  CharFormat = None
  CssFloat = None
  FirstFontProperty = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None
  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineHeight = None
  LineHeightType = None
  ListFormat = None
  ListIndent = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListStyle = None
  NoObject = None
  ObjectIndex = None
  ObjectType = None
  OutlinePen = None
  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None
  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None
  UserFormat = None
  UserObject = None
  UserProperty = None

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

class QTextFragment(simplewrapper):
  """ QTextFragment()
  QTextFragment(QTextFragment) """

  def charFormat(self):
    """ charFormat(self) -> QTextCharFormat """
    return None

  def charFormatIndex(self):
    """ charFormatIndex(self) -> int """
    return 1

  def contains(self, int):
    """ contains(self, int) -> bool """
    return None

  def glyphRuns(self, arg0=None, arg1=None):
    """ glyphRuns(self, from_: int = -1, length: int = -1) -> List[QGlyphRun] """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def length(self):
    """ length(self) -> int """
    return 1

  def position(self):
    """ position(self) -> int """
    return 1

  def text(self):
    """ text(self) -> str """
    return ""

class QTextFrame(QTextObject):
  """ QTextFrame(QTextDocument) """

  def begin(self):
    """ begin(self) -> QTextFrame.iterator """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def childFrames(self):
    """ childFrames(self) -> List[QTextFrame] """
    return None

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def end(self):
    """ end(self) -> QTextFrame.iterator """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def firstCursorPosition(self):
    """ firstCursorPosition(self) -> QTextCursor """
    return None

  def firstPosition(self):
    """ firstPosition(self) -> int """
    return 1

  def format(self):
    """ format(self) -> QTextFormat """
    return None

  def formatIndex(self):
    """ formatIndex(self) -> int """
    return 1

  def frameFormat(self):
    """ frameFormat(self) -> QTextFrameFormat """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  class iterator(simplewrapper):
    """ QTextFrame.iterator()
    QTextFrame.iterator(QTextFrame.iterator) """

    def atEnd(self):
      """ atEnd(self) -> bool """
      return None

    def currentBlock(self):
      """ currentBlock(self) -> QTextBlock """
      return None

    def currentFrame(self):
      """ currentFrame(self) -> QTextFrame """
      return None

    def parentFrame(self):
      """ parentFrame(self) -> QTextFrame """
      return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastCursorPosition(self):
    """ lastCursorPosition(self) -> QTextCursor """
    return None

  def lastPosition(self):
    """ lastPosition(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentFrame(self):
    """ parentFrame(self) -> QTextFrame """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFormat():
    pass

  def setFrameFormat(self, QTextFrameFormat):
    """ setFrameFormat(self, QTextFrameFormat) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTextFrameFormat(QTextFormat):
  """ QTextFrameFormat()
  QTextFrameFormat(QTextFrameFormat) """

  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None

  class BorderStyle(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  BorderStyle_Dashed = None
  BorderStyle_DotDash = None
  BorderStyle_DotDotDash = None
  BorderStyle_Dotted = None
  BorderStyle_Double = None
  BorderStyle_Groove = None
  BorderStyle_Inset = None
  BorderStyle_None = None
  BorderStyle_Outset = None
  BorderStyle_Ridge = None
  BorderStyle_Solid = None
  CharFormat = None
  CssFloat = None
  FirstFontProperty = None
  FloatLeft = None
  FloatRight = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None
  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InFlow = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineHeight = None
  LineHeightType = None
  ListFormat = None
  ListIndent = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListStyle = None
  NoObject = None
  ObjectIndex = None
  ObjectType = None
  OutlinePen = None
  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None

  class Position(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None
  UserFormat = None
  UserObject = None
  UserProperty = None

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def border(self):
    """ border(self) -> float """
    return 1.0

  def borderBrush(self):
    """ borderBrush(self) -> QBrush """
    return None

  def borderStyle(self):
    """ borderStyle(self) -> QTextFrameFormat.BorderStyle """
    return None

  def bottomMargin(self):
    """ bottomMargin(self) -> float """
    return 1.0

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def height(self):
    """ height(self) -> QTextLength """
    return None

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leftMargin(self):
    """ leftMargin(self) -> float """
    return 1.0

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def margin(self):
    """ margin(self) -> float """
    return 1.0

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def padding(self):
    """ padding(self) -> float """
    return 1.0

  def pageBreakPolicy(self):
    """ pageBreakPolicy(self) -> QTextFormat.PageBreakFlags """
    return None

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def position(self):
    """ position(self) -> QTextFrameFormat.Position """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def rightMargin(self):
    """ rightMargin(self) -> float """
    return 1.0

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBorder(self, float):
    """ setBorder(self, float) """
    pass

  def setBorderBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBorderBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBorderStyle(self, arg0):
    """ setBorderStyle(self, QTextFrameFormat.BorderStyle) """
    pass

  def setBottomMargin(self, float):
    """ setBottomMargin(self, float) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setHeight(self, float):
    """ setHeight(self, float)
    setHeight(self, QTextLength) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLeftMargin(self, float):
    """ setLeftMargin(self, float) """
    pass

  def setMargin(self, float):
    """ setMargin(self, float) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setPadding(self, float):
    """ setPadding(self, float) """
    pass

  def setPageBreakPolicy(self, UnionQTextFormat.PageBreakFlags=None, QTextFormat.PageBreakFlag=None):
    """ setPageBreakPolicy(self, Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag]) """
    pass

  def setPosition(self, arg0):
    """ setPosition(self, QTextFrameFormat.Position) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def setRightMargin(self, float):
    """ setRightMargin(self, float) """
    pass

  def setTopMargin(self, float):
    """ setTopMargin(self, float) """
    pass

  def setWidth(self, QTextLength):
    """ setWidth(self, QTextLength)
    setWidth(self, float) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def topMargin(self):
    """ topMargin(self) -> float """
    return 1.0

  def type(self):
    """ type(self) -> int """
    return 1

  def width(self):
    """ width(self) -> QTextLength """
    return None

class QTextImageFormat(QTextCharFormat):
  """ QTextImageFormat()
  QTextImageFormat(QTextImageFormat) """

  AlignBaseline = None
  AlignBottom = None
  AlignMiddle = None
  AlignNormal = None
  AlignSubScript = None
  AlignSuperScript = None
  AlignTop = None
  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None
  CharFormat = None
  CssFloat = None
  DashDotDotLine = None
  DashDotLine = None
  DashUnderline = None
  DotLine = None
  FirstFontProperty = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontPropertiesAll = None
  FontPropertiesSpecifiedOnly = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None
  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineHeight = None
  LineHeightType = None
  ListFormat = None
  ListIndent = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListStyle = None
  NoObject = None
  NoUnderline = None
  ObjectIndex = None
  ObjectType = None
  OutlinePen = None
  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None
  SingleUnderline = None
  SpellCheckUnderline = None
  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None
  UserFormat = None
  UserObject = None
  UserProperty = None
  WaveUnderline = None

  def anchorHref(self):
    """ anchorHref(self) -> str """
    return ""

  def anchorNames(self):
    """ anchorNames(self) -> List[str] """
    return ""

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontCapitalization(self):
    """ fontCapitalization(self) -> QFont.Capitalization """
    return None

  def fontFamilies(self):
    """ fontFamilies(self) -> Any """
    return None

  def fontFamily(self):
    """ fontFamily(self) -> str """
    return ""

  def fontFixedPitch(self):
    """ fontFixedPitch(self) -> bool """
    return None

  def fontHintingPreference(self):
    """ fontHintingPreference(self) -> QFont.HintingPreference """
    return 1

  def fontItalic(self):
    """ fontItalic(self) -> bool """
    return None

  def fontKerning(self):
    """ fontKerning(self) -> bool """
    return None

  def fontLetterSpacing(self):
    """ fontLetterSpacing(self) -> float """
    return 1.0

  def fontLetterSpacingType(self):
    """ fontLetterSpacingType(self) -> QFont.SpacingType """
    return None

  def fontOverline(self):
    """ fontOverline(self) -> bool """
    return None

  def fontPointSize(self):
    """ fontPointSize(self) -> float """
    return 1.0

  def fontStretch(self):
    """ fontStretch(self) -> int """
    return 1

  def fontStrikeOut(self):
    """ fontStrikeOut(self) -> bool """
    return None

  def fontStyleHint(self):
    """ fontStyleHint(self) -> QFont.StyleHint """
    return 1

  def fontStyleName(self):
    """ fontStyleName(self) -> Any """
    return None

  def fontStyleStrategy(self):
    """ fontStyleStrategy(self) -> QFont.StyleStrategy """
    return None

  def fontUnderline(self):
    """ fontUnderline(self) -> bool """
    return None

  def fontWeight(self):
    """ fontWeight(self) -> int """
    return 1

  def fontWordSpacing(self):
    """ fontWordSpacing(self) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def height(self):
    """ height(self) -> float """
    return 1.0

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isAnchor(self):
    """ isAnchor(self) -> bool """
    return None

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def name(self):
    """ name(self) -> str """
    return ""

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def quality(self):
    """ quality(self) -> int """
    return 1

  def setAnchor(self, bool):
    """ setAnchor(self, bool) """
    pass

  def setAnchorHref(self, str):
    """ setAnchorHref(self, str) """
    pass

  def setAnchorNames(self, Iterablestr=None):
    """ setAnchorNames(self, Iterable[str]) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont)
    setFont(self, QFont, QTextCharFormat.FontPropertiesInheritanceBehavior) """
    pass

  def setFontCapitalization(self, arg0):
    """ setFontCapitalization(self, QFont.Capitalization) """
    pass

  def setFontFamilies(self, Iterablestr=None):
    """ setFontFamilies(self, Iterable[str]) """
    pass

  def setFontFamily(self, str):
    """ setFontFamily(self, str) """
    pass

  def setFontFixedPitch(self, bool):
    """ setFontFixedPitch(self, bool) """
    pass

  def setFontHintingPreference(self, arg0):
    """ setFontHintingPreference(self, QFont.HintingPreference) """
    pass

  def setFontItalic(self, bool):
    """ setFontItalic(self, bool) """
    pass

  def setFontKerning(self, bool):
    """ setFontKerning(self, bool) """
    pass

  def setFontLetterSpacing(self, float):
    """ setFontLetterSpacing(self, float) """
    pass

  def setFontLetterSpacingType(self, arg0):
    """ setFontLetterSpacingType(self, QFont.SpacingType) """
    pass

  def setFontOverline(self, bool):
    """ setFontOverline(self, bool) """
    pass

  def setFontPointSize(self, float):
    """ setFontPointSize(self, float) """
    pass

  def setFontStretch(self, int):
    """ setFontStretch(self, int) """
    pass

  def setFontStrikeOut(self, bool):
    """ setFontStrikeOut(self, bool) """
    pass

  def setFontStyleHint():
    """ setFontStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault) """
    pass

  def setFontStyleName(self, str):
    """ setFontStyleName(self, str) """
    pass

  def setFontStyleStrategy(self, arg0):
    """ setFontStyleStrategy(self, QFont.StyleStrategy) """
    pass

  def setFontUnderline(self, bool):
    """ setFontUnderline(self, bool) """
    pass

  def setFontWeight(self, int):
    """ setFontWeight(self, int) """
    pass

  def setFontWordSpacing(self, float):
    """ setFontWordSpacing(self, float) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setHeight(self, float):
    """ setHeight(self, float) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setName(self, str):
    """ setName(self, str) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def setQuality():
    """ setQuality(self, quality: int = 100) """
    pass

  def setTableCellColumnSpan(self, int):
    """ setTableCellColumnSpan(self, int) """
    pass

  def setTableCellRowSpan(self, int):
    """ setTableCellRowSpan(self, int) """
    pass

  def setTextOutline(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTextOutline(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setUnderlineColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setUnderlineColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setUnderlineStyle(self, arg0):
    """ setUnderlineStyle(self, QTextCharFormat.UnderlineStyle) """
    pass

  def setVerticalAlignment(self, arg0):
    """ setVerticalAlignment(self, QTextCharFormat.VerticalAlignment) """
    pass

  def setWidth(self, float):
    """ setWidth(self, float) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def tableCellColumnSpan(self):
    """ tableCellColumnSpan(self) -> int """
    return 1

  def tableCellRowSpan(self):
    """ tableCellRowSpan(self) -> int """
    return 1

  def textOutline(self):
    """ textOutline(self) -> QPen """
    return None

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def type(self):
    """ type(self) -> int """
    return 1

  def underlineColor(self):
    """ underlineColor(self) -> QColor """
    return None

  def underlineStyle(self):
    """ underlineStyle(self) -> QTextCharFormat.UnderlineStyle """
    return None

  def verticalAlignment(self):
    """ verticalAlignment(self) -> QTextCharFormat.VerticalAlignment """
    return None

  def width(self):
    """ width(self) -> float """
    return 1.0

class QTextInlineObject(simplewrapper):
  """ QTextInlineObject()
  QTextInlineObject(QTextInlineObject) """

  def ascent(self):
    """ ascent(self) -> float """
    return 1.0

  def descent(self):
    """ descent(self) -> float """
    return 1.0

  def format(self):
    """ format(self) -> QTextFormat """
    return None

  def formatIndex(self):
    """ formatIndex(self) -> int """
    return 1

  def height(self):
    """ height(self) -> float """
    return 1.0

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def rect(self):
    """ rect(self) -> QRectF """
    return None

  def setAscent(self, float):
    """ setAscent(self, float) """
    pass

  def setDescent(self, float):
    """ setDescent(self, float) """
    pass

  def setWidth(self, float):
    """ setWidth(self, float) """
    pass

  def textDirection(self):
    """ textDirection(self) -> Qt.LayoutDirection """
    return None

  def textPosition(self):
    """ textPosition(self) -> int """
    return 1

  def width(self):
    """ width(self) -> float """
    return 1.0

class QTextItem(simplewrapper):
  """ QTextItem()
  QTextItem(QTextItem) """

  Overline = None

  class RenderFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RenderFlags(simplewrapper):
    """ QTextItem.RenderFlags()
    QTextItem.RenderFlags(Union[QTextItem.RenderFlags, QTextItem.RenderFlag])
    QTextItem.RenderFlags(QTextItem.RenderFlags) """

    pass

  RightToLeft = None
  StrikeOut = None
  Underline = None

  def ascent(self):
    """ ascent(self) -> float """
    return 1.0

  def descent(self):
    """ descent(self) -> float """
    return 1.0

  def font(self):
    """ font(self) -> QFont """
    return None

  def renderFlags(self):
    """ renderFlags(self) -> QTextItem.RenderFlags """
    return None

  def text(self):
    """ text(self) -> str """
    return ""

  def width(self):
    """ width(self) -> float """
    return 1.0

class QTextLayout(simplewrapper):
  """ QTextLayout()
  QTextLayout(str)
  QTextLayout(str, QFont, paintDevice: QPaintDevice = None)
  QTextLayout(QTextBlock) """

  class CursorMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class FormatRange(simplewrapper):
    """ QTextLayout.FormatRange()
    QTextLayout.FormatRange(QTextLayout.FormatRange) """

    format = None
    length = None
    start = None

  SkipCharacters = None
  SkipWords = None

  def additionalFormats(self):
    """ additionalFormats(self) -> List[QTextLayout.FormatRange] """
    return None

  def beginLayout(self):
    """ beginLayout(self) """
    pass

  def boundingRect(self):
    """ boundingRect(self) -> QRectF """
    return None

  def cacheEnabled(self):
    """ cacheEnabled(self) -> bool """
    return None

  def clearAdditionalFormats(self):
    """ clearAdditionalFormats(self) """
    pass

  def clearFormats(self):
    """ clearFormats(self) """
    pass

  def clearLayout(self):
    """ clearLayout(self) """
    pass

  def createLine(self):
    """ createLine(self) -> QTextLine """
    return None

  def cursorMoveStyle(self):
    """ cursorMoveStyle(self) -> Qt.CursorMoveStyle """
    return None

  def draw():
    """ draw(self, QPainter, Union[QPointF, QPoint], selections: Iterable[QTextLayout.FormatRange] = [], clip: QRectF = QRectF()) """
    pass

  def drawCursor(self, QPainter, UnionQPointF=None, QPoint=None, int=None):
    """ drawCursor(self, QPainter, Union[QPointF, QPoint], int)
    drawCursor(self, QPainter, Union[QPointF, QPoint], int, int) """
    pass

  def endLayout(self):
    """ endLayout(self) """
    pass

  def font(self):
    """ font(self) -> QFont """
    return None

  def formats(self):
    """ formats(self) -> List[QTextLayout.FormatRange] """
    return None

  def glyphRuns(self, arg0=None, arg1=None):
    """ glyphRuns(self, from_: int = -1, length: int = -1) -> List[QGlyphRun] """
    return None

  def isValidCursorPosition(self, int):
    """ isValidCursorPosition(self, int) -> bool """
    return None

  def leftCursorPosition(self, int):
    """ leftCursorPosition(self, int) -> int """
    return 1

  def lineAt(self, int):
    """ lineAt(self, int) -> QTextLine """
    return None

  def lineCount(self):
    """ lineCount(self) -> int """
    return 1

  def lineForTextPosition(self, int):
    """ lineForTextPosition(self, int) -> QTextLine """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> float """
    return 1.0

  def minimumWidth(self):
    """ minimumWidth(self) -> float """
    return 1.0

  def nextCursorPosition(self, int, arg0=None):
    """ nextCursorPosition(self, int, mode: QTextLayout.CursorMode = QTextLayout.SkipCharacters) -> int """
    return 1

  def position(self):
    """ position(self) -> QPointF """
    return 1

  def preeditAreaPosition(self):
    """ preeditAreaPosition(self) -> int """
    return 1

  def preeditAreaText(self):
    """ preeditAreaText(self) -> str """
    return ""

  def previousCursorPosition(self, int, arg0=None):
    """ previousCursorPosition(self, int, mode: QTextLayout.CursorMode = QTextLayout.SkipCharacters) -> int """
    return 1

  def rightCursorPosition(self, int):
    """ rightCursorPosition(self, int) -> int """
    return 1

  def setAdditionalFormats(self, IterableQTextLayout.FormatRange=None):
    """ setAdditionalFormats(self, Iterable[QTextLayout.FormatRange]) """
    pass

  def setCacheEnabled(self, bool):
    """ setCacheEnabled(self, bool) """
    pass

  def setCursorMoveStyle(self, arg0):
    """ setCursorMoveStyle(self, Qt.CursorMoveStyle) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont) """
    pass

  def setFormats(self, IterableQTextLayout.FormatRange=None):
    """ setFormats(self, Iterable[QTextLayout.FormatRange]) """
    pass

  def setPosition(self, UnionQPointF=None, QPoint=None):
    """ setPosition(self, Union[QPointF, QPoint]) """
    pass

  def setPreeditArea(self, int, str):
    """ setPreeditArea(self, int, str) """
    pass

  def setText(self, str):
    """ setText(self, str) """
    pass

  def setTextOption(self, QTextOption):
    """ setTextOption(self, QTextOption) """
    pass

  def text(self):
    """ text(self) -> str """
    return ""

  def textOption(self):
    """ textOption(self) -> QTextOption """
    return None

class QTextLength(simplewrapper):
  """ QTextLength()
  QTextLength(QTextLength.Type, float)
  QTextLength(Any)
  QTextLength(QTextLength) """

  FixedLength = None
  PercentageLength = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  VariableLength = None

  def rawValue(self):
    """ rawValue(self) -> float """
    return 1.0

  def type(self):
    """ type(self) -> QTextLength.Type """
    return None

  def value(self, float):
    """ value(self, float) -> float """
    return 1.0

class QTextLine(simplewrapper):
  """ QTextLine()
  QTextLine(QTextLine) """

  CursorBetweenCharacters = None
  CursorOnCharacter = None

  class CursorPosition(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Edge(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Leading = None
  Trailing = None

  def ascent(self):
    """ ascent(self) -> float """
    return 1.0

  def cursorToX(self, int, arg0=None):
    """ cursorToX(self, int, edge: QTextLine.Edge = QTextLine.Leading) -> Tuple[float, int] """
    return 1

  def descent(self):
    """ descent(self) -> float """
    return 1.0

  def draw():
    """ draw(self, QPainter, Union[QPointF, QPoint], selection: QTextLayout.FormatRange = None) """
    pass

  def glyphRuns(self, arg0=None, arg1=None):
    """ glyphRuns(self, from_: int = -1, length: int = -1) -> List[QGlyphRun] """
    return None

  def height(self):
    """ height(self) -> float """
    return 1.0

  def horizontalAdvance(self):
    """ horizontalAdvance(self) -> float """
    return 1.0

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def leading(self):
    """ leading(self) -> float """
    return 1.0

  def leadingIncluded(self):
    """ leadingIncluded(self) -> bool """
    return None

  def lineNumber(self):
    """ lineNumber(self) -> int """
    return 1

  def naturalTextRect(self):
    """ naturalTextRect(self) -> QRectF """
    return None

  def naturalTextWidth(self):
    """ naturalTextWidth(self) -> float """
    return 1.0

  def position(self):
    """ position(self) -> QPointF """
    return 1

  def rect(self):
    """ rect(self) -> QRectF """
    return None

  def setLeadingIncluded(self, bool):
    """ setLeadingIncluded(self, bool) """
    pass

  def setLineWidth(self, float):
    """ setLineWidth(self, float) """
    pass

  def setNumColumns(self, int):
    """ setNumColumns(self, int)
    setNumColumns(self, int, float) """
    pass

  def setPosition(self, UnionQPointF=None, QPoint=None):
    """ setPosition(self, Union[QPointF, QPoint]) """
    pass

  def textLength(self):
    """ textLength(self) -> int """
    return 1

  def textStart(self):
    """ textStart(self) -> int """
    return 1

  def width(self):
    """ width(self) -> float """
    return 1.0

  def x(self):
    """ x(self) -> float """
    return 1.0

  def xToCursor(self, float, arg0=None):
    """ xToCursor(self, float, edge: QTextLine.CursorPosition = QTextLine.CursorBetweenCharacters) -> int """
    return 1

  def y(self):
    """ y(self) -> float """
    return 1.0

class QTextList(QTextBlockGroup):
  """ QTextList(QTextDocument) """

  def add(self, QTextBlock):
    """ add(self, QTextBlock) """
    pass

  def blockFormatChanged():
    pass

  def blockInserted():
    pass

  def blockList():
    pass

  def blockRemoved():
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def count(self):
    """ count(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self):
    """ format(self) -> QTextListFormat """
    return None

  def formatIndex(self):
    """ formatIndex(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def item(self, int):
    """ item(self, int) -> QTextBlock """
    return None

  def itemNumber(self, QTextBlock):
    """ itemNumber(self, QTextBlock) -> int """
    return 1

  def itemText(self, QTextBlock):
    """ itemText(self, QTextBlock) -> str """
    return ""

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remove(self, QTextBlock):
    """ remove(self, QTextBlock) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeItem(self, int):
    """ removeItem(self, int) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFormat(self, QTextListFormat):
    """ setFormat(self, QTextListFormat) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTextListFormat(QTextFormat):
  """ QTextListFormat()
  QTextListFormat(QTextListFormat) """

  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None
  CharFormat = None
  CssFloat = None
  FirstFontProperty = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None
  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineHeight = None
  LineHeightType = None
  ListCircle = None
  ListDecimal = None
  ListDisc = None
  ListFormat = None
  ListIndent = None
  ListLowerAlpha = None
  ListLowerRoman = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListSquare = None
  ListStyle = None
  ListUpperAlpha = None
  ListUpperRoman = None
  NoObject = None
  ObjectIndex = None
  ObjectType = None
  OutlinePen = None
  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None
  class Style(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None
  UserFormat = None
  UserObject = None
  UserProperty = None

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def indent(self):
    """ indent(self) -> int """
    return 1

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def numberPrefix(self):
    """ numberPrefix(self) -> str """
    return ""

  def numberSuffix(self):
    """ numberSuffix(self) -> str """
    return ""

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setIndent(self, int):
    """ setIndent(self, int) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setNumberPrefix(self, str):
    """ setNumberPrefix(self, str) """
    pass

  def setNumberSuffix(self, str):
    """ setNumberSuffix(self, str) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def setStyle(self, arg0):
    """ setStyle(self, QTextListFormat.Style) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def style(self):
    """ style(self) -> QTextListFormat.Style """
    return None

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def type(self):
    """ type(self) -> int """
    return 1

class QTextObject(QObject):
  """ QTextObject(QTextDocument) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def format(self):
    """ format(self) -> QTextFormat """
    return None

  def formatIndex(self):
    """ formatIndex(self) -> int """
    return 1

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFormat(self, QTextFormat):
    """ setFormat(self, QTextFormat) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTextObjectInterface(simplewrapper):
  """ QTextObjectInterface()
  QTextObjectInterface(QTextObjectInterface) """

  def __init__(self, *args, **kwargs):
    pass

  def drawObject(self, QPainter, QRectF, QTextDocument, int, QTextFormat):
    """ drawObject(self, QPainter, QRectF, QTextDocument, int, QTextFormat) """
    pass

  def intrinsicSize(self, QTextDocument, int, QTextFormat):
    """ intrinsicSize(self, QTextDocument, int, QTextFormat) -> QSizeF """
    return None

class QTextOption(simplewrapper):
  """ QTextOption()
  QTextOption(Union[Qt.Alignment, Qt.AlignmentFlag])
  QTextOption(QTextOption) """

  AddSpaceForLineAndParagraphSeparators = None
  CenterTab = None
  DelimiterTab = None

  class Flag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class Flags(simplewrapper):
    """ QTextOption.Flags()
    QTextOption.Flags(Union[QTextOption.Flags, QTextOption.Flag])
    QTextOption.Flags(QTextOption.Flags) """

    pass

  IncludeTrailingSpaces = None
  LeftTab = None
  ManualWrap = None
  NoWrap = None
  RightTab = None
  ShowDocumentTerminator = None
  ShowLineAndParagraphSeparators = None
  ShowTabsAndSpaces = None
  SuppressColors = None

  class Tab(simplewrapper):
    """ QTextOption.Tab()
    QTextOption.Tab(float, QTextOption.TabType, delim: str = '')
    QTextOption.Tab(QTextOption.Tab) """

    delimiter = None
    position = None
    type = None

  class TabType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  WordWrap = None
  WrapAnywhere = None
  WrapAtWordBoundaryOrAnywhere = None

  class WrapMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def flags(self):
    """ flags(self) -> QTextOption.Flags """
    return None

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setFlags(self, UnionQTextOption.Flags=None, QTextOption.Flag=None):
    """ setFlags(self, Union[QTextOption.Flags, QTextOption.Flag]) """
    pass

  def setTabArray(self, Iterablefloat=None):
    """ setTabArray(self, Iterable[float]) """
    pass

  def setTabStop(self, float):
    """ setTabStop(self, float) """
    pass

  def setTabStopDistance(self, float):
    """ setTabStopDistance(self, float) """
    pass

  def setTabs(self, IterableQTextOption.Tab=None):
    """ setTabs(self, Iterable[QTextOption.Tab]) """
    pass

  def setTextDirection(self, arg0):
    """ setTextDirection(self, Qt.LayoutDirection) """
    pass

  def setUseDesignMetrics(self, bool):
    """ setUseDesignMetrics(self, bool) """
    pass

  def setWrapMode(self, arg0):
    """ setWrapMode(self, QTextOption.WrapMode) """
    pass

  def tabArray(self):
    """ tabArray(self) -> List[float] """
    return 1.0

  def tabStop(self):
    """ tabStop(self) -> float """
    return 1.0

  def tabStopDistance(self):
    """ tabStopDistance(self) -> float """
    return 1.0

  def tabs(self):
    """ tabs(self) -> List[QTextOption.Tab] """
    return None

  def textDirection(self):
    """ textDirection(self) -> Qt.LayoutDirection """
    return None

  def useDesignMetrics(self):
    """ useDesignMetrics(self) -> bool """
    return None

  def wrapMode(self):
    """ wrapMode(self) -> QTextOption.WrapMode """
    return None

class QTextTable(QTextFrame):
  """ QTextTable(QTextDocument) """

  def appendColumns(self, int):
    """ appendColumns(self, int) """
    pass

  def appendRows(self, int):
    """ appendRows(self, int) """
    pass

  def begin(self):
    """ begin(self) -> QTextFrame.iterator """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cellAt(self, int, int):
    """ cellAt(self, int, int) -> QTextTableCell
    cellAt(self, int) -> QTextTableCell
    cellAt(self, QTextCursor) -> QTextTableCell """
    return None

  def childEvent():
    pass

  def childFrames(self):
    """ childFrames(self) -> List[QTextFrame] """
    return None

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def columns(self):
    """ columns(self) -> int """
    return 1

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def document(self):
    """ document(self) -> QTextDocument """
    return None

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def end(self):
    """ end(self) -> QTextFrame.iterator """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def firstCursorPosition(self):
    """ firstCursorPosition(self) -> QTextCursor """
    return None

  def firstPosition(self):
    """ firstPosition(self) -> int """
    return 1

  def format(self):
    """ format(self) -> QTextTableFormat """
    return None

  def formatIndex(self):
    """ formatIndex(self) -> int """
    return 1

  def frameFormat(self):
    """ frameFormat(self) -> QTextFrameFormat """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertColumns(self, int, int):
    """ insertColumns(self, int, int) """
    pass

  def insertRows(self, int, int):
    """ insertRows(self, int, int) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lastCursorPosition(self):
    """ lastCursorPosition(self) -> QTextCursor """
    return None

  def lastPosition(self):
    """ lastPosition(self) -> int """
    return 1

  def mergeCells(self, int, int, int, int):
    """ mergeCells(self, int, int, int, int)
    mergeCells(self, QTextCursor) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def parentFrame(self):
    """ parentFrame(self) -> QTextFrame """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeColumns(self, int, int):
    """ removeColumns(self, int, int) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeRows(self, int, int):
    """ removeRows(self, int, int) """
    pass

  def resize(self, int, int):
    """ resize(self, int, int) """
    pass

  def rowEnd(self, QTextCursor):
    """ rowEnd(self, QTextCursor) -> QTextCursor """
    return None

  def rowStart(self, QTextCursor):
    """ rowStart(self, QTextCursor) -> QTextCursor """
    return None

  def rows(self):
    """ rows(self) -> int """
    return 1

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setFormat(self, QTextTableFormat):
    """ setFormat(self, QTextTableFormat) """
    pass

  def setFrameFormat(self, QTextFrameFormat):
    """ setFrameFormat(self, QTextFrameFormat) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def splitCell(self, int, int, int, int):
    """ splitCell(self, int, int, int, int) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QTextTableCell(simplewrapper):
  """ QTextTableCell()
  QTextTableCell(QTextTableCell) """

  def column(self):
    """ column(self) -> int """
    return 1

  def columnSpan(self):
    """ columnSpan(self) -> int """
    return 1

  def firstCursorPosition(self):
    """ firstCursorPosition(self) -> QTextCursor """
    return None

  def format(self):
    """ format(self) -> QTextCharFormat """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def lastCursorPosition(self):
    """ lastCursorPosition(self) -> QTextCursor """
    return None

  def row(self):
    """ row(self) -> int """
    return 1

  def rowSpan(self):
    """ rowSpan(self) -> int """
    return 1

  def setFormat(self, QTextCharFormat):
    """ setFormat(self, QTextCharFormat) """
    pass

  def tableCellFormatIndex(self):
    """ tableCellFormatIndex(self) -> int """
    return 1

class QTextTableCellFormat(QTextCharFormat):
  """ QTextTableCellFormat()
  QTextTableCellFormat(QTextTableCellFormat) """

  AlignBaseline = None
  AlignBottom = None
  AlignMiddle = None
  AlignNormal = None
  AlignSubScript = None
  AlignSuperScript = None
  AlignTop = None
  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None
  CharFormat = None
  CssFloat = None
  DashDotDotLine = None
  DashDotLine = None
  DashUnderline = None
  DotLine = None
  FirstFontProperty = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontPropertiesAll = None
  FontPropertiesSpecifiedOnly = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None
  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineHeight = None
  LineHeightType = None
  ListFormat = None
  ListIndent = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListStyle = None
  NoObject = None
  NoUnderline = None
  ObjectIndex = None
  ObjectType = None
  OutlinePen = None
  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None
  SingleUnderline = None
  SpellCheckUnderline = None
  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None
  UserFormat = None
  UserObject = None
  UserProperty = None
  WaveUnderline = None

  def anchorHref(self):
    """ anchorHref(self) -> str """
    return ""

  def anchorNames(self):
    """ anchorNames(self) -> List[str] """
    return ""

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def bottomPadding(self):
    """ bottomPadding(self) -> float """
    return 1.0

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def font(self):
    """ font(self) -> QFont """
    return None

  def fontCapitalization(self):
    """ fontCapitalization(self) -> QFont.Capitalization """
    return None

  def fontFamilies(self):
    """ fontFamilies(self) -> Any """
    return None

  def fontFamily(self):
    """ fontFamily(self) -> str """
    return ""

  def fontFixedPitch(self):
    """ fontFixedPitch(self) -> bool """
    return None

  def fontHintingPreference(self):
    """ fontHintingPreference(self) -> QFont.HintingPreference """
    return 1

  def fontItalic(self):
    """ fontItalic(self) -> bool """
    return None

  def fontKerning(self):
    """ fontKerning(self) -> bool """
    return None

  def fontLetterSpacing(self):
    """ fontLetterSpacing(self) -> float """
    return 1.0

  def fontLetterSpacingType(self):
    """ fontLetterSpacingType(self) -> QFont.SpacingType """
    return None

  def fontOverline(self):
    """ fontOverline(self) -> bool """
    return None

  def fontPointSize(self):
    """ fontPointSize(self) -> float """
    return 1.0

  def fontStretch(self):
    """ fontStretch(self) -> int """
    return 1

  def fontStrikeOut(self):
    """ fontStrikeOut(self) -> bool """
    return None

  def fontStyleHint(self):
    """ fontStyleHint(self) -> QFont.StyleHint """
    return 1

  def fontStyleName(self):
    """ fontStyleName(self) -> Any """
    return None

  def fontStyleStrategy(self):
    """ fontStyleStrategy(self) -> QFont.StyleStrategy """
    return None

  def fontUnderline(self):
    """ fontUnderline(self) -> bool """
    return None

  def fontWeight(self):
    """ fontWeight(self) -> int """
    return 1

  def fontWordSpacing(self):
    """ fontWordSpacing(self) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isAnchor(self):
    """ isAnchor(self) -> bool """
    return None

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leftPadding(self):
    """ leftPadding(self) -> float """
    return 1.0

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def rightPadding(self):
    """ rightPadding(self) -> float """
    return 1.0

  def setAnchor(self, bool):
    """ setAnchor(self, bool) """
    pass

  def setAnchorHref(self, str):
    """ setAnchorHref(self, str) """
    pass

  def setAnchorNames(self, Iterablestr=None):
    """ setAnchorNames(self, Iterable[str]) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBottomPadding(self, float):
    """ setBottomPadding(self, float) """
    pass

  def setFont(self, QFont):
    """ setFont(self, QFont)
    setFont(self, QFont, QTextCharFormat.FontPropertiesInheritanceBehavior) """
    pass

  def setFontCapitalization(self, arg0):
    """ setFontCapitalization(self, QFont.Capitalization) """
    pass

  def setFontFamilies(self, Iterablestr=None):
    """ setFontFamilies(self, Iterable[str]) """
    pass

  def setFontFamily(self, str):
    """ setFontFamily(self, str) """
    pass

  def setFontFixedPitch(self, bool):
    """ setFontFixedPitch(self, bool) """
    pass

  def setFontHintingPreference(self, arg0):
    """ setFontHintingPreference(self, QFont.HintingPreference) """
    pass

  def setFontItalic(self, bool):
    """ setFontItalic(self, bool) """
    pass

  def setFontKerning(self, bool):
    """ setFontKerning(self, bool) """
    pass

  def setFontLetterSpacing(self, float):
    """ setFontLetterSpacing(self, float) """
    pass

  def setFontLetterSpacingType(self, arg0):
    """ setFontLetterSpacingType(self, QFont.SpacingType) """
    pass

  def setFontOverline(self, bool):
    """ setFontOverline(self, bool) """
    pass

  def setFontPointSize(self, float):
    """ setFontPointSize(self, float) """
    pass

  def setFontStretch(self, int):
    """ setFontStretch(self, int) """
    pass

  def setFontStrikeOut(self, bool):
    """ setFontStrikeOut(self, bool) """
    pass

  def setFontStyleHint():
    """ setFontStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault) """
    pass

  def setFontStyleName(self, str):
    """ setFontStyleName(self, str) """
    pass

  def setFontStyleStrategy(self, arg0):
    """ setFontStyleStrategy(self, QFont.StyleStrategy) """
    pass

  def setFontUnderline(self, bool):
    """ setFontUnderline(self, bool) """
    pass

  def setFontWeight(self, int):
    """ setFontWeight(self, int) """
    pass

  def setFontWordSpacing(self, float):
    """ setFontWordSpacing(self, float) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLeftPadding(self, float):
    """ setLeftPadding(self, float) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setPadding(self, float):
    """ setPadding(self, float) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def setRightPadding(self, float):
    """ setRightPadding(self, float) """
    pass

  def setTableCellColumnSpan(self, int):
    """ setTableCellColumnSpan(self, int) """
    pass

  def setTableCellRowSpan(self, int):
    """ setTableCellRowSpan(self, int) """
    pass

  def setTextOutline(self, UnionQPen=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setTextOutline(self, Union[QPen, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setToolTip(self, str):
    """ setToolTip(self, str) """
    pass

  def setTopPadding(self, float):
    """ setTopPadding(self, float) """
    pass

  def setUnderlineColor(self, UnionQColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setUnderlineColor(self, Union[QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setUnderlineStyle(self, arg0):
    """ setUnderlineStyle(self, QTextCharFormat.UnderlineStyle) """
    pass

  def setVerticalAlignment(self, arg0):
    """ setVerticalAlignment(self, QTextCharFormat.VerticalAlignment) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def tableCellColumnSpan(self):
    """ tableCellColumnSpan(self) -> int """
    return 1

  def tableCellRowSpan(self):
    """ tableCellRowSpan(self) -> int """
    return 1

  def textOutline(self):
    """ textOutline(self) -> QPen """
    return None

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def toolTip(self):
    """ toolTip(self) -> str """
    return ""

  def topPadding(self):
    """ topPadding(self) -> float """
    return 1.0

  def type(self):
    """ type(self) -> int """
    return 1

  def underlineColor(self):
    """ underlineColor(self) -> QColor """
    return None

  def underlineStyle(self):
    """ underlineStyle(self) -> QTextCharFormat.UnderlineStyle """
    return None

  def verticalAlignment(self):
    """ verticalAlignment(self) -> QTextCharFormat.VerticalAlignment """
    return None

class QTextTableFormat(QTextFrameFormat):
  """ QTextTableFormat()
  QTextTableFormat(QTextTableFormat) """

  AnchorHref = None
  AnchorName = None
  BackgroundBrush = None
  BackgroundImageUrl = None
  BlockAlignment = None
  BlockBottomMargin = None
  BlockFormat = None
  BlockIndent = None
  BlockLeftMargin = None
  BlockNonBreakableLines = None
  BlockRightMargin = None
  BlockTopMargin = None
  BlockTrailingHorizontalRulerWidth = None
  BorderStyle_Dashed = None
  BorderStyle_DotDash = None
  BorderStyle_DotDotDash = None
  BorderStyle_Dotted = None
  BorderStyle_Double = None
  BorderStyle_Groove = None
  BorderStyle_Inset = None
  BorderStyle_None = None
  BorderStyle_Outset = None
  BorderStyle_Ridge = None
  BorderStyle_Solid = None
  CharFormat = None
  CssFloat = None
  FirstFontProperty = None
  FloatLeft = None
  FloatRight = None
  FontCapitalization = None
  FontFamilies = None
  FontFamily = None
  FontFixedPitch = None
  FontHintingPreference = None
  FontItalic = None
  FontKerning = None
  FontLetterSpacing = None
  FontLetterSpacingType = None
  FontOverline = None
  FontPixelSize = None
  FontPointSize = None
  FontSizeAdjustment = None
  FontSizeIncrement = None
  FontStretch = None
  FontStrikeOut = None
  FontStyleHint = None
  FontStyleName = None
  FontStyleStrategy = None
  FontUnderline = None
  FontWeight = None
  FontWordSpacing = None
  ForegroundBrush = None
  FrameBorder = None
  FrameBorderBrush = None
  FrameBorderStyle = None
  FrameBottomMargin = None
  FrameFormat = None
  FrameHeight = None
  FrameLeftMargin = None
  FrameMargin = None
  FramePadding = None
  FrameRightMargin = None
  FrameTopMargin = None
  FrameWidth = None
  FullWidthSelection = None
  HeadingLevel = None
  ImageHeight = None
  ImageName = None
  ImageObject = None
  ImageQuality = None
  ImageWidth = None
  InFlow = None
  InvalidFormat = None
  IsAnchor = None
  LastFontProperty = None
  LayoutDirection = None
  LineHeight = None
  LineHeightType = None
  ListFormat = None
  ListIndent = None
  ListNumberPrefix = None
  ListNumberSuffix = None
  ListStyle = None
  NoObject = None
  ObjectIndex = None
  ObjectType = None
  OutlinePen = None
  PageBreakPolicy = None
  PageBreak_AlwaysAfter = None
  PageBreak_AlwaysBefore = None
  PageBreak_Auto = None
  TabPositions = None
  TableCellBottomPadding = None
  TableCellColumnSpan = None
  TableCellLeftPadding = None
  TableCellObject = None
  TableCellPadding = None
  TableCellRightPadding = None
  TableCellRowSpan = None
  TableCellSpacing = None
  TableCellTopPadding = None
  TableColumnWidthConstraints = None
  TableColumns = None
  TableFormat = None
  TableHeaderRowCount = None
  TableObject = None
  TextIndent = None
  TextOutline = None
  TextToolTip = None
  TextUnderlineColor = None
  TextUnderlineStyle = None
  TextVerticalAlignment = None
  UserFormat = None
  UserObject = None
  UserProperty = None

  def alignment(self):
    """ alignment(self) -> Qt.Alignment """
    return None

  def background(self):
    """ background(self) -> QBrush """
    return None

  def boolProperty(self, int):
    """ boolProperty(self, int) -> bool """
    return None

  def border(self):
    """ border(self) -> float """
    return 1.0

  def borderBrush(self):
    """ borderBrush(self) -> QBrush """
    return None

  def borderStyle(self):
    """ borderStyle(self) -> QTextFrameFormat.BorderStyle """
    return None

  def bottomMargin(self):
    """ bottomMargin(self) -> float """
    return 1.0

  def brushProperty(self, int):
    """ brushProperty(self, int) -> QBrush """
    return None

  def cellPadding(self):
    """ cellPadding(self) -> float """
    return 1.0

  def cellSpacing(self):
    """ cellSpacing(self) -> float """
    return 1.0

  def clearBackground(self):
    """ clearBackground(self) """
    pass

  def clearColumnWidthConstraints(self):
    """ clearColumnWidthConstraints(self) """
    pass

  def clearForeground(self):
    """ clearForeground(self) """
    pass

  def clearProperty(self, int):
    """ clearProperty(self, int) """
    pass

  def colorProperty(self, int):
    """ colorProperty(self, int) -> QColor """
    return None

  def columnWidthConstraints(self):
    """ columnWidthConstraints(self) -> List[QTextLength] """
    return None

  def columns(self):
    """ columns(self) -> int """
    return 1

  def doubleProperty(self, int):
    """ doubleProperty(self, int) -> float """
    return 1.0

  def foreground(self):
    """ foreground(self) -> QBrush """
    return None

  def hasProperty(self, int):
    """ hasProperty(self, int) -> bool """
    return None

  def headerRowCount(self):
    """ headerRowCount(self) -> int """
    return 1

  def height(self):
    """ height(self) -> QTextLength """
    return None

  def intProperty(self, int):
    """ intProperty(self, int) -> int """
    return 1

  def isBlockFormat(self):
    """ isBlockFormat(self) -> bool """
    return None

  def isCharFormat(self):
    """ isCharFormat(self) -> bool """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isFrameFormat(self):
    """ isFrameFormat(self) -> bool """
    return None

  def isImageFormat(self):
    """ isImageFormat(self) -> bool """
    return None

  def isListFormat(self):
    """ isListFormat(self) -> bool """
    return None

  def isTableCellFormat(self):
    """ isTableCellFormat(self) -> bool """
    return None

  def isTableFormat(self):
    """ isTableFormat(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def layoutDirection(self):
    """ layoutDirection(self) -> Qt.LayoutDirection """
    return None

  def leftMargin(self):
    """ leftMargin(self) -> float """
    return 1.0

  def lengthProperty(self, int):
    """ lengthProperty(self, int) -> QTextLength """
    return None

  def lengthVectorProperty(self, int):
    """ lengthVectorProperty(self, int) -> List[QTextLength] """
    return None

  def margin(self):
    """ margin(self) -> float """
    return 1.0

  def merge(self, QTextFormat):
    """ merge(self, QTextFormat) """
    pass

  def objectIndex(self):
    """ objectIndex(self) -> int """
    return 1

  def objectType(self):
    """ objectType(self) -> int """
    return 1

  def padding(self):
    """ padding(self) -> float """
    return 1.0

  def pageBreakPolicy(self):
    """ pageBreakPolicy(self) -> QTextFormat.PageBreakFlags """
    return None

  def penProperty(self, int):
    """ penProperty(self, int) -> QPen """
    return None

  def position(self):
    """ position(self) -> QTextFrameFormat.Position """
    return None

  def properties(self):
    """ properties(self) -> Dict[int, Any] """
    return 1

  def property(self, int):
    """ property(self, int) -> Any """
    return None

  def propertyCount(self):
    """ propertyCount(self) -> int """
    return 1

  def rightMargin(self):
    """ rightMargin(self) -> float """
    return 1.0

  def setAlignment(self, UnionQt.Alignment=None, Qt.AlignmentFlag=None):
    """ setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag]) """
    pass

  def setBackground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBorder(self, float):
    """ setBorder(self, float) """
    pass

  def setBorderBrush(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setBorderBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setBorderStyle(self, arg0):
    """ setBorderStyle(self, QTextFrameFormat.BorderStyle) """
    pass

  def setBottomMargin(self, float):
    """ setBottomMargin(self, float) """
    pass

  def setCellPadding(self, float):
    """ setCellPadding(self, float) """
    pass

  def setCellSpacing(self, float):
    """ setCellSpacing(self, float) """
    pass

  def setColumnWidthConstraints(self, IterableQTextLength=None):
    """ setColumnWidthConstraints(self, Iterable[QTextLength]) """
    pass

  def setColumns(self, int):
    """ setColumns(self, int) """
    pass

  def setForeground(self, UnionQBrush=None, QColor=None, Qt.GlobalColor=None, QGradient=None):
    """ setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient]) """
    pass

  def setHeaderRowCount(self, int):
    """ setHeaderRowCount(self, int) """
    pass

  def setHeight(self, float):
    """ setHeight(self, float)
    setHeight(self, QTextLength) """
    pass

  def setLayoutDirection(self, arg0):
    """ setLayoutDirection(self, Qt.LayoutDirection) """
    pass

  def setLeftMargin(self, float):
    """ setLeftMargin(self, float) """
    pass

  def setMargin(self, float):
    """ setMargin(self, float) """
    pass

  def setObjectIndex(self, int):
    """ setObjectIndex(self, int) """
    pass

  def setObjectType(self, int):
    """ setObjectType(self, int) """
    pass

  def setPadding(self, float):
    """ setPadding(self, float) """
    pass

  def setPageBreakPolicy(self, UnionQTextFormat.PageBreakFlags=None, QTextFormat.PageBreakFlag=None):
    """ setPageBreakPolicy(self, Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag]) """
    pass

  def setPosition(self, arg0):
    """ setPosition(self, QTextFrameFormat.Position) """
    pass

  def setProperty(self, int, Any):
    """ setProperty(self, int, Any)
    setProperty(self, int, Iterable[QTextLength]) """
    pass

  def setRightMargin(self, float):
    """ setRightMargin(self, float) """
    pass

  def setTopMargin(self, float):
    """ setTopMargin(self, float) """
    pass

  def setWidth(self, QTextLength):
    """ setWidth(self, QTextLength)
    setWidth(self, float) """
    pass

  def stringProperty(self, int):
    """ stringProperty(self, int) -> str """
    return ""

  def swap(self, QTextFormat):
    """ swap(self, QTextFormat) """
    pass

  def toBlockFormat(self):
    """ toBlockFormat(self) -> QTextBlockFormat """
    return None

  def toCharFormat(self):
    """ toCharFormat(self) -> QTextCharFormat """
    return None

  def toFrameFormat(self):
    """ toFrameFormat(self) -> QTextFrameFormat """
    return None

  def toImageFormat(self):
    """ toImageFormat(self) -> QTextImageFormat """
    return None

  def toListFormat(self):
    """ toListFormat(self) -> QTextListFormat """
    return None

  def toTableCellFormat(self):
    """ toTableCellFormat(self) -> QTextTableCellFormat """
    return None

  def toTableFormat(self):
    """ toTableFormat(self) -> QTextTableFormat """
    return None

  def topMargin(self):
    """ topMargin(self) -> float """
    return 1.0

  def type(self):
    """ type(self) -> int """
    return 1

  def width(self):
    """ width(self) -> QTextLength """
    return None

class QTouchDevice(simplewrapper):
  """ QTouchDevice()
  QTouchDevice(QTouchDevice) """

  Area = None

  class Capabilities(simplewrapper):
    """ QTouchDevice.Capabilities()
    QTouchDevice.Capabilities(Union[QTouchDevice.Capabilities, QTouchDevice.CapabilityFlag])
    QTouchDevice.Capabilities(QTouchDevice.Capabilities) """

    pass

  class CapabilityFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class DeviceType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  MouseEmulation = None
  NormalizedPosition = None
  Position = None
  Pressure = None
  RawPositions = None
  TouchPad = None
  TouchScreen = None
  Velocity = None

  def capabilities(self):
    """ capabilities(self) -> QTouchDevice.Capabilities """
    return None

  def devices():
    """ devices() -> List[QTouchDevice] """
    return None

  def maximumTouchPoints(self):
    """ maximumTouchPoints(self) -> int """
    return 1

  def name(self):
    """ name(self) -> str """
    return ""

  def setCapabilities(self, UnionQTouchDevice.Capabilities=None, QTouchDevice.CapabilityFlag=None):
    """ setCapabilities(self, Union[QTouchDevice.Capabilities, QTouchDevice.CapabilityFlag]) """
    pass

  def setMaximumTouchPoints(self, int):
    """ setMaximumTouchPoints(self, int) """
    pass

  def setName(self, str):
    """ setName(self, str) """
    pass

  def setType(self, arg0):
    """ setType(self, QTouchDevice.DeviceType) """
    pass

  def type(self):
    """ type(self) -> QTouchDevice.DeviceType """
    return None

class QTouchEvent(QInputEvent):
  """ QTouchEvent(QEvent.Type, device: QTouchDevice = None, modifiers: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, touchPointStates: Union[Qt.TouchPointStates, Qt.TouchPointState] = Qt.TouchPointStates(), touchPoints: Iterable[QTouchEvent.TouchPoint] = [])
  QTouchEvent(QTouchEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None

  class TouchPoint(simplewrapper):

    class InfoFlag(int):

      bit_length = None
      conjugate = None
      denominator = None
      from_bytes = None
      imag = None
      numerator = None
      real = None
      to_bytes = None

    class InfoFlags(simplewrapper):
      """ QTouchEvent.TouchPoint.InfoFlags()
      QTouchEvent.TouchPoint.InfoFlags(Union[QTouchEvent.TouchPoint.InfoFlags, QTouchEvent.TouchPoint.InfoFlag])
      QTouchEvent.TouchPoint.InfoFlags(QTouchEvent.TouchPoint.InfoFlags) """

      pass

    Pen = None
    Token = None

    def ellipseDiameters(self):
      """ ellipseDiameters(self) -> QSizeF """
      return None

    def flags(self):
      """ flags(self) -> QTouchEvent.TouchPoint.InfoFlags """
      return 1

    def id(self):
      """ id(self) -> int """
      return 1

    def lastNormalizedPos(self):
      """ lastNormalizedPos(self) -> QPointF """
      return 1

    def lastPos(self):
      """ lastPos(self) -> QPointF """
      return 1

    def lastScenePos(self):
      """ lastScenePos(self) -> QPointF """
      return 1

    def lastScreenPos(self):
      """ lastScreenPos(self) -> QPointF """
      return 1

    def normalizedPos(self):
      """ normalizedPos(self) -> QPointF """
      return 1

    def pos(self):
      """ pos(self) -> QPointF """
      return 1

    def pressure(self):
      """ pressure(self) -> float """
      return 1.0

    def rawScreenPositions(self):
      """ rawScreenPositions(self) -> List[QPointF] """
      return 1

    def rect(self):
      """ rect(self) -> QRectF """
      return None

    def rotation(self):
      """ rotation(self) -> float """
      return 1.0

    def scenePos(self):
      """ scenePos(self) -> QPointF """
      return 1

    def sceneRect(self):
      """ sceneRect(self) -> QRectF """
      return None

    def screenPos(self):
      """ screenPos(self) -> QPointF """
      return 1

    def screenRect(self):
      """ screenRect(self) -> QRectF """
      return None

    def startNormalizedPos(self):
      """ startNormalizedPos(self) -> QPointF """
      return 1

    def startPos(self):
      """ startPos(self) -> QPointF """
      return 1

    def startScenePos(self):
      """ startScenePos(self) -> QPointF """
      return 1

    def startScreenPos(self):
      """ startScreenPos(self) -> QPointF """
      return 1

    def state(self):
      """ state(self) -> Qt.TouchPointState """
      return 1

    def uniqueId(self):
      """ uniqueId(self) -> QPointingDeviceUniqueId """
      return 1

    def velocity(self):
      """ velocity(self) -> QVector2D """
      return None

  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def device(self):
    """ device(self) -> QTouchDevice """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setDevice(self, QTouchDevice):
    """ setDevice(self, QTouchDevice) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def target(self):
    """ target(self) -> QObject """
    return None

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def touchPointStates(self):
    """ touchPointStates(self) -> Qt.TouchPointStates """
    return 1

  def touchPoints(self):
    """ touchPoints(self) -> List[QTouchEvent.TouchPoint] """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def window(self):
    """ window(self) -> QWindow """
    return None

class QTransform(simplewrapper):
  """ QTransform()
  QTransform(float, float, float, float, float, float, float, float, m33: float = 1)
  QTransform(float, float, float, float, float, float)
  QTransform(QTransform) """

  class TransformationType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  TxNone = None
  TxProject = None
  TxRotate = None
  TxScale = None
  TxShear = None
  TxTranslate = None

  def adjoint(self):
    """ adjoint(self) -> QTransform """
    return None

  def determinant(self):
    """ determinant(self) -> float """
    return 1.0

  def dx(self):
    """ dx(self) -> float """
    return 1.0

  def dy(self):
    """ dy(self) -> float """
    return 1.0

  def fromScale(float, float):
    """ fromScale(float, float) -> QTransform """
    return None

  def fromTranslate(float, float):
    """ fromTranslate(float, float) -> QTransform """
    return None

  def inverted(self):
    """ inverted(self) -> Tuple[QTransform, bool] """
    return None

  def isAffine(self):
    """ isAffine(self) -> bool """
    return None

  def isIdentity(self):
    """ isIdentity(self) -> bool """
    return None

  def isInvertible(self):
    """ isInvertible(self) -> bool """
    return None

  def isRotating(self):
    """ isRotating(self) -> bool """
    return None

  def isScaling(self):
    """ isScaling(self) -> bool """
    return None

  def isTranslating(self):
    """ isTranslating(self) -> bool """
    return None

  def m11(self):
    """ m11(self) -> float """
    return 1.0

  def m12(self):
    """ m12(self) -> float """
    return 1.0

  def m13(self):
    """ m13(self) -> float """
    return 1.0

  def m21(self):
    """ m21(self) -> float """
    return 1.0

  def m22(self):
    """ m22(self) -> float """
    return 1.0

  def m23(self):
    """ m23(self) -> float """
    return 1.0

  def m31(self):
    """ m31(self) -> float """
    return 1.0

  def m32(self):
    """ m32(self) -> float """
    return 1.0

  def m33(self):
    """ m33(self) -> float """
    return 1.0

  def map(self, int, int):
    """ map(self, int, int) -> Tuple[int, int]
    map(self, float, float) -> Tuple[float, float]
    map(self, QPoint) -> QPoint
    map(self, Union[QPointF, QPoint]) -> QPointF
    map(self, QLine) -> QLine
    map(self, QLineF) -> QLineF
    map(self, QPolygonF) -> QPolygonF
    map(self, QPolygon) -> QPolygon
    map(self, QRegion) -> QRegion
    map(self, QPainterPath) -> QPainterPath """
    return 1

  def mapRect(self, QRect):
    """ mapRect(self, QRect) -> QRect
    mapRect(self, QRectF) -> QRectF """
    return None

  def mapToPolygon(self, QRect):
    """ mapToPolygon(self, QRect) -> QPolygon """
    return None

  def quadToQuad(QPolygonF, QPolygonF, QTransform):
    """ quadToQuad(QPolygonF, QPolygonF, QTransform) -> bool """
    return None

  def quadToSquare(QPolygonF, QTransform):
    """ quadToSquare(QPolygonF, QTransform) -> bool """
    return None

  def reset(self):
    """ reset(self) """
    pass

  def rotate(self, float, arg0=None):
    """ rotate(self, float, axis: Qt.Axis = Qt.ZAxis) -> QTransform """
    return None

  def rotateRadians(self, float, arg0=None):
    """ rotateRadians(self, float, axis: Qt.Axis = Qt.ZAxis) -> QTransform """
    return None

  def scale(self, float, float):
    """ scale(self, float, float) -> QTransform """
    return None

  def setMatrix(self, float, float, float, float, float, float, float, float, float):
    """ setMatrix(self, float, float, float, float, float, float, float, float, float) """
    pass

  def shear(self, float, float):
    """ shear(self, float, float) -> QTransform """
    return None

  def squareToQuad(QPolygonF, QTransform):
    """ squareToQuad(QPolygonF, QTransform) -> bool """
    return None

  def translate(self, float, float):
    """ translate(self, float, float) -> QTransform """
    return None

  def transposed(self):
    """ transposed(self) -> QTransform """
    return None

  def type(self):
    """ type(self) -> QTransform.TransformationType """
    return None

class QValidator(QObject):
  """ QValidator(parent: QObject = None) """

  Acceptable = None
  Intermediate = None
  Invalid = None
  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def changed(self):
    """ changed(self) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fixup(self, str):
    """ fixup(self, str) -> str """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def locale(self):
    """ locale(self) -> QLocale """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setLocale(self, QLocale):
    """ setLocale(self, QLocale) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def validate(self, str, int):
    """ validate(self, str, int) -> Tuple[QValidator.State, str, int] """
    return ""

class QVector2D(simplewrapper):
  """ QVector2D()
  QVector2D(float, float)
  QVector2D(QPoint)
  QVector2D(Union[QPointF, QPoint])
  QVector2D(QVector3D)
  QVector2D(QVector4D)
  QVector2D(QVector2D) """

  def distanceToLine(self, QVector2D, QVector2D):
    """ distanceToLine(self, QVector2D, QVector2D) -> float """
    return 1.0

  def distanceToPoint(self, QVector2D):
    """ distanceToPoint(self, QVector2D) -> float """
    return 1.0

  def dotProduct(QVector2D, QVector2D):
    """ dotProduct(QVector2D, QVector2D) -> float """
    return 1.0

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def length(self):
    """ length(self) -> float """
    return 1.0

  def lengthSquared(self):
    """ lengthSquared(self) -> float """
    return 1.0

  def normalize(self):
    """ normalize(self) """
    pass

  def normalized(self):
    """ normalized(self) -> QVector2D """
    return None

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def toPoint(self):
    """ toPoint(self) -> QPoint """
    return 1

  def toPointF(self):
    """ toPointF(self) -> QPointF """
    return 1

  def toVector3D(self):
    """ toVector3D(self) -> QVector3D """
    return None

  def toVector4D(self):
    """ toVector4D(self) -> QVector4D """
    return None

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

class QVector3D(simplewrapper):
  """ QVector3D()
  QVector3D(float, float, float)
  QVector3D(QPoint)
  QVector3D(Union[QPointF, QPoint])
  QVector3D(QVector2D)
  QVector3D(QVector2D, float)
  QVector3D(QVector4D)
  QVector3D(QVector3D) """

  def crossProduct(QVector3D, QVector3D):
    """ crossProduct(QVector3D, QVector3D) -> QVector3D """
    return None

  def distanceToLine(self, QVector3D, QVector3D):
    """ distanceToLine(self, QVector3D, QVector3D) -> float """
    return 1.0

  def distanceToPlane(self, QVector3D, QVector3D):
    """ distanceToPlane(self, QVector3D, QVector3D) -> float
    distanceToPlane(self, QVector3D, QVector3D, QVector3D) -> float """
    return 1.0

  def distanceToPoint(self, QVector3D):
    """ distanceToPoint(self, QVector3D) -> float """
    return 1.0

  def dotProduct(QVector3D, QVector3D):
    """ dotProduct(QVector3D, QVector3D) -> float """
    return 1.0

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def length(self):
    """ length(self) -> float """
    return 1.0

  def lengthSquared(self):
    """ lengthSquared(self) -> float """
    return 1.0

  def normal(QVector3D, QVector3D):
    """ normal(QVector3D, QVector3D) -> QVector3D
    normal(QVector3D, QVector3D, QVector3D) -> QVector3D """
    return None

  def normalize(self):
    """ normalize(self) """
    pass

  def normalized(self):
    """ normalized(self) -> QVector3D """
    return None

  def project(self, QMatrix4x4, QMatrix4x4, QRect):
    """ project(self, QMatrix4x4, QMatrix4x4, QRect) -> QVector3D """
    return None

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZ(self, float):
    """ setZ(self, float) """
    pass

  def toPoint(self):
    """ toPoint(self) -> QPoint """
    return 1

  def toPointF(self):
    """ toPointF(self) -> QPointF """
    return 1

  def toVector2D(self):
    """ toVector2D(self) -> QVector2D """
    return None

  def toVector4D(self):
    """ toVector4D(self) -> QVector4D """
    return None

  def unproject(self, QMatrix4x4, QMatrix4x4, QRect):
    """ unproject(self, QMatrix4x4, QMatrix4x4, QRect) -> QVector3D """
    return None

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def z(self):
    """ z(self) -> float """
    return 1.0

class QVector4D(simplewrapper):
  """ QVector4D()
  QVector4D(float, float, float, float)
  QVector4D(QPoint)
  QVector4D(Union[QPointF, QPoint])
  QVector4D(QVector2D)
  QVector4D(QVector2D, float, float)
  QVector4D(QVector3D)
  QVector4D(QVector3D, float)
  QVector4D(QVector4D) """

  def dotProduct(QVector4D, QVector4D):
    """ dotProduct(QVector4D, QVector4D) -> float """
    return 1.0

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def length(self):
    """ length(self) -> float """
    return 1.0

  def lengthSquared(self):
    """ lengthSquared(self) -> float """
    return 1.0

  def normalize(self):
    """ normalize(self) """
    pass

  def normalized(self):
    """ normalized(self) -> QVector4D """
    return None

  def setW(self, float):
    """ setW(self, float) """
    pass

  def setX(self, float):
    """ setX(self, float) """
    pass

  def setY(self, float):
    """ setY(self, float) """
    pass

  def setZ(self, float):
    """ setZ(self, float) """
    pass

  def toPoint(self):
    """ toPoint(self) -> QPoint """
    return 1

  def toPointF(self):
    """ toPointF(self) -> QPointF """
    return 1

  def toVector2D(self):
    """ toVector2D(self) -> QVector2D """
    return None

  def toVector2DAffine(self):
    """ toVector2DAffine(self) -> QVector2D """
    return None

  def toVector3D(self):
    """ toVector3D(self) -> QVector3D """
    return None

  def toVector3DAffine(self):
    """ toVector3DAffine(self) -> QVector3D """
    return None

  def w(self):
    """ w(self) -> float """
    return 1.0

  def x(self):
    """ x(self) -> float """
    return 1.0

  def y(self):
    """ y(self) -> float """
    return 1.0

  def z(self):
    """ z(self) -> float """
    return 1.0

class QWhatsThisClickedEvent(QEvent):
  """ QWhatsThisClickedEvent(str)
  QWhatsThisClickedEvent(QWhatsThisClickedEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def href(self):
    """ href(self) -> str """
    return ""

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

class QWheelEvent(QInputEvent):
  """ QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])
  QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase)
  QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, Qt.MouseEventSource)
  QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, Qt.MouseEventSource, bool)
  QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, bool, source: Qt.MouseEventSource = Qt.MouseEventNotSynthesized)
  QWheelEvent(QWheelEvent) """

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def angleDelta(self):
    """ angleDelta(self) -> QPoint """
    return 1

  def buttons(self):
    """ buttons(self) -> Qt.MouseButtons """
    return None

  def globalPos(self):
    """ globalPos(self) -> QPoint """
    return 1

  def globalPosF(self):
    """ globalPosF(self) -> QPointF """
    return 1

  def globalX(self):
    """ globalX(self) -> int """
    return 1

  def globalY(self):
    """ globalY(self) -> int """
    return 1

  def ignore(self):
    """ ignore(self) """
    pass

  def inverted(self):
    """ inverted(self) -> bool """
    return None

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def modifiers(self):
    """ modifiers(self) -> Qt.KeyboardModifiers """
    return None

  def phase(self):
    """ phase(self) -> Qt.ScrollPhase """
    return None

  def pixelDelta(self):
    """ pixelDelta(self) -> QPoint """
    return 1

  def pos(self):
    """ pos(self) -> QPoint """
    return 1

  def posF(self):
    """ posF(self) -> QPointF """
    return 1

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def setTimestamp(self, int):
    """ setTimestamp(self, int) """
    pass

  def source(self):
    """ source(self) -> Qt.MouseEventSource """
    return None

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def timestamp(self):
    """ timestamp(self) -> int """
    return 1

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

  def x(self):
    """ x(self) -> int """
    return 1

  def y(self):
    """ y(self) -> int """
    return 1

class QWindow(QObject):
  """ QWindow(screen: QScreen = None)
  QWindow(QWindow) """

  AutomaticVisibility = None
  ExcludeTransients = None
  FullScreen = None
  Hidden = None
  IncludeTransients = None
  Maximized = None
  MetalSurface = None
  Minimized = None
  Offscreen = None
  OpenGLSurface = None
  OpenVGSurface = None
  RasterGLSurface = None
  RasterSurface = None
  VulkanSurface = None
  Window = None
  Windowed = None

  def activeChanged(self):
    """ activeChanged(self) [signal] """
    pass

  def alert(self, int):
    """ alert(self, int) """
    pass

  def baseSize(self):
    """ baseSize(self) -> QSize """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) -> bool """
    return None

  def connectNotify():
    pass

  def contentOrientation(self):
    """ contentOrientation(self) -> Qt.ScreenOrientation """
    return None

  def contentOrientationChanged(self, arg0):
    """ contentOrientationChanged(self, Qt.ScreenOrientation) [signal] """
    pass

  def create(self):
    """ create(self) """
    pass

  def cursor(self):
    """ cursor(self) -> QCursor """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroy(self):
    """ destroy(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def devicePixelRatio(self):
    """ devicePixelRatio(self) -> float """
    return 1.0

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def exposeEvent(self, QExposeEvent):
    """ exposeEvent(self, QExposeEvent) """
    pass

  def filePath(self):
    """ filePath(self) -> str """
    return ""

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flags(self):
    """ flags(self) -> Qt.WindowFlags """
    return None

  def focusInEvent(self, QFocusEvent):
    """ focusInEvent(self, QFocusEvent) """
    pass

  def focusObject(self):
    """ focusObject(self) -> QObject """
    return None

  def focusObjectChanged(self, QObject):
    """ focusObjectChanged(self, QObject) [signal] """
    pass

  def focusOutEvent(self, QFocusEvent):
    """ focusOutEvent(self, QFocusEvent) """
    pass

  def format(self):
    """ format(self) -> QSurfaceFormat """
    return None

  def frameGeometry(self):
    """ frameGeometry(self) -> QRect """
    return None

  def frameMargins(self):
    """ frameMargins(self) -> QMargins """
    return None

  def framePosition(self):
    """ framePosition(self) -> QPoint """
    return 1

  def fromWinId(arg0):
    """ fromWinId(sip.voidptr) -> QWindow """
    return None

  def geometry(self):
    """ geometry(self) -> QRect """
    return None

  def height(self):
    """ height(self) -> int """
    return 1

  def heightChanged(self, int):
    """ heightChanged(self, int) [signal] """
    pass

  def hide(self):
    """ hide(self) """
    pass

  def hideEvent(self, QHideEvent):
    """ hideEvent(self, QHideEvent) """
    pass

  def icon(self):
    """ icon(self) -> QIcon """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isActive(self):
    """ isActive(self) -> bool """
    return None

  def isAncestorOf(self, QWindow, arg0=None):
    """ isAncestorOf(self, QWindow, mode: QWindow.AncestorMode = QWindow.IncludeTransients) -> bool """
    return None

  def isExposed(self):
    """ isExposed(self) -> bool """
    return None

  def isModal(self):
    """ isModal(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTopLevel(self):
    """ isTopLevel(self) -> bool """
    return None

  def isVisible(self):
    """ isVisible(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def keyPressEvent(self, QKeyEvent):
    """ keyPressEvent(self, QKeyEvent) """
    pass

  def keyReleaseEvent(self, QKeyEvent):
    """ keyReleaseEvent(self, QKeyEvent) """
    pass

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lower(self):
    """ lower(self) """
    pass

  def mapFromGlobal(self, QPoint):
    """ mapFromGlobal(self, QPoint) -> QPoint """
    return 1

  def mapToGlobal(self, QPoint):
    """ mapToGlobal(self, QPoint) -> QPoint """
    return 1

  def mask(self):
    """ mask(self) -> QRegion """
    return None

  def maximumHeight(self):
    """ maximumHeight(self) -> int """
    return 1

  def maximumHeightChanged(self, int):
    """ maximumHeightChanged(self, int) [signal] """
    pass

  def maximumSize(self):
    """ maximumSize(self) -> QSize """
    return None

  def maximumWidth(self):
    """ maximumWidth(self) -> int """
    return 1

  def maximumWidthChanged(self, int):
    """ maximumWidthChanged(self, int) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def minimumHeight(self):
    """ minimumHeight(self) -> int """
    return 1

  def minimumHeightChanged(self, int):
    """ minimumHeightChanged(self, int) [signal] """
    pass

  def minimumSize(self):
    """ minimumSize(self) -> QSize """
    return None

  def minimumWidth(self):
    """ minimumWidth(self) -> int """
    return 1

  def minimumWidthChanged(self, int):
    """ minimumWidthChanged(self, int) [signal] """
    pass

  def modality(self):
    """ modality(self) -> Qt.WindowModality """
    return None

  def modalityChanged(self, arg0):
    """ modalityChanged(self, Qt.WindowModality) [signal] """
    pass

  def mouseDoubleClickEvent(self, QMouseEvent):
    """ mouseDoubleClickEvent(self, QMouseEvent) """
    pass

  def mouseMoveEvent(self, QMouseEvent):
    """ mouseMoveEvent(self, QMouseEvent) """
    pass

  def mousePressEvent(self, QMouseEvent):
    """ mousePressEvent(self, QMouseEvent) """
    pass

  def mouseReleaseEvent(self, QMouseEvent):
    """ mouseReleaseEvent(self, QMouseEvent) """
    pass

  def moveEvent(self, QMoveEvent):
    """ moveEvent(self, QMoveEvent) """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def opacity(self):
    """ opacity(self) -> float """
    return 1.0

  def opacityChanged(self, float):
    """ opacityChanged(self, float) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QWindow
    parent(self, QWindow.AncestorMode) -> QWindow """
    return None

  def position(self):
    """ position(self) -> QPoint """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def raise_(self):
    """ raise_(self) """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reportContentOrientationChange(self, arg0):
    """ reportContentOrientationChange(self, Qt.ScreenOrientation) """
    pass

  def requestActivate(self):
    """ requestActivate(self) """
    pass

  def requestUpdate(self):
    """ requestUpdate(self) """
    pass

  def requestedFormat(self):
    """ requestedFormat(self) -> QSurfaceFormat """
    return None

  def resize(self, QSize):
    """ resize(self, QSize)
    resize(self, int, int) """
    pass

  def resizeEvent(self, QResizeEvent):
    """ resizeEvent(self, QResizeEvent) """
    pass

  def screen(self):
    """ screen(self) -> QScreen """
    return None

  def screenChanged(self, QScreen):
    """ screenChanged(self, QScreen) [signal] """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBaseSize(self, QSize):
    """ setBaseSize(self, QSize) """
    pass

  def setCursor(self, UnionQCursor=None, Qt.CursorShape=None):
    """ setCursor(self, Union[QCursor, Qt.CursorShape]) """
    pass

  def setFilePath(self, str):
    """ setFilePath(self, str) """
    pass

  def setFlag():
    """ setFlag(self, Qt.WindowType, on: bool = True) """
    pass

  def setFlags(self, UnionQt.WindowFlags=None, Qt.WindowType=None):
    """ setFlags(self, Union[Qt.WindowFlags, Qt.WindowType]) """
    pass

  def setFormat(self, QSurfaceFormat):
    """ setFormat(self, QSurfaceFormat) """
    pass

  def setFramePosition(self, QPoint):
    """ setFramePosition(self, QPoint) """
    pass

  def setGeometry(self, int, int, int, int):
    """ setGeometry(self, int, int, int, int)
    setGeometry(self, QRect) """
    pass

  def setHeight(self, int):
    """ setHeight(self, int) """
    pass

  def setIcon(self, QIcon):
    """ setIcon(self, QIcon) """
    pass

  def setKeyboardGrabEnabled(self, bool):
    """ setKeyboardGrabEnabled(self, bool) -> bool """
    return None

  def setMask(self, QRegion):
    """ setMask(self, QRegion) """
    pass

  def setMaximumHeight(self, int):
    """ setMaximumHeight(self, int) """
    pass

  def setMaximumSize(self, QSize):
    """ setMaximumSize(self, QSize) """
    pass

  def setMaximumWidth(self, int):
    """ setMaximumWidth(self, int) """
    pass

  def setMinimumHeight(self, int):
    """ setMinimumHeight(self, int) """
    pass

  def setMinimumSize(self, QSize):
    """ setMinimumSize(self, QSize) """
    pass

  def setMinimumWidth(self, int):
    """ setMinimumWidth(self, int) """
    pass

  def setModality(self, arg0):
    """ setModality(self, Qt.WindowModality) """
    pass

  def setMouseGrabEnabled(self, bool):
    """ setMouseGrabEnabled(self, bool) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpacity(self, float):
    """ setOpacity(self, float) """
    pass

  def setParent(self, QWindow):
    """ setParent(self, QWindow) """
    pass

  def setPosition(self, QPoint):
    """ setPosition(self, QPoint)
    setPosition(self, int, int) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setScreen(self, QScreen):
    """ setScreen(self, QScreen) """
    pass

  def setSizeIncrement(self, QSize):
    """ setSizeIncrement(self, QSize) """
    pass

  def setSurfaceType(self, arg0):
    """ setSurfaceType(self, QSurface.SurfaceType) """
    pass

  def setTitle(self, str):
    """ setTitle(self, str) """
    pass

  def setTransientParent(self, QWindow):
    """ setTransientParent(self, QWindow) """
    pass

  def setVisibility(self, arg0):
    """ setVisibility(self, QWindow.Visibility) """
    pass

  def setVisible(self, bool):
    """ setVisible(self, bool) """
    pass

  def setWidth(self, int):
    """ setWidth(self, int) """
    pass

  def setWindowState(self, arg0):
    """ setWindowState(self, Qt.WindowState) """
    pass

  def setWindowStates(self, UnionQt.WindowStates=None, Qt.WindowState=None):
    """ setWindowStates(self, Union[Qt.WindowStates, Qt.WindowState]) """
    pass

  def setX(self, int):
    """ setX(self, int) """
    pass

  def setY(self, int):
    """ setY(self, int) """
    pass

  def show(self):
    """ show(self) """
    pass

  def showEvent(self, QShowEvent):
    """ showEvent(self, QShowEvent) """
    pass

  def showFullScreen(self):
    """ showFullScreen(self) """
    pass

  def showMaximized(self):
    """ showMaximized(self) """
    pass

  def showMinimized(self):
    """ showMinimized(self) """
    pass

  def showNormal(self):
    """ showNormal(self) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> QSize """
    return None

  def sizeIncrement(self):
    """ sizeIncrement(self) -> QSize """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def supportsOpenGL(self):
    """ supportsOpenGL(self) -> bool """
    return None

  def surfaceClass(self):
    """ surfaceClass(self) -> QSurface.SurfaceClass """
    return None

  def surfaceType(self):
    """ surfaceType(self) -> QSurface.SurfaceType """
    return None

  def tabletEvent(self, QTabletEvent):
    """ tabletEvent(self, QTabletEvent) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def title(self):
    """ title(self) -> str """
    return ""

  def touchEvent(self, QTouchEvent):
    """ touchEvent(self, QTouchEvent) """
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def transientParent(self):
    """ transientParent(self) -> QWindow """
    return None

  def type(self):
    """ type(self) -> Qt.WindowType """
    return None

  def unsetCursor(self):
    """ unsetCursor(self) """
    pass

  def visibility(self):
    """ visibility(self) -> QWindow.Visibility """
    return None

  def visibilityChanged(self, arg0):
    """ visibilityChanged(self, QWindow.Visibility) [signal] """
    pass

  def visibleChanged(self, bool):
    """ visibleChanged(self, bool) [signal] """
    pass

  def wheelEvent(self, QWheelEvent):
    """ wheelEvent(self, QWheelEvent) """
    pass

  def width(self):
    """ width(self) -> int """
    return 1

  def widthChanged(self, int):
    """ widthChanged(self, int) [signal] """
    pass

  def winId(self):
    """ winId(self) -> sip.voidptr """
    return None

  def windowState(self):
    """ windowState(self) -> Qt.WindowState """
    return None

  def windowStateChanged(self, arg0):
    """ windowStateChanged(self, Qt.WindowState) [signal] """
    pass

  def windowStates(self):
    """ windowStates(self) -> Qt.WindowStates """
    return None

  def windowTitleChanged(self, str):
    """ windowTitleChanged(self, str) [signal] """
    pass

  def x(self):
    """ x(self) -> int """
    return 1

  def xChanged(self, int):
    """ xChanged(self, int) [signal] """
    pass

  def y(self):
    """ y(self) -> int """
    return 1

  def yChanged(self, int):
    """ yChanged(self, int) [signal] """
    pass

class QWindowStateChangeEvent(QEvent):

  ActionAdded = None
  ActionChanged = None
  ActionRemoved = None
  ActivationChange = None
  ApplicationActivate = None
  ApplicationActivated = None
  ApplicationDeactivate = None
  ApplicationDeactivated = None
  ApplicationFontChange = None
  ApplicationLayoutDirectionChange = None
  ApplicationPaletteChange = None
  ApplicationStateChange = None
  ApplicationWindowIconChange = None
  ChildAdded = None
  ChildPolished = None
  ChildRemoved = None
  Clipboard = None
  Close = None
  CloseSoftwareInputPanel = None
  ContentsRectChange = None
  ContextMenu = None
  CursorChange = None
  DeferredDelete = None
  DragEnter = None
  DragLeave = None
  DragMove = None
  Drop = None
  DynamicPropertyChange = None
  EnabledChange = None
  Enter = None
  EnterWhatsThisMode = None
  Expose = None
  FileOpen = None
  FocusAboutToChange = None
  FocusIn = None
  FocusOut = None
  FontChange = None
  Gesture = None
  GestureOverride = None
  GrabKeyboard = None
  GrabMouse = None
  GraphicsSceneContextMenu = None
  GraphicsSceneDragEnter = None
  GraphicsSceneDragLeave = None
  GraphicsSceneDragMove = None
  GraphicsSceneDrop = None
  GraphicsSceneHelp = None
  GraphicsSceneHoverEnter = None
  GraphicsSceneHoverLeave = None
  GraphicsSceneHoverMove = None
  GraphicsSceneMouseDoubleClick = None
  GraphicsSceneMouseMove = None
  GraphicsSceneMousePress = None
  GraphicsSceneMouseRelease = None
  GraphicsSceneMove = None
  GraphicsSceneResize = None
  GraphicsSceneWheel = None
  Hide = None
  HideToParent = None
  HoverEnter = None
  HoverLeave = None
  HoverMove = None
  IconDrag = None
  IconTextChange = None
  InputMethod = None
  InputMethodQuery = None
  KeyPress = None
  KeyRelease = None
  KeyboardLayoutChange = None
  LanguageChange = None
  LayoutDirectionChange = None
  LayoutRequest = None
  Leave = None
  LeaveWhatsThisMode = None
  LocaleChange = None
  MacSizeChange = None
  MaxUser = None
  MetaCall = None
  ModifiedChange = None
  MouseButtonDblClick = None
  MouseButtonPress = None
  MouseButtonRelease = None
  MouseMove = None
  MouseTrackingChange = None
  Move = None
  NonClientAreaMouseButtonDblClick = None
  NonClientAreaMouseButtonPress = None
  NonClientAreaMouseButtonRelease = None
  NonClientAreaMouseMove = None
  None_ = None
  OkRequest = None
  OrientationChange = None
  Paint = None
  PaletteChange = None
  ParentAboutToChange = None
  ParentChange = None
  PlatformPanel = None
  PlatformSurface = None
  Polish = None
  PolishRequest = None
  QueryWhatsThis = None
  ReadOnlyChange = None
  RequestSoftwareInputPanel = None
  Resize = None
  Scroll = None
  ScrollPrepare = None
  Shortcut = None
  ShortcutOverride = None
  Show = None
  ShowToParent = None
  SockAct = None
  StateMachineSignal = None
  StateMachineWrapped = None
  StatusTip = None
  StyleChange = None
  TabletEnterProximity = None
  TabletLeaveProximity = None
  TabletMove = None
  TabletPress = None
  TabletRelease = None
  TabletTrackingChange = None
  ThreadChange = None
  Timer = None
  ToolBarChange = None
  ToolTip = None
  ToolTipChange = None
  TouchBegin = None
  TouchCancel = None
  TouchEnd = None
  TouchUpdate = None
  UngrabKeyboard = None
  UngrabMouse = None
  UpdateLater = None
  UpdateRequest = None
  User = None
  WhatsThis = None
  WhatsThisClicked = None
  Wheel = None
  WinEventAct = None
  WinIdChange = None
  WindowActivate = None
  WindowBlocked = None
  WindowDeactivate = None
  WindowIconChange = None
  WindowStateChange = None
  WindowTitleChange = None
  WindowUnblocked = None
  ZOrderChange = None

  def accept(self):
    """ accept(self) """
    pass

  def ignore(self):
    """ ignore(self) """
    pass

  def isAccepted(self):
    """ isAccepted(self) -> bool """
    return None

  def oldState(self):
    """ oldState(self) -> Qt.WindowStates """
    return None

  def registerEventType(arg0=None):
    """ registerEventType(hint: int = -1) -> int """
    return 1

  def setAccepted(self, bool):
    """ setAccepted(self, bool) """
    pass

  def spontaneous(self):
    """ spontaneous(self) -> bool """
    return None

  def type(self):
    """ type(self) -> QEvent.Type """
    return None

__doc__ = None
__file__ = 'C:\\Users\\Rupka\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\PyQt5\\QtGui.pyd'
__loader__ = None
__name__ = 'PyQt5.QtGui'
__package__ = 'PyQt5'
__spec__ = None

def qAlpha(QRgba64):
  """ qAlpha(QRgba64) -> int
  qAlpha(int) -> int """
  return 1

def qBlue(QRgba64):
  """ qBlue(QRgba64) -> int
  qBlue(int) -> int """
  return 1

def qFuzzyCompare(QMatrix4x4, QMatrix4x4):
  """ qFuzzyCompare(QMatrix4x4, QMatrix4x4) -> bool
  qFuzzyCompare(QQuaternion, QQuaternion) -> bool
  qFuzzyCompare(QTransform, QTransform) -> bool
  qFuzzyCompare(QVector2D, QVector2D) -> bool
  qFuzzyCompare(QVector3D, QVector3D) -> bool
  qFuzzyCompare(QVector4D, QVector4D) -> bool """
  return None

def qGray(int, int, int):
  """ qGray(int, int, int) -> int
  qGray(int) -> int """
  return 1

def qGreen(QRgba64):
  """ qGreen(QRgba64) -> int
  qGreen(int) -> int """
  return 1

def qIsGray(int):
  """ qIsGray(int) -> bool """
  return None

def qPixelFormatAlpha(int, arg0=None):
  """ qPixelFormatAlpha(int, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat """
  return None

def qPixelFormatCmyk(int, arg0=None, arg1=None, arg2=None, arg3=None):
  """ qPixelFormatCmyk(int, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat """
  return None

def qPixelFormatGrayscale(int, arg0=None):
  """ qPixelFormatGrayscale(int, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat """
  return None

def qPixelFormatHsl(int, arg0=None, arg1=None, arg2=None, arg3=None):
  """ qPixelFormatHsl(int, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.FloatingPoint) -> QPixelFormat """
  return None

def qPixelFormatHsv(int, arg0=None, arg1=None, arg2=None, arg3=None):
  """ qPixelFormatHsv(int, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.FloatingPoint) -> QPixelFormat """
  return None

def qPixelFormatRgba(int, int, int, int, arg0, arg1, arg2=None, arg3=None):
  """ qPixelFormatRgba(int, int, int, int, QPixelFormat.AlphaUsage, QPixelFormat.AlphaPosition, premultiplied: QPixelFormat.AlphaPremultiplied = QPixelFormat.NotPremultiplied, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat """
  return None

def qPixelFormatYuv(arg0, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None):
  """ qPixelFormatYuv(QPixelFormat.YUVLayout, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, premultiplied: QPixelFormat.AlphaPremultiplied = QPixelFormat.NotPremultiplied, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedByte, byteOrder: QPixelFormat.ByteOrder = QPixelFormat.LittleEndian) -> QPixelFormat """
  return None

def qPremultiply(QRgba64):
  """ qPremultiply(QRgba64) -> QRgba64
  qPremultiply(int) -> int """
  return None

def qRed(QRgba64):
  """ qRed(QRgba64) -> int
  qRed(int) -> int """
  return 1

def qRgb(int, int, int):
  """ qRgb(int, int, int) -> int """
  return 1

def qRgba(int, int, int, int):
  """ qRgba(int, int, int, int) -> int """
  return 1

def qRgba64(int, int, int, int):
  """ qRgba64(int, int, int, int) -> QRgba64
  qRgba64(int) -> QRgba64 """
  return None

def qUnpremultiply(QRgba64):
  """ qUnpremultiply(QRgba64) -> QRgba64
  qUnpremultiply(int) -> int """
  return None

def qt_set_sequence_auto_mnemonic(bool):
  """ qt_set_sequence_auto_mnemonic(bool) """
  pass

