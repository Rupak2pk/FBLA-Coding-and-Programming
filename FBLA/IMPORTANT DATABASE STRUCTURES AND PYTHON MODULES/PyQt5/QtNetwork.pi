# coding: utf-8
# AUTO-GENERATED FILE -- DO NOT EDIT


class QAbstractNetworkCache(QObject):
  """ QAbstractNetworkCache(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cacheSize(self):
    """ cacheSize(self) -> int """
    return 1

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def data(self, QUrl):
    """ data(self, QUrl) -> QIODevice """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insert(self, QIODevice):
    """ insert(self, QIODevice) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaData(self, QUrl):
    """ metaData(self, QUrl) -> QNetworkCacheMetaData """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def prepare(self, QNetworkCacheMetaData):
    """ prepare(self, QNetworkCacheMetaData) -> QIODevice """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remove(self, QUrl):
    """ remove(self, QUrl) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateMetaData(self, QNetworkCacheMetaData):
    """ updateMetaData(self, QNetworkCacheMetaData) """
    pass

class QAbstractSocket(QIODevice):
  """ QAbstractSocket(QAbstractSocket.SocketType, QObject) """

  AddressInUseError = None
  AnyIPProtocol = None
  Append = None

  class BindFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class BindMode(simplewrapper):
    """ QAbstractSocket.BindMode()
    QAbstractSocket.BindMode(Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag])
    QAbstractSocket.BindMode(QAbstractSocket.BindMode) """

    pass

  BoundState = None
  ClosingState = None
  ConnectedState = None
  ConnectingState = None
  ConnectionRefusedError = None
  DatagramTooLargeError = None
  DefaultForPlatform = None
  DontShareAddress = None
  ExistingOnly = None
  HostLookupState = None
  HostNotFoundError = None
  IPv4Protocol = None
  IPv6Protocol = None
  KeepAliveOption = None
  ListeningState = None
  LowDelayOption = None
  MulticastLoopbackOption = None
  MulticastTtlOption = None
  NetworkError = None

  class NetworkLayerProtocol(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NewOnly = None
  NotOpen = None

  class OpenMode(simplewrapper):
    """ QIODevice.OpenMode()
    QIODevice.OpenMode(Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])
    QIODevice.OpenMode(QIODevice.OpenMode) """

    pass

  class OpenModeFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  OperationError = None
  PathMtuSocketOption = None

  class PauseMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PauseModes(simplewrapper):
    """ QAbstractSocket.PauseModes()
    QAbstractSocket.PauseModes(Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode])
    QAbstractSocket.PauseModes(QAbstractSocket.PauseModes) """

    pass

  PauseNever = None
  PauseOnSslErrors = None
  ProxyAuthenticationRequiredError = None
  ProxyConnectionClosedError = None
  ProxyConnectionRefusedError = None
  ProxyConnectionTimeoutError = None
  ProxyNotFoundError = None
  ProxyProtocolError = None
  ReadOnly = None
  ReadWrite = None
  ReceiveBufferSizeSocketOption = None
  RemoteHostClosedError = None
  ReuseAddressHint = None
  SctpSocket = None
  SendBufferSizeSocketOption = None
  ShareAddress = None
  SocketAccessError = None
  SocketAddressNotAvailableError = None

  class SocketError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SocketOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SocketResourceError = None

  class SocketState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SocketTimeoutError = None

  class SocketType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SslHandshakeFailedError = None
  SslInternalError = None
  SslInvalidUserDataError = None
  TcpSocket = None
  TemporaryError = None
  Text = None
  Truncate = None
  TypeOfServiceOption = None
  UdpSocket = None
  Unbuffered = None
  UnconnectedState = None
  UnfinishedSocketOperationError = None
  UnknownNetworkLayerProtocol = None
  UnknownSocketError = None
  UnknownSocketType = None
  UnsupportedSocketOperationError = None
  WriteOnly = None

  def abort(self):
    """ abort(self) """
    pass

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def bind(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, arg0=None, arg1=None, arg2=None):
    """ bind(self, Union[QHostAddress, QHostAddress.SpecialAddress], port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool
    bind(self, port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def connectToHost():
    """ connectToHost(self, str, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite, protocol: QAbstractSocket.NetworkLayerProtocol = QAbstractSocket.AnyIPProtocol)
    connectToHost(self, Union[QHostAddress, QHostAddress.SpecialAddress], int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) """
    pass

  def connected(self):
    """ connected(self) [signal] """
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectFromHost(self):
    """ disconnectFromHost(self) """
    pass

  def disconnectNotify():
    pass

  def disconnected(self):
    """ disconnected(self) [signal] """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QAbstractSocket.SocketError
    error(self, QAbstractSocket.SocketError) [signal] """
    return ""

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def hostFound(self):
    """ hostFound(self) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def localAddress(self):
    """ localAddress(self) -> QHostAddress """
    return None

  def localPort(self):
    """ localPort(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pauseMode(self):
    """ pauseMode(self) -> QAbstractSocket.PauseModes """
    return ""

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def peerAddress(self):
    """ peerAddress(self) -> QHostAddress """
    return None

  def peerName(self):
    """ peerName(self) -> str """
    return ""

  def peerPort(self):
    """ peerPort(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def protocolTag(self):
    """ protocolTag(self) -> str """
    return ""

  def proxy(self):
    """ proxy(self) -> QNetworkProxy """
    return None

  def proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator):
    """ proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator) [signal] """
    pass

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readBufferSize(self):
    """ readBufferSize(self) -> int """
    return 1

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData(self, int):
    """ readData(self, int) -> bytes """
    return None

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData(self, int):
    """ readLineData(self, int) -> bytes """
    return None

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resume(self):
    """ resume(self) """
    pass

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString():
    pass

  def setLocalAddress(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ setLocalAddress(self, Union[QHostAddress, QHostAddress.SpecialAddress]) """
    pass

  def setLocalPort(self, int):
    """ setLocalPort(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPauseMode(self, UnionQAbstractSocket.PauseModes=None, QAbstractSocket.PauseMode=None):
    """ setPauseMode(self, Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode]) """
    pass

  def setPeerAddress(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ setPeerAddress(self, Union[QHostAddress, QHostAddress.SpecialAddress]) """
    pass

  def setPeerName(self, str):
    """ setPeerName(self, str) """
    pass

  def setPeerPort(self, int):
    """ setPeerPort(self, int) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setProtocolTag(self, str):
    """ setProtocolTag(self, str) """
    pass

  def setProxy(self, QNetworkProxy):
    """ setProxy(self, QNetworkProxy) """
    pass

  def setReadBufferSize(self, int):
    """ setReadBufferSize(self, int) """
    pass

  def setSocketDescriptor(self, arg0, arg1=None, arg2=None, arg3=None):
    """ setSocketDescriptor(self, sip.voidptr, state: QAbstractSocket.SocketState = QAbstractSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool """
    return None

  def setSocketError(self, arg0):
    """ setSocketError(self, QAbstractSocket.SocketError) """
    pass

  def setSocketOption(self, arg0, Any):
    """ setSocketOption(self, QAbstractSocket.SocketOption, Any) """
    pass

  def setSocketState(self, arg0):
    """ setSocketState(self, QAbstractSocket.SocketState) """
    pass

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def socketDescriptor(self):
    """ socketDescriptor(self) -> sip.voidptr """
    return None

  def socketOption(self, arg0):
    """ socketOption(self, QAbstractSocket.SocketOption) -> Any """
    return None

  def socketType(self):
    """ socketType(self) -> QAbstractSocket.SocketType """
    return ""

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  def state(self):
    """ state(self) -> QAbstractSocket.SocketState """
    return ""

  def stateChanged(self, arg0):
    """ stateChanged(self, QAbstractSocket.SocketState) [signal] """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, arg0=None):
    """ waitForBytesWritten(self, msecs: int = 30000) -> bool """
    return None

  def waitForConnected(self, arg0=None):
    """ waitForConnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForDisconnected(self, arg0=None):
    """ waitForDisconnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForReadyRead(self, arg0=None):
    """ waitForReadyRead(self, msecs: int = 30000) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QAuthenticator(simplewrapper):
  """ QAuthenticator()
  QAuthenticator(QAuthenticator) """

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def option(self, str):
    """ option(self, str) -> Any """
    return None

  def options(self):
    """ options(self) -> Dict[str, Any] """
    return ""

  def password(self):
    """ password(self) -> str """
    return ""

  def realm(self):
    """ realm(self) -> str """
    return ""

  def setOption(self, str, Any):
    """ setOption(self, str, Any) """
    pass

  def setPassword(self, str):
    """ setPassword(self, str) """
    pass

  def setUser(self, str):
    """ setUser(self, str) """
    pass

  def user(self):
    """ user(self) -> str """
    return ""

class QDnsDomainNameRecord(simplewrapper):
  """ QDnsDomainNameRecord()
  QDnsDomainNameRecord(QDnsDomainNameRecord) """

  def name(self):
    """ name(self) -> str """
    return ""

  def swap(self, QDnsDomainNameRecord):
    """ swap(self, QDnsDomainNameRecord) """
    pass

  def timeToLive(self):
    """ timeToLive(self) -> int """
    return 1

  def value(self):
    """ value(self) -> str """
    return ""

class QDnsHostAddressRecord(simplewrapper):
  """ QDnsHostAddressRecord()
  QDnsHostAddressRecord(QDnsHostAddressRecord) """

  def name(self):
    """ name(self) -> str """
    return ""

  def swap(self, QDnsHostAddressRecord):
    """ swap(self, QDnsHostAddressRecord) """
    pass

  def timeToLive(self):
    """ timeToLive(self) -> int """
    return 1

  def value(self):
    """ value(self) -> QHostAddress """
    return None

class QDnsLookup(QObject):
  """ QDnsLookup(parent: QObject = None)
  QDnsLookup(QDnsLookup.Type, str, parent: QObject = None)
  QDnsLookup(QDnsLookup.Type, str, Union[QHostAddress, QHostAddress.SpecialAddress], parent: QObject = None) """

  A = None
  AAAA = None
  ANY = None
  CNAME = None

  class Error(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  InvalidReplyError = None
  InvalidRequestError = None
  MX = None
  NS = None
  NoError = None
  NotFoundError = None
  OperationCancelledError = None
  PTR = None
  ResolverError = None
  SRV = None
  ServerFailureError = None
  ServerRefusedError = None
  TXT = None

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def abort(self):
    """ abort(self) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def canonicalNameRecords(self):
    """ canonicalNameRecords(self) -> List[QDnsDomainNameRecord] """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QDnsLookup.Error """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def hostAddressRecords(self):
    """ hostAddressRecords(self) -> List[QDnsHostAddressRecord] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isFinished(self):
    """ isFinished(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def lookup(self):
    """ lookup(self) """
    pass

  def mailExchangeRecords(self):
    """ mailExchangeRecords(self) -> List[QDnsMailExchangeRecord] """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def name(self):
    """ name(self) -> str """
    return ""

  def nameChanged(self, str):
    """ nameChanged(self, str) [signal] """
    pass

  def nameServerRecords(self):
    """ nameServerRecords(self) -> List[QDnsDomainNameRecord] """
    return None

  def nameserver(self):
    """ nameserver(self) -> QHostAddress """
    return None

  def nameserverChanged(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ nameserverChanged(self, Union[QHostAddress, QHostAddress.SpecialAddress]) [signal] """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pointerRecords(self):
    """ pointerRecords(self) -> List[QDnsDomainNameRecord] """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def serviceRecords(self):
    """ serviceRecords(self) -> List[QDnsServiceRecord] """
    return None

  def setName(self, str):
    """ setName(self, str) """
    pass

  def setNameserver(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ setNameserver(self, Union[QHostAddress, QHostAddress.SpecialAddress]) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setType(self, arg0):
    """ setType(self, QDnsLookup.Type) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def textRecords(self):
    """ textRecords(self) -> List[QDnsTextRecord] """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def type(self):
    """ type(self) -> QDnsLookup.Type """
    return None

  def typeChanged(self, arg0):
    """ typeChanged(self, QDnsLookup.Type) [signal] """
    pass

class QDnsMailExchangeRecord(simplewrapper):
  """ QDnsMailExchangeRecord()
  QDnsMailExchangeRecord(QDnsMailExchangeRecord) """

  def exchange(self):
    """ exchange(self) -> str """
    return ""

  def name(self):
    """ name(self) -> str """
    return ""

  def preference(self):
    """ preference(self) -> int """
    return 1

  def swap(self, QDnsMailExchangeRecord):
    """ swap(self, QDnsMailExchangeRecord) """
    pass

  def timeToLive(self):
    """ timeToLive(self) -> int """
    return 1

class QDnsServiceRecord(simplewrapper):
  """ QDnsServiceRecord()
  QDnsServiceRecord(QDnsServiceRecord) """

  def name(self):
    """ name(self) -> str """
    return ""

  def port(self):
    """ port(self) -> int """
    return 1

  def priority(self):
    """ priority(self) -> int """
    return 1

  def swap(self, QDnsServiceRecord):
    """ swap(self, QDnsServiceRecord) """
    pass

  def target(self):
    """ target(self) -> str """
    return ""

  def timeToLive(self):
    """ timeToLive(self) -> int """
    return 1

  def weight(self):
    """ weight(self) -> int """
    return 1

class QDnsTextRecord(simplewrapper):
  """ QDnsTextRecord()
  QDnsTextRecord(QDnsTextRecord) """

  def name(self):
    """ name(self) -> str """
    return ""

  def swap(self, QDnsTextRecord):
    """ swap(self, QDnsTextRecord) """
    pass

  def timeToLive(self):
    """ timeToLive(self) -> int """
    return 1

  def values(self):
    """ values(self) -> List[QByteArray] """
    return None

class QHostAddress(simplewrapper):
  """ QHostAddress()
  QHostAddress(QHostAddress.SpecialAddress)
  QHostAddress(int)
  QHostAddress(str)
  QHostAddress(Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int])
  QHostAddress(Union[QHostAddress, QHostAddress.SpecialAddress]) """

  Any = None
  AnyIPv4 = None
  AnyIPv6 = None
  Broadcast = None

  class ConversionMode(simplewrapper):
    """ QHostAddress.ConversionMode()
    QHostAddress.ConversionMode(Union[QHostAddress.ConversionMode, QHostAddress.ConversionModeFlag])
    QHostAddress.ConversionMode(QHostAddress.ConversionMode) """

    pass

  class ConversionModeFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ConvertLocalHost = None
  ConvertUnspecifiedAddress = None
  ConvertV4CompatToIPv4 = None
  ConvertV4MappedToIPv4 = None
  LocalHost = None
  LocalHostIPv6 = None
  Null = None

  class SpecialAddress(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  StrictConversion = None
  TolerantConversion = None

  def clear(self):
    """ clear(self) """
    pass

  def isBroadcast(self):
    """ isBroadcast(self) -> bool """
    return None

  def isEqual(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, arg0=None, arg1=None):
    """ isEqual(self, Union[QHostAddress, QHostAddress.SpecialAddress], mode: Union[QHostAddress.ConversionMode, QHostAddress.ConversionModeFlag] = QHostAddress.TolerantConversion) -> bool """
    return None

  def isGlobal(self):
    """ isGlobal(self) -> bool """
    return None

  def isInSubnet(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, int=None):
    """ isInSubnet(self, Union[QHostAddress, QHostAddress.SpecialAddress], int) -> bool
    isInSubnet(self, Tuple[Union[QHostAddress, QHostAddress.SpecialAddress], int]) -> bool """
    return None

  def isLinkLocal(self):
    """ isLinkLocal(self) -> bool """
    return None

  def isLoopback(self):
    """ isLoopback(self) -> bool """
    return None

  def isMulticast(self):
    """ isMulticast(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isSiteLocal(self):
    """ isSiteLocal(self) -> bool """
    return None

  def isUniqueLocalUnicast(self):
    """ isUniqueLocalUnicast(self) -> bool """
    return None

  def parseSubnet(str):
    """ parseSubnet(str) -> Tuple[QHostAddress, int] """
    return 1

  def protocol(self):
    """ protocol(self) -> QAbstractSocket.NetworkLayerProtocol """
    return ""

  def scopeId(self):
    """ scopeId(self) -> str """
    return ""

  def setAddress(self, arg0):
    """ setAddress(self, QHostAddress.SpecialAddress)
    setAddress(self, int)
    setAddress(self, str) -> bool
    setAddress(self, Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]) """
    pass

  def setScopeId(self, str):
    """ setScopeId(self, str) """
    pass

  def swap(self, QHostAddress):
    """ swap(self, QHostAddress) """
    pass

  def toIPv4Address(self):
    """ toIPv4Address(self) -> int """
    return 1

  def toIPv6Address(self):
    """ toIPv6Address(self) -> Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] """
    return 1

  def toString(self):
    """ toString(self) -> str """
    return ""

class QHostInfo(simplewrapper):
  """ QHostInfo(id: int = -1)
  QHostInfo(QHostInfo) """

  class HostInfoError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  HostNotFound = None
  NoError = None
  UnknownError = None

  def abortHostLookup(int):
    """ abortHostLookup(int) """
    pass

  def addresses(self):
    """ addresses(self) -> List[QHostAddress] """
    return None

  def error(self):
    """ error(self) -> QHostInfo.HostInfoError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def fromName(str):
    """ fromName(str) -> QHostInfo """
    return None

  def hostName(self):
    """ hostName(self) -> str """
    return ""

  def localDomainName():
    """ localDomainName() -> str """
    return ""

  def localHostName():
    """ localHostName() -> str """
    return ""

  def lookupHost(str, PYQT_SLOT):
    """ lookupHost(str, PYQT_SLOT) -> int """
    return 1

  def lookupId(self):
    """ lookupId(self) -> int """
    return 1

  def setAddresses(self, IterableUnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ setAddresses(self, Iterable[Union[QHostAddress, QHostAddress.SpecialAddress]]) """
    pass

  def setError(self, arg0):
    """ setError(self, QHostInfo.HostInfoError) """
    pass

  def setErrorString(self, str):
    """ setErrorString(self, str) """
    pass

  def setHostName(self, str):
    """ setHostName(self, str) """
    pass

  def setLookupId(self, int):
    """ setLookupId(self, int) """
    pass

  def swap(self, QHostInfo):
    """ swap(self, QHostInfo) """
    pass

class QHstsPolicy(simplewrapper):
  """ QHstsPolicy()
  QHstsPolicy(Union[QDateTime, datetime.datetime], Union[QHstsPolicy.PolicyFlags, QHstsPolicy.PolicyFlag], str, mode: QUrl.ParsingMode = QUrl.DecodedMode)
  QHstsPolicy(QHstsPolicy) """

  IncludeSubDomains = None

  class PolicyFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class PolicyFlags(simplewrapper):
    """ QHstsPolicy.PolicyFlags()
    QHstsPolicy.PolicyFlags(Union[QHstsPolicy.PolicyFlags, QHstsPolicy.PolicyFlag])
    QHstsPolicy.PolicyFlags(QHstsPolicy.PolicyFlags) """

    pass

  def expiry(self):
    """ expiry(self) -> QDateTime """
    return None

  def host(self, arg0=None, arg1=None):
    """ host(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.ComponentFormattingOption.FullyDecoded) -> str """
    return ""

  def includesSubDomains(self):
    """ includesSubDomains(self) -> bool """
    return None

  def isExpired(self):
    """ isExpired(self) -> bool """
    return None

  def setExpiry(self, UnionQDateTime=None, datetime.datetime=None):
    """ setExpiry(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setHost():
    """ setHost(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode) """
    pass

  def setIncludesSubDomains(self, bool):
    """ setIncludesSubDomains(self, bool) """
    pass

  def swap(self, QHstsPolicy):
    """ swap(self, QHstsPolicy) """
    pass

class QHttpMultiPart(QObject):
  """ QHttpMultiPart(parent: QObject = None)
  QHttpMultiPart(QHttpMultiPart.ContentType, parent: QObject = None) """

  AlternativeType = None

  class ContentType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  FormDataType = None
  MixedType = None
  RelatedType = None

  def append(self, QHttpPart):
    """ append(self, QHttpPart) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def boundary(self):
    """ boundary(self) -> QByteArray """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setBoundary(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setBoundary(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setContentType(self, arg0):
    """ setContentType(self, QHttpMultiPart.ContentType) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QHttpPart(simplewrapper):
  """ QHttpPart()
  QHttpPart(QHttpPart) """

  def setBody(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setBody(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setBodyDevice(self, QIODevice):
    """ setBodyDevice(self, QIODevice) """
    pass

  def setHeader(self, arg0, Any):
    """ setHeader(self, QNetworkRequest.KnownHeaders, Any) """
    pass

  def setRawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) """
    pass

  def swap(self, QHttpPart):
    """ swap(self, QHttpPart) """
    pass

class QLocalServer(QObject):
  """ QLocalServer(parent: QObject = None) """

  GroupAccessOption = None
  OtherAccessOption = None

  class SocketOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class SocketOptions(simplewrapper):
    """ QLocalServer.SocketOptions()
    QLocalServer.SocketOptions(Union[QLocalServer.SocketOptions, QLocalServer.SocketOption])
    QLocalServer.SocketOptions(QLocalServer.SocketOptions) """

    pass

  UserAccessOption = None
  WorldAccessOption = None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def fullServerName(self):
    """ fullServerName(self) -> str """
    return ""

  def hasPendingConnections(self):
    """ hasPendingConnections(self) -> bool """
    return None

  def incomingConnection(self, arg0):
    """ incomingConnection(self, sip.voidptr) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isListening(self):
    """ isListening(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def listen(self, str):
    """ listen(self, str) -> bool
    listen(self, sip.voidptr) -> bool """
    return None

  def maxPendingConnections(self):
    """ maxPendingConnections(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def newConnection(self):
    """ newConnection(self) [signal] """
    pass

  def nextPendingConnection(self):
    """ nextPendingConnection(self) -> QLocalSocket """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def removeServer(str):
    """ removeServer(str) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def serverError(self):
    """ serverError(self) -> QAbstractSocket.SocketError """
    return ""

  def serverName(self):
    """ serverName(self) -> str """
    return ""

  def setMaxPendingConnections(self, int):
    """ setMaxPendingConnections(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSocketOptions(self, UnionQLocalServer.SocketOptions=None, QLocalServer.SocketOption=None):
    """ setSocketOptions(self, Union[QLocalServer.SocketOptions, QLocalServer.SocketOption]) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def socketDescriptor(self):
    """ socketDescriptor(self) -> sip.voidptr """
    return None

  def socketOptions(self):
    """ socketOptions(self) -> QLocalServer.SocketOptions """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def waitForNewConnection(self, arg0=None):
    """ waitForNewConnection(self, msecs: int = 0) -> Tuple[bool, bool] """
    return None

class QLocalSocket(QIODevice):
  """ QLocalSocket(parent: QObject = None) """

  Append = None
  ClosingState = None
  ConnectedState = None
  ConnectingState = None
  ConnectionError = None
  ConnectionRefusedError = None
  DatagramTooLargeError = None
  ExistingOnly = None

  class LocalSocketError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class LocalSocketState(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NewOnly = None
  NotOpen = None
  OperationError = None
  PeerClosedError = None
  ReadOnly = None
  ReadWrite = None
  ServerNotFoundError = None
  SocketAccessError = None
  SocketResourceError = None
  SocketTimeoutError = None
  Text = None
  Truncate = None
  Unbuffered = None
  UnconnectedState = None
  UnknownSocketError = None
  UnsupportedSocketOperationError = None
  WriteOnly = None

  def abort(self):
    """ abort(self) """
    pass

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def connectToServer():
    """ connectToServer(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)
    connectToServer(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) """
    pass

  def connected(self):
    """ connected(self) [signal] """
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectFromServer(self):
    """ disconnectFromServer(self) """
    pass

  def disconnectNotify():
    pass

  def disconnected(self):
    """ disconnected(self) [signal] """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QLocalSocket.LocalSocketError
    error(self, QLocalSocket.LocalSocketError) [signal] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def fullServerName(self):
    """ fullServerName(self) -> str """
    return ""

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, arg0=None, arg1=None):
    """ open(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readBufferSize(self):
    """ readBufferSize(self) -> int """
    return 1

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData(self, int):
    """ readData(self, int) -> bytes """
    return None

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def serverName(self):
    """ serverName(self) -> str """
    return ""

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setReadBufferSize(self, int):
    """ setReadBufferSize(self, int) """
    pass

  def setServerName(self, str):
    """ setServerName(self, str) """
    pass

  def setSocketDescriptor(self, arg0, arg1=None, arg2=None, arg3=None):
    """ setSocketDescriptor(self, sip.voidptr, state: QLocalSocket.LocalSocketState = QLocalSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool """
    return None

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def socketDescriptor(self):
    """ socketDescriptor(self) -> sip.voidptr """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  def state(self):
    """ state(self) -> QLocalSocket.LocalSocketState """
    return None

  def stateChanged(self, arg0):
    """ stateChanged(self, QLocalSocket.LocalSocketState) [signal] """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, arg0=None):
    """ waitForBytesWritten(self, msecs: int = 30000) -> bool """
    return None

  def waitForConnected(self, arg0=None):
    """ waitForConnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForDisconnected(self, arg0=None):
    """ waitForDisconnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForReadyRead(self, arg0=None):
    """ waitForReadyRead(self, msecs: int = 30000) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QNetworkAccessManager(QObject):
  """ QNetworkAccessManager(parent: QObject = None) """

  Accessible = None
  CustomOperation = None
  DeleteOperation = None
  GetOperation = None
  HeadOperation = None

  class NetworkAccessibility(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NotAccessible = None

  class Operation(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  PostOperation = None
  PutOperation = None
  UnknownAccessibility = None

  def activeConfiguration(self):
    """ activeConfiguration(self) -> QNetworkConfiguration """
    return None

  def addStrictTransportSecurityHosts(self, IterableQHstsPolicy=None):
    """ addStrictTransportSecurityHosts(self, Iterable[QHstsPolicy]) """
    pass

  def authenticationRequired(self, QNetworkReply, QAuthenticator):
    """ authenticationRequired(self, QNetworkReply, QAuthenticator) [signal] """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cache(self):
    """ cache(self) -> QAbstractNetworkCache """
    return ""

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clearAccessCache(self):
    """ clearAccessCache(self) """
    pass

  def clearConnectionCache(self):
    """ clearConnectionCache(self) """
    pass

  def configuration(self):
    """ configuration(self) -> QNetworkConfiguration """
    return None

  def connectNotify():
    pass

  def connectToHost():
    """ connectToHost(self, str, port: int = 80) """
    pass

  def connectToHostEncrypted(self, str, int, QSslConfiguration, str):
    """ connectToHostEncrypted(self, str, port: int = 443, sslConfiguration: QSslConfiguration = QSslConfiguration.defaultConfiguration())
    connectToHostEncrypted(self, str, int, QSslConfiguration, str) """
    pass

  def cookieJar(self):
    """ cookieJar(self) -> QNetworkCookieJar """
    return None

  def createRequest(self, arg0, QNetworkRequest, arg1=None):
    """ createRequest(self, QNetworkAccessManager.Operation, QNetworkRequest, device: QIODevice = None) -> QNetworkReply """
    return None

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def deleteResource(self, QNetworkRequest):
    """ deleteResource(self, QNetworkRequest) -> QNetworkReply """
    return None

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def enableStrictTransportSecurityStore():
    """ enableStrictTransportSecurityStore(self, bool, storeDir: str = '') """
    pass

  def encrypted(self, QNetworkReply):
    """ encrypted(self, QNetworkReply) [signal] """
    pass

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self, QNetworkReply):
    """ finished(self, QNetworkReply) [signal] """
    pass

  def get(self, QNetworkRequest):
    """ get(self, QNetworkRequest) -> QNetworkReply """
    return None

  def head(self, QNetworkRequest):
    """ head(self, QNetworkRequest) -> QNetworkReply """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isStrictTransportSecurityEnabled(self):
    """ isStrictTransportSecurityEnabled(self) -> bool """
    return None

  def isStrictTransportSecurityStoreEnabled(self):
    """ isStrictTransportSecurityStoreEnabled(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def networkAccessible(self):
    """ networkAccessible(self) -> QNetworkAccessManager.NetworkAccessibility """
    return None

  def networkAccessibleChanged(self, arg0):
    """ networkAccessibleChanged(self, QNetworkAccessManager.NetworkAccessibility) [signal] """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def post(self, QNetworkRequest, QIODevice):
    """ post(self, QNetworkRequest, QIODevice) -> QNetworkReply
    post(self, QNetworkRequest, Union[QByteArray, bytes, bytearray]) -> QNetworkReply
    post(self, QNetworkRequest, QHttpMultiPart) -> QNetworkReply """
    return None

  def preSharedKeyAuthenticationRequired(self, QNetworkReply, QSslPreSharedKeyAuthenticator):
    """ preSharedKeyAuthenticationRequired(self, QNetworkReply, QSslPreSharedKeyAuthenticator) [signal] """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def proxy(self):
    """ proxy(self) -> QNetworkProxy """
    return None

  def proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator):
    """ proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator) [signal] """
    pass

  def proxyFactory(self):
    """ proxyFactory(self) -> QNetworkProxyFactory """
    return None

  def put(self, QNetworkRequest, QIODevice):
    """ put(self, QNetworkRequest, QIODevice) -> QNetworkReply
    put(self, QNetworkRequest, Union[QByteArray, bytes, bytearray]) -> QNetworkReply
    put(self, QNetworkRequest, QHttpMultiPart) -> QNetworkReply """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def redirectPolicy(self):
    """ redirectPolicy(self) -> QNetworkRequest.RedirectPolicy """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sendCustomRequest(self, QNetworkRequest, UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], data: QIODevice = None) -> QNetworkReply
    sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) -> QNetworkReply
    sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], QHttpMultiPart) -> QNetworkReply """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCache(self, QAbstractNetworkCache):
    """ setCache(self, QAbstractNetworkCache) """
    pass

  def setConfiguration(self, QNetworkConfiguration):
    """ setConfiguration(self, QNetworkConfiguration) """
    pass

  def setCookieJar(self, QNetworkCookieJar):
    """ setCookieJar(self, QNetworkCookieJar) """
    pass

  def setNetworkAccessible(self, arg0):
    """ setNetworkAccessible(self, QNetworkAccessManager.NetworkAccessibility) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setProxy(self, QNetworkProxy):
    """ setProxy(self, QNetworkProxy) """
    pass

  def setProxyFactory(self, QNetworkProxyFactory):
    """ setProxyFactory(self, QNetworkProxyFactory) """
    pass

  def setRedirectPolicy(self, arg0):
    """ setRedirectPolicy(self, QNetworkRequest.RedirectPolicy) """
    pass

  def setStrictTransportSecurityEnabled(self, bool):
    """ setStrictTransportSecurityEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def sslErrors(self, QNetworkReply, IterableQSslError=None):
    """ sslErrors(self, QNetworkReply, Iterable[QSslError]) [signal] """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def strictTransportSecurityHosts(self):
    """ strictTransportSecurityHosts(self) -> List[QHstsPolicy] """
    return None

  def supportedSchemes(self):
    """ supportedSchemes(self) -> List[str] """
    return ""

  def supportedSchemesImplementation(self):
    """ supportedSchemesImplementation(self) -> List[str] """
    return ""

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

class QNetworkAddressEntry(simplewrapper):
  """ QNetworkAddressEntry()
  QNetworkAddressEntry(QNetworkAddressEntry) """

  class DnsEligibilityStatus(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DnsEligibilityUnknown = None
  DnsEligible = None
  DnsIneligible = None

  def broadcast(self):
    """ broadcast(self) -> QHostAddress """
    return None

  def clearAddressLifetime(self):
    """ clearAddressLifetime(self) """
    pass

  def dnsEligibility(self):
    """ dnsEligibility(self) -> QNetworkAddressEntry.DnsEligibilityStatus """
    return None

  def ip(self):
    """ ip(self) -> QHostAddress """
    return None

  def isLifetimeKnown(self):
    """ isLifetimeKnown(self) -> bool """
    return None

  def isPermanent(self):
    """ isPermanent(self) -> bool """
    return None

  def isTemporary(self):
    """ isTemporary(self) -> bool """
    return None

  def netmask(self):
    """ netmask(self) -> QHostAddress """
    return None

  def preferredLifetime(self):
    """ preferredLifetime(self) -> QDeadlineTimer """
    return None

  def prefixLength(self):
    """ prefixLength(self) -> int """
    return 1

  def setAddressLifetime(self, QDeadlineTimer, QDeadlineTimer):
    """ setAddressLifetime(self, QDeadlineTimer, QDeadlineTimer) """
    pass

  def setBroadcast(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ setBroadcast(self, Union[QHostAddress, QHostAddress.SpecialAddress]) """
    pass

  def setDnsEligibility(self, arg0):
    """ setDnsEligibility(self, QNetworkAddressEntry.DnsEligibilityStatus) """
    pass

  def setIp(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ setIp(self, Union[QHostAddress, QHostAddress.SpecialAddress]) """
    pass

  def setNetmask(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ setNetmask(self, Union[QHostAddress, QHostAddress.SpecialAddress]) """
    pass

  def setPrefixLength(self, int):
    """ setPrefixLength(self, int) """
    pass

  def swap(self, QNetworkAddressEntry):
    """ swap(self, QNetworkAddressEntry) """
    pass

  def validityLifetime(self):
    """ validityLifetime(self) -> QDeadlineTimer """
    return None

class QNetworkCacheMetaData(simplewrapper):
  """ QNetworkCacheMetaData()
  QNetworkCacheMetaData(QNetworkCacheMetaData) """

  def attributes(self):
    """ attributes(self) -> Dict[QNetworkRequest.Attribute, Any] """
    return None

  def expirationDate(self):
    """ expirationDate(self) -> QDateTime """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def lastModified(self):
    """ lastModified(self) -> QDateTime """
    return None

  def rawHeaders(self):
    """ rawHeaders(self) -> List[Tuple[QByteArray, QByteArray]] """
    return None

  def saveToDisk(self):
    """ saveToDisk(self) -> bool """
    return None

  def setAttributes(self, DictQNetworkRequest.Attribute=None, Any=None):
    """ setAttributes(self, Dict[QNetworkRequest.Attribute, Any]) """
    pass

  def setExpirationDate(self, UnionQDateTime=None, datetime.datetime=None):
    """ setExpirationDate(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setLastModified(self, UnionQDateTime=None, datetime.datetime=None):
    """ setLastModified(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setRawHeaders(self, IterableTupleUnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setRawHeaders(self, Iterable[Tuple[Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]]]) """
    pass

  def setSaveToDisk(self, bool):
    """ setSaveToDisk(self, bool) """
    pass

  def setUrl(self, QUrl):
    """ setUrl(self, QUrl) """
    pass

  def swap(self, QNetworkCacheMetaData):
    """ swap(self, QNetworkCacheMetaData) """
    pass

  def url(self):
    """ url(self) -> QUrl """
    return None

class QNetworkConfiguration(simplewrapper):
  """ QNetworkConfiguration()
  QNetworkConfiguration(QNetworkConfiguration) """

  Active = None
  Bearer2G = None
  Bearer3G = None
  Bearer4G = None
  BearerBluetooth = None
  BearerCDMA2000 = None
  BearerEVDO = None
  BearerEthernet = None
  BearerHSPA = None
  BearerLTE = None

  class BearerType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  BearerUnknown = None
  BearerWCDMA = None
  BearerWLAN = None
  BearerWiMAX = None
  Defined = None
  Discovered = None
  InternetAccessPoint = None
  Invalid = None
  PrivatePurpose = None
  PublicPurpose = None

  class Purpose(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ServiceNetwork = None
  ServiceSpecificPurpose = None

  class StateFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class StateFlags(simplewrapper):
    """ QNetworkConfiguration.StateFlags()
    QNetworkConfiguration.StateFlags(Union[QNetworkConfiguration.StateFlags, QNetworkConfiguration.StateFlag])
    QNetworkConfiguration.StateFlags(QNetworkConfiguration.StateFlags) """

    pass

  class Type(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Undefined = None
  UnknownPurpose = None
  UserChoice = None

  def bearerType(self):
    """ bearerType(self) -> QNetworkConfiguration.BearerType """
    return None

  def bearerTypeFamily(self):
    """ bearerTypeFamily(self) -> QNetworkConfiguration.BearerType """
    return None

  def bearerTypeName(self):
    """ bearerTypeName(self) -> str """
    return ""

  def children(self):
    """ children(self) -> List[QNetworkConfiguration] """
    return None

  def connectTimeout(self):
    """ connectTimeout(self) -> int """
    return 1

  def identifier(self):
    """ identifier(self) -> str """
    return ""

  def isRoamingAvailable(self):
    """ isRoamingAvailable(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def purpose(self):
    """ purpose(self) -> QNetworkConfiguration.Purpose """
    return None

  def setConnectTimeout(self, int):
    """ setConnectTimeout(self, int) -> bool """
    return None

  def state(self):
    """ state(self) -> QNetworkConfiguration.StateFlags """
    return None

  def swap(self, QNetworkConfiguration):
    """ swap(self, QNetworkConfiguration) """
    pass

  def type(self):
    """ type(self) -> QNetworkConfiguration.Type """
    return None

class QNetworkConfigurationManager(QObject):
  """ QNetworkConfigurationManager(parent: QObject = None) """

  ApplicationLevelRoaming = None
  CanStartAndStopInterfaces = None

  class Capabilities(simplewrapper):
    """ QNetworkConfigurationManager.Capabilities()
    QNetworkConfigurationManager.Capabilities(Union[QNetworkConfigurationManager.Capabilities, QNetworkConfigurationManager.Capability])
    QNetworkConfigurationManager.Capabilities(QNetworkConfigurationManager.Capabilities) """

    pass

  class Capability(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DataStatistics = None
  DirectConnectionRouting = None
  ForcedRoaming = None
  NetworkSessionRequired = None
  SystemSessionSupport = None

  def allConfigurations(self, arg0=None, arg1=None):
    """ allConfigurations(self, flags: Union[QNetworkConfiguration.StateFlags, QNetworkConfiguration.StateFlag] = QNetworkConfiguration.StateFlags()) -> List[QNetworkConfiguration] """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def capabilities(self):
    """ capabilities(self) -> QNetworkConfigurationManager.Capabilities """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def configurationAdded(self, QNetworkConfiguration):
    """ configurationAdded(self, QNetworkConfiguration) [signal] """
    pass

  def configurationChanged(self, QNetworkConfiguration):
    """ configurationChanged(self, QNetworkConfiguration) [signal] """
    pass

  def configurationFromIdentifier(self, str):
    """ configurationFromIdentifier(self, str) -> QNetworkConfiguration """
    return None

  def configurationRemoved(self, QNetworkConfiguration):
    """ configurationRemoved(self, QNetworkConfiguration) [signal] """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def defaultConfiguration(self):
    """ defaultConfiguration(self) -> QNetworkConfiguration """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOnline(self):
    """ isOnline(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def onlineStateChanged(self, bool):
    """ onlineStateChanged(self, bool) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCompleted(self):
    """ updateCompleted(self) [signal] """
    pass

  def updateConfigurations(self):
    """ updateConfigurations(self) """
    pass

class QNetworkCookie(simplewrapper):
  """ QNetworkCookie(name: Union[QByteArray, bytes, bytearray] = QByteArray(), value: Union[QByteArray, bytes, bytearray] = QByteArray())
  QNetworkCookie(QNetworkCookie) """

  Full = None
  NameAndValueOnly = None

  class RawForm(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def domain(self):
    """ domain(self) -> str """
    return ""

  def expirationDate(self):
    """ expirationDate(self) -> QDateTime """
    return None

  def hasSameIdentifier(self, QNetworkCookie):
    """ hasSameIdentifier(self, QNetworkCookie) -> bool """
    return None

  def isHttpOnly(self):
    """ isHttpOnly(self) -> bool """
    return None

  def isSecure(self):
    """ isSecure(self) -> bool """
    return None

  def isSessionCookie(self):
    """ isSessionCookie(self) -> bool """
    return None

  def name(self):
    """ name(self) -> QByteArray """
    return None

  def normalize(self, QUrl):
    """ normalize(self, QUrl) """
    pass

  def parseCookies(UnionQByteArray=None, bytes=None, bytearray=None):
    """ parseCookies(Union[QByteArray, bytes, bytearray]) -> List[QNetworkCookie] """
    return None

  def path(self):
    """ path(self) -> str """
    return ""

  def setDomain(self, str):
    """ setDomain(self, str) """
    pass

  def setExpirationDate(self, UnionQDateTime=None, datetime.datetime=None):
    """ setExpirationDate(self, Union[QDateTime, datetime.datetime]) """
    pass

  def setHttpOnly(self, bool):
    """ setHttpOnly(self, bool) """
    pass

  def setName(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setName(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setPath(self, str):
    """ setPath(self, str) """
    pass

  def setSecure(self, bool):
    """ setSecure(self, bool) """
    pass

  def setValue(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setValue(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def swap(self, QNetworkCookie):
    """ swap(self, QNetworkCookie) """
    pass

  def toRawForm(self, arg0=None):
    """ toRawForm(self, form: QNetworkCookie.RawForm = QNetworkCookie.Full) -> QByteArray """
    return None

  def value(self):
    """ value(self) -> QByteArray """
    return None

class QNetworkCookieJar(QObject):
  """ QNetworkCookieJar(parent: QObject = None) """

  def allCookies(self):
    """ allCookies(self) -> List[QNetworkCookie] """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def connectNotify():
    pass

  def cookiesForUrl(self, QUrl):
    """ cookiesForUrl(self, QUrl) -> List[QNetworkCookie] """
    return None

  def customEvent():
    pass

  def deleteCookie(self, QNetworkCookie):
    """ deleteCookie(self, QNetworkCookie) -> bool """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insertCookie(self, QNetworkCookie):
    """ insertCookie(self, QNetworkCookie) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAllCookies(self, IterableQNetworkCookie=None):
    """ setAllCookies(self, Iterable[QNetworkCookie]) """
    pass

  def setCookiesFromUrl(self, IterableQNetworkCookie=None, QUrl=None):
    """ setCookiesFromUrl(self, Iterable[QNetworkCookie], QUrl) -> bool """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateCookie(self, QNetworkCookie):
    """ updateCookie(self, QNetworkCookie) -> bool """
    return None

  def validateCookie(self, QNetworkCookie, QUrl):
    """ validateCookie(self, QNetworkCookie, QUrl) -> bool """
    return None

class QNetworkDatagram(simplewrapper):
  """ QNetworkDatagram()
  QNetworkDatagram(Union[QByteArray, bytes, bytearray], destinationAddress: Union[QHostAddress, QHostAddress.SpecialAddress] = QHostAddress(), port: int = 0)
  QNetworkDatagram(QNetworkDatagram) """

  def clear(self):
    """ clear(self) """
    pass

  def data(self):
    """ data(self) -> QByteArray """
    return None

  def destinationAddress(self):
    """ destinationAddress(self) -> QHostAddress """
    return None

  def destinationPort(self):
    """ destinationPort(self) -> int """
    return 1

  def hopLimit(self):
    """ hopLimit(self) -> int """
    return 1

  def interfaceIndex(self):
    """ interfaceIndex(self) -> int """
    return 1

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def makeReply(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ makeReply(self, Union[QByteArray, bytes, bytearray]) -> QNetworkDatagram """
    return None

  def senderAddress(self):
    """ senderAddress(self) -> QHostAddress """
    return None

  def senderPort(self):
    """ senderPort(self) -> int """
    return 1

  def setData(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setData(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setDestination(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, int=None):
    """ setDestination(self, Union[QHostAddress, QHostAddress.SpecialAddress], int) """
    pass

  def setHopLimit(self, int):
    """ setHopLimit(self, int) """
    pass

  def setInterfaceIndex(self, int):
    """ setInterfaceIndex(self, int) """
    pass

  def setSender():
    """ setSender(self, Union[QHostAddress, QHostAddress.SpecialAddress], port: int = 0) """
    pass

  def swap(self, QNetworkDatagram):
    """ swap(self, QNetworkDatagram) """
    pass

class QNetworkDiskCache(QAbstractNetworkCache):
  """ QNetworkDiskCache(parent: QObject = None) """

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def cacheDirectory(self):
    """ cacheDirectory(self) -> str """
    return ""

  def cacheSize(self):
    """ cacheSize(self) -> int """
    return 1

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def data(self, QUrl):
    """ data(self, QUrl) -> QIODevice """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def expire(self):
    """ expire(self) -> int """
    return 1

  def fileMetaData(self, str):
    """ fileMetaData(self, str) -> QNetworkCacheMetaData """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def insert(self, QIODevice):
    """ insert(self, QIODevice) """
    pass

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def maximumCacheSize(self):
    """ maximumCacheSize(self) -> int """
    return 1

  def metaData(self, QUrl):
    """ metaData(self, QUrl) -> QNetworkCacheMetaData """
    return None

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def prepare(self, QNetworkCacheMetaData):
    """ prepare(self, QNetworkCacheMetaData) -> QIODevice """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def remove(self, QUrl):
    """ remove(self, QUrl) -> bool """
    return None

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCacheDirectory(self, str):
    """ setCacheDirectory(self, str) """
    pass

  def setMaximumCacheSize(self, int):
    """ setMaximumCacheSize(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def updateMetaData(self, QNetworkCacheMetaData):
    """ updateMetaData(self, QNetworkCacheMetaData) """
    pass

class QNetworkInterface(simplewrapper):
  """ QNetworkInterface()
  QNetworkInterface(QNetworkInterface) """

  CanBroadcast = None
  CanBus = None
  CanMulticast = None
  Ethernet = None
  Fddi = None
  Ieee1394 = None
  Ieee80211 = None
  Ieee802154 = None
  Ieee80216 = None

  class InterfaceFlag(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class InterfaceFlags(simplewrapper):
    """ QNetworkInterface.InterfaceFlags()
    QNetworkInterface.InterfaceFlags(Union[QNetworkInterface.InterfaceFlags, QNetworkInterface.InterfaceFlag])
    QNetworkInterface.InterfaceFlags(QNetworkInterface.InterfaceFlags) """

    pass

  class InterfaceType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  IsLoopBack = None
  IsPointToPoint = None
  IsRunning = None
  IsUp = None
  Loopback = None
  Phonet = None
  Ppp = None
  SixLoWPAN = None
  Slip = None
  Unknown = None
  Virtual = None
  Wifi = None

  def addressEntries(self):
    """ addressEntries(self) -> List[QNetworkAddressEntry] """
    return None

  def allAddresses():
    """ allAddresses() -> List[QHostAddress] """
    return None

  def allInterfaces():
    """ allInterfaces() -> List[QNetworkInterface] """
    return None

  def flags(self):
    """ flags(self) -> QNetworkInterface.InterfaceFlags """
    return None

  def hardwareAddress(self):
    """ hardwareAddress(self) -> str """
    return ""

  def humanReadableName(self):
    """ humanReadableName(self) -> str """
    return ""

  def index(self):
    """ index(self) -> int """
    return 1

  def interfaceFromIndex(int):
    """ interfaceFromIndex(int) -> QNetworkInterface """
    return None

  def interfaceFromName(str):
    """ interfaceFromName(str) -> QNetworkInterface """
    return None

  def interfaceIndexFromName(str):
    """ interfaceIndexFromName(str) -> int """
    return 1

  def interfaceNameFromIndex(int):
    """ interfaceNameFromIndex(int) -> str """
    return ""

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def maximumTransmissionUnit(self):
    """ maximumTransmissionUnit(self) -> int """
    return 1

  def name(self):
    """ name(self) -> str """
    return ""

  def swap(self, QNetworkInterface):
    """ swap(self, QNetworkInterface) """
    pass

  def type(self):
    """ type(self) -> QNetworkInterface.InterfaceType """
    return None

class QNetworkProxy(simplewrapper):
  """ QNetworkProxy()
  QNetworkProxy(QNetworkProxy.ProxyType, hostName: str = '', port: int = 0, user: str = '', password: str = '')
  QNetworkProxy(QNetworkProxy) """

  CachingCapability = None

  class Capabilities(simplewrapper):
    """ QNetworkProxy.Capabilities()
    QNetworkProxy.Capabilities(Union[QNetworkProxy.Capabilities, QNetworkProxy.Capability])
    QNetworkProxy.Capabilities(QNetworkProxy.Capabilities) """

    pass

  class Capability(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  DefaultProxy = None
  FtpCachingProxy = None
  HostNameLookupCapability = None
  HttpCachingProxy = None
  HttpProxy = None
  ListeningCapability = None
  NoProxy = None

  class ProxyType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SctpListeningCapability = None
  SctpTunnelingCapability = None
  Socks5Proxy = None
  TunnelingCapability = None
  UdpTunnelingCapability = None

  def applicationProxy():
    """ applicationProxy() -> QNetworkProxy """
    return None

  def capabilities(self):
    """ capabilities(self) -> QNetworkProxy.Capabilities """
    return None

  def hasRawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ hasRawHeader(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def header(self, arg0):
    """ header(self, QNetworkRequest.KnownHeaders) -> Any """
    return None

  def hostName(self):
    """ hostName(self) -> str """
    return ""

  def isCachingProxy(self):
    """ isCachingProxy(self) -> bool """
    return None

  def isTransparentProxy(self):
    """ isTransparentProxy(self) -> bool """
    return None

  def password(self):
    """ password(self) -> str """
    return ""

  def port(self):
    """ port(self) -> int """
    return 1

  def rawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ rawHeader(self, Union[QByteArray, bytes, bytearray]) -> QByteArray """
    return None

  def rawHeaderList(self):
    """ rawHeaderList(self) -> List[QByteArray] """
    return None

  def setApplicationProxy(QNetworkProxy):
    """ setApplicationProxy(QNetworkProxy) """
    pass

  def setCapabilities(self, UnionQNetworkProxy.Capabilities=None, QNetworkProxy.Capability=None):
    """ setCapabilities(self, Union[QNetworkProxy.Capabilities, QNetworkProxy.Capability]) """
    pass

  def setHeader(self, arg0, Any):
    """ setHeader(self, QNetworkRequest.KnownHeaders, Any) """
    pass

  def setHostName(self, str):
    """ setHostName(self, str) """
    pass

  def setPassword(self, str):
    """ setPassword(self, str) """
    pass

  def setPort(self, int):
    """ setPort(self, int) """
    pass

  def setRawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) """
    pass

  def setType(self, arg0):
    """ setType(self, QNetworkProxy.ProxyType) """
    pass

  def setUser(self, str):
    """ setUser(self, str) """
    pass

  def swap(self, QNetworkProxy):
    """ swap(self, QNetworkProxy) """
    pass

  def type(self):
    """ type(self) -> QNetworkProxy.ProxyType """
    return None

  def user(self):
    """ user(self) -> str """
    return ""

class QNetworkProxyFactory(wrapper):
  """ QNetworkProxyFactory()
  QNetworkProxyFactory(QNetworkProxyFactory) """

  def proxyForQuery(QNetworkProxyQuery):
    """ proxyForQuery(QNetworkProxyQuery) -> List[QNetworkProxy] """
    return None

  def queryProxy(self, arg0=None):
    """ queryProxy(self, query: QNetworkProxyQuery = QNetworkProxyQuery()) -> List[QNetworkProxy] """
    return None

  def setApplicationProxyFactory(QNetworkProxyFactory):
    """ setApplicationProxyFactory(QNetworkProxyFactory) """
    pass

  def setUseSystemConfiguration(bool):
    """ setUseSystemConfiguration(bool) """
    pass

  def systemProxyForQuery(arg0=None):
    """ systemProxyForQuery(query: QNetworkProxyQuery = QNetworkProxyQuery()) -> List[QNetworkProxy] """
    return None

  def usesSystemConfiguration():
    """ usesSystemConfiguration() -> bool """
    return None

class QNetworkProxyQuery(simplewrapper):
  """ QNetworkProxyQuery()
  QNetworkProxyQuery(QUrl, type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.UrlRequest)
  QNetworkProxyQuery(str, int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpSocket)
  QNetworkProxyQuery(int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpServer)
  QNetworkProxyQuery(QNetworkConfiguration, QUrl, queryType: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.UrlRequest)
  QNetworkProxyQuery(QNetworkConfiguration, str, int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpSocket)
  QNetworkProxyQuery(QNetworkConfiguration, int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpServer)
  QNetworkProxyQuery(QNetworkProxyQuery) """

  class QueryType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SctpServer = None
  SctpSocket = None
  TcpServer = None
  TcpSocket = None
  UdpSocket = None
  UrlRequest = None

  def localPort(self):
    """ localPort(self) -> int """
    return 1

  def networkConfiguration(self):
    """ networkConfiguration(self) -> QNetworkConfiguration """
    return None

  def peerHostName(self):
    """ peerHostName(self) -> str """
    return ""

  def peerPort(self):
    """ peerPort(self) -> int """
    return 1

  def protocolTag(self):
    """ protocolTag(self) -> str """
    return ""

  def queryType(self):
    """ queryType(self) -> QNetworkProxyQuery.QueryType """
    return None

  def setLocalPort(self, int):
    """ setLocalPort(self, int) """
    pass

  def setNetworkConfiguration(self, QNetworkConfiguration):
    """ setNetworkConfiguration(self, QNetworkConfiguration) """
    pass

  def setPeerHostName(self, str):
    """ setPeerHostName(self, str) """
    pass

  def setPeerPort(self, int):
    """ setPeerPort(self, int) """
    pass

  def setProtocolTag(self, str):
    """ setProtocolTag(self, str) """
    pass

  def setQueryType(self, arg0):
    """ setQueryType(self, QNetworkProxyQuery.QueryType) """
    pass

  def setUrl(self, QUrl):
    """ setUrl(self, QUrl) """
    pass

  def swap(self, QNetworkProxyQuery):
    """ swap(self, QNetworkProxyQuery) """
    pass

  def url(self):
    """ url(self) -> QUrl """
    return None

class QNetworkReply(QIODevice):
  """ QNetworkReply(parent: QObject = None) """

  Append = None
  AuthenticationRequiredError = None
  BackgroundRequestNotAllowedError = None
  ConnectionRefusedError = None
  ContentAccessDenied = None
  ContentConflictError = None
  ContentGoneError = None
  ContentNotFoundError = None
  ContentOperationNotPermittedError = None
  ContentReSendError = None
  ExistingOnly = None
  HostNotFoundError = None
  InsecureRedirectError = None
  InternalServerError = None

  class NetworkError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NetworkSessionFailedError = None
  NewOnly = None
  NoError = None
  NotOpen = None
  OperationCanceledError = None
  OperationNotImplementedError = None
  ProtocolFailure = None
  ProtocolInvalidOperationError = None
  ProtocolUnknownError = None
  ProxyAuthenticationRequiredError = None
  ProxyConnectionClosedError = None
  ProxyConnectionRefusedError = None
  ProxyNotFoundError = None
  ProxyTimeoutError = None
  ReadOnly = None
  ReadWrite = None
  RemoteHostClosedError = None
  ServiceUnavailableError = None
  SslHandshakeFailedError = None
  TemporaryNetworkFailureError = None
  Text = None
  TimeoutError = None
  TooManyRedirectsError = None
  Truncate = None
  Unbuffered = None
  UnknownContentError = None
  UnknownNetworkError = None
  UnknownProxyError = None
  UnknownServerError = None
  WriteOnly = None

  def abort(self):
    """ abort(self) """
    pass

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def attribute(self, arg0):
    """ attribute(self, QNetworkRequest.Attribute) -> Any """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def downloadProgress(self, int, int):
    """ downloadProgress(self, int, int) [signal] """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encrypted(self):
    """ encrypted(self) [signal] """
    pass

  def error(self):
    """ error(self) -> QNetworkReply.NetworkError
    error(self, QNetworkReply.NetworkError) [signal] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def finished(self):
    """ finished(self) [signal] """
    pass

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def hasRawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ hasRawHeader(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def header(self, arg0):
    """ header(self, QNetworkRequest.KnownHeaders) -> Any """
    return None

  def ignoreSslErrors(self):
    """ ignoreSslErrors(self)
    ignoreSslErrors(self, Iterable[QSslError]) """
    pass

  def ignoreSslErrorsImplementation(self, IterableQSslError=None):
    """ ignoreSslErrorsImplementation(self, Iterable[QSslError]) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isFinished(self):
    """ isFinished(self) -> bool """
    return None

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isRunning(self):
    """ isRunning(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def manager(self):
    """ manager(self) -> QNetworkAccessManager """
    return None

  def metaDataChanged(self):
    """ metaDataChanged(self) [signal] """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def operation(self):
    """ operation(self) -> QNetworkAccessManager.Operation """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def pos(self):
    """ pos(self) -> int """
    return 1

  def preSharedKeyAuthenticationRequired(self, QSslPreSharedKeyAuthenticator):
    """ preSharedKeyAuthenticationRequired(self, QSslPreSharedKeyAuthenticator) [signal] """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def rawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ rawHeader(self, Union[QByteArray, bytes, bytearray]) -> QByteArray """
    return None

  def rawHeaderList(self):
    """ rawHeaderList(self) -> List[QByteArray] """
    return None

  def rawHeaderPairs(self):
    """ rawHeaderPairs(self) -> List[Tuple[QByteArray, QByteArray]] """
    return None

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readBufferSize(self):
    """ readBufferSize(self) -> int """
    return 1

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData():
    pass

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def redirectAllowed(self):
    """ redirectAllowed(self) [signal] """
    pass

  def redirected(self, QUrl):
    """ redirected(self, QUrl) [signal] """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def request(self):
    """ request(self) -> QNetworkRequest """
    return None

  def reset(self):
    """ reset(self) -> bool """
    return None

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setAttribute(self, arg0, Any):
    """ setAttribute(self, QNetworkRequest.Attribute, Any) """
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setError(self, arg0, str):
    """ setError(self, QNetworkReply.NetworkError, str) """
    pass

  def setErrorString():
    pass

  def setFinished(self, bool):
    """ setFinished(self, bool) """
    pass

  def setHeader(self, arg0, Any):
    """ setHeader(self, QNetworkRequest.KnownHeaders, Any) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setOperation(self, arg0):
    """ setOperation(self, QNetworkAccessManager.Operation) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setRawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) """
    pass

  def setReadBufferSize(self, int):
    """ setReadBufferSize(self, int) """
    pass

  def setRequest(self, QNetworkRequest):
    """ setRequest(self, QNetworkRequest) """
    pass

  def setSslConfiguration(self, QSslConfiguration):
    """ setSslConfiguration(self, QSslConfiguration) """
    pass

  def setSslConfigurationImplementation(self, QSslConfiguration):
    """ setSslConfigurationImplementation(self, QSslConfiguration) """
    pass

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def setUrl(self, QUrl):
    """ setUrl(self, QUrl) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def sslConfiguration(self):
    """ sslConfiguration(self) -> QSslConfiguration """
    return None

  def sslConfigurationImplementation(self, QSslConfiguration):
    """ sslConfigurationImplementation(self, QSslConfiguration) """
    pass

  def sslErrors(self, IterableQSslError=None):
    """ sslErrors(self, Iterable[QSslError]) [signal] """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def uploadProgress(self, int, int):
    """ uploadProgress(self, int, int) [signal] """
    pass

  def url(self):
    """ url(self) -> QUrl """
    return None

  def waitForBytesWritten(self, int):
    """ waitForBytesWritten(self, int) -> bool """
    return None

  def waitForReadyRead(self, int):
    """ waitForReadyRead(self, int) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QNetworkRequest(simplewrapper):
  """ QNetworkRequest(url: QUrl = QUrl())
  QNetworkRequest(QNetworkRequest) """

  AlwaysCache = None
  AlwaysNetwork = None

  class Attribute(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AuthenticationReuseAttribute = None
  Automatic = None
  BackgroundRequestAttribute = None

  class CacheLoadControl(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  CacheLoadControlAttribute = None
  CacheSaveControlAttribute = None
  ConnectionEncryptedAttribute = None
  ContentDispositionHeader = None
  ContentLengthHeader = None
  ContentTypeHeader = None
  CookieHeader = None
  CookieLoadControlAttribute = None
  CookieSaveControlAttribute = None
  CustomVerbAttribute = None
  DoNotBufferUploadDataAttribute = None
  ETagHeader = None
  EmitAllUploadProgressSignalsAttribute = None
  FollowRedirectsAttribute = None
  HTTP2AllowedAttribute = None
  HTTP2WasUsedAttribute = None
  HighPriority = None
  Http2DirectAttribute = None
  HttpPipeliningAllowedAttribute = None
  HttpPipeliningWasUsedAttribute = None
  HttpReasonPhraseAttribute = None
  HttpStatusCodeAttribute = None
  IfMatchHeader = None
  IfModifiedSinceHeader = None
  IfNoneMatchHeader = None

  class KnownHeaders(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LastModifiedHeader = None

  class LoadControl(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  LocationHeader = None
  LowPriority = None
  Manual = None
  ManualRedirectPolicy = None
  NoLessSafeRedirectPolicy = None
  NormalPriority = None
  OriginalContentLengthAttribute = None
  PreferCache = None
  PreferNetwork = None

  class Priority(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class RedirectPolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  RedirectPolicyAttribute = None
  RedirectionTargetAttribute = None
  SameOriginRedirectPolicy = None
  ServerHeader = None
  SetCookieHeader = None
  SourceIsFromCacheAttribute = None
  SpdyAllowedAttribute = None
  SpdyWasUsedAttribute = None
  User = None
  UserAgentHeader = None
  UserMax = None
  UserVerifiedRedirectPolicy = None

  def attribute(self, arg0, arg1=None):
    """ attribute(self, QNetworkRequest.Attribute, defaultValue: Any = None) -> Any """
    return None

  def hasRawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ hasRawHeader(self, Union[QByteArray, bytes, bytearray]) -> bool """
    return None

  def header(self, arg0):
    """ header(self, QNetworkRequest.KnownHeaders) -> Any """
    return None

  def maximumRedirectsAllowed(self):
    """ maximumRedirectsAllowed(self) -> int """
    return 1

  def originatingObject(self):
    """ originatingObject(self) -> QObject """
    return None

  def peerVerifyName(self):
    """ peerVerifyName(self) -> str """
    return ""

  def priority(self):
    """ priority(self) -> QNetworkRequest.Priority """
    return None

  def rawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ rawHeader(self, Union[QByteArray, bytes, bytearray]) -> QByteArray """
    return None

  def rawHeaderList(self):
    """ rawHeaderList(self) -> List[QByteArray] """
    return None

  def setAttribute(self, arg0, Any):
    """ setAttribute(self, QNetworkRequest.Attribute, Any) """
    pass

  def setHeader(self, arg0, Any):
    """ setHeader(self, QNetworkRequest.KnownHeaders, Any) """
    pass

  def setMaximumRedirectsAllowed(self, int):
    """ setMaximumRedirectsAllowed(self, int) """
    pass

  def setOriginatingObject(self, QObject):
    """ setOriginatingObject(self, QObject) """
    pass

  def setPeerVerifyName(self, str):
    """ setPeerVerifyName(self, str) """
    pass

  def setPriority(self, arg0):
    """ setPriority(self, QNetworkRequest.Priority) """
    pass

  def setRawHeader(self, UnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) """
    pass

  def setSslConfiguration(self, QSslConfiguration):
    """ setSslConfiguration(self, QSslConfiguration) """
    pass

  def setUrl(self, QUrl):
    """ setUrl(self, QUrl) """
    pass

  def sslConfiguration(self):
    """ sslConfiguration(self) -> QSslConfiguration """
    return None

  def swap(self, QNetworkRequest):
    """ swap(self, QNetworkRequest) """
    pass

  def url(self):
    """ url(self) -> QUrl """
    return None

class QNetworkSession(QObject):
  """ QNetworkSession(QNetworkConfiguration, parent: QObject = None) """

  Closing = None
  Connected = None
  Connecting = None
  Disconnected = None
  Invalid = None
  InvalidConfigurationError = None
  NoBackgroundTrafficPolicy = None
  NoPolicy = None
  NotAvailable = None
  OperationNotSupportedError = None
  Roaming = None
  RoamingError = None
  SessionAbortedError = None

  class SessionError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class State(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  UnknownSessionError = None

  class UsagePolicies(simplewrapper):
    """ QNetworkSession.UsagePolicies()
    QNetworkSession.UsagePolicies(Union[QNetworkSession.UsagePolicies, QNetworkSession.UsagePolicy])
    QNetworkSession.UsagePolicies(QNetworkSession.UsagePolicies) """

    pass

  class UsagePolicy(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def accept(self):
    """ accept(self) """
    pass

  def activeTime(self):
    """ activeTime(self) -> int """
    return 1

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesReceived(self):
    """ bytesReceived(self) -> int """
    return 1

  def bytesWritten(self):
    """ bytesWritten(self) -> int """
    return 1

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def closed(self):
    """ closed(self) [signal] """
    pass

  def configuration(self):
    """ configuration(self) -> QNetworkConfiguration """
    return None

  def connectNotify(self, QMetaMethod):
    """ connectNotify(self, QMetaMethod) """
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify(self, QMetaMethod):
    """ disconnectNotify(self, QMetaMethod) """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QNetworkSession.SessionError
    error(self, QNetworkSession.SessionError) [signal] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def ignore(self):
    """ ignore(self) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def interface(self):
    """ interface(self) -> QNetworkInterface """
    return None

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def migrate(self):
    """ migrate(self) """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def newConfigurationActivated(self):
    """ newConfigurationActivated(self) [signal] """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self):
    """ open(self) """
    pass

  def opened(self):
    """ opened(self) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def preferredConfigurationChanged(self, QNetworkConfiguration, bool):
    """ preferredConfigurationChanged(self, QNetworkConfiguration, bool) [signal] """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def reject(self):
    """ reject(self) """
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def sessionProperty(self, str):
    """ sessionProperty(self, str) -> Any """
    return None

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setSessionProperty(self, str, Any):
    """ setSessionProperty(self, str, Any) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def state(self):
    """ state(self) -> QNetworkSession.State """
    return None

  def stateChanged(self, arg0):
    """ stateChanged(self, QNetworkSession.State) [signal] """
    pass

  staticMetaObject = None

  def stop(self):
    """ stop(self) """
    pass

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def usagePolicies(self):
    """ usagePolicies(self) -> QNetworkSession.UsagePolicies """
    return None

  def usagePoliciesChanged(self, UnionQNetworkSession.UsagePolicies=None, QNetworkSession.UsagePolicy=None):
    """ usagePoliciesChanged(self, Union[QNetworkSession.UsagePolicies, QNetworkSession.UsagePolicy]) [signal] """
    pass

  def waitForOpened(self, arg0=None):
    """ waitForOpened(self, msecs: int = 30000) -> bool """
    return None

class QOcspCertificateStatus(IntEnum):
  """ An enumeration. """

  Good = None
  Revoked = None
  Unknown = None

class QOcspResponse(simplewrapper):
  """ QOcspResponse()
  QOcspResponse(QOcspResponse) """

  def certificateStatus(self):
    """ certificateStatus(self) -> QOcspCertificateStatus """
    return None

  def responder(self):
    """ responder(self) -> QSslCertificate """
    return None

  def revocationReason(self):
    """ revocationReason(self) -> QOcspRevocationReason """
    return None

  def subject(self):
    """ subject(self) -> QSslCertificate """
    return None

  def swap(self, QOcspResponse):
    """ swap(self, QOcspResponse) """
    pass

class QOcspRevocationReason(IntEnum):
  """ An enumeration. """

  AffiliationChanged = None
  CACompromise = None
  CertificateHold = None
  CessationOfOperation = None
  KeyCompromise = None
  RemoveFromCRL = None
  Superseded = None
  Unspecified = None

class QPasswordDigestor(simplewrapper):

  def deriveKeyPbkdf1(arg0, UnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None, int=None, int=None):
    """ deriveKeyPbkdf1(QCryptographicHash.Algorithm, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray], int, int) -> QByteArray """
    return None

  def deriveKeyPbkdf2(arg0, UnionQByteArray=None, bytes=None, bytearray=None, UnionQByteArray=None, bytes=None, bytearray=None, int=None, int=None):
    """ deriveKeyPbkdf2(QCryptographicHash.Algorithm, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray], int, int) -> QByteArray """
    return None

class QSsl(simplewrapper):

  class AlternativeNameEntryType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  AnyProtocol = None
  Der = None
  Dh = None
  DnsEntry = None
  Dsa = None
  DtlsV1_0 = None
  DtlsV1_0OrLater = None
  DtlsV1_2 = None
  DtlsV1_2OrLater = None
  Ec = None
  EmailEntry = None

  class EncodingFormat(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  IpAddressEntry = None

  class KeyAlgorithm(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  class KeyType(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  Opaque = None
  Pem = None
  PrivateKey = None
  PublicKey = None
  Rsa = None
  SecureProtocols = None

  class SslOption(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SslOptionDisableCompression = None
  SslOptionDisableEmptyFragments = None
  SslOptionDisableLegacyRenegotiation = None
  SslOptionDisableServerCipherPreference = None
  SslOptionDisableServerNameIndication = None
  SslOptionDisableSessionPersistence = None
  SslOptionDisableSessionSharing = None
  SslOptionDisableSessionTickets = None

  class SslOptions(simplewrapper):
    """ QSsl.SslOptions()
    QSsl.SslOptions(Union[QSsl.SslOptions, QSsl.SslOption])
    QSsl.SslOptions(QSsl.SslOptions) """

    pass

  class SslProtocol(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SslV2 = None
  SslV3 = None
  TlsV1SslV3 = None
  TlsV1_0 = None
  TlsV1_0OrLater = None
  TlsV1_1 = None
  TlsV1_1OrLater = None
  TlsV1_2 = None
  TlsV1_2OrLater = None
  TlsV1_3 = None
  TlsV1_3OrLater = None
  UnknownProtocol = None

class QSslCertificate(simplewrapper):
  """ QSslCertificate(QIODevice, format: QSsl.EncodingFormat = QSsl.Pem)
  QSslCertificate(data: Union[QByteArray, bytes, bytearray] = QByteArray(), format: QSsl.EncodingFormat = QSsl.Pem)
  QSslCertificate(QSslCertificate) """

  CommonName = None
  CountryName = None
  DistinguishedNameQualifier = None
  EmailAddress = None
  LocalityName = None
  Organization = None
  OrganizationalUnitName = None
  SerialNumber = None
  StateOrProvinceName = None

  class SubjectInfo(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  def clear(self):
    """ clear(self) """
    pass

  def digest(self, arg0=None):
    """ digest(self, algorithm: QCryptographicHash.Algorithm = QCryptographicHash.Md5) -> QByteArray """
    return None

  def effectiveDate(self):
    """ effectiveDate(self) -> QDateTime """
    return None

  def expiryDate(self):
    """ expiryDate(self) -> QDateTime """
    return None

  def extensions(self):
    """ extensions(self) -> List[QSslCertificateExtension] """
    return None

  def fromData(UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ fromData(Union[QByteArray, bytes, bytearray], format: QSsl.EncodingFormat = QSsl.Pem) -> List[QSslCertificate] """
    return None

  def fromDevice(QIODevice, arg0=None):
    """ fromDevice(QIODevice, format: QSsl.EncodingFormat = QSsl.Pem) -> List[QSslCertificate] """
    return None

  def fromPath(str, arg0=None, arg1=None):
    """ fromPath(str, format: QSsl.EncodingFormat = QSsl.Pem, syntax: QRegExp.PatternSyntax = QRegExp.FixedString) -> List[QSslCertificate] """
    return None

  def handle(self):
    """ handle(self) -> sip.voidptr """
    return None

  def importPkcs12(QIODevice, QSslKey, QSslCertificate, arg0=None, arg1=None, bytes=None, arg2=None):
    """ importPkcs12(QIODevice, QSslKey, QSslCertificate, caCertificates: Iterable[QSslCertificate] = [], passPhrase: Union[QByteArray, bytes, bytearray] = QByteArray()) -> bool """
    return None

  def isBlacklisted(self):
    """ isBlacklisted(self) -> bool """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def isSelfSigned(self):
    """ isSelfSigned(self) -> bool """
    return None

  def issuerDisplayName(self):
    """ issuerDisplayName(self) -> str """
    return ""

  def issuerInfo(self, arg0):
    """ issuerInfo(self, QSslCertificate.SubjectInfo) -> List[str]
    issuerInfo(self, Union[QByteArray, bytes, bytearray]) -> List[str] """
    return ""

  def issuerInfoAttributes(self):
    """ issuerInfoAttributes(self) -> List[QByteArray] """
    return None

  def publicKey(self):
    """ publicKey(self) -> QSslKey """
    return None

  def serialNumber(self):
    """ serialNumber(self) -> QByteArray """
    return None

  def subjectAlternativeNames(self):
    """ subjectAlternativeNames(self) -> Dict[QSsl.AlternativeNameEntryType, List[str]] """
    return ""

  def subjectDisplayName(self):
    """ subjectDisplayName(self) -> str """
    return ""

  def subjectInfo(self, arg0):
    """ subjectInfo(self, QSslCertificate.SubjectInfo) -> List[str]
    subjectInfo(self, Union[QByteArray, bytes, bytearray]) -> List[str] """
    return ""

  def subjectInfoAttributes(self):
    """ subjectInfoAttributes(self) -> List[QByteArray] """
    return None

  def swap(self, QSslCertificate):
    """ swap(self, QSslCertificate) """
    pass

  def toDer(self):
    """ toDer(self) -> QByteArray """
    return None

  def toPem(self):
    """ toPem(self) -> QByteArray """
    return None

  def toText(self):
    """ toText(self) -> str """
    return ""

  def verify(IterableQSslCertificate=None, arg0=None):
    """ verify(Iterable[QSslCertificate], hostName: str = '') -> List[QSslError] """
    return None

  def version(self):
    """ version(self) -> QByteArray """
    return None

class QSslCertificateExtension(simplewrapper):
  """ QSslCertificateExtension()
  QSslCertificateExtension(QSslCertificateExtension) """

  def isCritical(self):
    """ isCritical(self) -> bool """
    return None

  def isSupported(self):
    """ isSupported(self) -> bool """
    return None

  def name(self):
    """ name(self) -> str """
    return ""

  def oid(self):
    """ oid(self) -> str """
    return ""

  def swap(self, QSslCertificateExtension):
    """ swap(self, QSslCertificateExtension) """
    pass

  def value(self):
    """ value(self) -> Any """
    return None

class QSslCipher(simplewrapper):
  """ QSslCipher()
  QSslCipher(str)
  QSslCipher(str, QSsl.SslProtocol)
  QSslCipher(QSslCipher) """

  def authenticationMethod(self):
    """ authenticationMethod(self) -> str """
    return ""

  def encryptionMethod(self):
    """ encryptionMethod(self) -> str """
    return ""

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def keyExchangeMethod(self):
    """ keyExchangeMethod(self) -> str """
    return ""

  def name(self):
    """ name(self) -> str """
    return ""

  def protocol(self):
    """ protocol(self) -> QSsl.SslProtocol """
    return None

  def protocolString(self):
    """ protocolString(self) -> str """
    return ""

  def supportedBits(self):
    """ supportedBits(self) -> int """
    return 1

  def swap(self, QSslCipher):
    """ swap(self, QSslCipher) """
    pass

  def usedBits(self):
    """ usedBits(self) -> int """
    return 1

class QSslConfiguration(simplewrapper):
  """ QSslConfiguration()
  QSslConfiguration(QSslConfiguration) """

  NextProtocolHttp1_1 = None
  NextProtocolNegotiationNegotiated = None
  NextProtocolNegotiationNone = None

  class NextProtocolNegotiationStatus(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  NextProtocolNegotiationUnsupported = None
  NextProtocolSpdy3_0 = None

  def allowedNextProtocols(self):
    """ allowedNextProtocols(self) -> List[QByteArray] """
    return None

  def backendConfiguration(self):
    """ backendConfiguration(self) -> Dict[QByteArray, Any] """
    return None

  def caCertificates(self):
    """ caCertificates(self) -> List[QSslCertificate] """
    return None

  def ciphers(self):
    """ ciphers(self) -> List[QSslCipher] """
    return None

  def defaultConfiguration():
    """ defaultConfiguration() -> QSslConfiguration """
    return None

  def diffieHellmanParameters(self):
    """ diffieHellmanParameters(self) -> QSslDiffieHellmanParameters """
    return None

  def ellipticCurves(self):
    """ ellipticCurves(self) -> List[QSslEllipticCurve] """
    return None

  def ephemeralServerKey(self):
    """ ephemeralServerKey(self) -> QSslKey """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def localCertificate(self):
    """ localCertificate(self) -> QSslCertificate """
    return None

  def localCertificateChain(self):
    """ localCertificateChain(self) -> List[QSslCertificate] """
    return None

  def nextNegotiatedProtocol(self):
    """ nextNegotiatedProtocol(self) -> QByteArray """
    return None

  def nextProtocolNegotiationStatus(self):
    """ nextProtocolNegotiationStatus(self) -> QSslConfiguration.NextProtocolNegotiationStatus """
    return None

  def ocspStaplingEnabled(self):
    """ ocspStaplingEnabled(self) -> bool """
    return None

  def peerCertificate(self):
    """ peerCertificate(self) -> QSslCertificate """
    return None

  def peerCertificateChain(self):
    """ peerCertificateChain(self) -> List[QSslCertificate] """
    return None

  def peerVerifyDepth(self):
    """ peerVerifyDepth(self) -> int """
    return 1

  def peerVerifyMode(self):
    """ peerVerifyMode(self) -> QSslSocket.PeerVerifyMode """
    return None

  def preSharedKeyIdentityHint(self):
    """ preSharedKeyIdentityHint(self) -> QByteArray """
    return None

  def privateKey(self):
    """ privateKey(self) -> QSslKey """
    return None

  def protocol(self):
    """ protocol(self) -> QSsl.SslProtocol """
    return None

  def sessionCipher(self):
    """ sessionCipher(self) -> QSslCipher """
    return None

  def sessionProtocol(self):
    """ sessionProtocol(self) -> QSsl.SslProtocol """
    return None

  def sessionTicket(self):
    """ sessionTicket(self) -> QByteArray """
    return None

  def sessionTicketLifeTimeHint(self):
    """ sessionTicketLifeTimeHint(self) -> int """
    return 1

  def setAllowedNextProtocols(self, IterableUnionQByteArray=None, bytes=None, bytearray=None):
    """ setAllowedNextProtocols(self, Iterable[Union[QByteArray, bytes, bytearray]]) """
    pass

  def setBackendConfiguration():
    """ setBackendConfiguration(self, backendConfiguration: Dict[Union[QByteArray, bytes, bytearray], Any] = {}) """
    pass

  def setBackendConfigurationOption(self, UnionQByteArray=None, bytes=None, bytearray=None, Any=None):
    """ setBackendConfigurationOption(self, Union[QByteArray, bytes, bytearray], Any) """
    pass

  def setCaCertificates(self, IterableQSslCertificate=None):
    """ setCaCertificates(self, Iterable[QSslCertificate]) """
    pass

  def setCiphers(self, IterableQSslCipher=None):
    """ setCiphers(self, Iterable[QSslCipher]) """
    pass

  def setDefaultConfiguration(QSslConfiguration):
    """ setDefaultConfiguration(QSslConfiguration) """
    pass

  def setDiffieHellmanParameters(self, QSslDiffieHellmanParameters):
    """ setDiffieHellmanParameters(self, QSslDiffieHellmanParameters) """
    pass

  def setEllipticCurves(self, IterableQSslEllipticCurve=None):
    """ setEllipticCurves(self, Iterable[QSslEllipticCurve]) """
    pass

  def setLocalCertificate(self, QSslCertificate):
    """ setLocalCertificate(self, QSslCertificate) """
    pass

  def setLocalCertificateChain(self, IterableQSslCertificate=None):
    """ setLocalCertificateChain(self, Iterable[QSslCertificate]) """
    pass

  def setOcspStaplingEnabled(self, bool):
    """ setOcspStaplingEnabled(self, bool) """
    pass

  def setPeerVerifyDepth(self, int):
    """ setPeerVerifyDepth(self, int) """
    pass

  def setPeerVerifyMode(self, arg0):
    """ setPeerVerifyMode(self, QSslSocket.PeerVerifyMode) """
    pass

  def setPreSharedKeyIdentityHint(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setPreSharedKeyIdentityHint(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setPrivateKey(self, QSslKey):
    """ setPrivateKey(self, QSslKey) """
    pass

  def setProtocol(self, arg0):
    """ setProtocol(self, QSsl.SslProtocol) """
    pass

  def setSessionTicket(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setSessionTicket(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setSslOption(self, arg0, bool):
    """ setSslOption(self, QSsl.SslOption, bool) """
    pass

  def supportedCiphers():
    """ supportedCiphers() -> List[QSslCipher] """
    return None

  def supportedEllipticCurves():
    """ supportedEllipticCurves() -> List[QSslEllipticCurve] """
    return None

  def swap(self, QSslConfiguration):
    """ swap(self, QSslConfiguration) """
    pass

  def systemCaCertificates():
    """ systemCaCertificates() -> List[QSslCertificate] """
    return None

  def testSslOption(self, arg0):
    """ testSslOption(self, QSsl.SslOption) -> bool """
    return None

class QSslDiffieHellmanParameters(simplewrapper):
  """ QSslDiffieHellmanParameters()
  QSslDiffieHellmanParameters(QSslDiffieHellmanParameters) """

  class Error(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  InvalidInputDataError = None
  NoError = None
  UnsafeParametersError = None

  def defaultParameters():
    """ defaultParameters() -> QSslDiffieHellmanParameters """
    return None

  def error(self):
    """ error(self) -> QSslDiffieHellmanParameters.Error """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def fromEncoded(UnionQByteArray=None, bytes=None, bytearray=None, arg0=None):
    """ fromEncoded(Union[QByteArray, bytes, bytearray], encoding: QSsl.EncodingFormat = QSsl.EncodingFormat.Pem) -> QSslDiffieHellmanParameters
    fromEncoded(QIODevice, encoding: QSsl.EncodingFormat = QSsl.EncodingFormat.Pem) -> QSslDiffieHellmanParameters """
    return None

  def isEmpty(self):
    """ isEmpty(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def swap(self, QSslDiffieHellmanParameters):
    """ swap(self, QSslDiffieHellmanParameters) """
    pass

class QSslEllipticCurve(simplewrapper):
  """ QSslEllipticCurve()
  QSslEllipticCurve(QSslEllipticCurve) """

  def fromLongName(str):
    """ fromLongName(str) -> QSslEllipticCurve """
    return None

  def fromShortName(str):
    """ fromShortName(str) -> QSslEllipticCurve """
    return None

  def isTlsNamedCurve(self):
    """ isTlsNamedCurve(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def longName(self):
    """ longName(self) -> str """
    return ""

  def shortName(self):
    """ shortName(self) -> str """
    return ""

class QSslError(simplewrapper):
  """ QSslError()
  QSslError(QSslError.SslError)
  QSslError(QSslError.SslError, QSslCertificate)
  QSslError(QSslError) """

  AuthorityIssuerSerialNumberMismatch = None
  CertificateBlacklisted = None
  CertificateExpired = None
  CertificateNotYetValid = None
  CertificateRejected = None
  CertificateRevoked = None
  CertificateSignatureFailed = None
  CertificateStatusUnknown = None
  CertificateUntrusted = None
  HostNameMismatch = None
  InvalidCaCertificate = None
  InvalidNotAfterField = None
  InvalidNotBeforeField = None
  InvalidPurpose = None
  NoError = None
  NoPeerCertificate = None
  NoSslSupport = None
  OcspInternalError = None
  OcspMalformedRequest = None
  OcspMalformedResponse = None
  OcspNoResponseFound = None
  OcspResponseCannotBeTrusted = None
  OcspResponseCertIdUnknown = None
  OcspResponseExpired = None
  OcspSigRequred = None
  OcspStatusUnknown = None
  OcspTryLater = None
  OcspUnauthorized = None
  PathLengthExceeded = None
  SelfSignedCertificate = None
  SelfSignedCertificateInChain = None

  class SslError(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SubjectIssuerMismatch = None
  UnableToDecodeIssuerPublicKey = None
  UnableToDecryptCertificateSignature = None
  UnableToGetIssuerCertificate = None
  UnableToGetLocalIssuerCertificate = None
  UnableToVerifyFirstCertificate = None
  UnspecifiedError = None

  def certificate(self):
    """ certificate(self) -> QSslCertificate """
    return None

  def error(self):
    """ error(self) -> QSslError.SslError """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def swap(self, QSslError):
    """ swap(self, QSslError) """
    pass

class QSslKey(simplewrapper):
  """ QSslKey()
  QSslKey(Union[QByteArray, bytes, bytearray], QSsl.KeyAlgorithm, encoding: QSsl.EncodingFormat = QSsl.Pem, type: QSsl.KeyType = QSsl.PrivateKey, passPhrase: Union[QByteArray, bytes, bytearray] = QByteArray())
  QSslKey(QIODevice, QSsl.KeyAlgorithm, encoding: QSsl.EncodingFormat = QSsl.Pem, type: QSsl.KeyType = QSsl.PrivateKey, passPhrase: Union[QByteArray, bytes, bytearray] = QByteArray())
  QSslKey(sip.voidptr, type: QSsl.KeyType = QSsl.PrivateKey)
  QSslKey(QSslKey) """

  def algorithm(self):
    """ algorithm(self) -> QSsl.KeyAlgorithm """
    return None

  def clear(self):
    """ clear(self) """
    pass

  def handle(self):
    """ handle(self) -> sip.voidptr """
    return None

  def isNull(self):
    """ isNull(self) -> bool """
    return None

  def length(self):
    """ length(self) -> int """
    return 1

  def swap(self, QSslKey):
    """ swap(self, QSslKey) """
    pass

  def toDer(self, arg0=None, bytes=None, arg1=None):
    """ toDer(self, passPhrase: Union[QByteArray, bytes, bytearray] = QByteArray()) -> QByteArray """
    return None

  def toPem(self, arg0=None, bytes=None, arg1=None):
    """ toPem(self, passPhrase: Union[QByteArray, bytes, bytearray] = QByteArray()) -> QByteArray """
    return None

  def type(self):
    """ type(self) -> QSsl.KeyType """
    return None

class QSslPreSharedKeyAuthenticator(simplewrapper):
  """ QSslPreSharedKeyAuthenticator()
  QSslPreSharedKeyAuthenticator(QSslPreSharedKeyAuthenticator) """

  def identity(self):
    """ identity(self) -> QByteArray """
    return None

  def identityHint(self):
    """ identityHint(self) -> QByteArray """
    return None

  def maximumIdentityLength(self):
    """ maximumIdentityLength(self) -> int """
    return 1

  def maximumPreSharedKeyLength(self):
    """ maximumPreSharedKeyLength(self) -> int """
    return 1

  def preSharedKey(self):
    """ preSharedKey(self) -> QByteArray """
    return None

  def setIdentity(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setIdentity(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def setPreSharedKey(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ setPreSharedKey(self, Union[QByteArray, bytes, bytearray]) """
    pass

  def swap(self, QSslPreSharedKeyAuthenticator):
    """ swap(self, QSslPreSharedKeyAuthenticator) """
    pass

class QSslSocket(QTcpSocket):
  """ QSslSocket(parent: QObject = None) """

  AddressInUseError = None
  AnyIPProtocol = None
  Append = None
  AutoVerifyPeer = None
  BoundState = None
  ClosingState = None
  ConnectedState = None
  ConnectingState = None
  ConnectionRefusedError = None
  DatagramTooLargeError = None
  DefaultForPlatform = None
  DontShareAddress = None
  ExistingOnly = None
  HostLookupState = None
  HostNotFoundError = None
  IPv4Protocol = None
  IPv6Protocol = None
  KeepAliveOption = None
  ListeningState = None
  LowDelayOption = None
  MulticastLoopbackOption = None
  MulticastTtlOption = None
  NetworkError = None
  NewOnly = None
  NotOpen = None
  OperationError = None
  PathMtuSocketOption = None
  PauseNever = None
  PauseOnSslErrors = None

  class PeerVerifyMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  ProxyAuthenticationRequiredError = None
  ProxyConnectionClosedError = None
  ProxyConnectionRefusedError = None
  ProxyConnectionTimeoutError = None
  ProxyNotFoundError = None
  ProxyProtocolError = None
  QueryPeer = None
  ReadOnly = None
  ReadWrite = None
  ReceiveBufferSizeSocketOption = None
  RemoteHostClosedError = None
  ReuseAddressHint = None
  SctpSocket = None
  SendBufferSizeSocketOption = None
  ShareAddress = None
  SocketAccessError = None
  SocketAddressNotAvailableError = None
  SocketResourceError = None
  SocketTimeoutError = None
  SslClientMode = None
  SslHandshakeFailedError = None
  SslInternalError = None
  SslInvalidUserDataError = None

  class SslMode(int):

    bit_length = None
    conjugate = None
    denominator = None
    from_bytes = None
    imag = None
    numerator = None
    real = None
    to_bytes = None

  SslServerMode = None
  TcpSocket = None
  TemporaryError = None
  Text = None
  Truncate = None
  TypeOfServiceOption = None
  UdpSocket = None
  Unbuffered = None
  UnconnectedState = None
  UnencryptedMode = None
  UnfinishedSocketOperationError = None
  UnknownNetworkLayerProtocol = None
  UnknownSocketError = None
  UnknownSocketType = None
  UnsupportedSocketOperationError = None
  VerifyNone = None
  VerifyPeer = None
  WriteOnly = None

  def abort(self):
    """ abort(self) """
    pass

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def addCaCertificate(self, QSslCertificate):
    """ addCaCertificate(self, QSslCertificate) """
    pass

  def addCaCertificates(self, str, arg0=None, arg1=None):
    """ addCaCertificates(self, str, format: QSsl.EncodingFormat = QSsl.Pem, syntax: QRegExp.PatternSyntax = QRegExp.FixedString) -> bool
    addCaCertificates(self, Iterable[QSslCertificate]) """
    return None

  def addDefaultCaCertificate(QSslCertificate):
    """ addDefaultCaCertificate(QSslCertificate) """
    pass

  def addDefaultCaCertificates(str, arg0=None, arg1=None):
    """ addDefaultCaCertificates(str, format: QSsl.EncodingFormat = QSsl.Pem, syntax: QRegExp.PatternSyntax = QRegExp.FixedString) -> bool
    addDefaultCaCertificates(Iterable[QSslCertificate]) """
    return None

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def bind(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, arg0=None, arg1=None, arg2=None):
    """ bind(self, Union[QHostAddress, QHostAddress.SpecialAddress], port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool
    bind(self, port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def caCertificates(self):
    """ caCertificates(self) -> List[QSslCertificate] """
    return None

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def ciphers(self):
    """ ciphers(self) -> List[QSslCipher] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def connectToHost():
    """ connectToHost(self, str, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite, protocol: QAbstractSocket.NetworkLayerProtocol = QAbstractSocket.AnyIPProtocol) """
    pass

  def connectToHostEncrypted():
    """ connectToHostEncrypted(self, str, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite, protocol: QAbstractSocket.NetworkLayerProtocol = QAbstractSocket.AnyIPProtocol)
    connectToHostEncrypted(self, str, int, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite, protocol: QAbstractSocket.NetworkLayerProtocol = QAbstractSocket.AnyIPProtocol) """
    pass

  def connected(self):
    """ connected(self) [signal] """
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def defaultCaCertificates():
    """ defaultCaCertificates() -> List[QSslCertificate] """
    return None

  def defaultCiphers():
    """ defaultCiphers() -> List[QSslCipher] """
    return None

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectFromHost(self):
    """ disconnectFromHost(self) """
    pass

  def disconnectNotify():
    pass

  def disconnected(self):
    """ disconnected(self) [signal] """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def encrypted(self):
    """ encrypted(self) [signal] """
    pass

  def encryptedBytesAvailable(self):
    """ encryptedBytesAvailable(self) -> int """
    return 1

  def encryptedBytesToWrite(self):
    """ encryptedBytesToWrite(self) -> int """
    return 1

  def encryptedBytesWritten(self, int):
    """ encryptedBytesWritten(self, int) [signal] """
    pass

  def error(self):
    """ error(self) -> QAbstractSocket.SocketError
    error(self, QAbstractSocket.SocketError) [signal] """
    return ""

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def hostFound(self):
    """ hostFound(self) [signal] """
    pass

  def ignoreSslErrors(self):
    """ ignoreSslErrors(self)
    ignoreSslErrors(self, Iterable[QSslError]) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isEncrypted(self):
    """ isEncrypted(self) -> bool """
    return None

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def localAddress(self):
    """ localAddress(self) -> QHostAddress """
    return None

  def localCertificate(self):
    """ localCertificate(self) -> QSslCertificate """
    return None

  def localCertificateChain(self):
    """ localCertificateChain(self) -> List[QSslCertificate] """
    return None

  def localPort(self):
    """ localPort(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def mode(self):
    """ mode(self) -> QSslSocket.SslMode """
    return None

  def modeChanged(self, arg0):
    """ modeChanged(self, QSslSocket.SslMode) [signal] """
    pass

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def ocspResponses(self):
    """ ocspResponses(self) -> List[QOcspResponse] """
    return None

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pauseMode(self):
    """ pauseMode(self) -> QAbstractSocket.PauseModes """
    return ""

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def peerAddress(self):
    """ peerAddress(self) -> QHostAddress """
    return None

  def peerCertificate(self):
    """ peerCertificate(self) -> QSslCertificate """
    return None

  def peerCertificateChain(self):
    """ peerCertificateChain(self) -> List[QSslCertificate] """
    return None

  def peerName(self):
    """ peerName(self) -> str """
    return ""

  def peerPort(self):
    """ peerPort(self) -> int """
    return 1

  def peerVerifyDepth(self):
    """ peerVerifyDepth(self) -> int """
    return 1

  def peerVerifyError(self, QSslError):
    """ peerVerifyError(self, QSslError) [signal] """
    pass

  def peerVerifyMode(self):
    """ peerVerifyMode(self) -> QSslSocket.PeerVerifyMode """
    return None

  def peerVerifyName(self):
    """ peerVerifyName(self) -> str """
    return ""

  def pos(self):
    """ pos(self) -> int """
    return 1

  def preSharedKeyAuthenticationRequired(self, QSslPreSharedKeyAuthenticator):
    """ preSharedKeyAuthenticationRequired(self, QSslPreSharedKeyAuthenticator) [signal] """
    pass

  def privateKey(self):
    """ privateKey(self) -> QSslKey """
    return None

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def protocol(self):
    """ protocol(self) -> QSsl.SslProtocol """
    return None

  def protocolTag(self):
    """ protocolTag(self) -> str """
    return ""

  def proxy(self):
    """ proxy(self) -> QNetworkProxy """
    return None

  def proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator):
    """ proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator) [signal] """
    pass

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readBufferSize(self):
    """ readBufferSize(self) -> int """
    return 1

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData(self, int):
    """ readData(self, int) -> bytes """
    return None

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resume(self):
    """ resume(self) """
    pass

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def sessionCipher(self):
    """ sessionCipher(self) -> QSslCipher """
    return None

  def sessionProtocol(self):
    """ sessionProtocol(self) -> QSsl.SslProtocol """
    return None

  def setCaCertificates(self, IterableQSslCertificate=None):
    """ setCaCertificates(self, Iterable[QSslCertificate]) """
    pass

  def setCiphers(self, IterableQSslCipher=None):
    """ setCiphers(self, Iterable[QSslCipher])
    setCiphers(self, str) """
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setDefaultCaCertificates(IterableQSslCertificate=None):
    """ setDefaultCaCertificates(Iterable[QSslCertificate]) """
    pass

  def setDefaultCiphers(IterableQSslCipher=None):
    """ setDefaultCiphers(Iterable[QSslCipher]) """
    pass

  def setErrorString():
    pass

  def setLocalAddress():
    pass

  def setLocalCertificate(self, QSslCertificate):
    """ setLocalCertificate(self, QSslCertificate)
    setLocalCertificate(self, str, format: QSsl.EncodingFormat = QSsl.Pem) """
    pass

  def setLocalCertificateChain(self, IterableQSslCertificate=None):
    """ setLocalCertificateChain(self, Iterable[QSslCertificate]) """
    pass

  def setLocalPort():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPauseMode(self, UnionQAbstractSocket.PauseModes=None, QAbstractSocket.PauseMode=None):
    """ setPauseMode(self, Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode]) """
    pass

  def setPeerAddress():
    pass

  def setPeerName():
    pass

  def setPeerPort():
    pass

  def setPeerVerifyDepth(self, int):
    """ setPeerVerifyDepth(self, int) """
    pass

  def setPeerVerifyMode(self, arg0):
    """ setPeerVerifyMode(self, QSslSocket.PeerVerifyMode) """
    pass

  def setPeerVerifyName(self, str):
    """ setPeerVerifyName(self, str) """
    pass

  def setPrivateKey(self, QSslKey):
    """ setPrivateKey(self, QSslKey)
    setPrivateKey(self, str, algorithm: QSsl.KeyAlgorithm = QSsl.Rsa, format: QSsl.EncodingFormat = QSsl.Pem, passPhrase: Union[QByteArray, bytes, bytearray] = QByteArray()) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setProtocol(self, arg0):
    """ setProtocol(self, QSsl.SslProtocol) """
    pass

  def setProtocolTag(self, str):
    """ setProtocolTag(self, str) """
    pass

  def setProxy(self, QNetworkProxy):
    """ setProxy(self, QNetworkProxy) """
    pass

  def setReadBufferSize(self, int):
    """ setReadBufferSize(self, int) """
    pass

  def setSocketDescriptor(self, arg0, arg1=None, arg2=None, arg3=None):
    """ setSocketDescriptor(self, sip.voidptr, state: QAbstractSocket.SocketState = QAbstractSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool """
    return None

  def setSocketError():
    pass

  def setSocketOption(self, arg0, Any):
    """ setSocketOption(self, QAbstractSocket.SocketOption, Any) """
    pass

  def setSocketState():
    pass

  def setSslConfiguration(self, QSslConfiguration):
    """ setSslConfiguration(self, QSslConfiguration) """
    pass

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def socketDescriptor(self):
    """ socketDescriptor(self) -> sip.voidptr """
    return None

  def socketOption(self, arg0):
    """ socketOption(self, QAbstractSocket.SocketOption) -> Any """
    return None

  def socketType(self):
    """ socketType(self) -> QAbstractSocket.SocketType """
    return ""

  def sslConfiguration(self):
    """ sslConfiguration(self) -> QSslConfiguration """
    return None

  def sslErrors(self):
    """ sslErrors(self) -> List[QSslError]
    sslErrors(self, Iterable[QSslError]) [signal] """
    return None

  def sslLibraryBuildVersionNumber():
    """ sslLibraryBuildVersionNumber() -> int """
    return 1

  def sslLibraryBuildVersionString():
    """ sslLibraryBuildVersionString() -> str """
    return ""

  def sslLibraryVersionNumber():
    """ sslLibraryVersionNumber() -> int """
    return 1

  def sslLibraryVersionString():
    """ sslLibraryVersionString() -> str """
    return ""

  def startClientEncryption(self):
    """ startClientEncryption(self) """
    pass

  def startServerEncryption(self):
    """ startServerEncryption(self) """
    pass

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  def state(self):
    """ state(self) -> QAbstractSocket.SocketState """
    return ""

  def stateChanged(self, arg0):
    """ stateChanged(self, QAbstractSocket.SocketState) [signal] """
    pass

  staticMetaObject = None

  def supportedCiphers():
    """ supportedCiphers() -> List[QSslCipher] """
    return None

  def supportsSsl():
    """ supportsSsl() -> bool """
    return None

  def systemCaCertificates():
    """ systemCaCertificates() -> List[QSslCertificate] """
    return None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, arg0=None):
    """ waitForBytesWritten(self, msecs: int = 30000) -> bool """
    return None

  def waitForConnected(self, arg0=None):
    """ waitForConnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForDisconnected(self, arg0=None):
    """ waitForDisconnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForEncrypted(self, arg0=None):
    """ waitForEncrypted(self, msecs: int = 30000) -> bool """
    return None

  def waitForReadyRead(self, arg0=None):
    """ waitForReadyRead(self, msecs: int = 30000) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData(self, bytes):
    """ writeData(self, bytes) -> int """
    return 1

class QTcpServer(QObject):
  """ QTcpServer(parent: QObject = None) """

  def acceptError(self, arg0):
    """ acceptError(self, QAbstractSocket.SocketError) [signal] """
    pass

  def addPendingConnection(self, QTcpSocket):
    """ addPendingConnection(self, QTcpSocket) """
    pass

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def connectNotify():
    pass

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectNotify():
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def hasPendingConnections(self):
    """ hasPendingConnections(self) -> bool """
    return None

  def incomingConnection(self, arg0):
    """ incomingConnection(self, sip.voidptr) """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isListening(self):
    """ isListening(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def listen(self, arg0=None, arg1=None, arg2=None):
    """ listen(self, address: Union[QHostAddress, QHostAddress.SpecialAddress] = QHostAddress.Any, port: int = 0) -> bool """
    return None

  def maxPendingConnections(self):
    """ maxPendingConnections(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def newConnection(self):
    """ newConnection(self) [signal] """
    pass

  def nextPendingConnection(self):
    """ nextPendingConnection(self) -> QTcpSocket """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pauseAccepting(self):
    """ pauseAccepting(self) """
    pass

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def proxy(self):
    """ proxy(self) -> QNetworkProxy """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def resumeAccepting(self):
    """ resumeAccepting(self) """
    pass

  def sender():
    pass

  def senderSignalIndex():
    pass

  def serverAddress(self):
    """ serverAddress(self) -> QHostAddress """
    return None

  def serverError(self):
    """ serverError(self) -> QAbstractSocket.SocketError """
    return ""

  def serverPort(self):
    """ serverPort(self) -> int """
    return 1

  def setMaxPendingConnections(self, int):
    """ setMaxPendingConnections(self, int) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setProxy(self, QNetworkProxy):
    """ setProxy(self, QNetworkProxy) """
    pass

  def setSocketDescriptor(self, arg0):
    """ setSocketDescriptor(self, sip.voidptr) -> bool """
    return None

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def socketDescriptor(self):
    """ socketDescriptor(self) -> sip.voidptr """
    return None

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def waitForNewConnection(self, arg0=None):
    """ waitForNewConnection(self, msecs: int = 0) -> Tuple[bool, bool] """
    return None

class QTcpSocket(QAbstractSocket):
  """ QTcpSocket(parent: QObject = None) """

  AddressInUseError = None
  AnyIPProtocol = None
  Append = None
  BoundState = None
  ClosingState = None
  ConnectedState = None
  ConnectingState = None
  ConnectionRefusedError = None
  DatagramTooLargeError = None
  DefaultForPlatform = None
  DontShareAddress = None
  ExistingOnly = None
  HostLookupState = None
  HostNotFoundError = None
  IPv4Protocol = None
  IPv6Protocol = None
  KeepAliveOption = None
  ListeningState = None
  LowDelayOption = None
  MulticastLoopbackOption = None
  MulticastTtlOption = None
  NetworkError = None
  NewOnly = None
  NotOpen = None
  OperationError = None
  PathMtuSocketOption = None
  PauseNever = None
  PauseOnSslErrors = None
  ProxyAuthenticationRequiredError = None
  ProxyConnectionClosedError = None
  ProxyConnectionRefusedError = None
  ProxyConnectionTimeoutError = None
  ProxyNotFoundError = None
  ProxyProtocolError = None
  ReadOnly = None
  ReadWrite = None
  ReceiveBufferSizeSocketOption = None
  RemoteHostClosedError = None
  ReuseAddressHint = None
  SctpSocket = None
  SendBufferSizeSocketOption = None
  ShareAddress = None
  SocketAccessError = None
  SocketAddressNotAvailableError = None
  SocketResourceError = None
  SocketTimeoutError = None
  SslHandshakeFailedError = None
  SslInternalError = None
  SslInvalidUserDataError = None
  TcpSocket = None
  TemporaryError = None
  Text = None
  Truncate = None
  TypeOfServiceOption = None
  UdpSocket = None
  Unbuffered = None
  UnconnectedState = None
  UnfinishedSocketOperationError = None
  UnknownNetworkLayerProtocol = None
  UnknownSocketError = None
  UnknownSocketType = None
  UnsupportedSocketOperationError = None
  WriteOnly = None

  def abort(self):
    """ abort(self) """
    pass

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def bind(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, arg0=None, arg1=None, arg2=None):
    """ bind(self, Union[QHostAddress, QHostAddress.SpecialAddress], port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool
    bind(self, port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def connectToHost():
    """ connectToHost(self, str, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite, protocol: QAbstractSocket.NetworkLayerProtocol = QAbstractSocket.AnyIPProtocol)
    connectToHost(self, Union[QHostAddress, QHostAddress.SpecialAddress], int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) """
    pass

  def connected(self):
    """ connected(self) [signal] """
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectFromHost(self):
    """ disconnectFromHost(self) """
    pass

  def disconnectNotify():
    pass

  def disconnected(self):
    """ disconnected(self) [signal] """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QAbstractSocket.SocketError
    error(self, QAbstractSocket.SocketError) [signal] """
    return ""

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def hostFound(self):
    """ hostFound(self) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def localAddress(self):
    """ localAddress(self) -> QHostAddress """
    return None

  def localPort(self):
    """ localPort(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pauseMode(self):
    """ pauseMode(self) -> QAbstractSocket.PauseModes """
    return ""

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def peerAddress(self):
    """ peerAddress(self) -> QHostAddress """
    return None

  def peerName(self):
    """ peerName(self) -> str """
    return ""

  def peerPort(self):
    """ peerPort(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def protocolTag(self):
    """ protocolTag(self) -> str """
    return ""

  def proxy(self):
    """ proxy(self) -> QNetworkProxy """
    return None

  def proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator):
    """ proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator) [signal] """
    pass

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readBufferSize(self):
    """ readBufferSize(self) -> int """
    return 1

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData():
    pass

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resume(self):
    """ resume(self) """
    pass

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString():
    pass

  def setLocalAddress():
    pass

  def setLocalPort():
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPauseMode(self, UnionQAbstractSocket.PauseModes=None, QAbstractSocket.PauseMode=None):
    """ setPauseMode(self, Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode]) """
    pass

  def setPeerAddress():
    pass

  def setPeerName():
    pass

  def setPeerPort():
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setProtocolTag(self, str):
    """ setProtocolTag(self, str) """
    pass

  def setProxy(self, QNetworkProxy):
    """ setProxy(self, QNetworkProxy) """
    pass

  def setReadBufferSize(self, int):
    """ setReadBufferSize(self, int) """
    pass

  def setSocketDescriptor(self, arg0, arg1=None, arg2=None, arg3=None):
    """ setSocketDescriptor(self, sip.voidptr, state: QAbstractSocket.SocketState = QAbstractSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool """
    return None

  def setSocketError():
    pass

  def setSocketOption(self, arg0, Any):
    """ setSocketOption(self, QAbstractSocket.SocketOption, Any) """
    pass

  def setSocketState():
    pass

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def socketDescriptor(self):
    """ socketDescriptor(self) -> sip.voidptr """
    return None

  def socketOption(self, arg0):
    """ socketOption(self, QAbstractSocket.SocketOption) -> Any """
    return None

  def socketType(self):
    """ socketType(self) -> QAbstractSocket.SocketType """
    return ""

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  def state(self):
    """ state(self) -> QAbstractSocket.SocketState """
    return ""

  def stateChanged(self, arg0):
    """ stateChanged(self, QAbstractSocket.SocketState) [signal] """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, arg0=None):
    """ waitForBytesWritten(self, msecs: int = 30000) -> bool """
    return None

  def waitForConnected(self, arg0=None):
    """ waitForConnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForDisconnected(self, arg0=None):
    """ waitForDisconnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForReadyRead(self, arg0=None):
    """ waitForReadyRead(self, msecs: int = 30000) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData():
    pass

class QUdpSocket(QAbstractSocket):
  """ QUdpSocket(parent: QObject = None) """

  AddressInUseError = None
  AnyIPProtocol = None
  Append = None
  BoundState = None
  ClosingState = None
  ConnectedState = None
  ConnectingState = None
  ConnectionRefusedError = None
  DatagramTooLargeError = None
  DefaultForPlatform = None
  DontShareAddress = None
  ExistingOnly = None
  HostLookupState = None
  HostNotFoundError = None
  IPv4Protocol = None
  IPv6Protocol = None
  KeepAliveOption = None
  ListeningState = None
  LowDelayOption = None
  MulticastLoopbackOption = None
  MulticastTtlOption = None
  NetworkError = None
  NewOnly = None
  NotOpen = None
  OperationError = None
  PathMtuSocketOption = None
  PauseNever = None
  PauseOnSslErrors = None
  ProxyAuthenticationRequiredError = None
  ProxyConnectionClosedError = None
  ProxyConnectionRefusedError = None
  ProxyConnectionTimeoutError = None
  ProxyNotFoundError = None
  ProxyProtocolError = None
  ReadOnly = None
  ReadWrite = None
  ReceiveBufferSizeSocketOption = None
  RemoteHostClosedError = None
  ReuseAddressHint = None
  SctpSocket = None
  SendBufferSizeSocketOption = None
  ShareAddress = None
  SocketAccessError = None
  SocketAddressNotAvailableError = None
  SocketResourceError = None
  SocketTimeoutError = None
  SslHandshakeFailedError = None
  SslInternalError = None
  SslInvalidUserDataError = None
  TcpSocket = None
  TemporaryError = None
  Text = None
  Truncate = None
  TypeOfServiceOption = None
  UdpSocket = None
  Unbuffered = None
  UnconnectedState = None
  UnfinishedSocketOperationError = None
  UnknownNetworkLayerProtocol = None
  UnknownSocketError = None
  UnknownSocketType = None
  UnsupportedSocketOperationError = None
  WriteOnly = None

  def abort(self):
    """ abort(self) """
    pass

  def aboutToClose(self):
    """ aboutToClose(self) [signal] """
    pass

  def atEnd(self):
    """ atEnd(self) -> bool """
    return None

  def bind(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, arg0=None, arg1=None, arg2=None):
    """ bind(self, Union[QHostAddress, QHostAddress.SpecialAddress], port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool
    bind(self, port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool """
    return None

  def blockSignals(self, bool):
    """ blockSignals(self, bool) -> bool """
    return None

  def bytesAvailable(self):
    """ bytesAvailable(self) -> int """
    return 1

  def bytesToWrite(self):
    """ bytesToWrite(self) -> int """
    return 1

  def bytesWritten(self, int):
    """ bytesWritten(self, int) [signal] """
    pass

  def canReadLine(self):
    """ canReadLine(self) -> bool """
    return None

  def channelBytesWritten(self, int, int):
    """ channelBytesWritten(self, int, int) [signal] """
    pass

  def channelReadyRead(self, int):
    """ channelReadyRead(self, int) [signal] """
    pass

  def childEvent():
    pass

  def children(self):
    """ children(self) -> List[QObject] """
    return None

  def close(self):
    """ close(self) """
    pass

  def commitTransaction(self):
    """ commitTransaction(self) """
    pass

  def connectNotify():
    pass

  def connectToHost():
    """ connectToHost(self, str, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite, protocol: QAbstractSocket.NetworkLayerProtocol = QAbstractSocket.AnyIPProtocol)
    connectToHost(self, Union[QHostAddress, QHostAddress.SpecialAddress], int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) """
    pass

  def connected(self):
    """ connected(self) [signal] """
    pass

  def currentReadChannel(self):
    """ currentReadChannel(self) -> int """
    return 1

  def currentWriteChannel(self):
    """ currentWriteChannel(self) -> int """
    return 1

  def customEvent():
    pass

  def deleteLater(self):
    """ deleteLater(self) """
    pass

  def destroyed():
    """ destroyed(self, object: QObject = None) [signal] """
    pass

  def disconnect(arg0):
    """ disconnect(QMetaObject.Connection) -> bool
    disconnect(self) """
    return None

  def disconnectFromHost(self):
    """ disconnectFromHost(self) """
    pass

  def disconnectNotify():
    pass

  def disconnected(self):
    """ disconnected(self) [signal] """
    pass

  def dumpObjectInfo(self):
    """ dumpObjectInfo(self) """
    pass

  def dumpObjectTree(self):
    """ dumpObjectTree(self) """
    pass

  def dynamicPropertyNames(self):
    """ dynamicPropertyNames(self) -> List[QByteArray] """
    return None

  def error(self):
    """ error(self) -> QAbstractSocket.SocketError
    error(self, QAbstractSocket.SocketError) [signal] """
    return ""

  def errorString(self):
    """ errorString(self) -> str """
    return ""

  def event(self, QEvent):
    """ event(self, QEvent) -> bool """
    return None

  def eventFilter(self, QObject, QEvent):
    """ eventFilter(self, QObject, QEvent) -> bool """
    return None

  def findChild(self, type, arg0=None, arg1=None, arg2=None):
    """ findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject
    findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject """
    return None

  def findChildren(self, type, arg0=None, arg1=None, arg2=None):
    """ findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]
    findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject] """
    return None

  def flush(self):
    """ flush(self) -> bool """
    return None

  def getChar(self):
    """ getChar(self) -> Tuple[bool, str] """
    return ""

  def hasPendingDatagrams(self):
    """ hasPendingDatagrams(self) -> bool """
    return None

  def hostFound(self):
    """ hostFound(self) [signal] """
    pass

  def inherits(self, str):
    """ inherits(self, str) -> bool """
    return None

  def installEventFilter(self, QObject):
    """ installEventFilter(self, QObject) """
    pass

  def isOpen(self):
    """ isOpen(self) -> bool """
    return None

  def isReadable(self):
    """ isReadable(self) -> bool """
    return None

  def isSequential(self):
    """ isSequential(self) -> bool """
    return None

  def isSignalConnected():
    pass

  def isTextModeEnabled(self):
    """ isTextModeEnabled(self) -> bool """
    return None

  def isTransactionStarted(self):
    """ isTransactionStarted(self) -> bool """
    return None

  def isValid(self):
    """ isValid(self) -> bool """
    return None

  def isWidgetType(self):
    """ isWidgetType(self) -> bool """
    return None

  def isWindowType(self):
    """ isWindowType(self) -> bool """
    return None

  def isWritable(self):
    """ isWritable(self) -> bool """
    return None

  def joinMulticastGroup(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ joinMulticastGroup(self, Union[QHostAddress, QHostAddress.SpecialAddress]) -> bool
    joinMulticastGroup(self, Union[QHostAddress, QHostAddress.SpecialAddress], QNetworkInterface) -> bool """
    return None

  def killTimer(self, int):
    """ killTimer(self, int) """
    pass

  def leaveMulticastGroup(self, UnionQHostAddress=None, QHostAddress.SpecialAddress=None):
    """ leaveMulticastGroup(self, Union[QHostAddress, QHostAddress.SpecialAddress]) -> bool
    leaveMulticastGroup(self, Union[QHostAddress, QHostAddress.SpecialAddress], QNetworkInterface) -> bool """
    return None

  def localAddress(self):
    """ localAddress(self) -> QHostAddress """
    return None

  def localPort(self):
    """ localPort(self) -> int """
    return 1

  def metaObject(self):
    """ metaObject(self) -> QMetaObject """
    return None

  def moveToThread(self, QThread):
    """ moveToThread(self, QThread) """
    pass

  def multicastInterface(self):
    """ multicastInterface(self) -> QNetworkInterface """
    return None

  def objectName(self):
    """ objectName(self) -> str """
    return ""

  def objectNameChanged(self, str):
    """ objectNameChanged(self, str) [signal] """
    pass

  def open(self, UnionQIODevice.OpenMode=None, QIODevice.OpenModeFlag=None):
    """ open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool """
    return None

  def openMode(self):
    """ openMode(self) -> QIODevice.OpenMode """
    return None

  def parent(self):
    """ parent(self) -> QObject """
    return None

  def pauseMode(self):
    """ pauseMode(self) -> QAbstractSocket.PauseModes """
    return ""

  def peek(self, int):
    """ peek(self, int) -> QByteArray """
    return None

  def peerAddress(self):
    """ peerAddress(self) -> QHostAddress """
    return None

  def peerName(self):
    """ peerName(self) -> str """
    return ""

  def peerPort(self):
    """ peerPort(self) -> int """
    return 1

  def pendingDatagramSize(self):
    """ pendingDatagramSize(self) -> int """
    return 1

  def pos(self):
    """ pos(self) -> int """
    return 1

  def property(self, str):
    """ property(self, str) -> Any """
    return None

  def protocolTag(self):
    """ protocolTag(self) -> str """
    return ""

  def proxy(self):
    """ proxy(self) -> QNetworkProxy """
    return None

  def proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator):
    """ proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator) [signal] """
    pass

  def putChar(self, str):
    """ putChar(self, str) -> bool """
    return None

  def pyqtConfigure(*args):
    """ QObject.pyqtConfigure(...)
    
    Each keyword argument is either the name of a Qt property or a Qt signal.
    For properties the property is set to the given value which should be of an
    appropriate type.
    For signals the signal is connected to the given value which should be a
    callable. """
    pass

  def read(self, int):
    """ read(self, int) -> bytes """
    return None

  def readAll(self):
    """ readAll(self) -> QByteArray """
    return None

  def readBufferSize(self):
    """ readBufferSize(self) -> int """
    return 1

  def readChannelCount(self):
    """ readChannelCount(self) -> int """
    return 1

  def readChannelFinished(self):
    """ readChannelFinished(self) [signal] """
    pass

  def readData():
    pass

  def readDatagram(self, int):
    """ readDatagram(self, int) -> Tuple[bytes, QHostAddress, int] """
    return 1

  def readLine(self, arg0=None):
    """ readLine(self, maxlen: int = 0) -> bytes """
    return None

  def readLineData():
    pass

  def readyRead(self):
    """ readyRead(self) [signal] """
    pass

  def receiveDatagram(self, arg0=None):
    """ receiveDatagram(self, maxSize: int = -1) -> QNetworkDatagram """
    return None

  def receivers():
    pass

  def removeEventFilter(self, QObject):
    """ removeEventFilter(self, QObject) """
    pass

  def reset(self):
    """ reset(self) -> bool """
    return None

  def resume(self):
    """ resume(self) """
    pass

  def rollbackTransaction(self):
    """ rollbackTransaction(self) """
    pass

  def seek(self, int):
    """ seek(self, int) -> bool """
    return None

  def sender():
    pass

  def senderSignalIndex():
    pass

  def setCurrentReadChannel(self, int):
    """ setCurrentReadChannel(self, int) """
    pass

  def setCurrentWriteChannel(self, int):
    """ setCurrentWriteChannel(self, int) """
    pass

  def setErrorString():
    pass

  def setLocalAddress():
    pass

  def setLocalPort():
    pass

  def setMulticastInterface(self, QNetworkInterface):
    """ setMulticastInterface(self, QNetworkInterface) """
    pass

  def setObjectName(self, str):
    """ setObjectName(self, str) """
    pass

  def setOpenMode():
    pass

  def setParent(self, QObject):
    """ setParent(self, QObject) """
    pass

  def setPauseMode(self, UnionQAbstractSocket.PauseModes=None, QAbstractSocket.PauseMode=None):
    """ setPauseMode(self, Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode]) """
    pass

  def setPeerAddress():
    pass

  def setPeerName():
    pass

  def setPeerPort():
    pass

  def setProperty(self, str, Any):
    """ setProperty(self, str, Any) -> bool """
    return None

  def setProtocolTag(self, str):
    """ setProtocolTag(self, str) """
    pass

  def setProxy(self, QNetworkProxy):
    """ setProxy(self, QNetworkProxy) """
    pass

  def setReadBufferSize(self, int):
    """ setReadBufferSize(self, int) """
    pass

  def setSocketDescriptor(self, arg0, arg1=None, arg2=None, arg3=None):
    """ setSocketDescriptor(self, sip.voidptr, state: QAbstractSocket.SocketState = QAbstractSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool """
    return None

  def setSocketError():
    pass

  def setSocketOption(self, arg0, Any):
    """ setSocketOption(self, QAbstractSocket.SocketOption, Any) """
    pass

  def setSocketState():
    pass

  def setTextModeEnabled(self, bool):
    """ setTextModeEnabled(self, bool) """
    pass

  def signalsBlocked(self):
    """ signalsBlocked(self) -> bool """
    return None

  def size(self):
    """ size(self) -> int """
    return 1

  def skip(self, int):
    """ skip(self, int) -> int """
    return 1

  def socketDescriptor(self):
    """ socketDescriptor(self) -> sip.voidptr """
    return None

  def socketOption(self, arg0):
    """ socketOption(self, QAbstractSocket.SocketOption) -> Any """
    return None

  def socketType(self):
    """ socketType(self) -> QAbstractSocket.SocketType """
    return ""

  def startTimer(self, int, arg0=None):
    """ startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int """
    return 1

  def startTransaction(self):
    """ startTransaction(self) """
    pass

  def state(self):
    """ state(self) -> QAbstractSocket.SocketState """
    return ""

  def stateChanged(self, arg0):
    """ stateChanged(self, QAbstractSocket.SocketState) [signal] """
    pass

  staticMetaObject = None

  def thread(self):
    """ thread(self) -> QThread """
    return None

  def timerEvent():
    pass

  def tr(self, str, arg0=None, arg1=None):
    """ tr(self, str, disambiguation: str = None, n: int = -1) -> str """
    return ""

  def ungetChar(self, str):
    """ ungetChar(self, str) """
    pass

  def waitForBytesWritten(self, arg0=None):
    """ waitForBytesWritten(self, msecs: int = 30000) -> bool """
    return None

  def waitForConnected(self, arg0=None):
    """ waitForConnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForDisconnected(self, arg0=None):
    """ waitForDisconnected(self, msecs: int = 30000) -> bool """
    return None

  def waitForReadyRead(self, arg0=None):
    """ waitForReadyRead(self, msecs: int = 30000) -> bool """
    return None

  def write(self, UnionQByteArray=None, bytes=None, bytearray=None):
    """ write(self, Union[QByteArray, bytes, bytearray]) -> int """
    return 1

  def writeChannelCount(self):
    """ writeChannelCount(self) -> int """
    return 1

  def writeData():
    pass

  def writeDatagram(self, bytes, UnionQHostAddress=None, QHostAddress.SpecialAddress=None, int=None):
    """ writeDatagram(self, bytes, Union[QHostAddress, QHostAddress.SpecialAddress], int) -> int
    writeDatagram(self, Union[QByteArray, bytes, bytearray], Union[QHostAddress, QHostAddress.SpecialAddress], int) -> int
    writeDatagram(self, QNetworkDatagram) -> int """
    return 1

__doc__ = None
__file__ = 'C:\\Users\\Rupka\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\PyQt5\\QtNetwork.pyd'
__loader__ = None
__name__ = 'PyQt5.QtNetwork'
__package__ = 'PyQt5'
__spec__ = None

